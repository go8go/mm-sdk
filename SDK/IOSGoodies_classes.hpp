#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IOSGoodies

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "IOSGoodies_structs.hpp"


namespace SDK
{

// Class IOSGoodies.IGApps
// 0x0000 (0x0028 - 0x0028)
class UIGApps final : public UBlueprintFunctionLibrary
{
public:
	static void OpenAppOnAppStore(const class FString& AppId);
	static void OpenAppSettings();
	static void OpenDialer(const class FString& Number);
	static void OpenYoutubeVideo(const class FString& ID);
	static void RequestRating();
	static void StartFaceTimeAudioCall(const class FString& ID);
	static void StartFaceTimeVideoCall(const class FString& ID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGApps">();
	}
	static class UIGApps* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGApps>();
	}
};
static_assert(alignof(UIGApps) == 0x000008, "Wrong alignment on UIGApps");
static_assert(sizeof(UIGApps) == 0x000028, "Wrong size on UIGApps");

// Class IOSGoodies.IGDateTimePickerBPL
// 0x0000 (0x0028 - 0x0028)
class UIGDateTimePickerBPL final : public UBlueprintFunctionLibrary
{
public:
	static void ShowCoundownTimer(int32 Hour, int32 Minute, const TDelegate<void(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute)>& OnTimerSetCallback, const TDelegate<void()>& OnCancelCallback);
	static void ShowDatePicker(const struct FDateTime& InitialDate, const TDelegate<void(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute)>& OnDateSetCallback, const TDelegate<void()>& OnCancelCallback);
	static void ShowDatePickerWithLimits(const struct FDateTime& InitialDate, const struct FDateTime& FromDate, const struct FDateTime& ToDate, const TDelegate<void(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute)>& OnDateSetCallback, const TDelegate<void()>& OnCancelCallback);
	static void ShowDateTimePicker(const struct FDateTime& InitialDate, int32 Hour, int32 Minute, const TDelegate<void(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute)>& OnDateTimeSetCallback, const TDelegate<void()>& OnCancelCallback);
	static void ShowDateTimePickerWithLimits(const struct FDateTime& InitialDate, const struct FDateTime& FromDate, const struct FDateTime& ToDate, int32 Hour, int32 Minute, int32 FromHour, int32 FromMinute, int32 ToHour, int32 ToMinute, const TDelegate<void(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute)>& OnDateTimeSetCallback, const TDelegate<void()>& OnCancelCallback);
	static void ShowTimePicker(int32 Hour, int32 Minute, const TDelegate<void(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute)>& OnTimeSetCallback, const TDelegate<void()>& OnCancelCallback);
	static void ShowTimePickerWithLimits(int32 Hour, int32 Minute, int32 FromHour, int32 FromMinute, int32 ToHour, int32 ToMinute, const TDelegate<void(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute)>& OnTimeSetCallback, const TDelegate<void()>& OnCancelCallback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGDateTimePickerBPL">();
	}
	static class UIGDateTimePickerBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGDateTimePickerBPL>();
	}
};
static_assert(alignof(UIGDateTimePickerBPL) == 0x000008, "Wrong alignment on UIGDateTimePickerBPL");
static_assert(sizeof(UIGDateTimePickerBPL) == 0x000028, "Wrong size on UIGDateTimePickerBPL");

// Class IOSGoodies.IGDeviceInfo
// 0x0000 (0x0028 - 0x0028)
class UIGDeviceInfo final : public UBlueprintFunctionLibrary
{
public:
	static float GetBatteryLevel();
	static EBatteryState GetBatteryState();
	static class FString GetLocalizedModel();
	static class FString GetModel();
	static class FString GetName();
	static class FString GetSystemName();
	static class FString GetSystemVersion();
	static EUserInterfaceIdiom GetUserInterfaceIdiom();
	static class FString GetUUID();
	static bool IsBatteryMonitoringEnabled();
	static bool IsMultitaskingSupported();
	static bool IsProximityMonitoringEnabled();
	static bool ProximityState();
	static void SetBatteryMonitoringEnabled(bool Enabled);
	static void SetProximityMonitoringEnabled(bool Enabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGDeviceInfo">();
	}
	static class UIGDeviceInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGDeviceInfo>();
	}
};
static_assert(alignof(UIGDeviceInfo) == 0x000008, "Wrong alignment on UIGDeviceInfo");
static_assert(sizeof(UIGDeviceInfo) == 0x000028, "Wrong size on UIGDeviceInfo");

// Class IOSGoodies.IGDialogBPL
// 0x0000 (0x0028 - 0x0028)
class UIGDialogBPL final : public UBlueprintFunctionLibrary
{
public:
	static void DismissLoadingDialog();
	static void ShowActionSheetComplexDialog(const class FString& Title, const class FString& CancelButtonText, const class FString& DestructiveButtonText, const TArray<class FString>& ActionButtonsTexts, int32 PosX, int32 PosY, const TDelegate<void()>& OnCancelButtonClickedCallback, const TDelegate<void()>& OnDestructiveButtonClickedCallback, const TDelegate<void(int32 Index)>& ActionButtonCallback);
	static void ShowActionSheetSimpleDialog(const class FString& Title, const class FString& CancelButtonText, const TArray<class FString>& ActionButtonsTexts, int32 PosX, int32 PosY, const TDelegate<void()>& OnCancelButtonClickedCallback, const TDelegate<void(int32 Index)>& ActionButtonCallback);
	static void ShowInputFieldDialog(const class FString& Title, const class FString& Text, const class FString& InputPlaceholderText, const class FString& buttonOkTitle, const class FString& buttonCancelTitle, const TDelegate<void(const class FString& Result)>& OnConfirmInputButtonClickedCallback, const TDelegate<void()>& OnCancelButtonClickedCallback);
	static void ShowLoadingDialog();
	static void ShowSingleButtonDialog(const class FString& Title, const class FString& Message, const class FString& ConfirmButtonText, const TDelegate<void()>& OnConfirmButtonClickedCallback);
	static void ShowThreeButtonsDialog(const class FString& Title, const class FString& Message, const class FString& FirstOptionButtonText, const class FString& SecondOptionButtonText, const class FString& CancelButtonText, const TDelegate<void()>& OnFirstOptionButtonClickedCallback, const TDelegate<void()>& OnSecondOptionButtonClickedCallback, const TDelegate<void()>& OnCancelButtonClickedCallback);
	static void ShowTwoButtonsDialog(const class FString& Title, const class FString& Message, const class FString& ConfirmButtonText, const class FString& CancelButtonText, const TDelegate<void()>& OnConfirmButtonClickedCallback, const TDelegate<void()>& OnCancelButtonClickedCallback);
	static void ToggleStatusBar(bool StatusBarHidden, EStatusBarStyle StatusBarStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGDialogBPL">();
	}
	static class UIGDialogBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGDialogBPL>();
	}
};
static_assert(alignof(UIGDialogBPL) == 0x000008, "Wrong alignment on UIGDialogBPL");
static_assert(sizeof(UIGDialogBPL) == 0x000028, "Wrong size on UIGDialogBPL");

// Class IOSGoodies.IGEvents
// 0x0000 (0x0028 - 0x0028)
class UIGEvents final : public UBlueprintFunctionLibrary
{
public:
	static bool CompleteReminder(const class FString& ReminderId, bool Complete);
	static void CreateCalendarEvent(const class FString& Title, const class FString& Notes, const struct FDateTime& StartDate, const struct FDateTime& EndDate, const TDelegate<void(const class FString& EventId)>& OnSuccessCallback, const TDelegate<void(const class FString& Error)>& OnErrorCallback);
	static void CreateReminder(const class FString& Title, const struct FDateTime& StartDate, const struct FDateTime& DueDate, const TDelegate<void(const class FString& EventId)>& OnSuccessCallback, const TDelegate<void(const class FString& Error)>& OnErrorCallback);
	static void CreateRepeatingEvent(const class FString& Title, const class FString& Notes, const struct FDateTime& StartDate, const struct FDateTime& EndDate, const struct FDateTime& RepeatUntilDate, ERecurrencyRuleType RuleType, int32 Interval, const TDelegate<void(const class FString& EventId)>& OnSuccessCallback, const TDelegate<void(const class FString& Error)>& OnErrorCallback);
	static bool DeleteReminder(const class FString& ReminderId);
	static void OpenCalendar();
	static void OpenCalendarAtDate(const struct FDateTime& Date);
	static void RemoveCalendarEvent(const class FString& EventId, const TDelegate<void()>& OnRemovedCallback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGEvents">();
	}
	static class UIGEvents* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGEvents>();
	}
};
static_assert(alignof(UIGEvents) == 0x000008, "Wrong alignment on UIGEvents");
static_assert(sizeof(UIGEvents) == 0x000028, "Wrong size on UIGEvents");

// Class IOSGoodies.IGFilePickerBPL
// 0x0000 (0x0028 - 0x0028)
class UIGFilePickerBPL final : public UBlueprintFunctionLibrary
{
public:
	static void ExportFilesToService(const TArray<class FString>& FilePaths, const TDelegate<void(TArray<class FString>& Paths)>& OnSuccess, const TDelegate<void()>& OnCancel);
	static void ImportFiles(const TArray<class FString>& FileTypes, bool AllowMultiple, const TDelegate<void(TArray<class FString>& Paths)>& OnSuccess, const TDelegate<void()>& OnCancel);
	static void MoveFilesToService(const TArray<class FString>& FilePaths, const TDelegate<void(TArray<class FString>& Paths)>& OnSuccess, const TDelegate<void()>& OnCancel);
	static void OpenFiles(const TArray<class FString>& FileTypes, bool AllowMultiple, const TDelegate<void(TArray<class FString>& Paths)>& OnSuccess, const TDelegate<void()>& OnCancel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGFilePickerBPL">();
	}
	static class UIGFilePickerBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGFilePickerBPL>();
	}
};
static_assert(alignof(UIGFilePickerBPL) == 0x000008, "Wrong alignment on UIGFilePickerBPL");
static_assert(sizeof(UIGFilePickerBPL) == 0x000028, "Wrong size on UIGFilePickerBPL");

// Class IOSGoodies.IGFlashlight
// 0x0000 (0x0028 - 0x0028)
class UIGFlashlight final : public UBlueprintFunctionLibrary
{
public:
	static bool DeviceHasFlashlight();
	static void EnableFlashlight(bool Enable);
	static void SetFlashlightLevel(float Level);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGFlashlight">();
	}
	static class UIGFlashlight* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGFlashlight>();
	}
};
static_assert(alignof(UIGFlashlight) == 0x000008, "Wrong alignment on UIGFlashlight");
static_assert(sizeof(UIGFlashlight) == 0x000028, "Wrong size on UIGFlashlight");

// Class IOSGoodies.IGHaptics
// 0x0000 (0x0028 - 0x0028)
class UIGHaptics final : public UBlueprintFunctionLibrary
{
public:
	static bool IsHapticFeedbackSupported();
	static void SendImpactHapticFeedback(EImpactStrength Strength);
	static void SendNotificationHapticFeedback(ENotificationType Type);
	static void SendSelectionHapticFeedback();
	static void Vibrate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGHaptics">();
	}
	static class UIGHaptics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGHaptics>();
	}
};
static_assert(alignof(UIGHaptics) == 0x000008, "Wrong alignment on UIGHaptics");
static_assert(sizeof(UIGHaptics) == 0x000028, "Wrong size on UIGHaptics");

// Class IOSGoodies.IGImagePicker
// 0x0000 (0x0028 - 0x0028)
class UIGImagePicker final : public UBlueprintFunctionLibrary
{
public:
	static void DeleteImageFromGallery(EGallerySourceType SourceType, int32 PosX, int32 PosY, const TDelegate<void()>& OnSuccessCallback, const TDelegate<void()>& OnCancelCallback);
	static void PickImageFromGallery(EGallerySourceType SourceType, bool AllowEditing, int32 PosX, int32 PosY, const TDelegate<void(class UTexture2D* Texture)>& OnPickImageFromGalleryCallback, const TDelegate<void()>& OnCancelCallback, int32 MaxSize);
	static void PickMediaFromGallery(EGallerySourceType SourceType, bool AllowEditing, int32 PosX, int32 PosY, const TDelegate<void(const struct FIGPickedMedia& Media)>& OnPickMediaFromGalleryCallback, const TDelegate<void()>& OnCancelCallback, const TArray<class FString>& MediaTypes, int32 MaxSize);
	static void PickPhotoFromCamera(bool AllowEditing, bool UseRearCamera, ECameraFlashMode FlashMode, const TDelegate<void(class UTexture2D* Texture)>& OnPickPhotoFromCameraCallback, const TDelegate<void()>& OnCancelCallback, int32 MaxSize);
	static void SaveImageToGallery(class UTexture2D* Texture, const TDelegate<void()>& OnImageSavedCallback, const TDelegate<void()>& OnSaveErrorCallback);
	static void TakeScreenShot(const TDelegate<void(class UTexture2D* Texture)>& OnScreenShotTakenCallback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGImagePicker">();
	}
	static class UIGImagePicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGImagePicker>();
	}
};
static_assert(alignof(UIGImagePicker) == 0x000008, "Wrong alignment on UIGImagePicker");
static_assert(sizeof(UIGImagePicker) == 0x000028, "Wrong size on UIGImagePicker");

// Class IOSGoodies.IGMapsBPL
// 0x0000 (0x0028 - 0x0028)
class UIGMapsBPL final : public UBlueprintFunctionLibrary
{
public:
	static void GetDirections(const class FString& DestinationAddress, const class FString& SourceAddress, ETransportType TransportType, EMapViewType ViewType);
	static void OpenMapAddress(const class FString& Address, const class FString& Label, EMapViewType ViewType);
	static void OpenMapLocation(float Latitude, float Longitude, const class FString& Label, EMapViewType ViewType);
	static void PerformSearch(const class FString& Query, EMapViewType ViewType);
	static void PerformSearchNearLocation(const class FString& Query, float Latitude, float Longitude, int32 Zoom, EMapViewType ViewType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGMapsBPL">();
	}
	static class UIGMapsBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGMapsBPL>();
	}
};
static_assert(alignof(UIGMapsBPL) == 0x000008, "Wrong alignment on UIGMapsBPL");
static_assert(sizeof(UIGMapsBPL) == 0x000028, "Wrong size on UIGMapsBPL");

// Class IOSGoodies.IGShare
// 0x0000 (0x0028 - 0x0028)
class UIGShare final : public UBlueprintFunctionLibrary
{
public:
	static bool CanSendEmail();
	static bool CanSendSMS();
	static void SendEMail(const class FString& Subject, const class FString& Body, class UTexture2D* Texture, const TArray<class FString>& Recipients, const TArray<class FString>& Cc, const TArray<class FString>& bcc, const TDelegate<void()>& OnSuccessCallback, const TDelegate<void()>& OnErrorCallback, const TDelegate<void()>& OnCancelDelegate, const TDelegate<void()>& OnSavedDraftCallback);
	static void SendEmailViaDefaultApp(const class FString& Subject, const class FString& Body, const TArray<class FString>& Recipients, const TArray<class FString>& Cc, const TArray<class FString>& bcc);
	static void SendSms(const class FString& PhoneNumber, const class FString& MsgText, const TDelegate<void()>& OnSuccessCallback, const TDelegate<void()>& OnErrorCallback, const TDelegate<void()>& OnCancelCallback);
	static void SendSMSViaDefaultApp(const class FString& PhoneNumber, const class FString& MsgText);
	static void ShareImage(class UTexture2D* Texture, int32 PosX, int32 PosY, const TDelegate<void()>& OnSuccessCallback, const TDelegate<void()>& OnErrorCallback);
	static void ShareLink(const class FString& Link, int32 PosX, int32 PosY, const TDelegate<void()>& OnSuccessCallback, const TDelegate<void()>& OnErrorCallback);
	static void ShareText(const class FString& Message, int32 PosX, int32 PosY, const TDelegate<void()>& OnSuccessCallback, const TDelegate<void()>& OnErrorCallback);
	static void ShareTextWithImage(const class FString& Message, class UTexture2D* Texture, int32 PosX, int32 PosY, const TDelegate<void()>& OnSuccessCallback, const TDelegate<void()>& OnErrorCallback);
	static void ShareTextWithImageAndLink(const class FString& Message, class UTexture2D* Texture, const class FString& Link, int32 PosX, int32 PosY, const TDelegate<void()>& OnSuccessCallback, const TDelegate<void()>& OnErrorCallback);
	static void ShareTextWithLink(const class FString& Message, const class FString& Link, int32 PosX, int32 PosY, const TDelegate<void()>& OnSuccessCallback, const TDelegate<void()>& OnErrorCallback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IGShare">();
	}
	static class UIGShare* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIGShare>();
	}
};
static_assert(alignof(UIGShare) == 0x000008, "Wrong alignment on UIGShare");
static_assert(sizeof(UIGShare) == 0x000028, "Wrong size on UIGShare");

}

