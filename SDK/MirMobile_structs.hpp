#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MirMobile

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum MirMobile.EFSM_TYPE
// NumValues: 0x0022
enum class EFSM_TYPE : uint8
{
	EFSM_NONE                                = 0,
	EFSM_INIT                                = 1,
	EFSM_IDLE                                = 2,
	EFSM_WALK                                = 3,
	EFSM_MOVE                                = 4,
	EFSM_ATTACK                              = 5,
	EFSM_DIE                                 = 6,
	EFSM_TRACE                               = 7,
	EFSM_RUNAWAY                             = 8,
	EFSM_ROLL                                = 9,
	EFSM_RIDE                                = 10,
	EFSM_NORMAL_ATTACK                       = 11,
	EFSM_SKILL                               = 12,
	EFSM_AIRWALK                             = 13,
	EFSM_GATHER                              = 14,
	EFSM_HIT                                 = 15,
	EFSM_STUN                                = 16,
	EFSM_TAUNT                               = 17,
	EFSM_LAPIDFICATION                       = 18,
	EFSM_PUSHPULL                            = 19,
	EFSM_CLIFFMOVE                           = 20,
	EFSM_TURN                                = 21,
	EFSM_SLEEP                               = 22,
	EFSM_AWAKE                               = 23,
	EFSM_WARP                                = 24,
	EFSM_EMOTION                             = 25,
	EFSM_COMEBACK                            = 26,
	EFSM_AUTOAIRWALK                         = 27,
	EFSM_CCSLEEP                             = 28,
	EFSM_AUTOMOVE                            = 29,
	EFSM_CHANGEPOS                           = 30,
	EFSM_EMOTE                               = 31,
	EFSM_FEAR                                = 32,
	EFSM_MAX                                 = 33,
};

// Enum MirMobile.EPKModeType
// NumValues: 0x0010
enum class EPKModeType : uint8
{
	BP_DefaultNone                           = 0,
	Peace                                    = 1,
	GoodEvil                                 = 2,
	Enemy                                    = 3,
	ALLKill                                  = 4,
	Duel                                     = 5,
	Siege                                    = 6,
	War                                      = 7,
	Peace_ServerVisit                        = 8,
	GoodEvil_ServerVisit                     = 9,
	Enemy_ServerVisit                        = 10,
	ALLKill_ServerVisit                      = 11,
	GuildWarSabuk_R3                         = 12,
	Assissin_ServerVisit                     = 13,
	GuildTournament                          = 16,
	EPKModeType_MAX                          = 17,
};

// Enum MirMobile.ERegionCode
// NumValues: 0x0008
enum class ERegionCode : uint8
{
	ASIA                                     = 1,
	EU                                       = 2,
	NA                                       = 3,
	ASIA2                                    = 4,
	NA2                                      = 5,
	SA                                       = 6,
	ASIA3                                    = 7,
	ERegionCode_MAX                          = 8,
};

// Enum MirMobile.ELanguage
// NumValues: 0x000D
enum class ELanguage : uint8
{
	KOR                                      = 1,
	CHT                                      = 2,
	CHS                                      = 3,
	JPN                                      = 4,
	ENG                                      = 5,
	THA                                      = 6,
	IND                                      = 7,
	VIE                                      = 8,
	GER                                      = 9,
	SPA                                      = 10,
	POR                                      = 11,
	RUS                                      = 12,
	MAX                                      = 13,
};

// Enum MirMobile.ETriggerType
// NumValues: 0x0021
enum class ETriggerType : uint8
{
	NONE                                     = 0,
	BEGINPLAY                                = 1,
	ENDPLAY                                  = 2,
	MOVE                                     = 3,
	MONSTER_GROUP                            = 4,
	MONSTER_KILL_CHECK                       = 5,
	WALL                                     = 6,
	FIXEDCAMERA                              = 7,
	GUARD_NPC_SPAWNER                        = 8,
	GUARD_NPC_MOVE                           = 9,
	GUARD_NPC_ENTER_CHECK                    = 10,
	DIRECTING                                = 11,
	CREATEWIDGET                             = 12,
	QUESTCOMPLETE                            = 13,
	TIMER                                    = 14,
	QUEST_STATUS_CHECK                       = 15,
	SCRIPT                                   = 16,
	MONSTER_MOVE                             = 17,
	COUNT                                    = 18,
	PLAYSOUND                                = 19,
	CONDITIONCHECK                           = 20,
	PHASEAREA                                = 21,
	MONSTER_KILL                             = 22,
	SCRIPT_MONSTER_KILL_CHECK                = 23,
	OPOBJECT                                 = 24,
	MISSION_FAIL                             = 25,
	NPCSHOW                                  = 26,
	EFFECTSHOW                               = 27,
	PCWARP                                   = 28,
	DO_ONCE                                  = 29,
	INVINCIBILITY                            = 30,
	OTHER                                    = 31,
	ETriggerType_MAX                         = 32,
};

// Enum MirMobile.EAutoFlightGroup
// NumValues: 0x0004
enum class EAutoFlightGroup : uint8
{
	GROUP_A                                  = 0,
	GROUP_B                                  = 1,
	GROUP_C                                  = 2,
	GROUP_MAX                                = 3,
};

// Enum MirMobile.CAM_POSTPROCESS_TYPE
// NumValues: 0x0004
enum class ECAM_POSTPROCESS_TYPE : uint8
{
	BLIND                                    = 0,
	FASTRUN                                  = 1,
	DASH_HIT                                 = 2,
	CAM_POSTPROCESS_MAX                      = 3,
};

// Enum MirMobile.ECameraModeType
// NumValues: 0x0008
enum class ECameraModeType : uint8
{
	FIELD_AUTO                               = 0,
	FIELD_QUATERVIEW                         = 1,
	MANUAL_CONTROL                           = 2,
	CAMERASET                                = 3,
	NPCDIALOGUE                              = 4,
	MONSTERSKILL                             = 5,
	LOCKON_TARGET                            = 6,
	ECameraModeType_MAX                      = 7,
};

// Enum MirMobile.EAutoCameraType
// NumValues: 0x000B
enum class EAutoCameraType : uint8
{
	NONE                                     = 0,
	DEFAULT                                  = 1,
	MANUAL_MOVING                            = 2,
	WALK_AUTO_MOVING                         = 3,
	RIDE_AUTO_MOVING                         = 4,
	AIR_WALK                                 = 5,
	MANUAL_BATTLE                            = 6,
	AUTO_BATTLE                              = 7,
	SKILL_ING                                = 8,
	SKILL_END                                = 9,
	EAutoCameraType_MAX                      = 10,
};

// Enum MirMobile.EBoneVectorType
// NumValues: 0x0004
enum class EBoneVectorType : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	EBoneVectorType_MAX                      = 3,
};

// Enum MirMobile.EBoneDataType
// NumValues: 0x0004
enum class EBoneDataType : uint8
{
	LOCATION                                 = 0,
	ROTATION                                 = 1,
	SCALE                                    = 2,
	EBoneDataType_MAX                        = 3,
};

// Enum MirMobile.ECharMaterialParameterType
// NumValues: 0x0003
enum class ECharMaterialParameterType : uint8
{
	ECharMaterialParamType_Vector            = 0,
	ECharMaterialParamType_Scalar            = 1,
	ECharMaterialParamType_MAX               = 2,
};

// Enum MirMobile.EPlayAniType
// NumValues: 0x0006
enum class EPlayAniType : uint8
{
	NONE                                     = 0,
	MOVING                                   = 1,
	FIRST                                    = 2,
	SECOND                                   = 3,
	IDLE                                     = 4,
	EPlayAniType_MAX                         = 5,
};

// Enum MirMobile.EWarpState
// NumValues: 0x0005
enum class EWarpState : uint8
{
	None                                     = 0,
	Cast                                     = 1,
	Start                                    = 2,
	End                                      = 3,
	EWarpState_MAX                           = 4,
};

// Enum MirMobile.EAIRWALK_STATE
// NumValues: 0x000E
enum class EAIRWALK_STATE : uint8
{
	AIR_NONE                                 = 0,
	AIR_JUMP01                               = 1,
	AIR_JUMP02                               = 2,
	AIR_JUMP03                               = 3,
	AIR_JUMP04                               = 4,
	AIR_FALL01                               = 5,
	AIR_FALL02                               = 6,
	AIR_WALLJUMP                             = 7,
	AIR_DASH_READY1                          = 8,
	AIR_DASH_READY2                          = 9,
	AIR_FLY                                  = 10,
	AIR_FLY2                                 = 11,
	AIR_LAND                                 = 12,
	AIR_MAX                                  = 13,
};

// Enum MirMobile.ChanegeInfoReason
// NumValues: 0x0005
enum class EChanegeInfoReason : uint8
{
	Sync                                     = 0,
	AutoRecovery                             = 1,
	Buff                                     = 2,
	Skill                                    = 3,
	ChanegeInfoReason_MAX                    = 4,
};

// Enum MirMobile.HeightState
// NumValues: 0x0005
enum class EHeightState : uint8
{
	None                                     = 0,
	Airwalk                                  = 1,
	CliffMove                                = 2,
	RideMonster                              = 3,
	HeightState_MAX                          = 4,
};

// Enum MirMobile.ACTION_STATE
// NumValues: 0x0005
enum class EACTION_STATE : uint8
{
	BP_DefaultNone                           = 0,
	None                                     = 1,
	Ride                                     = 2,
	Casting                                  = 4,
	ACTION_MAX                               = 5,
};

// Enum MirMobile.AIRWALKBAN
// NumValues: 0x0005
enum class EAIRWALKBAN : uint8
{
	AIRWALK_NOLIMITE                         = 0,
	AIRWALK_FIRSTJUMP                        = 1,
	AIRWALK_SECONDJUMP                       = 2,
	AIRWALK_DISABLE                          = 3,
	AIRWALK_MAX                              = 4,
};

// Enum MirMobile.EBroadCastType
// NumValues: 0x0005
enum class EBroadCastType : uint8
{
	Normal                                   = 0,
	Wide                                     = 1,
	VeryWide                                 = 2,
	NoLimit                                  = 3,
	EBroadCastType_MAX                       = 4,
};

// Enum MirMobile.FFadeState
// NumValues: 0x0004
enum class EFFadeState : uint8
{
	StopFade                                 = 0,
	StartFadeIn                              = 1,
	StartFadeOut                             = 2,
	FFadeState_MAX                           = 3,
};

// Enum MirMobile.EGenderType
// NumValues: 0x0004
enum class EGenderType : uint32
{
	NEUTRAL                                  = 0,
	MALE                                     = 1,
	FEMALE                                   = 2,
	EGenderType_MAX                          = 3,
};

// Enum MirMobile.AIRWALK_TYPE
// NumValues: 0x000C
enum class EAIRWALK_TYPE : uint8
{
	None                                     = 0,
	First                                    = 1,
	FirstEnd                                 = 2,
	Second                                   = 3,
	WallJump                                 = 4,
	Dash                                     = 5,
	DashJumpReady                            = 6,
	DashJump                                 = 7,
	Land                                     = 8,
	LandEnd                                  = 9,
	Fall                                     = 10,
	Max                                      = 11,
};

// Enum MirMobile.EAutoMoveState
// NumValues: 0x000C
enum class EAutoMoveState : uint8
{
	None                                     = 0,
	AutoMove_Map                             = 1,
	AutoMove_Quest                           = 2,
	AutoMove_ReturnToCenter                  = 3,
	AutoMove_Gather                          = 4,
	AutoMove_ForceMove                       = 5,
	AutoMove_GroupMeditation                 = 6,
	AutoMove_Unknown                         = 7,
	AutoMove_Trace                           = 8,
	AutoMove_SelfComebackbyBattle            = 9,
	AutoMove_SelfComebackbyCounter           = 10,
	EAutoMoveState_MAX                       = 11,
};

// Enum MirMobile.EBehaviorType
// NumValues: 0x0005
enum class EBehaviorType : uint8
{
	Default                                  = 0,
	Counter                                  = 1,
	AutoBattle                               = 2,
	AutoGather                               = 3,
	EBehaviorType_MAX                        = 4,
};

// Enum MirMobile.EAutoBattleState
// NumValues: 0x0005
enum class EAutoBattleState : uint8
{
	None                                     = 0,
	AutoBattle_NoSkill                       = 1,
	AutoBattle_Skill                         = 2,
	AutoBattle_Gather                        = 3,
	EAutoBattleState_MAX                     = 4,
};

// Enum MirMobile.AUTO_STATE
// NumValues: 0x0009
enum class EAUTO_STATE : uint8
{
	None                                     = 0,
	BATTLE_AUTO                              = 1,
	GATHER_AUTO                              = 2,
	BATTLE_GATHER_AUTO                       = 3,
	PLAY_AUTO                                = 4,
	MAPMOVE_AUTO                             = 5,
	QUEST_AUTO                               = 6,
	AUTO_COUNTER                             = 7,
	AUTO_MAX                                 = 8,
};

// Enum MirMobile.ECharacterType
// NumValues: 0x0005
enum class ECharacterType : uint8
{
	None                                     = 0,
	PC                                       = 1,
	Monster                                  = 2,
	NPC                                      = 100,
	ECharacterType_MAX                       = 101,
};

// Enum MirMobile.SKILL_PRODUCTTYPE
// NumValues: 0x0006
enum class ESKILL_PRODUCTTYPE : uint8
{
	None                                     = 0,
	ChainMove                                = 1,
	RotationMove                             = 2,
	ChainAttack                              = 3,
	AutoTargetMove                           = 4,
	SKILL_MAX                                = 5,
};

// Enum MirMobile.MON_GRADE
// NumValues: 0x0006
enum class EMON_GRADE : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Elite                                    = 2,
	MidBoss                                  = 3,
	StageBoss                                = 4,
	MON_MAX                                  = 5,
};

// Enum MirMobile.SKILL_STATE_TYPE
// NumValues: 0x0004
enum class ESKILL_STATE_TYPE : uint8
{
	Hit                                      = 0,
	StateControl                             = 1,
	MoveControl                              = 2,
	SKILL_STATE_MAX                          = 3,
};

// Enum MirMobile.HIT_REACTION_TYPE
// NumValues: 0x0005
enum class EHIT_REACTION_TYPE : uint8
{
	None                                     = 0,
	Hit00                                    = 1,
	Hit01                                    = 2,
	Hit02                                    = 3,
	HIT_REACTION_MAX                         = 4,
};

// Enum MirMobile.CROWD_CONTROL_TYPE
// NumValues: 0x000D
enum class ECROWD_CONTROL_TYPE : uint8
{
	None                                     = 0,
	Hit                                      = 1,
	Stun                                     = 2,
	Taunt                                    = 3,
	LapidifiCation                           = 4,
	KnockBack                                = 5,
	KnockDown                                = 6,
	KnockFront                               = 7,
	PushToPoint                              = 8,
	Sleep                                    = 9,
	Fear                                     = 11,
	AttackBack                               = 99,
	CROWD_CONTROL_MAX                        = 100,
};

// Enum MirMobile.CCSTANCE
// NumValues: 0x000C
enum class ECCSTANCE : uint8
{
	None                                     = 0,
	Hit01                                    = 11,
	Hit02                                    = 12,
	Hit03                                    = 13,
	Stu01                                    = 21,
	Down01                                   = 31,
	Down02                                   = 32,
	Down03                                   = 33,
	HOV01                                    = 41,
	Air01                                    = 51,
	StateEnd                                 = 250,
	CCSTANCE_MAX                             = 251,
};

// Enum MirMobile.ACT_TYPE
// NumValues: 0x0004
enum class EACT_TYPE : uint8
{
	None                                     = 0,
	TargetAct                                = 1,
	ZoneAct                                  = 2,
	ACT_MAX                                  = 3,
};

// Enum MirMobile.DAMAGE_ATTRIBUTE
// NumValues: 0x0007
enum class EDAMAGE_ATTRIBUTE : uint8
{
	None                                     = 0,
	FireDmg                                  = 1,
	FrozenDmg                                = 2,
	LightningDmg                             = 3,
	PoisonDmg                                = 4,
	HolyDmg                                  = 5,
	DAMAGE_MAX                               = 6,
};

// Enum MirMobile.PIERCE_TYPE
// NumValues: 0x0004
enum class EPIERCE_TYPE : uint8
{
	None                                     = 0,
	PierceAtk                                = 1,
	ChainAtk                                 = 2,
	PIERCE_MAX                               = 3,
};

// Enum MirMobile.BULLET_MOVE_TYPE
// NumValues: 0x0006
enum class EBULLET_MOVE_TYPE : uint8
{
	None                                     = 0,
	TargetMove                               = 1,
	GroundMove                               = 2,
	TargetCurve                              = 3,
	DirectMove                               = 4,
	BULLET_MOVE_MAX                          = 5,
};

// Enum MirMobile.BULLET_TYPE
// NumValues: 0x0004
enum class EBULLET_TYPE : uint8
{
	None                                     = 0,
	SingleTarget                             = 1,
	EachTarget                               = 2,
	BULLET_MAX                               = 3,
};

// Enum MirMobile.IMPACT_SPAWN_TYPE
// NumValues: 0x0005
enum class EIMPACT_SPAWN_TYPE : uint8
{
	None                                     = 0,
	RandomPos                                = 1,
	CurrentPos                               = 2,
	AttackStartPos                           = 3,
	IMPACT_SPAWN_MAX                         = 4,
};

// Enum MirMobile.IMPACT_TYPE
// NumValues: 0x0006
enum class EIMPACT_TYPE : uint8
{
	Target                                   = 0,
	TargetCircle                             = 1,
	SelfCircle                               = 2,
	SelfDirect                               = 3,
	Cross                                    = 4,
	IMPACT_MAX                               = 5,
};

// Enum MirMobile.GUIDE_EFFECT_APPLY_TYPE
// NumValues: 0x0005
enum class EGUIDE_EFFECT_APPLY_TYPE : uint8
{
	ForSelf                                  = 0,
	ForEnemy                                 = 1,
	ForAlly                                  = 2,
	ForAll                                   = 3,
	GUIDE_EFFECT_APPLY_MAX                   = 4,
};

// Enum MirMobile.GUIDE_TYPE
// NumValues: 0x0006
enum class EGUIDE_TYPE : uint8
{
	None                                     = 0,
	SectorForm                               = 1,
	Circle                                   = 2,
	Direct                                   = 3,
	Cross                                    = 4,
	GUIDE_MAX                                = 5,
};

// Enum MirMobile.ATTACK_USE_TYPE
// NumValues: 0x0003
enum class EATTACK_USE_TYPE : uint8
{
	TargetAtk                                = 0,
	InstantAtk                               = 1,
	ATTACK_USE_MAX                           = 2,
};

// Enum MirMobile.ATTACK_VIEW_TARGE
// NumValues: 0x0004
enum class EATTACK_VIEW_TARGE : uint8
{
	TargetView                               = 0,
	AttackStand                              = 1,
	Stand                                    = 2,
	ATTACK_VIEW_MAX                          = 3,
};

// Enum MirMobile.ATTACK_MOVE_TYPE
// NumValues: 0x0005
enum class EATTACK_MOVE_TYPE : uint8
{
	None                                     = 0,
	TargetMov                                = 1,
	DirectMov                                = 2,
	ForwardMov                               = 3,
	ATTACK_MOVE_MAX                          = 4,
};

// Enum MirMobile.ATTACK_TYPE
// NumValues: 0x0006
enum class EATTACK_TYPE : uint8
{
	None                                     = 0,
	DefaultAttack                            = 1,
	DashAttack                               = 2,
	JumpAttack                               = 3,
	TeleportAttack                           = 4,
	ATTACK_MAX                               = 5,
};

// Enum MirMobile.ATTACK_ANI_TYPE
// NumValues: 0x0005
enum class EATTACK_ANI_TYPE : uint8
{
	None                                     = 0,
	NormalAttack                             = 1,
	SkillAttack                              = 2,
	EventAttack                              = 3,
	ATTACK_ANI_MAX                           = 4,
};

// Enum MirMobile.DAMAGE_TYPE
// NumValues: 0x0004
enum class EDAMAGE_TYPE : uint8
{
	None                                     = 0,
	Physical                                 = 1,
	Magic                                    = 2,
	DAMAGE_MAX                               = 3,
};

// Enum MirMobile.SKILLCOST_TYPE
// NumValues: 0x0007
enum class ESKILLCOST_TYPE : uint8
{
	None                                     = 0,
	Rage                                     = 1,
	Mana                                     = 2,
	Psychic                                  = 3,
	Vitality                                 = 4,
	Madness                                  = 5,
	SKILLCOST_MAX                            = 6,
};

// Enum MirMobile.DISTANCE_TYPE
// NumValues: 0x0006
enum class EDISTANCE_TYPE : uint8
{
	None                                     = 0,
	Aggro                                    = 1,
	Near                                     = 2,
	Far                                      = 3,
	Random                                   = 4,
	DISTANCE_MAX                             = 5,
};

// Enum MirMobile.TARGET_SUBTYPE
// NumValues: 0x0004
enum class ETARGET_SUBTYPE : uint8
{
	AliveOnly                                = 0,
	DeadOnly                                 = 1,
	All                                      = 2,
	TARGET_MAX                               = 3,
};

// Enum MirMobile.TARGET_TYPE
// NumValues: 0x0006
enum class ETARGET_TYPE : uint8
{
	ALL                                      = 0,
	Enemy                                    = 1,
	Myself                                   = 2,
	Friend                                   = 3,
	FriendAll                                = 4,
	TARGET_MAX                               = 5,
};

// Enum MirMobile.USE_CONTROL_TYPE
// NumValues: 0x0005
enum class EUSE_CONTROL_TYPE : uint8
{
	None                                     = 0,
	ChargingControl                          = 1,
	DodgeControl                             = 2,
	DirectionControl                         = 3,
	USE_CONTROL_MAX                          = 4,
};

// Enum MirMobile.EPlayerClassID
// NumValues: 0x0008
enum class EPlayerClassID : uint8
{
	NONE                                     = 0,
	PCW                                      = 1,
	PCM                                      = 2,
	PCT                                      = 3,
	PCA                                      = 4,
	PCZ                                      = 5,
	PCD                                      = 6,
	EPlayerClassID_MAX                       = 7,
};

// Enum MirMobile.EDungeonTicketType
// NumValues: 0x0007
enum class EDungeonTicketType : uint8
{
	TYPE_NONE                                = 0,
	TYPE_SECRET_TICKET                       = 1,
	TYPE_SQUARE_TICKET                       = 2,
	TYPE_INDUN_TICKET                        = 3,
	TYPE_BOSS_INDUN_TICKET                   = 4,
	TYPE_WORLD_BOSS_TICKET                   = 5,
	TYPE_MAX                                 = 6,
};

// Enum MirMobile.ETimeTicketType
// NumValues: 0x0005
enum class ETimeTicketType : uint8
{
	TYPE_NONE                                = 0,
	TYPE_ACTION_POINT                        = 12,
	TYPE_HEART                               = 13,
	GUILD_DONATE                             = 15,
	ETimeTicketType_MAX                      = 16,
};

// Enum MirMobile.ECostType
// NumValues: 0x0013
enum class ECostType : uint8
{
	TYPE_NONE                                = 0,
	TYPE_COIN                                = 2,
	TYPE_SILVER_COIN                         = 3,
	TYPE_GOLD_COIN                           = 4,
	TYPE_GOLD_COIN_FREE                      = 5,
	TYPE_SAPPHIRE                            = 6,
	TYPE_GOLD_COIN_EVENT                     = 7,
	TYPE_ENERGY_POINT                        = 11,
	TYPE_BLACK_IRON                          = 12,
	TYPE_GUILD_POINT                         = 17,
	TYPE_ACCELERATION_POINT                  = 18,
	TYPE_DRAGON_JADE                         = 19,
	TYPE_ANCIENT_COIN                        = 20,
	TYPE_DRAGON_STEEL                        = 23,
	TYPE_GUILD_GOLD                          = 91,
	TYPE_GUILD_COIN                          = 92,
	TYPE_GUILD_BLACKIRON                     = 93,
	TYPE_GUILD_SPIRIT                        = 94,
	TYPE_MAX                                 = 95,
};

// Enum MirMobile.ECostMainType
// NumValues: 0x0005
enum class ECostMainType : uint8
{
	TYPE_NONE                                = 0,
	TYPE_MONEY                               = 1,
	TYPE_TIME_TICKET                         = 2,
	TYPE_DUNGEON_TICKET                      = 3,
	TYPE_MAX                                 = 4,
};

// Enum MirMobile.EConditionTriggerTargetType
// NumValues: 0x0003
enum class EConditionTriggerTargetType : uint8
{
	PC                                       = 0,
	MONSTER                                  = 1,
	EConditionTriggerTargetType_MAX          = 2,
};

// Enum MirMobile.ECondtionTriggerType
// NumValues: 0x0002
enum class ECondtionTriggerType : uint8
{
	HP                                       = 0,
	ECondtionTriggerType_MAX                 = 1,
};

// Enum MirMobile.EContentsLightType
// NumValues: 0x000E
enum class EContentsLightType : uint8
{
	NONE                                     = 0,
	CUSTOMIZING_CHARACTER                    = 1,
	UI_CHARACTER                             = 2,
	UI_FORCE                                 = 3,
	VEHICLE                                  = 4,
	PET_DARK                                 = 5,
	PET_BRIGHT                               = 6,
	HOLYSTUFF                                = 7,
	LUXURY_PET                               = 8,
	HEAVENTRAINING                           = 9,
	HEAVENTRAINING_2                         = 10,
	HEAVENTRAINING_3                         = 11,
	HEAVENTRAINING_4                         = 12,
	EContentsLightType_MAX                   = 13,
};

// Enum MirMobile.EQuestDialogueType
// NumValues: 0x0005
enum class EQuestDialogueType : uint8
{
	None                                     = 0,
	MainQuest                                = 1,
	RelationQuest                            = 2,
	RequestQuest                             = 3,
	EQuestDialogueType_MAX                   = 4,
};

// Enum MirMobile.EDEBUG
// NumValues: 0x000A
enum class EDEBUG : uint8
{
	NONE                                     = 0,
	GAME_MODE                                = 1,
	WIDGET_VISIBLE                           = 2,
	TEMPITEM_CREATE                          = 3,
	CHAR_STAT                                = 4,
	NET_PC                                   = 5,
	PC_STATE                                 = 6,
	BATTLE                                   = 7,
	ITEM_WIDGET_SORT                         = 8,
	EDEBUG_MAX                               = 9,
};

// Enum MirMobile.ELOGTYPE
// NumValues: 0x0003
enum class ELOGTYPE : uint8
{
	FIXED                                    = 0,
	LIST                                     = 1,
	ELOGTYPE_MAX                             = 2,
};

// Enum MirMobile.EWorld_Type
// NumValues: 0x0009
enum class EWorld_Type : uint8
{
	None                                     = 0,
	Game                                     = 1,
	Editor                                   = 2,
	PIE                                      = 3,
	EditorPreview                            = 4,
	GamePreview                              = 5,
	GameRPC                                  = 6,
	Inactive                                 = 7,
	EWorld_MAX                               = 8,
};

// Enum MirMobile.EDirectingTriggerType
// NumValues: 0x0004
enum class EDirectingTriggerType : uint8
{
	SMALL_TALK                               = 0,
	CINEMATIC_DIALOGUE                       = 1,
	LEVEL_SEQUENCE                           = 2,
	EDirectingTriggerType_MAX                = 3,
};

// Enum MirMobile.EContentsSceneType
// NumValues: 0x000F
enum class EContentsSceneType : uint8
{
	NONE                                     = 0,
	Force                                    = 1,
	Equip                                    = 2,
	Mastery                                  = 3,
	Vehicle                                  = 4,
	Customizing                              = 5,
	Costume                                  = 6,
	CharacterSelect                          = 7,
	ClassSelect                              = 8,
	Pet                                      = 9,
	HolyStuff                                = 10,
	Costume_Uniform                          = 11,
	SuccessionWeapon                         = 12,
	HeavenTraining                           = 13,
	EContentsSceneType_MAX                   = 14,
};

// Enum MirMobile.EClassType
// NumValues: 0x0008
enum class EClassType : uint8
{
	NONE                                     = 0,
	PCW                                      = 1,
	PCM                                      = 2,
	PCT                                      = 3,
	PCA                                      = 4,
	PCZ                                      = 5,
	PCD                                      = 6,
	EClassType_MAX                           = 7,
};

// Enum MirMobile.EBattlePassRewardGroup
// NumValues: 0x0005
enum class EBattlePassRewardGroup : uint16
{
	EGroup_Normal                            = 10001,
	EGroup_Preminum1                         = 20001,
	EGroup_Preminum2                         = 30001,
	EGroup_All                               = 30002,
	EGroup_MAX                               = 30003,
};

// Enum MirMobile.EBuffSocketType
// NumValues: 0x0005
enum class EBuffSocketType : uint32
{
	NONE                                     = 0,
	Root                                     = 1,
	Buff_Mid                                 = 2,
	Buff_Top                                 = 3,
	EBuffSocketType_MAX                      = 4,
};

// Enum MirMobile.ECommandMarkType
// NumValues: 0x0003
enum class ECommandMarkType : uint8
{
	POSITION                                 = 0,
	TARGET                                   = 1,
	ECommandMarkType_MAX                     = 2,
};

// Enum MirMobile.ECostumeType
// NumValues: 0x0003
enum class ECostumeType : uint8
{
	Costume                                  = 1,
	Luxury                                   = 2,
	ECostumeType_MAX                         = 3,
};

// Enum MirMobile.COSTUME_PARTS
// NumValues: 0x000C
enum class ECOSTUME_PARTS : uint8
{
	PARTS_NONE                               = 0,
	PARTS_WEAPON                             = 1,
	PARTS_HAIR                               = 2,
	PARTS_CLOTHES                            = 3,
	PARTS_SHOULDERS                          = 4,
	PARTS_BACK                               = 5,
	PARTS_WAIST                              = 6,
	PARTS_PET                                = 7,
	PARTS_VEHICLE                            = 8,
	PARTS_COSTUME_MAX                        = 6,
	PARTS_LUXURY_MAX                         = 8,
	PARTS_MAX                                = 9,
};

// Enum MirMobile.ECustomizingComponentType
// NumValues: 0x000A
enum class ECustomizingComponentType : uint32
{
	LIST                                     = 0,
	PALETTE                                  = 1,
	SLIDER                                   = 2,
	PICKER                                   = 3,
	LIST_MESH                                = 4,
	LIST_COSTUME                             = 5,
	LIST_ANI                                 = 6,
	COSTUME_DYE                              = 7,
	NONE                                     = 8,
	ECustomizingComponentType_MAX            = 9,
};

// Enum MirMobile.EEventPassPurchaseType
// NumValues: 0x0003
enum class EEventPassPurchaseType : uint8
{
	EPurchaseType_Cash                       = 1,
	EPurchaseType_Money                      = 2,
	EPurchaseType_MAX                        = 3,
};

// Enum MirMobile.EEventPassRewardGroup
// NumValues: 0x0005
enum class EEventPassRewardGroup : uint16
{
	EGroup_Normal                            = 10001,
	EGroup_Preminum1                         = 20001,
	EGroup_Preminum2                         = 30001,
	EGroup_All                               = 30002,
	EGroup_MAX                               = 30003,
};

// Enum MirMobile.EGameOptionDefaultSettingType
// NumValues: 0x0003
enum class EGameOptionDefaultSettingType : uint8
{
	Table                                    = 1,
	Device                                   = 2,
	EGameOptionDefaultSettingType_MAX        = 3,
};

// Enum MirMobile.EGameOptionDataType
// NumValues: 0x0004
enum class EGameOptionDataType : uint8
{
	DEVICE                                   = 1,
	CHARACTER                                = 2,
	DEFAULT                                  = 3,
	EGameOptionDataType_MAX                  = 4,
};

// Enum MirMobile.EGameOptionType
// NumValues: 0x0072
enum class EGameOptionType : uint8
{
	None                                     = 0,
	G_AutoBattleFunction                     = 1,
	G_AutoBattleRange                        = 2,
	G_AutoSkill                              = 3,
	G_LeaderCenteredBattle                   = 4,
	G_AutoReturnOnDeath                      = 5,
	G_AutoLockOn                             = 6,
	G_AutoCounterAttack                      = 7,
	G_QuickSlotAutoPotion_0                  = 8,
	G_QuickSlotAutoPotion_1                  = 9,
	G_QuickSlotAutoPotion_2                  = 10,
	G_AutoPotionHpPercent                    = 11,
	G_AutoPotionMpPercent                    = 12,
	G_QuickSlotAutoEquip                     = 13,
	G_GuildMarkOption                        = 14,
	G_UserMarkOption                         = 15,
	G_MyNameOption                           = 16,
	G_UserNameOption                         = 17,
	G_MonNameOption                          = 18,
	G_EffectVisual                           = 19,
	G_SleepModeStartTime                     = 20,
	G_UnSleepModeWhenAttacked                = 21,
	G_PartyUIAutoVisible                     = 22,
	G_BuddyRequestAutoReject                 = 23,
	G_BuddyLoginNotice                       = 24,
	G_ComplateQuestSort                      = 25,
	G_WorldChatItemAsk                       = 26,
	G_Simple                                 = 27,
	G_ScreenEffect                           = 28,
	G_Texture                                = 29,
	G_Resolution                             = 30,
	G_FrameSpeed                             = 31,
	G_Visual                                 = 32,
	G_SkillEffect                            = 33,
	G_MasterVolume                           = 34,
	G_BGMVolume                              = 35,
	G_SFXVolume                              = 36,
	G_VoiceVolume                            = 37,
	G_AmbientVolume                          = 38,
	G_QuickSlotInvenSort                     = 39,
	G_QuickSlotInvenOrder                    = 40,
	G_ARejectParty                           = 41,
	G_ARejectSquad                           = 42,
	G_CameraShakeScale                       = 43,
	G_AutoPlayUseSkill                       = 44,
	G_StageSectorVisible                     = 45,
	G_ComboCounterViewable                   = 46,
	G_ItemFilterJunkItemFirst                = 47,
	G_ItemFilterItemGrade01                  = 48,
	G_ItemFilterItemGrade02                  = 49,
	G_ItemFilterItemGrade03                  = 50,
	G_HideGuildGiftName                      = 51,
	G_PartyBattleTargetShare                 = 52,
	G_BattleTargetType                       = 53,
	G_TargetBossMon                          = 54,
	G_TargetNormalMon                        = 55,
	G_TargetEnemyGuild                       = 56,
	G_TargetEnemyUser                        = 57,
	G_TargetmyGuild                          = 58,
	G_TargetmyParty                          = 59,
	G_TradeItemAsk                           = 60,
	G_MiniMap                                = 61,
	G_GatherPopUp                            = 62,
	G_CharacterAlarm                         = 63,
	G_QuestAlarm                             = 64,
	G_GreatBuildingAlarm                     = 65,
	G_ContentsOpenAlarm                      = 66,
	G_ChattingRenderOpacity                  = 67,
	G_PushAllAlarm                           = 68,
	G_PushNightAlarm                         = 69,
	G_Shadow                                 = 88,
	G_HeadLineMessageType_2                  = 89,
	G_Pet                                    = 90,
	G_Battle_AutoCamera                      = 91,
	G_QuickSlotAutoPotion_3                  = 92,
	G_QuickSlotAutoPotion_4                  = 93,
	G_QuickSlotAutoPotion_5                  = 94,
	G_QuickSlotAutoPotion_6                  = 95,
	G_QuickSlotAutoPotion_7                  = 96,
	G_QuickSlotAutoPotion_8                  = 97,
	G_MyGuildMark                            = 98,
	G_MyAllianceGuildMark                    = 99,
	G_OtherGuildMark                         = 100,
	G_TargetEnemyGuildWar                    = 101,
	G_PKAlarm                                = 102,
	G_SkillDarkChange                        = 103,
	G_SkillCameraZoom                        = 104,
	G_CameraMode                             = 105,
	G_ItemSmelting_Break_Hero                = 106,
	G_CharacterMaxLevelAlarm                 = 107,
	G_ExpBoosterMaxLevelAlarm                = 108,
	G_CostumeTitleOption                     = 109,
	G_FastUnsealingStart                     = 110,
	G_HUDAutoResizing                        = 111,
	G_PingVisible                            = 112,
	G_PKAutoReverse                          = 113,
	G_TicketAutoCharge_UseGold               = 114,
	G_PartyAutoStart                         = 115,
	G_ASSASSIN_MODE_Change                   = 116,
	G_ItemFilterTrade                        = 117,
	G_HudSkillSetExtend                      = 118,
	G_StorageTotalTransfer                   = 119,
	G_ItemGetEffectSet                       = 120,
	G_SubWeaponDisable                       = 121,
	G_MagicOrb_Regist_Manual                 = 122,
	G_MagicOrb_AutoRegist_Grade02            = 123,
	G_MagicOrb_AutoRegist_Grade03            = 124,
	G_MagicOrb_AutoRegist_Grade04            = 125,
	G_MagicOrb_AutoRegist_Grade05            = 126,
	G_MagicOrb_AutoRegist_SpiritStone        = 127,
	G_MagicOrb_AutoRegist_MagicOrbExpMaterial = 128,
	G_MagicOrb_AutoRegist_Trade              = 129,
	G_StampedItemAsk                         = 135,
	EGameOptionType_MAX                      = 136,
};

// Enum MirMobile.EAltarRequestType
// NumValues: 0x0004
enum class EAltarRequestType : uint8
{
	None                                     = 0,
	ConquerPopup                             = 1,
	ConquerServer                            = 2,
	EAltarRequestType_MAX                    = 3,
};

// Enum MirMobile.EGuildWarMonsterKind
// NumValues: 0x0014
enum class EGuildWarMonsterKind : uint32
{
	NONE                                     = 0,
	CAPTURE                                  = 1,
	BARRICADE                                = 2,
	CASTLEGATE                               = 3,
	LEVER                                    = 4,
	SIEGETOWER                               = 5,
	CATAPULT                                 = 6,
	SANCTUM                                  = 7,
	WARGATE                                  = 8,
	WARBOSS                                  = 9,
	TRAP                                     = 10,
	DarkAltar                                = 11,
	WAROUTPOST                               = 12,
	BUFFMONSTER                              = 13,
	WARCAPTURE                               = 14,
	BLACKDRAGONALTAR                         = 15,
	TOURNAMENTCAMP                           = 16,
	TERRITORY                                = 17,
	TOURNAMENTMONSTER                        = 18,
	EGuildWarMonsterKind_MAX                 = 19,
};

// Enum MirMobile.EGuildWarObjectOwnerShip
// NumValues: 0x000A
enum class EGuildWarObjectOwnerShip : uint32
{
	NEUTRAL                                  = 0,
	DEFENSE                                  = 1,
	OFFENSE                                  = 2,
	CAMP01                                   = 1,
	CAMP02                                   = 2,
	CAMP03                                   = 3,
	CAMP04                                   = 4,
	ATEAM                                    = 1,
	BTEAM                                    = 2,
	EGuildWarObjectOwnerShip_MAX             = 5,
};

// Enum MirMobile.EGuildWarObjectKind
// NumValues: 0x0005
enum class EGuildWarObjectKind : uint32
{
	NONE                                     = 0,
	RevivalFlag                              = 1,
	PlunderBox                               = 2,
	Outpost                                  = 3,
	EGuildWarObjectKind_MAX                  = 4,
};

// Enum MirMobile.EMemberKind
// NumValues: 0x0004
enum class EMemberKind : uint8
{
	Member_5                                 = 1,
	Member_10                                = 2,
	Member_15                                = 3,
	Member_MAX                               = 4,
};

// Enum MirMobile.EDungeonKind
// NumValues: 0x0004
enum class EDungeonKind : uint8
{
	Normal                                   = 1,
	Boss                                     = 2,
	Hell                                     = 3,
	EDungeonKind_MAX                         = 4,
};

// Enum MirMobile.EDungeonCategory
// NumValues: 0x0009
enum class EDungeonCategory : uint8
{
	NONE                                     = 0,
	EXP                                      = 1,
	GOLD                                     = 2,
	MATERIAL                                 = 3,
	EQUIPMENT                                = 4,
	VEHICLE                                  = 5,
	GEM                                      = 6,
	SKILLSTONE                               = 7,
	EDungeonCategory_MAX                     = 8,
};

// Enum MirMobile.EItemDataFeatureAvailability
// NumValues: 0x0004
enum class EItemDataFeatureAvailability : uint8
{
	NONE                                     = 0,
	EQUIPMENT_RECOMMEND                      = 2,
	DEFAULT                                  = 2,
	EItemDataFeatureAvailability_MAX         = 3,
};

// Enum MirMobile.EItemGetWayMine
// NumValues: 0x0004
enum class EItemGetWayMine : uint8
{
	MineNormal                               = 1,
	MineSpecial                              = 2,
	Mine_BlockIron                           = 3,
	EItemGetWayMine_MAX                      = 4,
};

// Enum MirMobile.EItemGetWayNPCStore
// NumValues: 0x0004
enum class EItemGetWayNPCStore : uint8
{
	NPCStoreNormal                           = 1,
	NPCStoreSpecial                          = 2,
	NPCStoreEvent                            = 3,
	EItemGetWayNPCStore_MAX                  = 4,
};

// Enum MirMobile.EItemGetWayItemMake
// NumValues: 0x0005
enum class EItemGetWayItemMake : uint8
{
	ItemMakeUI                               = 1,
	ItemMakeNPC                              = 2,
	ItemMakeNPC_Exchange                     = 3,
	ItemCraftNPC                             = 4,
	EItemGetWayItemMake_MAX                  = 5,
};

// Enum MirMobile.EItemGetWayGather
// NumValues: 0x0003
enum class EItemGetWayGather : uint8
{
	GatherNormal                             = 1,
	GatherSpecial                            = 2,
	EItemGetWayGather_MAX                    = 3,
};

// Enum MirMobile.EItemGetWayMonster
// NumValues: 0x0004
enum class EItemGetWayMonster : uint8
{
	NONE                                     = 0,
	MonsterGrade12                           = 1,
	MonsterGrade34                           = 2,
	EItemGetWayMonster_MAX                   = 3,
};

// Enum MirMobile.EGetItemWayType
// NumValues: 0x0013
enum class EGetItemWayType : uint8
{
	None                                     = 0,
	Store                                    = 1,
	Monster                                  = 2,
	NamedMonster                             = 3,
	Gather                                   = 4,
	Dungeon_Hunt                             = 5,
	Dungeon_Gather                           = 6,
	ItemMake                                 = 7,
	Achievement                              = 8,
	DictionaryMonster                        = 10,
	OpenBox                                  = 11,
	NPCStore                                 = 12,
	MagicSquare                              = 13,
	Boss_Monster                             = 14,
	Quest_Mission                            = 15,
	Quest_Relation                           = 16,
	Mine                                     = 17,
	Box_Search                               = 18,
	EGetItemWayType_MAX                      = 19,
};

// Enum MirMobile.EItemGetWayLinkType
// NumValues: 0x0024
enum class EItemGetWayLinkType : uint32
{
	NONE                                     = 0,
	MONSTER                                  = 2,
	OBJECT                                   = 3,
	SHOP_GOODS                               = 4,
	NPC_SHOP_GOODS                           = 5,
	ITEM_MAKE                                = 6,
	ACHIEVEMENT                              = 7,
	ITEM_RANDOM_GET                          = 8,
	ITEM_PACKAGE                             = 9,
	QUEST_RELATION                           = 10,
	QUEST_DAILY                              = 11,
	QUEST_MISSION                            = 12,
	QUEST_REQUEST                            = 13,
	JEWEL_UPGRADE                            = 14,
	INSTANCE_DUNGEON_INFO                    = 15,
	GREAT_BUILDING_STEP                      = 16,
	BOSS_WORLD                               = 17,
	GUILD_EXPEDITION                         = 18,
	ITEM                                     = 19,
	QUEST_DAILY_PLUS_REWARD                  = 20,
	GACHA_INFO                               = 21,
	ITEM_MATERIAL_COMPOSE                    = 22,
	MAIN_QUEST                               = 23,
	USER_EVENT                               = 24,
	SHOP_GOODS_ITEM_PACKAGE                  = 25,
	GUILD_SHOP                               = 26,
	DUNGEON_SHOP                             = 27,
	QUEST_DROP_ITEM                          = 28,
	ITEM_TRANSCENDENCE_DEFINE                = 29,
	MAKE_FAIL                                = 31,
	ITEM_SELECT_GET                          = 32,
	RANKING_REWARD                           = 33,
	DEADVALLEY_REWARD                        = 34,
	GUILDTOURNAMENT_REWARD                   = 35,
	MONSTER_WAVE                             = 36,
	EItemGetWayLinkType_MAX                  = 37,
};

// Enum MirMobile.EItemGetWayCategoryType
// NumValues: 0x002A
enum class EItemGetWayCategoryType : uint8
{
	None                                     = 0,
	Store                                    = 1,
	Cash_Store                               = 2,
	Meditation                               = 3,
	Monster                                  = 4,
	NamedMonster                             = 5,
	Gather                                   = 6,
	Dungeon_Hunt                             = 7,
	Dungeon_Gather                           = 8,
	ItemMake                                 = 9,
	Achievement                              = 10,
	ItemUpgrade                              = 11,
	DictionaryMonster                        = 12,
	OpenBox                                  = 13,
	NPCStore                                 = 14,
	MagicSquare                              = 15,
	Boss_Monster                             = 16,
	Quest_Mission                            = 17,
	Quest_Relation                           = 18,
	Mine                                     = 19,
	Box_Search                               = 20,
	Quest_Request                            = 21,
	Daily_Work                               = 22,
	Great_Building                           = 23,
	Secret_Dungeon                           = 24,
	NPC_ItemMake                             = 25,
	Daily_HomeWork                           = 26,
	Gacha                                    = 27,
	Material_Compse                          = 28,
	MainQuest                                = 29,
	NPC_Exchange                             = 30,
	Guild_SHOP                               = 31,
	Dungeon_Shop                             = 32,
	Quest_DropItem                           = 33,
	Transcendence                            = 34,
	Boss_Summon                              = 35,
	SmeltingFail                             = 36,
	MakeFail                                 = 37,
	BlackDragonDungeon                       = 38,
	DragonGearTransfer                       = 44,
	MAX_ItemGetWayType                       = 45,
	EItemGetWayCategoryType_MAX              = 46,
};

// Enum MirMobile.EItemGetWayType
// NumValues: 0x002E
enum class EItemGetWayType : uint32
{
	NONE                                     = 0,
	SHOP                                     = 1,
	HUNTING                                  = 2,
	COLLECTING                               = 4,
	GUILD_GIFT                               = 5,
	NPC_MAKE                                 = 6,
	UI_MAKE                                  = 7,
	ACHIEVEMENT                              = 8,
	COLLECTION                               = 10,
	RANDOMBOX                                = 11,
	SHOP_NPC                                 = 12,
	QUEST_MISSION                            = 15,
	RELATION                                 = 16,
	QUEST_DAILY                              = 19,
	QUEST_REQUEST                            = 20,
	NPC_BARTER                               = 21,
	JEWEL_UPGRADE                            = 22,
	GREAT_BUILDING                           = 23,
	FIRST_CLEAR_REWARD                       = 24,
	TRADE                                    = 25,
	GACHA                                    = 26,
	ITEM_MATERIAL_COMPOSE                    = 27,
	MAIN_QUEST                               = 28,
	USER_EVENT                               = 29,
	GUILD_SHOP                               = 30,
	DUNGEON_SHOP                             = 31,
	QUEST_DROP                               = 33,
	TRANSCENDENCE                            = 34,
	GUILD_EXPEDITION_CHALLANGE               = 35,
	GUILD_GIFT_CONTRIBUTE                    = 36,
	BOSS_SUMMON                              = 37,
	UI_MAKE_FAIL_REWARD                      = 39,
	NPC_MAKE_FAIL_REWARD                     = 40,
	AGENCY_MAKE_FAIL_REWARD                  = 41,
	BLACKDRAGON_DUNGEON                      = 42,
	GUILD_COOP_MISSION                       = 43,
	DEAD_VALLEY                              = 44,
	GUILDTOURNAMENT                          = 45,
	MONSTER_WAVE                             = 46,
	DRAGONGEAR_TRANS                         = 47,
	USEREVENT_ITEM_COLLECTION                = 48,
	MAGICORB_UPGRADE                         = 49,
	ANCIENTTREASURE_UPGRADE                  = 50,
	SMELTING_FAIL                            = 51,
	MISSIONPASS                              = 52,
	EItemGetWayType_MAX                      = 53,
};

// Enum MirMobile.EItemGetWayIdType
// NumValues: 0x0004
enum class EItemGetWayIdType : uint32
{
	NONE                                     = 0,
	ITEM                                     = 1,
	COST                                     = 2,
	EItemGetWayIdType_MAX                    = 3,
};

// Enum MirMobile.EItemGetWayFilterType
// NumValues: 0x0004
enum class EItemGetWayFilterType : uint8
{
	NONE                                     = 0,
	FILTER_COMBATPOINT                       = 1,
	FILTER_LEVEL                             = 2,
	EItemGetWayFilterType_MAX                = 3,
};

// Enum MirMobile.EItemMakeAgency_FailType
// NumValues: 0x0004
enum class EItemMakeAgency_FailType : uint8
{
	NONE                                     = 0,
	COST                                     = 1,
	ITEM                                     = 2,
	EItemMakeAgency_MAX                      = 3,
};

// Enum MirMobile.EItemMakeAgency_PeriodType
// NumValues: 0x0004
enum class EItemMakeAgency_PeriodType : uint8
{
	NO_PERIOD                                = 0,
	PERIOD                                   = 1,
	EVENT_REPEAT_PERIOD                      = 2,
	EItemMakeAgency_MAX                      = 3,
};

// Enum MirMobile.EItemMakeAgencyType
// NumValues: 0x0004
enum class EItemMakeAgencyType : uint8
{
	NO_LIMIT                                 = 0,
	SERVER_LIMIT                             = 1,
	CHARACTER_LIMIT                          = 2,
	EItemMakeAgencyType_MAX                  = 3,
};

// Enum MirMobile.EItemMake_FailSlot
// NumValues: 0x0005
enum class EItemMake_FailSlot : uint8
{
	SLOT_0                                   = 0,
	SLOT_1                                   = 1,
	SLOT_2                                   = 2,
	SLOT_3                                   = 3,
	MAX                                      = 4,
};

// Enum MirMobile.EGetWayType
// NumValues: 0x0003
enum class EGetWayType : uint8
{
	NONE                                     = 0,
	DISPLAY                                  = 1,
	EGetWayType_MAX                          = 2,
};

// Enum MirMobile.EMakeType
// NumValues: 0x000D
enum class EMakeType : uint16
{
	NONE                                     = 0,
	MAKE_UI                                  = 1,
	MAKE_NPC                                 = 2,
	MAKE_NPC_EXCHANGE                        = 3,
	MAKE_UI_SPECIAL                          = 4,
	MAKE_NPC_SPECIAL_EXT                     = 5,
	MAKE_UI_MATERIAL                         = 6,
	MAKE_UI_USE                              = 7,
	MAKE_UI_AGENCY                           = 8,
	MAKE_UI_SPECIAL_MAGICORB                 = 9,
	MAKE_UI_ANCIENTTREASURE_UPGRADE          = 10,
	MAKE_NPC_SPECIAL                         = 999,
	EMakeType_MAX                            = 1000,
};

// Enum MirMobile.EMakeItemType
// NumValues: 0x0005
enum class EMakeItemType : uint32
{
	Normal                                   = 0,
	Normal_Agency                            = 1,
	Special_UI_Item                          = 2,
	Special_NPC_Item                         = 3,
	EMakeItemType_MAX                        = 4,
};

// Enum MirMobile.EMagicStoneEquipSlot_SlotOpenType
// NumValues: 0x0003
enum class EMagicStoneEquipSlot_SlotOpenType : uint8
{
	CHARACTER_LEVEL                          = 1,
	GREAT_BUILDING_STEP                      = 2,
	EMagicStoneEquipSlot_MAX                 = 3,
};

// Enum MirMobile.EMagicStoneEquipSlot_SlotType
// NumValues: 0x0003
enum class EMagicStoneEquipSlot_SlotType : uint8
{
	RAINBOW_MAGIC_STONE_SLOT                 = 1,
	MAGIC_STONE_SLOT                         = 2,
	EMagicStoneEquipSlot_MAX                 = 3,
};

// Enum MirMobile.EMapMiniInfoStringPosType
// NumValues: 0x0006
enum class EMapMiniInfoStringPosType : uint8
{
	None                                     = 0,
	Top                                      = 1,
	Bottom                                   = 2,
	Left                                     = 3,
	Right                                    = 4,
	EMapMiniInfoStringPosType_MAX            = 5,
};

// Enum MirMobile.EMapMiniInfoWayPointType
// NumValues: 0x000D
enum class EMapMiniInfoWayPointType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Monster                                  = 2,
	MiningZone                               = 3,
	NPC                                      = 4,
	FixedNPC                                 = 5,
	SummonArea                               = 6,
	EventNPC                                 = 7,
	Plunder                                  = 9,
	NonList                                  = 12,
	Compete                                  = 13,
	TreasureObject                           = 14,
	Max                                      = 15,
};

// Enum MirMobile.EMapMiniInfoDefSubType
// NumValues: 0x0005
enum class EMapMiniInfoDefSubType : uint8
{
	None                                     = 0,
	Portal                                   = 2,
	Area                                     = 3,
	ShopNPC                                  = 1,
	Max                                      = 2,
};

// Enum MirMobile.EMapMiniInfoMainType
// NumValues: 0x0005
enum class EMapMiniInfoMainType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Waypoint                                 = 2,
	SafetyArea                               = 3,
	Max                                      = 4,
};

// Enum MirMobile.EMoneyGetWayType
// NumValues: 0x000B
enum class EMoneyGetWayType : uint16
{
	None                                     = 0,
	Cash_Store                               = 1,
	Gather                                   = 2,
	Daily_Work                               = 3,
	Meditation                               = 4,
	MagicSquare                              = 5,
	Quest_Mission                            = 6,
	Event                                    = 99,
	TreasureGoblin                           = 990,
	Trade                                    = 999,
	EMoneyGetWayType_MAX                     = 1000,
};

// Enum MirMobile.EMONSTER_FACTION
// NumValues: 0x0008
enum class EMONSTER_FACTION : uint32
{
	Neutral                                  = 0,
	Friendly                                 = 1,
	Hostile                                  = 2,
	Hostile2                                 = 3,
	Hostile3                                 = 4,
	Hostile4                                 = 5,
	Hostile5                                 = 6,
	EMONSTER_MAX                             = 7,
};

// Enum MirMobile.EMythicEffectTargetType
// NumValues: 0x0003
enum class EMythicEffectTargetType : uint8
{
	ANCIENT_TREASURE_TYPE                    = 101,
	SPEICAL_MAGICORB                         = 201,
	EMythicEffectTargetType_MAX              = 202,
};

// Enum MirMobile.ENPCShopGoodsLimitType
// NumValues: 0x0006
enum class ENPCShopGoodsLimitType : uint8
{
	None                                     = 0,
	Permanent                                = 1,
	EveryDay                                 = 2,
	Weekend                                  = 3,
	Month                                    = 4,
	ENPCShopGoodsLimitType_MAX               = 5,
};

// Enum MirMobile.EObject_GetWayType
// NumValues: 0x0003
enum class EObject_GetWayType : uint8
{
	GATHER_NORMAL                            = 1,
	GATHER_SPECIAL                           = 2,
	GATHER_MAX                               = 3,
};

// Enum MirMobile.EObject_GatherType
// NumValues: 0x000B
enum class EObject_GatherType : uint8
{
	NONE                                     = 0,
	PLANTS                                   = 1,
	ORE                                      = 2,
	BOX                                      = 3,
	JINKI                                    = 4,
	BLACKIRON                                = 5,
	BALL                                     = 7,
	BLACKDRAGONALTAR                         = 81,
	DEADVALLEY_BALL                          = 51,
	DEADVALLEY_BOX                           = 52,
	EObject_MAX                              = 82,
};

// Enum MirMobile.ERecvOccupationAuction
// NumValues: 0x0006
enum class ERecvOccupationAuction : uint8
{
	RECV_OCCUPATION_INFO                     = 1,
	RECV_OCCUPATION_AUCTION_BIDDING          = 2,
	RECV_OCCUPATION_BATTLE_STATUS            = 3,
	RECV_OCCUPATION_ALLIANCE_INVITE_LIST     = 4,
	RECV_OCCUPATION_ALLIANCE_INVITE          = 5,
	RECV_OCCUPATION_MAX                      = 6,
};

// Enum MirMobile.EOccupationBidHistoryType
// NumValues: 0x0005
enum class EOccupationBidHistoryType : uint8
{
	NONE                                     = 0,
	BIDDING                                  = 1,
	OCCUPIED                                 = 2,
	BATTLE_RESULT                            = 3,
	EOccupationBidHistoryType_MAX            = 4,
};

// Enum MirMobile.EOccupationBidState
// NumValues: 0x0004
enum class EOccupationBidState : uint8
{
	NONE                                     = 0,
	DEFENSE                                  = 1,
	OFFENSE                                  = 2,
	EOccupationBidState_MAX                  = 3,
};

// Enum MirMobile.EOccupationAuctionState
// NumValues: 0x000C
enum class EOccupationAuctionState : uint64
{
	INIT                                     = 18446744073709551615,
	NONE                                     = 0,
	STANDBY_AUCTION                          = 1,
	PROCEEDING_AUCTION                       = 2,
	EXTEND_AUCTION                           = 3,
	FAILURE_AUCTION                          = 4,
	ALLIANCE_INVITE                          = 5,
	STANDBY_BATTLE                           = 6,
	START_BATTLE                             = 7,
	END_BATTLE                               = 8,
	CONTENTS_CLOSE                           = 9,
	EOccupationAuctionState_MAX              = 10,
};

// Enum MirMobile.EOccupationBattleGuildType
// NumValues: 0x000D
enum class EOccupationBattleGuildType : uint8
{
	NONE                                     = 0,
	DEFENSE_MAIN                             = 1,
	OFFENSE_MAIN                             = 2,
	DEFENSE_ALLIANCE_1                       = 4,
	DEFENSE_ALLIANCE_2                       = 8,
	OFFENSE_ALLIANCE_1                       = 16,
	OFFENSE_ALLIANCE_2                       = 32,
	DEFENSE_GUILD                            = 13,
	OFFENSE_GUILD                            = 50,
	MAIN_GUILD                               = 3,
	ALLIANCE_GUILD                           = 60,
	ALLIANCE_TO_ALL                          = 20,
	EOccupationBattleGuildType_MAX           = 61,
};

// Enum MirMobile.EFootStepSoundType
// NumValues: 0x0007
enum class EFootStepSoundType : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Horse                                    = 2,
	Tiger                                    = 3,
	Pig                                      = 4,
	WoodenFish                               = 5,
	EFootStepSoundType_MAX                   = 6,
};

// Enum MirMobile.EQuestDropItemType
// NumValues: 0x0008
enum class EQuestDropItemType : uint8
{
	MAIN                                     = 1,
	MISSION_NORMAL                           = 2,
	MISSION_REPEAT                           = 3,
	DAILY_WORK                               = 4,
	RELATION                                 = 5,
	REQUEST                                  = 6,
	GUILD                                    = 7,
	EQuestDropItemType_MAX                   = 8,
};

// Enum MirMobile.ERevivalKillerType
// NumValues: 0x0006
enum class ERevivalKillerType : uint8
{
	UNKNOWN                                  = 0,
	USER                                     = 1,
	MONSTER                                  = 2,
	FALL_DEATH                               = 3,
	SELF_DEATH                               = 4,
	ERevivalKillerType_MAX                   = 5,
};

// Enum MirMobile.ERevivalOptionType
// NumValues: 0x000A
enum class ERevivalOptionType : uint8
{
	NONE                                     = 0,
	SAFE_REVIVAL                             = 1,
	IMMEDIATE_REVIVAL                        = 2,
	HELP_REVIVAL                             = 4,
	ANOTHER_POSITION_REVIVAL                 = 8,
	MOVE_REVIVAL_ROOM                        = 16,
	NEED_HEART                               = 32,
	PK_PENALTY                               = 64,
	SITUATION_BOARD                          = 128,
	ERevivalOptionType_MAX                   = 129,
};

// Enum MirMobile.ERevivalExceptionType
// NumValues: 0x0007
enum class ERevivalExceptionType : uint8
{
	NONE                                     = 0,
	CINEMATIC                                = 1,
	DUNGEON_REWARD                           = 2,
	SLEEP_MODE                               = 4,
	SIEGE_SITUATION_BOARD                    = 8,
	SIEGE_BATTLERESULT                       = 16,
	ERevivalExceptionType_MAX                = 17,
};

// Enum MirMobile.EDialoguePostion
// NumValues: 0x0005
enum class EDialoguePostion : uint8
{
	NONE                                     = 0,
	BOTTOM                                   = 1,
	MIDDLE                                   = 2,
	BOTTOM_UP                                = 3,
	EDialoguePostion_MAX                     = 4,
};

// Enum MirMobile.ESkillCoolState
// NumValues: 0x0006
enum class ESkillCoolState : uint8
{
	None                                     = 0,
	Global_Init                              = 1,
	Global_After                             = 2,
	Waiting                                  = 3,
	Cool                                     = 4,
	ESkillCoolState_MAX                      = 5,
};

// Enum MirMobile.EInitialEntrySequenceType
// NumValues: 0x0004
enum class EInitialEntrySequenceType : uint32
{
	None                                     = 0,
	Sequence                                 = 1,
	Movie                                    = 2,
	EInitialEntrySequenceType_MAX            = 3,
};

// Enum MirMobile.EStageFunctionFlag
// NumValues: 0x0025
enum class EStageFunctionFlag : uint8
{
	NONE                                     = 0,
	GUILD_WAR                                = 1,
	COMBAT_UNIFORM                           = 2,
	NAMETAG_CLASS                            = 4,
	MISSION_QUEST_STAGE                      = 8,
	GUILD_SANCTUM                            = 16,
	DARK_ALTAR                               = 32,
	SUPPRESSION_GROUP                        = 32,
	DIMENSIONGATE_GROUP                      = 64,
	GUILD_DUNGEON_GROUP                      = 128,
	FIELD                                    = 8,
	SINGLE_FIELD                             = 0,
	CUSTOM                                   = 0,
	ELITE_DUNGEON                            = 8,
	ELITE_STAGE                              = 8,
	UNDER_WORLD                              = 12,
	BIDO                                     = 8,
	STRONGPOINT                              = 7,
	OCCUPATION                               = 7,
	SIEGE                                    = 7,
	PLUNDER                                  = 4,
	SABUK_R1R2                               = 4,
	SABUK_R3                                 = 7,
	WORLD_BOSS                               = 0,
	SOLO_INSTANCE_DUNGEON                    = 32,
	PARTY_INSTANCE_DUNGEON                   = 32,
	HELL_INSTANCE_DUNGEON                    = 32,
	MAGIC_SQUEAR                             = 64,
	SECRET_DUNGEON                           = 64,
	BLACK_DRAGON_DUNGEON                     = 64,
	DEATH_VALLEY_DUNGEON                     = 64,
	GUILD_EXPEDITION                         = 128,
	GUILD_BOSSWAVE                           = 128,
	ARENA_PVP                                = 0,
	RelationField                            = 8,
	GUILDTOURNAMENT                          = 7,
	EStageFunctionFlag_MAX                   = 129,
};

// Enum MirMobile.EItemGetWayStageType
// NumValues: 0x0009
enum class EItemGetWayStageType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	MagicSquare                              = 4,
	Gather                                   = 8,
	Mine                                     = 16,
	CombatPower                              = 32,
	NormalAndCombatPower                     = 33,
	MineAndCombatPower                       = 48,
	EItemGetWayStageType_MAX                 = 49,
};

// Enum MirMobile.EStageType
// NumValues: 0x0022
enum class EStageType : uint8
{
	None                                     = 0,
	Field                                    = 1,
	SingleField                              = 2,
	Fight                                    = 6,
	Custom                                   = 10,
	EliteDungeon                             = 11,
	Labyrinth                                = 12,
	UnderWorld                               = 13,
	Bido                                     = 14,
	RelationQuestField                       = 15,
	StrongPoint                              = 20,
	Siege                                    = 21,
	Sabuk_R1R2                               = 22,
	Sabuk_R3                                 = 23,
	Plunder                                  = 31,
	GuildTournament                          = 40,
	WorldBoss                                = 51,
	GuildExpedition                          = 52,
	GuildBossWave                            = 53,
	Boss_Indun                               = 101,
	Party_Indun                              = 102,
	Magic_Square                             = 103,
	SecretDungeon                            = 104,
	ArenaPvP                                 = 105,
	Magic_square_StartMap                    = 106,
	BlackDragon                              = 110,
	HellDungeon                              = 120,
	DeadValley                               = 130,
	Salon                                    = 200,
	CrackDimension                           = 248,
	Conquer                                  = 249,
	ServerVisit                              = 250,
	DungeonScript                            = 251,
	EStageType_MAX                           = 252,
};

// Enum MirMobile.EToolTipLocation
// NumValues: 0x000A
enum class EToolTipLocation : uint8
{
	Auto                                     = 0,
	LeftTop                                  = 1,
	LeftBottom                               = 2,
	RightTop                                 = 3,
	RightBottom                              = 4,
	LeftCenter                               = 5,
	RightCenter                              = 6,
	CenterTop                                = 7,
	CenterBottom                             = 8,
	EToolTipLocation_MAX                     = 9,
};

// Enum MirMobile.EVerticalItemGrade
// NumValues: 0x0008
enum class EVerticalItemGrade : uint8
{
	None                                     = 0,
	AutoMake                                 = 11,
	AutoMake_No_Normal                       = 12,
	AutoMake_No_UnderRare                    = 13,
	AutoMake_No_UnderEpic                    = 14,
	AutoMake_No_UnderLegend                  = 15,
	AutoMake_LegendToRare                    = 16,
	EVerticalItemGrade_MAX                   = 17,
};

// Enum MirMobile.EUIGuideType
// NumValues: 0x0003
enum class EUIGuideType : uint8
{
	COMMENT                                  = 0,
	MINITALK                                 = 1,
	EUIGuideType_MAX                         = 2,
};

// Enum MirMobile.ETutorialProgressType
// NumValues: 0x0004
enum class ETutorialProgressType : uint8
{
	PAGE                                     = 0,
	SEQUENCEPLAY                             = 1,
	EFFECTWIDGET                             = 2,
	ETutorialProgressType_MAX                = 3,
};

// Enum MirMobile.EUserEventRewardType
// NumValues: 0x0004
enum class EUserEventRewardType : uint8
{
	RewardType_None                          = 0,
	RewardType_Money                         = 1,
	RewardType_Item                          = 2,
	RewardType_MAX                           = 3,
};

// Enum MirMobile.EGachaResultType
// NumValues: 0x0012
enum class EGachaResultType : uint8
{
	NONE                                     = 255,
	PET                                      = 0,
	SKILLBOOK                                = 1,
	DRAGON_HEART                             = 2,
	DRAGON_SCALE                             = 3,
	DRAGON_CLAW                              = 4,
	DRAGON_MATERIAL                          = 5,
	FIXED_PET                                = 6,
	DRAGON_TOENAIL                           = 7,
	DRAGON_EYE                               = 8,
	MAGIC_STONE                              = 9,
	SPIRIT_TREASUR                           = 10,
	CODEX_BADGE                              = 11,
	MYSTICALPIECE                            = 12,
	SPECIAL_PAT                              = 13,
	DRAGON_BEAD                              = 14,
	RANDOM_BOX                               = 15,
	EGachaResultType_MAX                     = 256,
};

// Enum MirMobile.EGachaBoxType
// NumValues: 0x0006
enum class EGachaBoxType : uint8
{
	NONE                                     = 0,
	PET                                      = 1,
	SKILLBOOK                                = 2,
	ITEM                                     = 3,
	ITEM_2                                   = 4,
	EGachaBoxType_MAX                        = 5,
};

// Enum MirMobile.EGachaType
// NumValues: 0x0006
enum class EGachaType : uint8
{
	NONE                                     = 0,
	PET                                      = 1,
	SKILLBOOK                                = 2,
	ITEM                                     = 3,
	ITEM_2                                   = 4,
	EGachaType_MAX                           = 5,
};

// Enum MirMobile.ESabukOccupationIconType
// NumValues: 0x0008
enum class ESabukOccupationIconType : uint8
{
	CAPTURE                                  = 0,
	OUTPOST                                  = 1,
	CAMP                                     = 2,
	BUFF_MONSTER_WEST                        = 3,
	BUFF_MONSTER_NORTH                       = 4,
	BUFF_MONSTER_EAST                        = 5,
	BUFF_MONSTER_SOUTH                       = 6,
	MAX                                      = 7,
};

// Enum MirMobile.EHolyStuffAnimType
// NumValues: 0x0005
enum class EHolyStuffAnimType : uint8
{
	UNOPEN                                   = 0,
	OPENING                                  = 1,
	IDLE                                     = 2,
	UPGRADE                                  = 3,
	EHolyStuffAnimType_MAX                   = 4,
};

// Enum MirMobile.EHuaweiPushActionCode
// NumValues: 0x0008
enum class EHuaweiPushActionCode : uint32
{
	INIT_FAILED                              = 99,
	UN_SUBSCRIBE_FAILED                      = 100,
	SUBSCRIBE_FAILED                         = 101,
	DELETE_TOKEN_FAILED                      = 102,
	GET_TOKEN_FAILED                         = 103,
	ON_MESSAGE_RECEIVED                      = 104,
	UNKNOWN_ERROR                            = 100000,
	EHuaweiPushActionCode_MAX                = 100001,
};

// Enum MirMobile.EGalaxyStoreErrorCode
// NumValues: 0x0012
enum class EGalaxyStoreErrorCode : uint64
{
	IAP_ERROR_NONE                           = 0,
	IAP_PAYMENT_IS_CANCELED                  = 1,
	IAP_ERROR_INITIALIZATION                 = 18446744073709550616,
	IAP_ERROR_NEED_APP_UPGRADE               = 18446744073709550615,
	IAP_ERROR_COMMON                         = 18446744073709550614,
	IAP_ERROR_ALREADY_PURCHASED              = 18446744073709550613,
	IAP_ERROR_WHILE_RUNNING                  = 18446744073709550612,
	IAP_ERROR_PRODUCT_DOES_NOT_EXIST         = 18446744073709550611,
	IAP_ERROR_CONFIRM_INBOX                  = 18446744073709550610,
	IAP_ERROR_ITEM_GROUP_DOES_NOT_EXIST      = 18446744073709550609,
	IAP_ERROR_NETWORK_NOT_AVAILABLE          = 18446744073709550608,
	IAP_ERROR_IOEXCEPTION_ERROR              = 18446744073709550607,
	IAP_ERROR_SOCKET_TIMEOUT                 = 18446744073709550606,
	IAP_ERROR_CONNECT_TIMEOUT                = 18446744073709550605,
	IAP_ERROR_NOT_EXIST_LOCAL_PRICE          = 18446744073709550604,
	IAP_ERROR_NOT_AVAILABLE_SHOP             = 18446744073709550603,
	IAP_ERROR_NEED_SA_LOGIN                  = 18446744073709550602,
	IAP_MAX                                  = 2,
};

// Enum MirMobile.EHuaweiStoreErrorCode
// NumValues: 0x0013
enum class EHuaweiStoreErrorCode : uint64
{
	IAP_ERROR_NONE                           = 0,
	ORDER_STATE_FAILED                       = 18446744073709551615,
	ORDER_STATE_DEFAULT_CODE                 = 1,
	ORDER_STATE_CANCEL                       = 60000,
	ORDER_STATE_PARAM_ERROR                  = 60001,
	ORDER_STATE_IAP_NOT_ACTIVATED            = 60002,
	ORDER_STATE_PRODUCT_INVALID              = 60003,
	ORDER_STATE_CALLS_FREQUENT               = 60004,
	ORDER_STATE_NET_ERROR                    = 60005,
	ORDER_STATE_PMS_TYPE_NOT_MATCH           = 60006,
	ORDER_STATE_PRODUCT_COUNTRY_NOT_SUPPORTED = 60007,
	ORDER_HWID_NOT_LOGIN                     = 60050,
	ORDER_PRODUCT_OWNED                      = 60051,
	ORDER_PRODUCT_NOT_OWNED                  = 60052,
	ORDER_PRODUCT_CONSUMED                   = 60053,
	ORDER_ACCOUNT_AREA_NOT_SUPPORTED         = 60054,
	ORDER_HIGH_RISK_OPERATIONS               = 60056,
	ORDER_STATE_PENDING                      = 60057,
	EHuaweiStoreErrorCode_MAX                = 60058,
};

// Enum MirMobile.EOneStoreResponseCode
// NumValues: 0x0012
enum class EOneStoreResponseCode : uint16
{
	IAP_SUCCESS                              = 0,
	IAP_ERROR_USER_CANCELED                  = 1,
	IAP_ERROR_SERVICE_UNAVAILABLE            = 2,
	IAP_ERROR_BILLING_UNAVAILABLE            = 3,
	IAP_ERROR_ITEM_UNAVAILABLE               = 4,
	IAP_ERROR_DEVELOPER_ERROR                = 5,
	IAP_ERROR_ERROR                          = 6,
	IAP_ERROR_ITEM_ALREADY_OWNED             = 7,
	IAP_ERROR_ITEM_NOT_OWNED                 = 8,
	IAP_ERROR_FAIL                           = 9,
	IAP_ERROR_NEED_LOGIN                     = 10,
	IAP_ERROR_NEED_UPDATE                    = 11,
	IAP_ERROR_SECURITY_ERROR                 = 12,
	IAP_ERROR_DATA_PARSING                   = 1001,
	IAP_ERROR_SIGNATURE_VERIFICATION         = 1002,
	IAP_ERROR_ILLEGAL_ARGUMENT               = 1003,
	IAP_ERROR_UNDEFINED_CODE                 = 1004,
	IAP_MAX                                  = 1005,
};

// Enum MirMobile.EWebPageMode
// NumValues: 0x0003
enum class EWebPageMode : uint8
{
	DEFAULT                                  = 0,
	MODAL                                    = 1,
	EWebPageMode_MAX                         = 2,
};

// Enum MirMobile.EIAPLogLevel
// NumValues: 0x0006
enum class EIAPLogLevel : uint8
{
	None                                     = 0,
	Trace                                    = 2,
	Information                              = 4,
	Debug                                    = 8,
	ALL                                      = 14,
	EIAPLogLevel_MAX                         = 15,
};

// Enum MirMobile.EWSPaymentStep
// NumValues: 0x0006
enum class EWSPaymentStep : uint64
{
	NONE                                     = 0,
	STORE_PURCHASE_ERROR                     = 60,
	REQUEST_PAY_VERIFY                       = 101,
	RESPONSE_PAY_VERIFY                      = 201,
	UNKNOWN_RECEIPT                          = 18446744073709551615,
	EWSPaymentStep_MAX                       = 202,
};

// Enum MirMobile.EIAPPurchaseState
// NumValues: 0x001A
enum class EIAPPurchaseState : uint8
{
	NONE                                     = 0,
	START_PURCHASE_PRODUCT                   = 1,
	CHECK_OWNED_PRODUCT                      = 2,
	RETRY_PURCHASE_PRODUCT                   = 3,
	QUERY_RECEIPT                            = 4,
	REQUEST_PRODUCT_DETAILS                  = 10,
	RESPONSE_PRODUCT_DETAILS                 = 11,
	REQUEST_CASH_ITEM_START                  = 20,
	RESPONSE_CASH_ITEM_START                 = 21,
	REQUEST_CASH_ITEM_START_HYDRA            = 22,
	RESPONSE_CASH_ITEM_START_HYDRA           = 23,
	REQUEST_CASH_ITEM_START_DRAGON_STEEL     = 24,
	RESPONSE_CASH_ITEM_START_DRAGON_STEEL    = 25,
	RESPONSE_CASH_ITEM_START_WEMIXDOLLAR     = 26,
	REQUEST_PURCHASE_PRODUCT                 = 30,
	RESPONSE_PURCHASE_PRODUCT                = 31,
	REQUEST_CASH_ITEM_VERIFY                 = 40,
	RESPONSE_CASH_ITEM_VERIFY                = 41,
	REQUEST_CONSUME_PRODUCT                  = 50,
	RESPONSE_CONSUME_PRODUCT                 = 51,
	REQUEST_CASH_ITEM_PRE_VERIFY             = 60,
	RESPONSE_CASH_ITEM_PRE_VERIFY            = 61,
	REQUEST_CASH_ITEM_PROMO_VERIFY           = 70,
	RESPONSE_CASH_ITEM_PROMO_VERIFY          = 71,
	CONSUME_RECEIPT                          = 50,
	EIAPPurchaseState_MAX                    = 72,
};

// Enum MirMobile.EQueryReceiptEntryCode
// NumValues: 0x0009
enum class EQueryReceiptEntryCode : uint8
{
	INITED                                   = 0,
	LOAD_STREAM_LEVEL_END_PROCESS            = 1,
	UNEXPECTED_PURCHASE_RECEIPT              = 2,
	UPDATE_UNEXPECTED_PURCHASE_RECEIPT       = 3,
	RECONNECTED_GAME_SERVER                  = 4,
	APP_RESUMED                              = 5,
	REFUNDING_USER                           = 6,
	PURCHASE_FAILED                          = 7,
	EQueryReceiptEntryCode_MAX               = 8,
};

// Enum MirMobile.ECompleteIAPEntryCode
// NumValues: 0x001A
enum class ECompleteIAPEntryCode : uint8
{
	CHECK_OWNED_PRODUCT                      = 0,
	USER_REQUEST_PURCHASE_PRODUCT            = 1,
	CHASH_ITEM_START_FAIL                    = 2,
	REQUEST_PRODUCT_DETAILS                  = 3,
	REQUEST_PURCHASE_PRODUCT                 = 4,
	REQUEST_PURCHASE_PRODUCT_CHECKOUT        = 5,
	REQUEST_CASH_ITEM_VERIFY                 = 6,
	RESPONSE_CASH_ITEM_VERIFY                = 7,
	REQUEST_CASH_ITEM_PRE_VERIFY             = 8,
	RESPONSE_CASH_ITEM_PRE_VERIFY            = 9,
	REQUEST_CASH_ITEM_PROMO_VERIFY           = 10,
	RESPONSE_CASH_ITEM_PROMO_VERIFY          = 11,
	REQUEST_STORE_LOGIN                      = 12,
	REQUEST_STORE_UPDATE                     = 13,
	UNEXPECTED_PURCHASE_RECEIPT_FAIL         = 14,
	UNEXPECTED_PURCHASE_RECEIPT_FAIL_TIMEOUT = 15,
	RESPONSE_PAY_REFUND                      = 16,
	RESPONSE_WEMIX_SIGNING_USER_CANCELED     = 17,
	RESPONSE_WEMIX_SIGNING_FAIL              = 18,
	RESPONSE_CHECK_HYDRA_APPROVE_FAIL        = 19,
	RESPONSE_HYDRA_APPROVE_FAIL              = 20,
	RESPONSE_CHECK_WEMIXDOLLAR_APPROVE_FAIL  = 21,
	RESPONSE_WEMIXDOLLAR_APPROVE_FAIL        = 22,
	RESPONSE_CHECK_PLAYTOKEN_APPROVE_FAIL    = 23,
	RESPONSE_PLAYTOKEN_APPROVE_FAIL          = 24,
	ECompleteIAPEntryCode_MAX                = 25,
};

// Enum MirMobile.ECheckOwnedProductCode
// NumValues: 0x0007
enum class ECheckOwnedProductCode : uint64
{
	NONE                                     = 18446744073709551615,
	EMPTY_RECEIPT                            = 0,
	EMPTY_PAY_ID                             = 1,
	REQUEST_PURCHASE_VERIFY                  = 2,
	REQUEST_PURCHASE_VERIFY_RECEIPT_DUPLICATED = 3,
	INVALID_PURCHASE                         = 4,
	ECheckOwnedProductCode_MAX               = 5,
};

// Enum MirMobile.EMiniGameSoundType
// NumValues: 0x000C
enum class EMiniGameSoundType : uint8
{
	Bgm_Wait                                 = 0,
	Bgm_Battle                               = 1,
	Player_Atk1                              = 2,
	Player_Atk2                              = 3,
	Player_Atk3                              = 4,
	Player_Avoid                             = 5,
	Player_Hit                               = 6,
	Monster_Atk1                             = 7,
	Monster_Atk2                             = 8,
	Monster_Hit                              = 9,
	System_NextWave                          = 10,
	EMiniGameSoundType_MAX                   = 11,
};

// Enum MirMobile.EMiniGameMonsterGrade
// NumValues: 0x0004
enum class EMiniGameMonsterGrade : uint8
{
	Normal                                   = 0,
	Advenced                                 = 1,
	Boss                                     = 2,
	EMiniGameMonsterGrade_MAX                = 3,
};

// Enum MirMobile.EMiniGameMonsterMoveDirection
// NumValues: 0x0004
enum class EMiniGameMonsterMoveDirection : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	EMiniGameMonsterMoveDirection_MAX        = 3,
};

// Enum MirMobile.EMiniGameMonsterState
// NumValues: 0x0008
enum class EMiniGameMonsterState : uint8
{
	Idle                                     = 0,
	Run                                      = 1,
	Atk1                                     = 2,
	Atk2                                     = 3,
	Atk3                                     = 4,
	Hit                                      = 5,
	Die                                      = 6,
	EMiniGameMonsterState_MAX                = 7,
};

// Enum MirMobile.EMiniGamePlayerMoveDirection
// NumValues: 0x0004
enum class EMiniGamePlayerMoveDirection : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	EMiniGamePlayerMoveDirection_MAX         = 3,
};

// Enum MirMobile.EMiniGamePlayerState
// NumValues: 0x0009
enum class EMiniGamePlayerState : uint8
{
	Idle                                     = 0,
	Run                                      = 1,
	Atk1                                     = 2,
	Atk2                                     = 3,
	Atk3                                     = 4,
	Hit                                      = 5,
	Avoid                                    = 6,
	Stu                                      = 7,
	EMiniGamePlayerState_MAX                 = 8,
};

// Enum MirMobile.EStyle_MirButton
// NumValues: 0x0003
enum class EStyle_MirButton : uint8
{
	CustomStyle                              = 0,
	EmptyStyle                               = 1,
	EStyle_MAX                               = 2,
};

// Enum MirMobile.EStyle_MirListView
// NumValues: 0x0003
enum class EStyle_MirListView : uint8
{
	CustomStyle                              = 0,
	EmptyStyle                               = 1,
	EStyle_MAX                               = 2,
};

// Enum MirMobile.EPakSearchOrder
// NumValues: 0x0003
enum class EPakSearchOrder : uint8
{
	DlcPakFirst                              = 0,
	AppPakFirst                              = 1,
	EPakSearchOrder_MAX                      = 2,
};

// Enum MirMobile.EStyle_MirScrollBox
// NumValues: 0x0003
enum class EStyle_MirScrollBox : uint8
{
	CustomStyle                              = 0,
	EmptyStyle                               = 1,
	EStyle_MAX                               = 2,
};

// Enum MirMobile.EMirSoundClass
// NumValues: 0x000A
enum class EMirSoundClass : uint8
{
	MASTER                                   = 0,
	BGM                                      = 1,
	AMBIENT                                  = 2,
	SFX                                      = 3,
	UI                                       = 4,
	VOICE                                    = 5,
	VOICE_DIALOGUE                           = 6,
	VOICE_MALE                               = 7,
	VOICE_FEMALE                             = 8,
	MAX                                      = 9,
};

// Enum MirMobile.EMirSoundDataType
// NumValues: 0x0006
enum class EMirSoundDataType : uint8
{
	VEHICLE_OFF                              = 0,
	GET_ENERGY                               = 1,
	PC_REVIVAL                               = 2,
	BUTTON_CLICK_COMMON                      = 3,
	DROP_COIN                                = 4,
	EMirSoundDataType_MAX                    = 5,
};

// Enum MirMobile.EStyle_MirTextBlock
// NumValues: 0x0004
enum class EStyle_MirTextBlock : uint8
{
	CustomStyle                              = 0,
	DefaultStyle                             = 1,
	DefaultStyle_Shadow                      = 2,
	EStyle_MAX                               = 3,
};

// Enum MirMobile.EStyle_MirTileView
// NumValues: 0x0003
enum class EStyle_MirTileView : uint8
{
	CustomStyle                              = 0,
	EmptyStyle                               = 1,
	EStyle_MAX                               = 2,
};

// Enum MirMobile.EAlignmentType
// NumValues: 0x000C
enum class EAlignmentType : uint8
{
	None                                     = 0,
	Fill                                     = 1,
	Center                                   = 2,
	Left                                     = 3,
	Right                                    = 4,
	CenterTop                                = 5,
	LeftTop                                  = 6,
	RightTop                                 = 7,
	CenterBottom                             = 8,
	LeftBottom                               = 9,
	RightBottom                              = 10,
	EAlignmentType_MAX                       = 11,
};

// Enum MirMobile.ECommonBtnType
// NumValues: 0x0011
enum class ECommonBtnType : uint8
{
	None                                     = 0,
	MAIN_PRACTICE_1                          = 15,
	MAIN_PRACTICE_2                          = 16,
	SUB_POSITIVE                             = 20,
	SUB_NEGATIVE                             = 21,
	SUB_PRACTICE_1                           = 22,
	SUB_PRACTICE_2                           = 23,
	SUB_UNSEAL                               = 24,
	OTHER_RECT_1                             = 25,
	OTHER_RECT_2                             = 26,
	OTHER_CIRCLE_1                           = 30,
	OTHER_CIRCLE_2                           = 31,
	OTHER_ROUND_1                            = 35,
	PARTY_1                                  = 36,
	SUB_POSITIVE_GLOW                        = 100,
	SUB_POSITIVE_GOLD                        = 101,
	ECommonBtnType_MAX                       = 102,
};

// Enum MirMobile.EStyle_MirWrapScrollBox
// NumValues: 0x0003
enum class EStyle_MirWrapScrollBox : uint8
{
	CustomStyle                              = 0,
	EmptyStyle                               = 1,
	EStyle_MAX                               = 2,
};

// Enum MirMobile.EADClientError
// NumValues: 0x0005
enum class EADClientError : uint16
{
	NONE                                     = 0,
	MAKE_REWARDED_AD_FAILED                  = 900,
	LOADED_AD_OBJECT_NULL                    = 901,
	AD_VERIFY_RETRY_EMPTY_CLIENT_GUID        = 902,
	EADClientError_MAX                       = 903,
};

// Enum MirMobile.EADIOSError
// NumValues: 0x000B
enum class EADIOSError : uint8
{
	INVALID_REQUEST                          = 0,
	NO_FILL                                  = 1,
	NETWORK_ERROR                            = 2,
	SERVER_ERROR                             = 3,
	DEVICE_VERSION_LOW                       = 4,
	TIMEOUT                                  = 5,
	INTERSTITIAL_ALREADY_USED                = 6,
	NO_FILL_MEDIATION                        = 9,
	INTERNAL_ERROR                           = 11,
	REWARDED_ALREADY_USED                    = 14,
	EADIOSError_MAX                          = 15,
};

// Enum MirMobile.EADAndroidError
// NumValues: 0x0006
enum class EADAndroidError : uint8
{
	INTERNAL_ERROR                           = 0,
	INVALID_REQUEST                          = 1,
	NETWORK_ERROR                            = 2,
	NO_FILL                                  = 3,
	NO_FILL_MEDIATION                        = 9,
	EADAndroidError_MAX                      = 10,
};

// Enum MirMobile.E_FACTION_TYPE
// NumValues: 0x0004
enum class E_FACTION_TYPE : uint8
{
	Neutral                                  = 0,
	Friendly                                 = 1,
	Hostile                                  = 2,
	E_FACTION_MAX                            = 3,
};

// Enum MirMobile.E_TARGET_TYPE
// NumValues: 0x0005
enum class E_TARGET_TYPE : uint8
{
	AnyOne                                   = 0,
	Monter                                   = 1,
	User                                     = 2,
	Npc                                      = 3,
	E_TARGET_MAX                             = 4,
};

// Enum MirMobile.E_NOTICE_TARGET
// NumValues: 0x0005
enum class E_NOTICE_TARGET : uint8
{
	None                                     = 0,
	AllUser                                  = 1,
	TargetOnly                               = 2,
	Party                                    = 3,
	E_NOTICE_MAX                             = 4,
};

// Enum MirMobile.E_CARDINALPOINTS
// NumValues: 0x0006
enum class E_CARDINALPOINTS : uint8
{
	None                                     = 0,
	RightSide                                = 1,
	LeftSide                                 = 2,
	RearSide                                 = 3,
	FrontSide                                = 4,
	E_MAX                                    = 5,
};

// Enum MirMobile.E_ACTION_STATE
// NumValues: 0x000C
enum class E_ACTION_STATE : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Chase                                    = 2,
	Attack                                   = 3,
	Run                                      = 4,
	Move                                     = 5,
	Stop                                     = 6,
	Roam                                     = 7,
	Heal                                     = 8,
	Warp                                     = 9,
	RunAway                                  = 10,
	E_ACTION_MAX                             = 11,
};

// Enum MirMobile.EClearSkillReserveReason
// NumValues: 0x0009
enum class EClearSkillReserveReason : uint8
{
	ChangeTarget_Character                   = 0,
	ChangeTarget_Object                      = 1,
	ChangeAutoState                          = 2,
	NormalAttackEnd                          = 3,
	SkillAttackEnd                           = 4,
	ManualInput                              = 5,
	UpdateSkillState                         = 6,
	Unknown                                  = 7,
	EClearSkillReserveReason_MAX             = 8,
};

// Enum MirMobile.ECounterAttackState
// NumValues: 0x0004
enum class ECounterAttackState : uint8
{
	Disable                                  = 0,
	Enable_NoSkill                           = 1,
	Enable_Skill                             = 2,
	ECounterAttackState_MAX                  = 3,
};

// Enum MirMobile.ESkillState
// NumValues: 0x0004
enum class ESkillState : uint8
{
	Normal                                   = 0,
	EnableSkill                              = 1,
	EnableSmite                              = 2,
	ESkillState_MAX                          = 3,
};

// Enum MirMobile.EConditionType
// NumValues: 0x000D
enum class EConditionType : uint8
{
	None                                     = 0,
	Less_HP                                  = 1,
	More_HP                                  = 2,
	Less_MP                                  = 3,
	More_MP                                  = 4,
	Less_Distance                            = 5,
	More_Distance                            = 6,
	NoEnemyWithin                            = 7,
	Buff_Exists                              = 8,
	Buff_NotExists                           = 9,
	DeadPlayerInParty                        = 10,
	Less_HPInParty                           = 11,
	EConditionType_MAX                       = 12,
};

// Enum MirMobile.EConditionTarget
// NumValues: 0x0003
enum class EConditionTarget : uint8
{
	Me                                       = 0,
	Target                                   = 1,
	EConditionTarget_MAX                     = 2,
};

// Enum MirMobile.EHUDType
// NumValues: 0x0003
enum class EHUDType : uint8
{
	DEFAULT                                  = 0,
	DEAD_VALLEY                              = 1,
	EHUDType_MAX                             = 2,
};

// Enum MirMobile.EMagicOrbUpgradeActivePanelType
// NumValues: 0x0003
enum class EMagicOrbUpgradeActivePanelType : uint8
{
	EquipTarget                              = 0,
	EmptyTarget                              = 1,
	EMagicOrbUpgradeActivePanelType_MAX      = 2,
};

// Enum MirMobile.EReason_FixedSync
// NumValues: 0x0018
enum class EReason_FixedSync : uint8
{
	None                                     = 0,
	SyncStateError                           = 1,
	Fixed_Idle                               = 2,
	Fixed_Arrive                             = 3,
	CancelOperating                          = 4,
	ExecuteAttack                            = 5,
	ExcuteScript_Dash                        = 6,
	ExcuteScript_Run                         = 7,
	ExcuteScript_Walk                        = 8,
	HealTarget                               = 9,
	RunAway                                  = 10,
	Patrol                                   = 11,
	WarpToLocation                           = 12,
	WarpToChar                               = 13,
	MoveToDest                               = 14,
	TraceDirTarget                           = 15,
	AttackFSM                                = 16,
	NetPC_Move                               = 17,
	SecondLineTrace                          = 18,
	PushPull                                 = 19,
	Hit                                      = 20,
	StartRun                                 = 21,
	EndFSM_Idle                              = 22,
	EReason_MAX                              = 23,
};

// Enum MirMobile.CHAT_CHANNEL_TYPE
// NumValues: 0x0009
enum class ECHAT_CHANNEL_TYPE : uint32
{
	NONE                                     = 0,
	WORLD                                    = 2,
	GUILD                                    = 4,
	PARTY                                    = 8,
	SYSTEM                                   = 16,
	SQUAD                                    = 32,
	WHISPER                                  = 64,
	ALLIANCE                                 = 128,
	CHAT_CHANNEL_MAX                         = 129,
};

// Enum MirMobile.ECheatSuccessOrFail
// NumValues: 0x0003
enum class ECheatSuccessOrFail : uint8
{
	SUCCESS                                  = 0,
	FAIL                                     = 1,
	ECheatSuccessOrFail_MAX                  = 2,
};

// Enum MirMobile.ESwitchBox
// NumValues: 0x0003
enum class ESwitchBox : uint8
{
	SWITCH_OFF                               = 0,
	SWITCH_ON                                = 1,
	SWITCH_MAX                               = 2,
};

// Enum MirMobile.ECommonBtnDesignType
// NumValues: 0x0007
enum class ECommonBtnDesignType : uint8
{
	NONE                                     = 0,
	MAIN                                     = 1,
	SUB                                      = 2,
	RECT                                     = 3,
	CIRCLE                                   = 4,
	ROUND                                    = 5,
	ECommonBtnDesignType_MAX                 = 6,
};

// Enum MirMobile.ECommonBtnStateType
// NumValues: 0x0003
enum class ECommonBtnStateType : uint8
{
	Able                                     = 0,
	Unable                                   = 1,
	ECommonBtnStateType_MAX                  = 2,
};

// Enum MirMobile.ECountState
// NumValues: 0x0005
enum class ECountState : uint8
{
	Count                                    = 0,
	Start                                    = 1,
	Name                                     = 2,
	End                                      = 3,
	ECountState_MAX                          = 4,
};

// Enum MirMobile.EProgressTextType
// NumValues: 0x0004
enum class EProgressTextType : uint8
{
	Empty                                    = 0,
	Slash                                    = 1,
	Percent                                  = 2,
	EProgressTextType_MAX                    = 3,
};

// Enum MirMobile.EProgressGuageState
// NumValues: 0x0004
enum class EProgressGuageState : uint8
{
	Same                                     = 0,
	Increase                                 = 1,
	Decrease                                 = 2,
	EProgressGuageState_MAX                  = 3,
};

// Enum MirMobile.EContentsGetItemMsgType
// NumValues: 0x0008
enum class EContentsGetItemMsgType : uint8
{
	Single_Item                              = 0,
	Single_Cost                              = 1,
	Multiple                                 = 2,
	Special                                  = 3,
	MakeSuccess_Item                         = 4,
	MakeSuccessBonus_Item                    = 5,
	MakeFail_Item                            = 6,
	EContentsGetItemMsgType_MAX              = 7,
};

// Enum MirMobile.ESLIDEBAR_TYPE
// NumValues: 0x0004
enum class ESLIDEBAR_TYPE : uint8
{
	NONE                                     = 0,
	ESLIDEBAR_CH1                            = 1,
	ESLIDEBAR_CH2                            = 2,
	ESLIDEBAR_MAX                            = 3,
};

// Enum MirMobile.EEmperorGuardPosition
// NumValues: 0x0004
enum class EEmperorGuardPosition : uint32
{
	Left                                     = 0,
	Right                                    = 1,
	Center                                   = 2,
	EEmperorGuardPosition_MAX                = 3,
};

// Enum MirMobile.EEmperorGuardIdleState
// NumValues: 0x0003
enum class EEmperorGuardIdleState : uint8
{
	Idle1                                    = 0,
	Idle2                                    = 1,
	EEmperorGuardIdleState_MAX               = 2,
};

// Enum MirMobile.ESELECTE_STATE
// NumValues: 0x0004
enum class ESELECTE_STATE : uint8
{
	NONE                                     = 0,
	SELECTTING                               = 1,
	SELECTED                                 = 2,
	ESELECTE_MAX                             = 3,
};

// Enum MirMobile.ESlotSmeltingLevelType
// NumValues: 0x0004
enum class ESlotSmeltingLevelType : uint8
{
	NONE                                     = 0,
	LEFT                                     = 1,
	RIGHT                                    = 2,
	ESlotSmeltingLevelType_MAX               = 3,
};

// Enum MirMobile.EFirstTutorialType
// NumValues: 0x0007
enum class EFirstTutorialType : uint8
{
	NONE                                     = 0,
	VirtualJoyStick                          = 1,
	QuestTracker                             = 2,
	NpcQuestMark                             = 3,
	HudHideQuest                             = 4,
	Battle                                   = 5,
	EFirstTutorialType_MAX                   = 6,
};

// Enum MirMobile.EFrameType
// NumValues: 0x0003
enum class EFrameType : uint8
{
	Basic                                    = 0,
	SkillExtend                              = 1,
	EFrameType_MAX                           = 2,
};

// Enum MirMobile.ESearhCircleType
// NumValues: 0x0003
enum class ESearhCircleType : uint8
{
	Self                                     = 0,
	Target                                   = 1,
	ESearhCircleType_MAX                     = 2,
};

// Enum MirMobile.ECheckPhaseImpactReason
// NumValues: 0x0005
enum class ECheckPhaseImpactReason : uint8
{
	BasicEndAttackAnim                       = 0,
	BasicNextAttack                          = 1,
	ExtendEndAttackAnim                      = 2,
	PCUpdateNextSkill                        = 3,
	ECheckPhaseImpactReason_MAX              = 4,
};

// Enum MirMobile.EGachaVisualSettingsType
// NumValues: 0x0004
enum class EGachaVisualSettingsType : uint8
{
	Gacha01                                  = 0,
	Gacha02                                  = 1,
	Gacha03                                  = 2,
	EGachaVisualSettingsType_MAX             = 3,
};

// Enum MirMobile.EGachaSkipButtonType
// NumValues: 0x0004
enum class EGachaSkipButtonType : uint8
{
	None                                     = 0,
	ShowAll                                  = 1,
	ResultImmediately                        = 2,
	EGachaSkipButtonType_MAX                 = 3,
};

// Enum MirMobile.EGachaViewType
// NumValues: 0x0005
enum class EGachaViewType : uint8
{
	None                                     = 0,
	Tombstone                                = 1,
	Full                                     = 2,
	Interaction                              = 3,
	EGachaViewType_MAX                       = 4,
};

// Enum MirMobile.EPrerequisiteLoadState
// NumValues: 0x0005
enum class EPrerequisiteLoadState : uint8
{
	START                                    = 0,
	ALL_TABLE                                = 0,
	ASYNC_PRELOAD_TABLE                      = 1,
	PREREQUISITE_ASSET                       = 2,
	MAX                                      = 3,
};

// Enum MirMobile.EGameOptionSliderTitleLocation
// NumValues: 0x0004
enum class EGameOptionSliderTitleLocation : uint8
{
	None                                     = 0,
	Top                                      = 1,
	Left                                     = 2,
	EGameOptionSliderTitleLocation_MAX       = 3,
};

// Enum MirMobile.EGameOptionSliderType
// NumValues: 0x0003
enum class EGameOptionSliderType : uint8
{
	Default                                  = 0,
	Sound                                    = 1,
	EGameOptionSliderType_MAX                = 2,
};

// Enum MirMobile.EGuildemberSlotBits
// NumValues: 0x0004
enum class EGuildemberSlotBits : uint8
{
	Slot1                                    = 0,
	Slot2                                    = 1,
	Master                                   = 2,
	EGuildemberSlotBits_MAX                  = 3,
};

// Enum MirMobile.EGateFactionType
// NumValues: 0x0004
enum class EGateFactionType : uint32
{
	None                                     = 0,
	DefenseGate                              = 1,
	OffenseGate                              = 2,
	EGateFactionType_MAX                     = 3,
};

// Enum MirMobile.CHAT_AREA_FLAG
// NumValues: 0x000C
enum class ECHAT_AREA_FLAG : uint8
{
	NONE                                     = 0,
	WORLD                                    = 2,
	GUILD                                    = 4,
	PARTY                                    = 8,
	SYSTEM                                   = 16,
	SQUAD                                    = 32,
	WHISPER                                  = 32,
	ALLIANCE                                 = 64,
	DEFAULT_MENU                             = 110,
	MACRO_MENU                               = 110,
	VOICE_CHAT_MENU                          = 44,
	CHAT_AREA_MAX                            = 111,
};

// Enum MirMobile.EChatIndicatorType
// NumValues: 0x0003
enum class EChatIndicatorType : uint8
{
	DEFAULT                                  = 0,
	COUNT                                    = 1,
	EChatIndicatorType_MAX                   = 2,
};

// Enum MirMobile.BTNACTION_INDEX
// NumValues: 0x0004
enum class EBTNACTION_INDEX : uint8
{
	BUTTON_DISABLE                           = 0,
	BUTTON_ENABLE                            = 1,
	MAX_INDEX                                = 2,
	BTNACTION_MAX                            = 3,
};

// Enum MirMobile.ELeftTabMenuSlotType
// NumValues: 0x0003
enum class ELeftTabMenuSlotType : uint8
{
	OpenInfo                                 = 0,
	OpenPartyList                            = 1,
	ELeftTabMenuSlotType_MAX                 = 2,
};

// Enum MirMobile.ETargetGaugeState
// NumValues: 0x0004
enum class ETargetGaugeState : uint8
{
	Same                                     = 0,
	Increase                                 = 1,
	Decrease                                 = 2,
	ETargetGaugeState_MAX                    = 3,
};

// Enum MirMobile.ERefundState
// NumValues: 0x0003
enum class ERefundState : uint8
{
	REFUNDED                                 = 1,
	REPAYMENT_COMPLETED                      = 2,
	ERefundState_MAX                         = 3,
};

// Enum MirMobile.EIAPProductType
// NumValues: 0x0004
enum class EIAPProductType : uint8
{
	SINGLE                                   = 1,
	MULTIPLE                                 = 2,
	DRAGON_STEEL                             = 3,
	EIAPProductType_MAX                      = 4,
};

// Enum MirMobile.EIAPType
// NumValues: 0x0005
enum class EIAPType : uint8
{
	NONE                                     = 0,
	DEFAULT                                  = 1,
	PRE_REWARD                               = 2,
	PROMOTION                                = 3,
	EIAPType_MAX                             = 4,
};

// Enum MirMobile.EIAPState
// NumValues: 0x0007
enum class EIAPState : uint8
{
	NONE                                     = 0,
	PRODUCT_DETAILS                          = 1,
	PURCHASING                               = 2,
	PAY_START                                = 3,
	PAY_VERIFY                               = 4,
	CONSUME_PRODUCT                          = 5,
	EIAPState_MAX                            = 6,
};

// Enum MirMobile.EWSIAPResponseCode
// NumValues: 0x0023
enum class EWSIAPResponseCode : uint16
{
	SUCCESS                                  = 200,
	ERROR_PAY_START_PARAMETER                = 30101,
	ERROR_PAY_START_DB_ERROR                 = 30102,
	ERROR_PAY_START_IAP_ERROR                = 30103,
	ERROR_PAY_START_IS_REFUND_USER           = 30104,
	ERROR_PAY_START_IS_GUEST_USER            = 30110,
	ERROR_PAY_VERIFY_PARAMETER               = 30201,
	ERROR_PAY_VERIFY_NO_IAP_DATA             = 30202,
	ERROR_PAY_VERIFY_RECEIPT_FAILED          = 30203,
	ERROR_PAY_VERIFY_RECEIPT_DUPLICATED      = 30204,
	ERROR_PAY_VERIFY_RECEIPT_ALREADY_CONSUMED = 30205,
	ERROR_PAY_VERIFY_CANCELED_RECEIPT        = 30206,
	ERROR_PAY_VERIFY_DB_ERROR                = 30207,
	ERROR_PAY_VERIFY_COMPLATED               = 30208,
	ERROR_PAY_VERIFY_NOT_ALLOWED_REGION      = 30209,
	ERROR_PAY_END_PARAMETER                  = 30301,
	ERROR_PAY_END_NO_IAP_DATA                = 30302,
	ERROR_PAY_END_DB_ERROR                   = 30303,
	ERROR_REFUND_LIST_NOT_AOS                = 30401,
	ERROR_REFUND_LIST_NO_REFUND              = 30402,
	ERROR_REFUND_LIST_DB_ERROR               = 30403,
	ERROR_PAY_REFUND_PARAMETER               = 30501,
	ERROR_PAY_REFUND_NO_REFUND               = 30502,
	ERROR_PAY_REFUND_ALREADY_PAY             = 30503,
	ERROR_PAY_REFUND_RECEIPT_FAILED          = 30504,
	ERROR_PAY_REFUND_DB_ERROR                = 30505,
	ERROR_PAY_REFUND_QUANTITY_ERROR          = 30506,
	ERROR_PAY_VERIFY_GAME_SERVER_TIMEOUT     = 40000,
	ERROR_PAY_VERIFY_GAME_SERVER_FAIL        = 40001,
	ERROR_PAY_VERIFY_GAME_SERVER_INVALID_ACCOUNT = 40002,
	ERROR_PAY_VERIFY_GAME_SERVER_DB_ERROR    = 40003,
	ERROR_PAY_VERIFY_GAME_SERVER_NO_PRODUCT  = 40004,
	ERROR_PAY_VERIFY_GAME_SERVER_NO_PAY_ID   = 40005,
	ERROR_PAY_VERIFY_GAME_SERVER_PAY_AMOUNT_OVER = 40006,
	EWSIAPResponseCode_MAX                   = 40007,
};

// Enum MirMobile.EIOSGoogleSignInStatusCode
// NumValues: 0x0007
enum class EIOSGoogleSignInStatusCode : uint64
{
	SUCCESS                                  = 0,
	ERROR_UNKNOWN                            = 18446744073709551615,
	ERROR_KEYCHAIN                           = 18446744073709551614,
	ERROR_HAS_NO_AUTH_IN_KEYCHAIN            = 18446744073709551612,
	ERROR_CANCELED                           = 18446744073709551611,
	ERROR_EMM                                = 18446744073709551610,
	EIOSGoogleSignInStatusCode_MAX           = 1,
};

// Enum MirMobile.EAndroidGoogleSignInStatusCode
// NumValues: 0x0005
enum class EAndroidGoogleSignInStatusCode : uint16
{
	SUCCESS                                  = 0,
	ERROR_FAILED                             = 12500,
	ERROR_CANCELED                           = 12501,
	ERROR_CURRENTLY_IN_PROGRESS              = 12502,
	EAndroidGoogleSignInStatusCode_MAX       = 12503,
};

// Enum MirMobile.EWin64GoogleSignInStatusCode
// NumValues: 0x0004
enum class EWin64GoogleSignInStatusCode : uint64
{
	SUCCESS                                  = 0,
	ERROR_FAILED                             = 18446744073709551615,
	ERROR_CANCELED                           = 18446744073709551614,
	EWin64GoogleSignInStatusCode_MAX         = 1,
};

// Enum MirMobile.ETwoFactorStatus
// NumValues: 0x0005
enum class ETwoFactorStatus : uint8
{
	NOT_CERT                                 = 0,
	COMPLETED                                = 1,
	ERROR_BYPASS                             = 2,
	ERROR_POSTPONE                           = 3,
	ETwoFactorStatus_MAX                     = 4,
};

// Enum MirMobile.EMarketUpdateStatus
// NumValues: 0x0004
enum class EMarketUpdateStatus : uint8
{
	NONE                                     = 0,
	UPDATE_SELECT                            = 1,
	UPDATE_FORCE                             = 2,
	EMarketUpdateStatus_MAX                  = 3,
};

// Enum MirMobile.EStoreType
// NumValues: 0x000F
enum class EStoreType : uint8
{
	NONE                                     = 0,
	GOOGLE_PLAY                              = 1,
	APPLE_STORE                              = 2,
	ONE_STORE                                = 3,
	GALAXY_STORE                             = 4,
	ONE_STORE_PC                             = 9,
	STEAM                                    = 11,
	XSOLLA                                   = 12,
	MYCARD                                   = 13,
	HYDRA                                    = 14,
	HUAWEI                                   = 15,
	WEMIX_DOLLAR                             = 16,
	PLAY_TOKEN                               = 17,
	WEMIX_PAY                                = 18,
	EStoreType_MAX                           = 19,
};

// Enum MirMobile.EServerStatus
// NumValues: 0x0004
enum class EServerStatus : uint8
{
	None                                     = 0,
	Open                                     = 1,
	Close                                    = 2,
	EServerStatus_MAX                        = 3,
};

// Enum MirMobile.EMagicOrbEquipSlotStauts
// NumValues: 0x0005
enum class EMagicOrbEquipSlotStauts : uint8
{
	Equip                                    = 0,
	Open                                     = 1,
	SpecialOpen                              = 2,
	Lock                                     = 3,
	EMagicOrbEquipSlotStauts_MAX             = 4,
};

// Enum MirMobile.EReason_StopBehavior
// NumValues: 0x001D
enum class EReason_StopBehavior : uint8
{
	Unknown                                  = 0,
	AttackEnd                                = 1,
	UpdateCounterAttack                      = 2,
	AutoMoveFinished                         = 3,
	OnDie                                    = 4,
	QuestTracker                             = 5,
	InputProcess                             = 6,
	TaskStopBehavior                         = 7,
	PhaseMode                                = 8,
	CommandScript                            = 9,
	Occupation                               = 10,
	Plunder                                  = 11,
	ToggleUI                                 = 12,
	Debug                                    = 13,
	Sparring                                 = 14,
	Operating                                = 15,
	Revival                                  = 16,
	ClickMenu                                = 17,
	RecvServer                               = 18,
	Cinematic                                = 19,
	MissionHelper                            = 20,
	StoryQuest                               = 21,
	Warp                                     = 22,
	Trigger                                  = 23,
	LogOut                                   = 24,
	DisConnect                               = 25,
	Landing                                  = 26,
	Occupation_Sabuk                         = 27,
	EReason_MAX                              = 28,
};

// Enum MirMobile.EReason_UpdateTarget
// NumValues: 0x0019
enum class EReason_UpdateTarget : uint8
{
	Unknown                                  = 0,
	SharedTarget                             = 1,
	TargetHide                               = 2,
	Invalid                                  = 3,
	Clear                                    = 4,
	Search                                   = 5,
	HasInput                                 = 6,
	Renew                                    = 7,
	CounterClear                             = 8,
	AttackMe                                 = 9,
	UneanbleRender                           = 10,
	FindEnemy                                = 11,
	Quest                                    = 12,
	Around                                   = 13,
	SkipTrace                                = 14,
	Die                                      = 15,
	UneablePK                                = 16,
	TargetList                               = 17,
	TargetLock                               = 18,
	SubMenuAttack                            = 19,
	InSafeArea                               = 20,
	SelfComeback                             = 21,
	AttackHeightLimit                        = 22,
	TraceFail                                = 23,
	EReason_MAX                              = 24,
};

// Enum MirMobile.ETownNPCPositionType
// NumValues: 0x0004
enum class ETownNPCPositionType : uint64
{
	NONE                                     = 18446744073709551615,
	POTION                                   = 0,
	GOODS                                    = 1,
	MAX                                      = 2,
};

// Enum MirMobile.EMonsterAttackType
// NumValues: 0x0004
enum class EMonsterAttackType : uint8
{
	None                                     = 0,
	Melee                                    = 1,
	Range                                    = 2,
	EMonsterAttackType_MAX                   = 3,
};

// Enum MirMobile.EOccupationCommandSlotType
// NumValues: 0x000A
enum class EOccupationCommandSlotType : uint32
{
	NONE                                     = 0,
	CIRCLE                                   = 1,
	SQUARE                                   = 2,
	TRIANGLE                                 = 3,
	DIAMOND                                  = 4,
	STAR                                     = 5,
	ONE                                      = 6,
	TWO                                      = 7,
	THREE                                    = 8,
	EOccupationCommandSlotType_MAX           = 9,
};

// Enum MirMobile.EMinimapFeatureAvailability
// NumValues: 0x000C
enum class EMinimapFeatureAvailability : uint32
{
	NONE                                     = 0,
	VIEW_USER_INFO                           = 1,
	VIEW_COMMAND_INFO                        = 2,
	VIEW_OBJECT_INFO                         = 4,
	VIEW_CHARACTER_DIE                       = 8,
	VIEW_REVIVAL_LOCATION_INFO               = 16,
	FUNC_TOUCH_POSITION                      = 32,
	DEFAULT_VIEW                             = 23,
	DEFAULT_FUNC                             = 32,
	DEFAULT                                  = 55,
	REVIVAL_SELECT                           = 24,
	EMinimapFeatureAvailability_MAX          = 56,
};

// Enum MirMobile.KillLogCampType
// NumValues: 0x0004
enum class EKillLogCampType : uint8
{
	None                                     = 0,
	Defence                                  = 1,
	Offence                                  = 2,
	KillLogCampType_MAX                      = 3,
};

// Enum MirMobile.EUpdateWeaponReason
// NumValues: 0x0007
enum class EUpdateWeaponReason : uint8
{
	ChangeItemParts                          = 0,
	UpdateCostume                            = 1,
	ChangeFeature                            = 2,
	SetMining                                = 3,
	ClearMining                              = 4,
	EnterIdle                                = 5,
	EUpdateWeaponReason_MAX                  = 6,
};

// Enum MirMobile.EBattleStateReason
// NumValues: 0x000A
enum class EBattleStateReason : uint8
{
	ExecuteSkill                             = 0,
	RollEnter                                = 1,
	RollExit                                 = 2,
	Hit                                      = 3,
	BuffHit                                  = 4,
	TimeOut                                  = 5,
	AppearUser                               = 6,
	RecvServer                               = 7,
	RecvAttack                               = 8,
	EBattleStateReason_MAX                   = 9,
};

// Enum MirMobile.ERideState
// NumValues: 0x0004
enum class ERideState : uint8
{
	None                                     = 0,
	Pending                                  = 1,
	Complete                                 = 2,
	ERideState_MAX                           = 3,
};

// Enum MirMobile.ECheckSyncType
// NumValues: 0x0005
enum class ECheckSyncType : uint8
{
	Tick_AutoMove                            = 0,
	Tick_ManualMove                          = 1,
	Tick_UnableMove                          = 2,
	Tick_NotNaviMove                         = 3,
	Tick_MAX                                 = 4,
};

// Enum MirMobile.EChangeIdleReason
// NumValues: 0x000A
enum class EChangeIdleReason : uint8
{
	Unknown                                  = 0,
	NotFindPath                              = 1,
	UseInput                                 = 2,
	EmptyTarget                              = 3,
	DeadTarget                               = 4,
	EmptySkill                               = 5,
	EnableAttack                             = 6,
	Stalled                                  = 7,
	DifferentTarget                          = 8,
	EChangeIdleReason_MAX                    = 9,
};

// Enum MirMobile.EPopupContentsState_CurDisplay
// NumValues: 0x0007
enum class EPopupContentsState_CurDisplay : uint8
{
	None                                     = 0,
	Mastery                                  = 1,
	HolyStuff                                = 2,
	Vehicle                                  = 3,
	Force                                    = 4,
	HeavenTraining                           = 5,
	EPopupContentsState_MAX                  = 6,
};

// Enum MirMobile.EMeetingViewGrade
// NumValues: 0x0007
enum class EMeetingViewGrade : uint8
{
	NONE                                     = 0,
	GRADE2                                   = 1,
	GRADE3                                   = 2,
	GRADE4                                   = 3,
	GRADE5                                   = 4,
	ALL                                      = 5,
	EMeetingViewGrade_MAX                    = 6,
};

// Enum MirMobile.EMeetingJoinGrade
// NumValues: 0x0007
enum class EMeetingJoinGrade : uint8
{
	NONE                                     = 0,
	GRADE2                                   = 1,
	GRADE3                                   = 2,
	GRADE4                                   = 3,
	GRADE5                                   = 4,
	ALL                                      = 5,
	EMeetingJoinGrade_MAX                    = 6,
};

// Enum MirMobile.EHTPopupState
// NumValues: 0x0004
enum class EHTPopupState : uint8
{
	LevelUp                                  = 0,
	CircleUp                                 = 1,
	CriticalFail                             = 2,
	EHTPopupState_MAX                        = 3,
};

// Enum MirMobile.PANEL_SIDE
// NumValues: 0x0004
enum class EPANEL_SIDE : uint8
{
	NONE                                     = 0,
	SIDE_LEFT                                = 1,
	SIDE_RIGHT                               = 2,
	PANEL_MAX                                = 3,
};

// Enum MirMobile.ESlotClassOption
// NumValues: 0x0009
enum class ESlotClassOption : uint8
{
	Slot_All                                 = 0,
	Slot_Warror                              = 1,
	Slot_Magician                            = 2,
	Slot_Taoist                              = 3,
	Slot_Assassin                            = 4,
	Slot_Berserker                           = 5,
	Slot_DarkTaoist                          = 6,
	Slot_Lock                                = 99,
	Slot_MAX                                 = 100,
};

// Enum MirMobile.ESiegeCommandMacroType
// NumValues: 0x0006
enum class ESiegeCommandMacroType : uint8
{
	ATTACK                                   = 0,
	ASSEMBLE                                 = 1,
	DEFECNCE                                 = 2,
	RETREAT                                  = 3,
	WAIT                                     = 4,
	MAX                                      = 5,
};

// Enum MirMobile.EGuildSearchType
// NumValues: 0x0004
enum class EGuildSearchType : uint8
{
	Normal                                   = 0,
	SabukDominion                            = 1,
	DominionTax                              = 2,
	EGuildSearchType_MAX                     = 3,
};

// Enum MirMobile.EProgressState
// NumValues: 0x0004
enum class EProgressState : uint8
{
	Same                                     = 0,
	Increase                                 = 1,
	Decrease                                 = 2,
	EProgressState_MAX                       = 3,
};

// Enum MirMobile.EStopAutoMissionMsgType
// NumValues: 0x000E
enum class EStopAutoMissionMsgType : uint8
{
	Normal                                   = 0,
	Main                                     = 1,
	AccountChange                            = 2,
	InputDirection                           = 3,
	Party                                    = 4,
	PartyAssemble                            = 5,
	AutoSetting                              = 6,
	ChannelChange                            = 7,
	AutoBattle                               = 8,
	AutoGather                               = 9,
	AirWalk                                  = 10,
	ChatPosition                             = 11,
	PartyMove                                = 12,
	EStopAutoMissionMsgType_MAX              = 13,
};

// Enum MirMobile.EAutoMissionState
// NumValues: 0x0003
enum class EAutoMissionState : uint8
{
	None                                     = 0,
	Running                                  = 1,
	EAutoMissionState_MAX                    = 2,
};

// Enum MirMobile.EQuickTabListSlotType
// NumValues: 0x0003
enum class EQuickTabListSlotType : uint8
{
	DeckSlot                                 = 0,
	ListSlot                                 = 1,
	EQuickTabListSlotType_MAX                = 2,
};

// Enum MirMobile.EDirectiveType
// NumValues: 0x000A
enum class EDirectiveType : uint8
{
	None                                     = 0,
	Circle                                   = 1,
	Square                                   = 2,
	Triangle                                 = 3,
	Diamond                                  = 4,
	Star                                     = 5,
	One                                      = 6,
	Two                                      = 7,
	Three                                    = 8,
	EDirectiveType_MAX                       = 9,
};

// Enum MirMobile.ESlotEmptyType
// NumValues: 0x0005
enum class ESlotEmptyType : uint8
{
	NONE                                     = 0,
	DEFAULT_BG                               = 1,
	COLLAPSED                                = 2,
	DUMMY                                    = 3,
	ESlotEmptyType_MAX                       = 4,
};

// Enum MirMobile.ESlotBackgroundType
// NumValues: 0x0004
enum class ESlotBackgroundType : uint8
{
	NONE                                     = 0,
	RECT                                     = 1,
	CIRCLE                                   = 2,
	ESlotBackgroundType_MAX                  = 3,
};

// Enum MirMobile.ESortListBtn_Location
// NumValues: 0x0005
enum class ESortListBtn_Location : uint8
{
	LeftTop                                  = 0,
	LeftBottom                               = 1,
	RightTop                                 = 2,
	RightBottom                              = 3,
	ESortListBtn_MAX                         = 4,
};

// Enum MirMobile.ESoundMode
// NumValues: 0x0004
enum class ESoundMode : uint8
{
	NONE                                     = 0,
	SCENE                                    = 1,
	OUT_GAME_CONETENT                        = 2,
	MAX                                      = 3,
};

// Enum MirMobile.EBGMType
// NumValues: 0x0006
enum class EBGMType : uint8
{
	NONE                                     = 0,
	FIELD                                    = 1,
	QUEST                                    = 2,
	PHASING                                  = 3,
	EVENT                                    = 4,
	MAX                                      = 5,
};

// Enum MirMobile.EMMSoundType
// NumValues: 0x000B
enum class EMMSoundType : uint8
{
	NONE                                     = 0,
	MASTER                                   = 1,
	BGM                                      = 2,
	AMBIENT                                  = 3,
	SFX                                      = 4,
	UI                                       = 5,
	VOICE                                    = 6,
	VOICE_DIALOGUE                           = 7,
	VOICE_MALE                               = 8,
	VOICE_FEMALE                             = 9,
	MAX                                      = 10,
};

// Enum MirMobile.EDuel_CountState
// NumValues: 0x0005
enum class EDuel_CountState : uint8
{
	None                                     = 0,
	Start                                    = 1,
	InSafeArea                               = 2,
	RingOut                                  = 3,
	EDuel_MAX                                = 4,
};

// Enum MirMobile.ETableType
// NumValues: 0x015D
enum class ETableType : uint16
{
	ACHIEVEMENT                              = 0,
	AIRWALK                                  = 1,
	AREANAME                                 = 2,
	AUTOFLIGHT_PATH                          = 3,
	BUFF                                     = 4,
	BUFF_OVERLAPCALL                         = 5,
	BOSS_WORLD                               = 6,
	CAMERA_PRESET                            = 7,
	CHARACTER_MASTERY                        = 8,
	CHARACTER_MASTERY_SLOT                   = 9,
	CHARACTER_MASTERY_LEVEL_LIMIT            = 10,
	CHARACTER_FORCE                          = 11,
	CHARACTER_FORCE_BLOOD                    = 12,
	CHARACTER_FORCE_LEVEL                    = 13,
	CHARACTER_EMOTE                          = 14,
	CLASS                                    = 15,
	CLASS_CREATE                             = 16,
	COMBATPOINT                              = 17,
	CINEMATIC_DIALOGUE                       = 18,
	CHARACTER_GROW                           = 19,
	CONTENTS_ALARM                           = 20,
	CONTENTS_ADMIN                           = 21,
	CHARACTER_PARTS_DEFINES                  = 22,
	CONTENTS_OPEN                            = 23,
	COLOR_INDEX                              = 24,
	COSTUME                                  = 25,
	COSTUME_PRESET                           = 26,
	COSTUME_PALETTE                          = 27,
	CLIENT_ERROR_STRING                      = 28,
	CLIENT_PRELOAD                           = 29,
	COMBO                                    = 30,
	CUSTOMIZING_CAMERA                       = 31,
	CUSTOMIZING_CATEGORY                     = 32,
	CUSTOMIZING_COMPONENT                    = 33,
	EFFECT                                   = 34,
	EFFECT_WIDGET                            = 35,
	ELITEDUNGEON                             = 36,
	EVENT_CONTENTS                           = 37,
	GUILD_INFO                               = 38,
	GUIDE_EFFECT                             = 39,
	GUIDE_START                              = 40,
	GUILD_MARK                               = 41,
	GUILD_MEMBER_GRADE                       = 42,
	GUILD_LEVEL                              = 43,
	GUILD_DEV_UI                             = 44,
	GUILD_DEV_LEVEL                          = 45,
	GUILD_DEV_UNLOCK                         = 46,
	GUILD_FAME_CATEGORY                      = 47,
	GUILD_DAILY_MISSION                      = 48,
	GUILD_STATUS                             = 49,
	GUILD_EXPEDITION                         = 50,
	GUILD_DOMINION                           = 51,
	GUILD_DOMINION_BUFF                      = 52,
	GUILD_DOMINION_PRIZE                     = 53,
	GUILD_DOMINION_PBS                       = 54,
	GUILD_DOMINION_PK_GRADE                  = 55,
	GUILD_DOMINION_STORAGE_HISTORY           = 56,
	GUILD_DOMINION_EXCHANGE                  = 57,
	GUILD_POSITION                           = 58,
	GUILD_WANTED                             = 59,
	GUILD_GIFT                               = 60,
	GUILD_GIFT_LEVEL                         = 61,
	GUILD_SHOP                               = 62,
	GUILD_HISTORY                            = 63,
	GUILD_MONEY_EXCHANGE                     = 64,
	GUILD_AUTHORITY                          = 65,
	GUILD_TOURNAMENT_INFO                    = 66,
	GUILD_TOURNAMENT_MONSTER                 = 67,
	GUILD_TOURNAMENT_REWARD                  = 68,
	GUILD_TOURNAMENT_ROUND                   = 69,
	GUILD_TOURNAMENT_SKILL                   = 70,
	GUILD_TOURNAMENT_TERRITORY               = 71,
	GUILD_TOURNAMENT_TEAM                    = 72,
	ITEM                                     = 73,
	ITEM_SET                                 = 74,
	ITEM_EQUIPSLOT                           = 75,
	ITEM_SMELTING                            = 76,
	ITEM_SMELTING_ATTRIBUTE                  = 77,
	ITEM_MAKE                                = 78,
	ITEM_OPTION                              = 79,
	ITEM_OPTION_GRADE                        = 80,
	ITEM_OPTION_RANDOM                       = 81,
	ITEM_OPTION_PASSIVE                      = 82,
	ITEM_SMELTING_EFFECT                     = 83,
	ITEM_PACKAGE                             = 84,
	ITEM_RANDOM_GET                          = 85,
	ITEM_RANDOM_GET_INFO                     = 86,
	ITEM_RANDOM_EXCHANGE                     = 87,
	ITEM_RANDOM_EXCHANGE_EQUIP               = 88,
	ITEM_SELECT_GET                          = 89,
	ITEM_SPECIAL_EXCHANGE                    = 90,
	ITEM_SPECIAL_EXCHANGE_RESULT             = 91,
	ITEM_INFO_SUMMARY                        = 92,
	ITEM_GETWAY                              = 93,
	ITEM_GETWAY_INFO                         = 94,
	ITEM_GETWAY_LIST                         = 95,
	ITEM_DURABILITY_REPAIRCOST               = 96,
	ITEM_DURABILITY_BROKENLV                 = 97,
	ITEM_SECRET_ABILITY                      = 98,
	ITEM_SLOT_INFO                           = 99,
	INSTANCE_DUNGEON_INFO                    = 100,
	INSTANCE_DUNGEON_SETTING                 = 101,
	ICON                                     = 102,
	INVENTORY                                = 103,
	INVENTORY_EXTEND                         = 104,
	INVENTORY_EXTEND_VALUE                   = 105,
	INVENTORY_EXTEND_ITEM                    = 106,
	ITEM_SUBCOOLTIME                         = 107,
	LOADING                                  = 108,
	LEVEL                                    = 109,
	MAGICSQUARE                              = 110,
	MAGICSQUARESTAGE                         = 111,
	MOVIEPLAY                                = 112,
	MAPUI_WORLD                              = 113,
	MAPUI_AREA                               = 114,
	MAPUI_MINI                               = 115,
	MONEY                                    = 116,
	MONSTER                                  = 117,
	MONSTER_PHASING                          = 118,
	MONSTER_RESOURCE                         = 119,
	MONSTER_RAREACTION                       = 120,
	MONSTER_COLOR_GROUP                      = 121,
	GUILD_WAR_MONSTER                        = 122,
	GUILD_WAR_OBJECT                         = 123,
	MONTAGE                                  = 124,
	HIDDEN_PATH                              = 125,
	NPC                                      = 126,
	NPCDIALOG                                = 127,
	NPCSPAWN                                 = 128,
	NPCSHOWSCHEDULE                          = 129,
	NICKNAME                                 = 130,
	NPC_ITEM_LIST                            = 131,
	OBJECT                                   = 132,
	GUILD_WAR_STRONG_POINT                   = 133,
	GUILD_WAR_SANCTUM                        = 134,
	GUILD_WAR_PLUNDER                        = 135,
	GUILD_WAR_ALTAR                          = 136,
	DARK_ALTAR                               = 137,
	GUILD_WAR_SABUK                          = 138,
	GUILD_WAR_SABUK_ROUND                    = 139,
	GUILD_WAR_SABUK_REWARD                   = 140,
	PLAYDATA                                 = 141,
	PHASING                                  = 142,
	PORTAL                                   = 143,
	PK_GRADE                                 = 144,
	QUEST_RELATION                           = 145,
	QUEST_RELATION_REWARD                    = 146,
	QUICK_SLOT_SETTING                       = 147,
	QUESTDAILY_HOMEWORK                      = 148,
	QUESTDAILY_HOMEWORK_PLUSREWARD           = 149,
	QUEST_MISSION                            = 150,
	QUEST_COMBAT_DEVIATION                   = 151,
	QUEST_REQUEST                            = 152,
	REVIVAL                                  = 153,
	GUILD_WAR_REVIVAL                        = 154,
	RESOURCE_MESH                            = 155,
	RESOURCE_ABP                             = 156,
	RESOURCE_ETC                             = 157,
	SOUND                                    = 158,
	STATUS                                   = 159,
	STRING_ERROR                             = 160,
	STATUS_LIMIT                             = 161,
	STATUS_CALCULATE                         = 162,
	STATUS_INFO                              = 163,
	SKILL                                    = 164,
	SKILL_ATTACK                             = 165,
	SKILL_STATE                              = 166,
	SKILL_PASSIVE                            = 167,
	SKILL_COST                               = 168,
	STAGE                                    = 169,
	STAGE_SECTOR                             = 170,
	STRING_BUILTIN                           = 171,
	STRING_TEMPLATE                          = 172,
	STRING_MESSAGE                           = 173,
	STRING_MAIL                              = 174,
	STRING_TOOLTIP                           = 175,
	STD                                      = 176,
	STRING_NPC                               = 177,
	STRING_QUESTTEMPLATE                     = 178,
	SEQUENCEPLAY                             = 179,
	SMALLTALK_SETTING                        = 180,
	SMALLTALK_DIALOGUE                       = 181,
	SEQUENCE_DIALOGUE                        = 182,
	SLANG_NICKNAME                           = 183,
	SLANG_CHATTING                           = 184,
	SYSTEM_DATA                              = 185,
	SHOP_GOODS                               = 186,
	UI_SHOP_TAP                              = 187,
	UI_SHOP_GOODS                            = 188,
	UI_SHOP_ITEM_PACKAGE                     = 189,
	UI_SHOP_IAP_INFO                         = 190,
	UI_SHOP_POPUPSTORE                       = 191,
	UI_SHOP_WEBSHOP                          = 192,
	GACHA_INFO                               = 193,
	GACHA_GROUP                              = 194,
	GACHA_LIST                               = 195,
	TOTEM                                    = 196,
	TUTORIAL                                 = 197,
	TOTAL_MENU                               = 198,
	TOTAL_MENU_FRAME                         = 199,
	TOTAL_MENU_CONTENTS                      = 200,
	ITEM_BLESS_INCREASERATE                  = 201,
	TIMETICKET                               = 202,
	TRIGGER_GROUPBASE                        = 203,
	UNDERWORLD                               = 204,
	VEHICLE_RIDE                             = 205,
	WARP_LOCATION                            = 206,
	SECRET_DUNGEON                           = 207,
	GAMEOPTION_SETTING                       = 208,
	GAMEOPTION_KEYSETTING                    = 209,
	GAMEOPTION_DISABLEKEY                    = 210,
	GAMEOPTION_KEYACTION                     = 211,
	NPC_ITEM_MAKE_LIST                       = 212,
	PK_MODE                                  = 213,
	PK_SYSTEM                                = 214,
	LABYRINTH                                = 215,
	EVENT_TIMELINE                           = 216,
	ITEM_VIEWER                              = 217,
	FAME_QUEST                               = 218,
	FAME_CATEGORY                            = 219,
	FAME_LEVEL                               = 220,
	BUFF_ATTACK                              = 221,
	QUEUE_UI                                 = 222,
	ITEM_UNSEALING                           = 223,
	ITEM_UNSEALING_ACCELERATION              = 224,
	RANKING_CATEGORY                         = 225,
	RANKING_REWARD                           = 226,
	RANKING_SEASON_REWARD                    = 227,
	RANKING_SCHEDULER                        = 228,
	PET                                      = 229,
	PET_DECK                                 = 230,
	PET_SKILL                                = 231,
	PET_LEVEL                                = 232,
	GREAT_BUILDING                           = 233,
	GREAT_BUILDING_STEP                      = 234,
	ITEM_MATERIAL_COMPOSE                    = 235,
	ITEM_MATERIAL_COMPOSE_LIST               = 236,
	ITEM_MATERIAL_COMPOSE_POINT              = 237,
	TRADE_MENU                               = 238,
	USER_EVENT                               = 239,
	USER_EVENT_GOAL                          = 240,
	USEREVENT_BENEDICTION                    = 241,
	USER_EVENT_SIEGEEVE                      = 242,
	USER_EVENT_PAINTING                      = 243,
	USER_EVENT_AGENCY                        = 244,
	BATTLE_PASS_INFO                         = 245,
	BATTLE_PASS_GROUP                        = 246,
	BATTLE_PASS_MISSION                      = 247,
	BATTLE_PASS_REWARD                       = 248,
	EVENT_PASS_INFO                          = 249,
	EVENT_PASS_MISSION                       = 250,
	EVENT_PASS_REWARD                        = 251,
	EVENT_MISSION_PASS_CONDITION             = 252,
	EVENT_MISSION_PASS_REWARD                = 253,
	CHANNEL                                  = 254,
	ITEM_COLLECTION                          = 255,
	DUNGEON_TICKET                           = 256,
	DUNGEON_TICKET_CHARGE                    = 257,
	DUNGEON_SHOP                             = 258,
	SKILL_SPECIAL_ABILITY                    = 259,
	GUILD_WAR_SIEGE                          = 260,
	GUILD_WAR_SIEGE_REWARD                   = 261,
	GUILD_WAR_COSTUME                        = 262,
	CHARACTER_EXPBOOSTER                     = 263,
	CHARACTER_EXPBOOSTER_ITEM                = 264,
	DEATHPENALTY_EXP                         = 265,
	COMMAND_MARK                             = 266,
	BUFF_GUILD_DEV                           = 267,
	GUIDE_LINK                               = 268,
	NPC_SHOP_LIST                            = 269,
	NPC_SHOP_GOODS                           = 270,
	BROADCAST                                = 271,
	GAME_DEFINE_OPTION                       = 272,
	SCHEDULERCYCLE                           = 273,
	BUFF_PARTY                               = 274,
	UI_SHOP_PERIOD                           = 275,
	SERVER_CHANGE_CONDITION                  = 276,
	SERVER_CHANGE_COST                       = 277,
	SERVER_CHANGE_UI                         = 278,
	ITEM_MAGICSTONE_TRANCE                   = 279,
	ITEM_TRANSCENDENCE_DEFINE                = 280,
	ITEM_SP_TREASURE_TRANCE                  = 281,
	CLOSED_TRAINING                          = 282,
	CLOSED_TRAINING_STATUS                   = 283,
	CLOSED_TRAINING_LEVEL                    = 284,
	CLOSED_TRAINING_COLLECT                  = 285,
	CLASS_PHASE                              = 286,
	QUEST_DROP_ITEM                          = 287,
	MULTI_LANGUAGE                           = 288,
	ITEM_MAKE_AGENCY                         = 289,
	OBJECT_INTERACTION_MON_GEN               = 290,
	GLOBAL_FONT_RANGE                        = 291,
	GLOBAL_REGION                            = 292,
	ITEM_XDRACO_MAKE                         = 293,
	ITEM_XDRACO_SEALING                      = 294,
	SEASONTOKEN_MAKE                         = 295,
	ADS_INFO                                 = 296,
	GUILD_WAR_PLUNDER_REWARD                 = 297,
	ITEM_EXTEND                              = 298,
	ITEM_MYSTICALPIECE_TRANCE                = 299,
	CHARACTER_MININGLICENSE                  = 300,
	WORLD_BUFF                               = 301,
	BLACKDRAGON_DUNGEON                      = 302,
	SYSTEM_DATA_CONQUER_SERVER               = 303,
	HOLYSTUFF                                = 304,
	HOLYSTUFF_LEVEL                          = 305,
	HOLYSTUFF_GRADE                          = 306,
	STAGE_MON_GEN_EVENT                      = 307,
	ITEM_DISPLAY                             = 308,
	ITEM_ATTRIBUTE                           = 309,
	GUILD_COOP_MISSION                       = 310,
	GUILD_COOP_MISSION_GROUP                 = 311,
	GUILD_COOP_MISSION_GROUP_LIST            = 312,
	ITEM_EQUIP_REFINE                        = 313,
	ITEM_EQUIP_REFINE_ATTRIBUTE              = 314,
	POTENTIAL                                = 315,
	POTENTIAL_NODEUI                         = 316,
	POTENTIAL_TRAINING                       = 317,
	MAGICSTONE_EQUIPSLOT                     = 318,
	DEAD_VALLEY_CHARACTER                    = 319,
	DEAD_VALLEY_INFO                         = 320,
	DEAD_VALLEY_REWARD                       = 321,
	DEAD_VALLEY_SCORE                        = 322,
	DEAD_VALLEY_SETTING                      = 323,
	DEAD_VALLEY_EFFECT                       = 324,
	DEAD_VALLEY_PROGRESS                     = 325,
	SEASON_SCHEDULER                         = 326,
	ITEM_MAGICORB_DEFINE                     = 327,
	ITEM_MAGICORB                            = 328,
	ITEM_MAGICORB_GROW                       = 329,
	ITEM_MAGICORB_LEVEL                      = 330,
	ITEM_MAGICORB_OPTION                     = 331,
	ITEM_MAGICORB_OPTION_CHANGE              = 332,
	ITEM_MAGICORB_OPTION_GROUP               = 333,
	NPC_ITEM_CRAFT                           = 334,
	NPC_ITEM_CRAFT_GROUP                     = 335,
	NPC_ITEM_CRAFT_MATERIAL                  = 336,
	DECK_SYMBOL_LIST                         = 337,
	VEHICLE_RIDE_EFFECT                      = 338,
	PLAYDATA_COLLECTION                      = 339,
	HEAVEN_TRAINING                          = 340,
	HEAVEN_TRAINING_GRADE                    = 341,
	HEAVEN_TRAINING_LEVEL                    = 342,
	DRAGONGEAR_TRANSFER                      = 343,
	EQUIPLEVEL_OPTION                        = 344,
	BOOSTINGWORLD_CONTROL                    = 345,
	MYTHIC_UPGRADE_SUMMARY                   = 346,
	MYTHIC_SETEFFECT                         = 347,
	MAX                                      = 348,
};

// Enum MirMobile.EStringTableType
// NumValues: 0x0005
enum class EStringTableType : uint8
{
	NONE                                     = 0,
	STRING_UI                                = 1,
	STRING_TEMPLATE                          = 2,
	STRING_BUILTIN                           = 3,
	EStringTableType_MAX                     = 4,
};

// Enum MirMobile.ETutorialStepEndType
// NumValues: 0x0012
enum class ETutorialStepEndType : uint32
{
	None                                     = 0,
	TouchTarget                              = 1,
	TouchScreen                              = 2,
	TouchScreenOrTimeEnd                     = 3,
	Airwalk1stEnd                            = 4,
	AirwalkLand                              = 5,
	Airwalk2ndEnd                            = 6,
	AirwalkDashReady                         = 7,
	AirwalkDashJumpReady                     = 8,
	AirwalkDash2Ready                        = 9,
	SkillVirtualStickActive                  = 10,
	BlockTouchTimer                          = 11,
	SkillReleased                            = 12,
	WallJumpReady                            = 13,
	SpecialSkillReady                        = 14,
	ToggleAutoSkill                          = 15,
	VirtualStickMove                         = 16,
	Max                                      = 17,
};

// Enum MirMobile.ETutorialGuidStrPosType
// NumValues: 0x000A
enum class ETutorialGuidStrPosType : uint32
{
	None                                     = 0,
	LeftTop                                  = 1,
	LeftBottom                               = 2,
	RightTop                                 = 3,
	RightBottom                              = 4,
	Left                                     = 5,
	Right                                    = 6,
	Top                                      = 7,
	Bottom                                   = 8,
	Max                                      = 9,
};

// Enum MirMobile.ETutorialUIGuideType
// NumValues: 0x0005
enum class ETutorialUIGuideType : uint32
{
	None                                     = 18446744073709551615,
	NoGuidBox                                = 0,
	Circle                                   = 1,
	Rectangle                                = 2,
	Max                                      = 3,
};

// Enum MirMobile.EPetGuidePosType
// NumValues: 0x0006
enum class EPetGuidePosType : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	Top                                      = 3,
	Bottom                                   = 4,
	Max                                      = 5,
};

// Enum MirMobile.ETouchPositionType
// NumValues: 0x0005
enum class ETouchPositionType : uint8
{
	VIEWPORT_POSITION                        = 0,
	VIEWPORT_PIXEL                           = 1,
	LOCAL                                    = 2,
	TYPE_ABSOLUTE                            = 3,
	ETouchPositionType_MAX                   = 4,
};

// Enum MirMobile.EDragPosType
// NumValues: 0x0003
enum class EDragPosType : uint8
{
	DELTA_TYPE                               = 0,
	POSITION_TYPE                            = 1,
	EDragPosType_MAX                         = 2,
};

// Enum MirMobile.EAncientTreasureReaction
// NumValues: 0x0006
enum class EAncientTreasureReaction : uint8
{
	UpdateEquipSlot                          = 2,
	UpdatePassiveSkill                       = 4,
	UpdateCombatPoint                        = 8,
	UpdateInven                              = 16,
	AllUpdate                                = 30,
	EAncientTreasureReaction_MAX             = 31,
};

// Enum MirMobile.EAncientTreasureUpgradeReaction
// NumValues: 0x0006
enum class EAncientTreasureUpgradeReaction : uint8
{
	UpdateTargetSlot                         = 2,
	UpdateTargetInfo                         = 4,
	UpdateMaterialSlot                       = 8,
	UpdateInven                              = 16,
	AllUpdate                                = 30,
	EAncientTreasureUpgradeReaction_MAX      = 31,
};

// Enum MirMobile.EAncientTreasurePanelType
// NumValues: 0x0003
enum class EAncientTreasurePanelType : uint8
{
	EquipTarget                              = 0,
	EmptyTarget                              = 1,
	EAncientTreasurePanelType_MAX            = 2,
};

// Enum MirMobile.ESortState
// NumValues: 0x0004
enum class ESortState : uint8
{
	NONE                                     = 0,
	ASCENDING                                = 1,
	DESCENDING                               = 2,
	ESortState_MAX                           = 3,
};

// Enum MirMobile.EAuctionSortType
// NumValues: 0x0004
enum class EAuctionSortType : uint8
{
	EACH_PRICE                               = 0,
	TOTAL_PRICE                              = 1,
	WEAPON_PRICE                             = 2,
	EAuctionSortType_MAX                     = 3,
};

// Enum MirMobile.EAuctionTabType
// NumValues: 0x0007
enum class EAuctionTabType : uint64
{
	None                                     = 18446744073709551615,
	Search                                   = 0,
	Sale                                     = 1,
	Calculate                                = 2,
	History                                  = 3,
	BuyHistory                               = 4,
	Max                                      = 5,
};

// Enum MirMobile.EFameType
// NumValues: 0x0003
enum class EFameType : uint8
{
	FAME_INFO                                = 0,
	FAME_BOARD                               = 1,
	FAME_MAX                                 = 2,
};

// Enum MirMobile.ERankInfo
// NumValues: 0x0006
enum class ERankInfo : uint8
{
	RANK_LEVEL                               = 0,
	RANK_COMBAT                              = 1,
	RANK_COLLECTION                          = 2,
	RANK_GUILD                               = 3,
	RANK_COLLECTIONBOOK                      = 4,
	RANK_MAX                                 = 5,
};

// Enum MirMobile.ETabType
// NumValues: 0x0003
enum class ETabType : uint8
{
	CHARINFO                                 = 0,
	TAB_MAX                                  = 1,
	ETabType_MAX                             = 2,
};

// Enum MirMobile.EProgressStep
// NumValues: 0x0008
enum class EProgressStep : uint8
{
	STEP_0                                   = 0,
	STEP_1                                   = 1,
	STEP_2                                   = 2,
	STEP_3                                   = 3,
	STEP_4                                   = 4,
	STEP_MAX                                 = 5,
	None                                     = 99,
	EProgressStep_MAX                        = 100,
};

// Enum MirMobile.EAttGrade
// NumValues: 0x000A
enum class EAttGrade : uint8
{
	NONE                                     = 0,
	E                                        = 1,
	D                                        = 2,
	C                                        = 3,
	B                                        = 4,
	A                                        = 5,
	S                                        = 6,
	SS                                       = 7,
	SSS                                      = 8,
	EAttGrade_MAX                            = 9,
};

// Enum MirMobile.VoiceDownState
// NumValues: 0x0004
enum class EVoiceDownState : uint8
{
	None                                     = 0,
	NeedDownload                             = 1,
	Downloading                              = 2,
	VoiceDownState_MAX                       = 3,
};

// Enum MirMobile.EDominionDelayType
// NumValues: 0x0005
enum class EDominionDelayType : uint8
{
	SABUK_GOLD_TAX                           = 0,
	SABUK_BLACKIRON_TAX                      = 1,
	SABUK_CLASS                              = 2,
	BICHEON_CLASS                            = 3,
	MAX                                      = 4,
};

// Enum MirMobile.ECastleContents
// NumValues: 0x000D
enum class ECastleContents : uint32
{
	NONE                                     = 18446744073709551615,
	DOMINION_TITLE                           = 0,
	DOMINION_ADMIN                           = 1,
	DOMINION_WANTED                          = 2,
	BUFF                                     = 3,
	PRIZE_MAIN                               = 4,
	PRIZE_SUB                                = 5,
	TAX_RATE_CHANGE                          = 6,
	TAX_WITHDRAWAL                           = 7,
	DONATION                                 = 8,
	STORAGE                                  = 9,
	GuildMember                              = 10,
	ECastleContents_MAX                      = 11,
};

// Enum MirMobile.EDominionID
// NumValues: 0x0004
enum class EDominionID : uint16
{
	NONE                                     = 0,
	DOMINION_SABUK_ID                        = 1001,
	DOMINION_BICHEON_ID                      = 2001,
	EDominionID_MAX                          = 2002,
};

// Enum MirMobile.EDominionTabType
// NumValues: 0x0004
enum class EDominionTabType : uint8
{
	STRONGPOINT                              = 0,
	CASTLE_MAIN                              = 1,
	CASTLE_SUB                               = 2,
	MAX                                      = 3,
};

// Enum MirMobile.EDragonicGearIndicatorType
// NumValues: 0x0006
enum class EDragonicGearIndicatorType : uint8
{
	NONE                                     = 0,
	NORMAL_BALCK                             = 1,
	NORMAL_WHITE                             = 2,
	BLACK                                    = 3,
	WHITE                                    = 4,
	EDragonicGearIndicatorType_MAX           = 5,
};

// Enum MirMobile.EDragonicGearInventoryID
// NumValues: 0x0003
enum class EDragonicGearInventoryID : uint8
{
	BLACK_INVEN_ID                           = 30,
	WHITE_INVEN_ID                           = 31,
	EDragonicGearInventoryID_MAX             = 32,
};

// Enum MirMobile.EDragonicGearType
// NumValues: 0x0003
enum class EDragonicGearType : uint8
{
	BLACK_DRAGONICGEAR                       = 0,
	WHITE_DRAGONICGEAR                       = 1,
	EDragonicGearType_MAX                    = 2,
};

// Enum MirMobile.EHTNodeInfoBtnState
// NumValues: 0x0008
enum class EHTNodeInfoBtnState : uint8
{
	Possible                                 = 0,
	NotEnoughtLevel                          = 1,
	MaxLevelNoGrade                          = 2,
	MaxLevelMaxGrade                         = 3,
	AllMax                                   = 4,
	CriticalFail                             = 5,
	NotEnoughtMaterial                       = 6,
	EHTNodeInfoBtnState_MAX                  = 7,
};

// Enum MirMobile.EHTNodeUpgradePossible
// NumValues: 0x0006
enum class EHTNodeUpgradePossible : uint8
{
	Possible                                 = 0,
	NotEnoughtCost                           = 1,
	NotEnoughtMaterial                       = 2,
	NoTableData                              = 3,
	NotEnoughtLevel                          = 4,
	EHTNodeUpgradePossible_MAX               = 5,
};

// Enum MirMobile.EHTNodeUpgradeState
// NumValues: 0x0005
enum class EHTNodeUpgradeState : uint8
{
	Success                                  = 0,
	GreatSuccess                             = 1,
	Fail                                     = 2,
	CriticalFail                             = 3,
	EHTNodeUpgradeState_MAX                  = 4,
};

// Enum MirMobile.EHTOCActiveState
// NumValues: 0x0004
enum class EHTOCActiveState : uint8
{
	Empty                                    = 0,
	Disable                                  = 1,
	Select                                   = 2,
	EHTOCActiveState_MAX                     = 3,
};

// Enum MirMobile.EHTActiveState
// NumValues: 0x0004
enum class EHTActiveState : uint8
{
	Upgrade                                  = 0,
	Slump                                    = 1,
	CircleUpReady                            = 2,
	EHTActiveState_MAX                       = 3,
};

// Enum MirMobile.EHTNodeState
// NumValues: 0x0004
enum class EHTNodeState : uint8
{
	Disable                                  = 0,
	Available                                = 1,
	Complete                                 = 2,
	EHTNodeState_MAX                         = 3,
};

// Enum MirMobile.ESubMenuType
// NumValues: 0x0005
enum class ESubMenuType : uint16
{
	None                                     = 0,
	FieldBoss                                = 4600,
	WorldBoss                                = 4700,
	MAX_INDEX                                = 4701,
	ESubMenuType_MAX                         = 4702,
};

// Enum MirMobile.EUserGaugeState
// NumValues: 0x0004
enum class EUserGaugeState : uint8
{
	Same                                     = 0,
	Increase                                 = 1,
	Decrease                                 = 2,
	EUserGaugeState_MAX                      = 3,
};

// Enum MirMobile.EControlButtonType
// NumValues: 0x0004
enum class EControlButtonType : uint8
{
	ControlBtn_Skill                         = 0,
	ControlBtn_Jump                          = 1,
	ControlBtn_Avoid                         = 2,
	ControlBtn_MAX                           = 3,
};

// Enum MirMobile.EActionButtonState
// NumValues: 0x0003
enum class EActionButtonState : uint8
{
	NONE_ACTIONBTNSTATE                      = 0,
	DASH_ACTIONBTNSTATE                      = 1,
	EActionButtonState_MAX                   = 2,
};

// Enum MirMobile.LUXURY_EQUIP_STATE
// NumValues: 0x0003
enum class ELUXURY_EQUIP_STATE : uint8
{
	EQUIP                                    = 0,
	UNEQUIP                                  = 1,
	LUXURY_EQUIP_MAX                         = 2,
};

// Enum MirMobile.LUXURY_EQUIP_TYPE
// NumValues: 0x0003
enum class ELUXURY_EQUIP_TYPE : uint8
{
	COSTUME                                  = 0,
	VEHICLE                                  = 1,
	LUXURY_EQUIP_MAX                         = 2,
};

// Enum MirMobile.EMagicOrbUpgradeReaction
// NumValues: 0x0007
enum class EMagicOrbUpgradeReaction : uint8
{
	UpdateTargetSlot                         = 2,
	UpdateTargetInfo                         = 4,
	UpdateMaterialSlot                       = 4,
	UpdateResultSlot                         = 8,
	UpdateInven                              = 8,
	AllUpdate                                = 14,
	EMagicOrbUpgradeReaction_MAX             = 15,
};

// Enum MirMobile.EMagicOrbUpgardeMaterialSlotType
// NumValues: 0x0004
enum class EMagicOrbUpgardeMaterialSlotType : uint8
{
	None                                     = 0,
	EmptyTargetSlot                          = 1,
	RegistTargetSlot                         = 2,
	EMagicOrbUpgardeMaterialSlotType_MAX     = 3,
};

// Enum MirMobile.EMail_PopupType
// NumValues: 0x0004
enum class EMail_PopupType : uint8
{
	EMailPopupType_Personal                  = 0,
	EMailPopupType_DominionBechon            = 1,
	EMailPopupType_DominionSabuk             = 2,
	EMailPopupType_MAX                       = 3,
};

// Enum MirMobile.EMail_AddressbookTab
// NumValues: 0x0004
enum class EMail_AddressbookTab : uint32
{
	ETab_None                                = 0,
	ETab_Friend                              = 1,
	ETab_Guild                               = 2,
	ETab_MAX                                 = 3,
};

// Enum MirMobile.EUIActionMessageWidgetType
// NumValues: 0x000A
enum class EUIActionMessageWidgetType : uint32
{
	None                                     = 0,
	Headline                                 = 1,
	HudBottom                                = 2,
	HudGetItem                               = 3,
	Top                                      = 4,
	Screen                                   = 5,
	ContentsGetItem                          = 6,
	QuickItemAction                          = 7,
	GM_Message                               = 8,
	Max                                      = 9,
};

// Enum MirMobile.EOccupationCategoryType
// NumValues: 0x0008
enum class EOccupationCategoryType : uint64
{
	NONE                                     = 18446744073709551615,
	State                                    = 0,
	Auction                                  = 1,
	GovernmentOffice                         = 2,
	PayrollManagement                        = 3,
	TaxInformation                           = 4,
	AreaManagement                           = 5,
	EOccupationCategoryType_MAX              = 6,
};

// Enum MirMobile.EOccupationRewardType
// NumValues: 0x0004
enum class EOccupationRewardType : uint32
{
	None                                     = 0,
	Buff                                     = 1,
	Item                                     = 2,
	EOccupationRewardType_MAX                = 3,
};

// Enum MirMobile.EOccupationAuctionReaction
// NumValues: 0x0014
enum class EOccupationAuctionReaction : uint16
{
	NONE                                     = 0,
	UPDATE_SIMPLEINFO                        = 1,
	UPDATE_GUILDINFO                         = 2,
	UPDATE_MINIMAP                           = 4,
	UPDATE_AUCTION_STATE                     = 8,
	UPDATE_BUTTON_STATE                      = 16,
	UPDATE_REMAIN_TIME                       = 32,
	UPDATE_MINIMUM_BID_AMOUNT                = 64,
	UPDATE_BID_HISTORY                       = 128,
	UPDATE_GUILD_COST                        = 256,
	REQUEST_AUCTION_INFO                     = 1024,
	UPDATE_INVITE_LIST                       = 2048,
	UPDATE_BID_POPUP_BUTTON_STATE            = 4096,
	UPDATE_ALL                               = 507,
	RECV_CHANGE_AUCTION_STATUS               = 0,
	RECV_AUCTION_INFO                        = 507,
	RECV_AUCTION_BIDDING                     = 507,
	OPEN_CONTENTS                            = 1531,
	CLOSE_CONTENTS                           = 0,
	EOccupationAuctionReaction_MAX           = 4097,
};

// Enum MirMobile.EOccupationAuctionButtonType
// NumValues: 0x0005
enum class EOccupationAuctionButtonType : uint8
{
	NONE                                     = 0,
	AUCTION_BIDDING                          = 1,
	ALLIANCE_INVITE                          = 2,
	START_BATTLE                             = 3,
	EOccupationAuctionButtonType_MAX         = 4,
};

// Enum MirMobile.EOccupationAuctionProgress
// NumValues: 0x0007
enum class EOccupationAuctionProgress : uint32
{
	NONE                                     = 0,
	AUCTION_ENTRY                            = 1,
	AUCTION_EXTEND                           = 2,
	STANDBY_BATTLE                           = 3,
	START_BATTLE                             = 4,
	END                                      = 5,
	MAX                                      = 6,
};

// Enum MirMobile.EGuildTournamentIconType
// NumValues: 0x0008
enum class EGuildTournamentIconType : uint8
{
	TERRITORY_1                              = 0,
	TERRITORY_2                              = 1,
	TERRITORY_3                              = 2,
	TERRITORY_4                              = 3,
	TERRITORY_5                              = 4,
	TERRITORY_6                              = 5,
	MONSTER                                  = 6,
	MAX                                      = 7,
};

// Enum MirMobile.EPartyHeaderType
// NumValues: 0x0008
enum class EPartyHeaderType : uint8
{
	EHeaderType_None                         = 0,
	EHeaderType_Normal                       = 1,
	EHeaderType_Elite                        = 2,
	EHeaderType_Labyrinth                    = 3,
	EHeaderType_UnderWorld                   = 4,
	EHeaderType_MagicSquare                  = 5,
	EHeaderType_Secret                       = 6,
	EHeaderType_MAX                          = 7,
};

// Enum MirMobile.EStageType_PartyLeftTab
// NumValues: 0x0006
enum class EStageType_PartyLeftTab : uint8
{
	Party                                    = 0,
	Boss_Dungeon                             = 101,
	Party_Dungeon                            = 102,
	Hell_Dungeon                             = 120,
	Guild                                    = 200,
	EStageType_MAX                           = 201,
};

// Enum MirMobile.EAutoQuestNormalState
// NumValues: 0x0006
enum class EAutoQuestNormalState : uint8
{
	None                                     = 0,
	Running                                  = 1,
	Pause                                    = 2,
	Complete                                 = 3,
	Wait                                     = 4,
	EAutoQuestNormalState_MAX                = 5,
};

// Enum MirMobile.ERankingRewardType
// NumValues: 0x0004
enum class ERankingRewardType : uint8
{
	Daily                                    = 0,
	Weekly                                   = 1,
	Season                                   = 2,
	ERankingRewardType_MAX                   = 3,
};

// Enum MirMobile.ERevivalHelpState
// NumValues: 0x0008
enum class ERevivalHelpState : uint8
{
	UNKNOWN                                  = 0,
	NOT_TAOIST                               = 1,
	NOT_HAVE_REVIVALSKILL                    = 2,
	NOT_ENOUGH_SKILLLEVEL                    = 3,
	NOT_NOT_IN_SKILLDECK                     = 4,
	NOT_ENABLE_COOLTIME                      = 5,
	ENABLE                                   = 6,
	ERevivalHelpState_MAX                    = 7,
};

// Enum MirMobile.ERevivalReaction
// NumValues: 0x0007
enum class ERevivalReaction : uint8
{
	NONE                                     = 0,
	EXCUTE_HELP_REVIVAL                      = 1,
	EXCUTE_SAFE_REVIVAL                      = 2,
	EXCUTE_IMMEDIATE_REVIVAL                 = 4,
	EXCUTE_REVIVAL_FREE                      = 8,
	OPEN_CONTENTS                            = 0,
	ERevivalReaction_MAX                     = 9,
};

// Enum MirMobile.ESabukAreaStateType
// NumValues: 0x0004
enum class ESabukAreaStateType : uint8
{
	CAPTURE                                  = 0,
	OUTPOST                                  = 1,
	BUFFMONSTER                              = 2,
	MAX                                      = 3,
};

// Enum MirMobile.ESabukRoundArea
// NumValues: 0x000F
enum class ESabukRoundArea : uint32
{
	NONE                                     = 0,
	R1_Area1                                 = 101,
	R1_Area2                                 = 102,
	R1_Area3                                 = 103,
	R1_Area4                                 = 104,
	R1_Area5                                 = 105,
	R1_Area6                                 = 106,
	R1_Area7                                 = 107,
	R1_Area8                                 = 108,
	R2_Area1                                 = 201,
	R2_Area2                                 = 202,
	R2_Area3                                 = 203,
	R2_Area4                                 = 204,
	R3_Area                                  = 301,
	MAX                                      = 302,
};

// Enum MirMobile.ESabukRoundStateProgress
// NumValues: 0x0005
enum class ESabukRoundStateProgress : uint32
{
	NONE                                     = 0,
	ROUND1                                   = 1,
	ROUND2                                   = 2,
	ROUND3                                   = 3,
	MAX                                      = 4,
};

// Enum MirMobile.ESabukDominionTabType
// NumValues: 0x0004
enum class ESabukDominionTabType : uint8
{
	CASTLE_MAIN                              = 0,
	DOMINION_WAR                             = 1,
	WAR_SITUATION                            = 2,
	MAX                                      = 3,
};

// Enum MirMobile.ESabukContents
// NumValues: 0x000C
enum class ESabukContents : uint8
{
	NONE                                     = 18446744073709551615,
	SABUK_Authority                          = 0,
	SABUK_STORAGE                            = 1,
	SABUK_TAX_INFO                           = 2,
	SABUK_EMPEROR_ORDER                      = 3,
	SABUK_EMPEROR_ORDER_DO                   = 4,
	SABUK_CLASS                              = 5,
	SABUK_CLASS_DO                           = 6,
	SABUK_PRIZE                              = 7,
	SABUK_PRIZE_DO                           = 8,
	SABUK_CHANGE_TAX                         = 9,
	ESabukContents_MAX                       = 10,
};

// Enum MirMobile.ESabukFinalRoundCampKind
// NumValues: 0x0006
enum class ESabukFinalRoundCampKind : uint32
{
	NONE                                     = 0,
	Camp1                                    = 1,
	Camp2                                    = 2,
	Camp3                                    = 3,
	Camp4                                    = 4,
	MAX                                      = 5,
};

// Enum MirMobile.EStrongPointEventBuff
// NumValues: 0x0004
enum class EStrongPointEventBuff : uint8
{
	NONE                                     = 0,
	DEBUFF_ALL                               = 1,
	DEBUFF_ONE                               = 2,
	EStrongPointEventBuff_MAX                = 3,
};

// Enum MirMobile.EBattlePassMenu
// NumValues: 0x0003
enum class EBattlePassMenu : uint8
{
	EMenu_Reward                             = 0,
	EMenu_Mission                            = 1,
	EMenu_Max                                = 2,
};

// Enum MirMobile.EPassMenu
// NumValues: 0x0003
enum class EPassMenu : uint8
{
	EMenu_Reward                             = 0,
	EMenu_Mission                            = 1,
	EMenu_Max                                = 2,
};

// Enum MirMobile.ITEM_SLOT_SHOW_WIDGET
// NumValues: 0x0003
enum class EITEM_SLOT_SHOW_WIDGET : uint8
{
	NONE                                     = 0,
	IMG_PLUS                                 = 2,
	ITEM_SLOT_SHOW_MAX                       = 3,
};

// Enum MirMobile.EMirUIActionType
// NumValues: 0x0097
enum class EMirUIActionType : uint8
{
	Goods                                    = 0,
	TotalMenu                                = 1,
	Login                                    = 2,
	Message                                  = 3,
	Forge                                    = 4,
	Transfer                                 = 5,
	Mastery                                  = 6,
	MakeItem                                 = 7,
	Jewel                                    = 8,
	MagicStone                               = 9,
	Forge_LevelUp                            = 10,
	Forge_Smelting                           = 11,
	Forge_OptionChange                       = 12,
	Forge_Popup_OptionChange                 = 13,
	Unsealing                                = 14,
	HUD                                      = 15,
	HUD_SkillSet                             = 16,
	HUD_Quest                                = 17,
	HUD_Chat                                 = 18,
	HUD_QuickSlot                            = 19,
	HUD_Total_QuickSlot                      = 20,
	HUD_Total_QuickSlot_Potion               = 21,
	HUD_Total_QuickSlot_Battle               = 22,
	HUD_TargetList                           = 23,
	Skill                                    = 24,
	NPCShop                                  = 25,
	UIShop                                   = 26,
	DailyWork                                = 27,
	Achievement                              = 28,
	CharInfo                                 = 29,
	CharInfoDetail                           = 30,
	CharAbility                              = 31,
	EquipInfo                                = 32,
	Costume                                  = 33,
	Vehicle                                  = 34,
	Pet                                      = 35,
	QuestObtain                              = 36,
	QuestAccept                              = 37,
	PopUpQuestDelivery                       = 38,
	QuestNormal                              = 39,
	ReQuest                                  = 40,
	QuestRelation                            = 41,
	PopupPackage                             = 42,
	Force                                    = 43,
	CollectionBook                           = 44,
	Dungeon                                  = 45,
	DungeonShop                              = 46,
	Guild                                    = 47,
	GuildDev                                 = 48,
	GuildShop                                = 49,
	GuildExpedition                          = 50,
	EliteDungeon                             = 51,
	Labyrinth                                = 52,
	UnderWorld                               = 53,
	CharacterSelect                          = 54,
	ClassSelect                              = 55,
	Customizing                              = 56,
	Revival                                  = 57,
	Occupation                               = 58,
	Occupation_Auction                       = 59,
	Occupation_Board                         = 60,
	Occupation_Observer                      = 61,
	OccupationSabuk                          = 62,
	OccupationTournament                     = 63,
	StrongPoint                              = 64,
	Plunder                                  = 65,
	DarkAltar                                = 66,
	Mail                                     = 67,
	ItemInfo                                 = 68,
	ItemInfo_Simple                          = 69,
	WorldBoss                                = 70,
	MagicSquare                              = 71,
	SecretDungeon                            = 72,
	WorldMap                                 = 73,
	NPCMaking                                = 74,
	SleepMode                                = 75,
	Friend                                   = 76,
	RecommendEquip                           = 77,
	Party                                    = 78,
	ItemGetWay                               = 79,
	GameOption                               = 80,
	QuestNormalAuto                          = 81,
	Npc_Exchange                             = 82,
	PKRecord                                 = 83,
	Wanted                                   = 84,
	GreatBuilding                            = 85,
	Ranking                                  = 86,
	PKPenalty                                = 87,
	Durability                               = 88,
	CollectionBookReward                     = 89,
	Auction                                  = 90,
	Material_Change                          = 91,
	FT_Exchange                              = 92,
	Hydra_Exchange                           = 93,
	DragonSteel_Exchange                     = 94,
	SeasonToken                              = 95,
	Dominion                                 = 96,
	DominionWanted                           = 97,
	DominionStorage                          = 98,
	Sabuk_Dominion                           = 99,
	Synthesis                                = 100,
	UserEvent                                = 101,
	UserEvent_BattlePass                     = 102,
	UserEvent_Pass                           = 103,
	Teleport                                 = 104,
	TermItem                                 = 105,
	ItemCollection                           = 106,
	ItemTooltip                              = 107,
	ChannelWaiting                           = 108,
	GatherList                               = 109,
	ItemExchange                             = 110,
	KeySetting                               = 111,
	Guide                                    = 112,
	IndividualStorage                        = 113,
	ServerChange                             = 114,
	Transcend                                = 115,
	ItemRefine                               = 116,
	ServerVisit                              = 117,
	ClosedTraining                           = 118,
	ClassPhase                               = 119,
	NFTCharacterTrade                        = 120,
	NFT_Import                               = 121,
	XdracoStorage                            = 122,
	XdracoSealing                            = 123,
	MysticalPiece                            = 124,
	Luxury                                   = 125,
	HumanAuth                                = 126,
	BlackDragon                              = 127,
	ConquerServer                            = 128,
	HolyStuff                                = 129,
	DragonicGear                             = 130,
	DragonGearTransfer                       = 131,
	SabukRank                                = 132,
	Sabuk_Situationboard                     = 133,
	Potential                                = 134,
	DeathValley                              = 135,
	BlackDragonAltar                         = 136,
	MagicOrb                                 = 137,
	MagicOrbEquip                            = 138,
	MagicOrbGrow                             = 139,
	MagicOrbOptionChange                     = 140,
	MagicOrbUpgrade                          = 141,
	NpcItemCraft                             = 142,
	DeckSymbol                               = 143,
	GuildTournament                          = 144,
	HeavenTraining                           = 145,
	Stamp                                    = 146,
	AncientTreasureEquip                     = 147,
	AncientTreasureUpgrade                   = 148,
	PopupStore                               = 149,
	EMirUIActionType_MAX                     = 150,
};

// Enum MirMobile.EUserEvent_Siege_Team
// NumValues: 0x0003
enum class EUserEvent_Siege_Team : uint8
{
	SiegeTeam_Home                           = 1,
	SiegeTeam_Away                           = 2,
	SiegeTeam_MAX                            = 3,
};

// Enum MirMobile.EWarpContentsType
// NumValues: 0x002D
enum class EWarpContentsType : uint8
{
	None                                     = 0,
	MapAuto                                  = 1,
	MapClick                                 = 2,
	MapNpc                                   = 3,
	PartyAssemble                            = 4,
	GetPathHunting                           = 5,
	GetPathGather                            = 6,
	ChatSharedPos                            = 7,
	Quest                                    = 8,
	QuestMainTracker                         = 9,
	QuestMission                             = 10,
	QuestRequestTracker                      = 11,
	MoveToRequestNpc                         = 12,
	QuestRelation                            = 13,
	FieldDungeon                             = 14,
	EliteDungeon                             = 15,
	Labyrinth                                = 16,
	UnderWorld                               = 17,
	Occupation_Enter                         = 18,
	Occupation_Exit                          = 19,
	Plender_Exit                             = 20,
	SabukOccupation_Enter                    = 21,
	SabukOccupation_Exit                     = 22,
	InstanceDungeon                          = 23,
	MagicSquare_Enter                        = 24,
	MagicSquare_Change                       = 25,
	MagicSquare_Leave                        = 26,
	WorldBoss                                = 27,
	WorldBoss_Force                          = 28,
	SecretDungeon_Enter                      = 29,
	SecretDungeon_Leave                      = 30,
	GuildExpedition                          = 31,
	BossExpedition                           = 32,
	BossWaveExpedition                       = 33,
	EmergencyEscape                          = 34,
	ReturnVillage                            = 35,
	AutoBattleReturn                         = 36,
	ChangeChannel                            = 37,
	AutoMove_ReturnToCenter                  = 38,
	UseInvenWarpItem                         = 39,
	BlackDragon                              = 40,
	DeadValley                               = 41,
	GuildTournament_Enter                    = 42,
	GuildTournament_Exit                     = 43,
	EWarpContentsType_MAX                    = 44,
};

// Enum MirMobile.EWarpMethodType
// NumValues: 0x0004
enum class EWarpMethodType : uint8
{
	None                                     = 0,
	Script                                   = 1,
	Fail                                     = 2,
	EWarpMethodType_MAX                      = 3,
};

// Enum MirMobile.NETWORK_CHAIN
// NumValues: 0x0004
enum class ENETWORK_CHAIN : uint8
{
	Tornado                                  = 0,
	Wemix                                    = 1,
	Mainnet                                  = 2,
	NETWORK_MAX                              = 3,
};

// Enum MirMobile.WEMIX_PARAM
// NumValues: 0x000B
enum class EWEMIX_PARAM : uint8
{
	Contract                                 = 1,
	Amount                                   = 2,
	TokenID                                  = 3,
	ItemURI                                  = 4,
	Fee                                      = 5,
	Id                                       = 6,
	User                                     = 10,
	Nonce                                    = 11,
	WemixNonce                               = 12,
	Method                                   = 12,
	WEMIX_MAX                                = 13,
};

// Enum MirMobile.WEMIX_METHOD
// NumValues: 0x000A
enum class EWEMIX_METHOD : uint8
{
	NONE                                     = 0,
	ExchangeToItem                           = 1,
	ExchangeToToken                          = 2,
	Seal                                     = 3,
	Unseal                                   = 4,
	Mint                                     = 5,
	Compose                                  = 6,
	buyVitality                              = 7,
	TransactionSignature                     = 10,
	WEMIX_MAX                                = 11,
};

// Enum MirMobile.WEMIXSDKE_ERROR_V2
// NumValues: 0x0023
enum class EWEMIXSDKE_ERROR_V2 : uint32
{
	NONE                                     = 0,
	USER_CANCELED                            = 100,
	NETWORK_ERROR                            = 101,
	INVALID_REQUEST                          = 102,
	REQUEST_EXPIRED                          = 103,
	PROCESS_CANCELED                         = 104,
	INVALID_CREDENTIAL                       = 105,
	WALLET_NOT_INSTALLED                     = 190,
	WALLET_NOT_CONNECTED                     = 191,
	CHAIN_NOT_SUPPORTED                      = 192,
	WALLET_LAUNCH_RESTRICTED                 = 193,
	PLATFORM_NOT_SUPPORTED_OS_VERSION        = 194,
	INTERNAL_SERVER_ERROR                    = 199,
	ACCESS_TOKEN_EXPIRED                     = 200,
	INVALID_ACCESS_TOKEN                     = 201,
	WC_CONNECT_ERROR                         = 300,
	WC_SIGN_ERROR                            = 301,
	WC_METHOD_NOT_SUPPORTED                  = 302,
	WC_WALLET_NOT_SUPPORTED                  = 303,
	WC_CANNOT_CONNECT_TO_OTHER_WALLET        = 304,
	WC_NO_SESSION                            = 305,
	WP_METHOD_NOT_SUPPORTED                  = 400,
	GUESTUSER_NOT_AVAILABLE                  = 1000001,
	WEMIX_WALLET_CONNECTION_REQUIRED         = 1000002,
	WEMIX_WALLET_NOT_MATCHED                 = 1000003,
	FAILED_LOGIN                             = 1000004,
	WEMIX_WALLET_ALREADY_IN_USE              = 1000005,
	FAILED_REQ_NONCE                         = 1000006,
	INVALID_TRANSACTION_HASH                 = 1000007,
	FAILED_LOAD_URL                          = 1000008,
	INVALID_DRACO_CONTRACT_ADDRESS           = 1000009,
	INVALID_CHARACTER_CONTRACT_ADDRESS       = 1000010,
	INVALID_HYDRA_CONTRACT_ADDRESS           = 1000011,
	INVALID_MIRAGE_CONTRACT_ADDRESS          = 1000012,
	WEMIXSDKE_ERROR_MAX                      = 1000013,
};

// Enum MirMobile.ETotalMenuSetPosition
// NumValues: 0x0004
enum class ETotalMenuSetPosition : uint8
{
	BP_DefaultNone                           = 0,
	Top                                      = 1,
	Bottom                                   = 2,
	ETotalMenuSetPosition_MAX                = 3,
};

// Enum MirMobile.EWidgetID
// NumValues: 0x0372
enum class EWidgetID : uint32
{
	WIDGET_ID_NONE                           = 18446744073709551615,
	MM_TEMP_IMAGE                            = 0,
	MM_B_SKILL                               = 1,
	MM_B_SET_SKILL                           = 2,
	MM_SKILL_LIST_SLOT                       = 3,
	MM_SKILL_DETAIL_LIST                     = 4,
	MM_POPUP_SKILL_ITEM_EXCHANGE             = 5,
	MM_SKILL_AWAKEN_SLOT                     = 6,
	MM_B_LOADING                             = 7,
	MM_B_SHOP_NPC                            = 8,
	MM_B_SHOP_NPC_MAKING                     = 9,
	MM_B_COMMON_POPUP_INFO                   = 10,
	MM_B_COMMON_POPUP_INGAME                 = 11,
	MM_B_COMMON_POPUP_OUTGAME                = 12,
	MM_B_COMMON_POPUP_OUTGAME_ONESTOREPC     = 13,
	MM_B_COMMON_POPUP_CHECK                  = 14,
	MM_B_COMMON_POPUP_EDITTEXT               = 15,
	MM_B_COMMON_POPUP_ERROR                  = 16,
	MM_B_COMMON_POPUP_REWARD                 = 17,
	MM_B_COMMON_POPUP_ITEMINFO               = 18,
	MM_B_COMMON_POPUP_COUNT                  = 19,
	MM_B_POPUP_GAMEOPTION                    = 20,
	MM_B_POPUP_GAMEOPTION_LOGIN              = 21,
	MM_POPUP_COUPON                          = 22,
	MM_COMMON_HORIZONTAL_TAB_BTN             = 23,
	MM_COMMON_VERTICAL_TAB_BTN               = 24,
	MM_COMMON_VERTICAL_TAB_TREE_BTN          = 25,
	MM_COMMON_VERTICAL_TAB_TREE_SUB_BTN      = 26,
	MM_B_POPUP_ACQUIRED_ITEM                 = 27,
	MM_B_POPUP_ACQUIRED_ITEM_SLOT            = 28,
	MM_COMMON_VERTICAL_TAB_SYMBOL_BTN        = 29,
	MM_PANEL_COMMON_LOADING                  = 30,
	MM_POPUP_KEYPAD                          = 31,
	MM_POPUP_KEYPAD_BIG_INTEGER              = 32,
	MM_POPUP_PARTY_PW_KEYPAD                 = 33,
	MM_POPUP_FILTER                          = 34,
	MM_POPUP_EXCHANGE_ITEM                   = 35,
	MM_COMMON_TOOLTIP                        = 36,
	MM_POPUP_DURABILITY                      = 37,
	MM_SORT_BTN                              = 38,
	MM_POPUP_ITEMTOLTIP                      = 39,
	MM_CHARINFO_SLIM                         = 40,
	MM_POPUP_DETAIL_INFO                     = 41,
	MM_POPUP_WEBBROWSER                      = 42,
	MM_POPUP_OPTION_SIMPLE                   = 43,
	MM_POPUP_GUIDE_WEBBROWSER                = 44,
	MM_HEADLINE_MSG                          = 45,
	MM_HUD_BOTTOM_MSG                        = 46,
	MM_HUD_BOTTOM_MSG_SLOT                   = 47,
	MM_HUD_GET_ITEM_MSG                      = 48,
	MM_HUD_GET_ITEM_MSG_SLOT                 = 49,
	MM_TOP_MSG                               = 50,
	MM_TOP_MSG_SLOT                          = 51,
	MM_SCREEN_MSG                            = 52,
	MM_HUD_GET_SPECIAL_ITEM_MSG              = 53,
	MM_CONTENTS_GET_ITEM_MSG                 = 54,
	MM_QUICK_ITEM_ACTION_MSG                 = 55,
	MM_GM_MSG                                = 56,
	MM_B_COMMON_BG                           = 57,
	MM_B_GOODS                               = 58,
	MM_TOTALMENU                             = 59,
	MM_POPUP_CONTENTS_STATE                  = 60,
	MM_POPUP_CONTENTS_ACTION_RESULT          = 61,
	MM_SLOT_INVENTORY                        = 62,
	MM_SLOT_INVENTORY_BG                     = 63,
	MM_SLOT_INVENTORY_DUMMY                  = 64,
	MM_SLOT_INVENTORY_SCALE                  = 65,
	WIDGET_ID_LOGO_MEDIA                     = 66,
	WIDGET_ID_CONVENIENT_LOGIN               = 67,
	MM_B_LOGIN                               = 68,
	MM_POPUP_TERMS_OF_SERVICE                = 69,
	MM_POPUP_VERSION_SELECT                  = 70,
	MM_LOGIN_VERSION_SLOT                    = 71,
	MM_POPUP_NEW_ACCOUNT                     = 72,
	MM_POPUP_ACCOUNT_GUEST                   = 73,
	MM_POPUP_ACCOUNT_INFO                    = 74,
	MM_POPUP_ACCOUNT_SELECT                  = 75,
	MM_POPUP_SERVER_SELECT                   = 76,
	MM_SERVER_SLOT                           = 77,
	MM_FINDCHAR_SLOT                         = 78,
	MM_POPUP_SERVER_SELECT_GLOBAL            = 79,
	MM_SERVER_SLOT_GLOBAL                    = 80,
	MM_FINDCHAR_SLOT_GLOBAL                  = 81,
	MM_REGION_SLOT_GLOBAL                    = 82,
	MM_SERVER_GROUP_GLOBAL                   = 83,
	MM_SERVER_GROUP_NFT                      = 84,
	MM_CONNECTING_LOGIN                      = 85,
	MM_CONNECTING_INGAME                     = 86,
	MM_POPUP_GUEST_CONTINUE                  = 87,
	MM_POPUP_GUEST_CONTINUESETTING           = 88,
	MM_POPUP_LOGIN_QUEUE                     = 89,
	MM_POPUP_WEB_ONESTORE_IAP                = 90,
	MM_POPUP_WEB_XSOLLA_IAP                  = 91,
	MM_POPUP_WEB_STEAM_IAP                   = 92,
	MM_POPUP_REFUND_SANCTIONS                = 93,
	MM_SLOT_REFUND_SANCTIONS_LIST            = 94,
	MM_POPUP_SELECT_REGION                   = 95,
	MM_B_MAGIC_STONE                         = 96,
	MM_MAGIC_STONE_ATTRIEBUTE_SLOT           = 97,
	MM_JEWEL_POPUP_EQUIPED_JEWEL_INFO        = 98,
	MM_JEWEL_POPUP_EQUIPED_JEWEL_INFO_SLOT   = 99,
	MM_B_SMELT                               = 100,
	MM_B_OPTION_CHANGE                       = 101,
	MM_B_UNSEALING                           = 102,
	MM_B_COMMON_ITEM_RESULT                  = 103,
	MM_B_POPUP_OPTION_CHANGE                 = 104,
	MM_B_POPUP_RANDOM_OPTION_LIST            = 105,
	MM_B_POPUP_ITEM_SELECT_BOX               = 106,
	MM_ITEM_OPTION_ABILITY_SLOT              = 107,
	MM_B_ITEM_MAKE                           = 108,
	MM_ITEM_MAKE_SLOT                        = 109,
	MM_ITEMMAKE_SLOT_RECT                    = 110,
	MM_ITEM_MAKE_RESULT                      = 111,
	MM_ITEM_STATE                            = 112,
	MM_ITEM_OPTION_COMPARE                   = 113,
	MM_ITEM_PACKAGE                          = 114,
	MM_ITEM_PACKAGE_SLOT                     = 115,
	MM_ITEM_SIMPLE_INFO                      = 116,
	MM_B_POPUP_RECOMMENDEQUIP                = 117,
	MM_NPC_ITEM_EXCHANGE                     = 118,
	MM_NPC_ITEM_EXCHANGE_SLOT                = 119,
	MM_ITEM_OPTION_PASSIVE                   = 120,
	MM_POPUP_AUTO_OPTIONCHANGE               = 121,
	MM_B_ITEM_COLLECTION                     = 122,
	MM_ITEM_COLLECT_LIST                     = 123,
	MM_SLOT_ITEM_COLLECT                     = 124,
	MM_SLOT_COLLECT_EFFECT                   = 125,
	MM_POPUP_INFO_ITEM_COLLECT               = 126,
	MM_POPUP_REGISTER_COLLECT_ITEM           = 127,
	MM_POPUP_COMPLETE_COLLECT_ITEM           = 128,
	MM_B_COLLECTION_BOOK                     = 129,
	MM_POPUP_COLLECTION_BOOK_COMPLETE        = 130,
	MM_ITEM_MATERIAL_SYNTHESIS               = 131,
	MM_SYSTHESIS_RESULT                      = 132,
	MM_SYSTHESIS_RESULT_SLOT                 = 133,
	MM_CENSER_RESULT                         = 134,
	MM_ITEM_MAKE_SPECIAL_POPUP               = 135,
	MM_POPUP_MATERIAL_CHANGE                 = 136,
	MM_POPUP_UNSEALING_ACCELERATION          = 137,
	MM_UNSEALING_ACCELERATION_SLOT           = 138,
	MM_UNSEALING_SLOT                        = 139,
	MM_POPUP_GET_ITEM                        = 140,
	MM_GET_ITEM_WAY_LIST_SLOT                = 141,
	MM_GET_ITEM_TYPE_SLOT                    = 142,
	MM_GET_ITEM_CATEGORY_SLOT                = 143,
	MM_B_CHARINFO                            = 144,
	MM_POPUP_OTHERUSERINFO                   = 145,
	MM_B_EQUIPMENT                           = 146,
	MM_DETAIL_STATUS_INFO                    = 147,
	MM_SALE_ITEM_BASKET                      = 148,
	MM_OPTION_ABILITY                        = 149,
	MM_POPUP_EQUIP_AUTO                      = 150,
	MM_GROWTH_PROGRESS                       = 151,
	MM_POPUP_CUSTOMTITLE                     = 152,
	MM_POPUP_CUSTOMTITLE_SWITCH              = 153,
	MM_FAME_LIST                             = 154,
	MM_FAME_DETAILINFO_SLOT                  = 155,
	MM_FAME_LIST_MAIN_SLOT                   = 156,
	MM_FAME_LIST_SUB_SLOT                    = 157,
	MM_POPUP_PROFILE                         = 158,
	MM_POPUP_TREMITEM                        = 159,
	MM_SLOT_TREMITEM                         = 160,
	MM_POPUP_STATUS_INFO                     = 161,
	MM_STATUS_INFO                           = 162,
	MM_POPUP_STATUSCONTENTS                  = 163,
	MM_SLOT_STATUSCONTENTS                   = 164,
	MM_B_FORCE                               = 165,
	MM_FORCE_TAB                             = 166,
	MM_B_MASTERY                             = 167,
	MM_B_ACHIEVEMENT                         = 168,
	MM_ACHIEVEMENT_SLOT                      = 169,
	MM_B_REPEAT_ACHIEVEMENT                  = 170,
	MM_B_DUNGEON                             = 171,
	MM_B_RAID_DUNGEON                        = 172,
	MM_DUNGEON_LIST                          = 173,
	MM_DUNGEON_LIST_SLOT                     = 174,
	MM_ELITE_STAGE                           = 175,
	MM_ELITE_STAGE_LIST                      = 176,
	MM_ELITE_STAGE_SLOT                      = 177,
	MM_B_ELITE_DUNGEON                       = 178,
	MM_B_UNDER_WORLD                         = 179,
	MM_DUNGEONSLOT_MATERIAL                  = 180,
	MM_B_DAILYQUEST                          = 181,
	MM_POPUP_QUEST_OBTAIN                    = 182,
	MM_POPUP_QUEST_DELIVERY                  = 183,
	MM_POPUP_QUEST_REPEAT                    = 184,
	MM_POPUP_QUEST_NORMAL_AUTO               = 185,
	MM_QUEST_NORMAL_AUTO_SLOT                = 186,
	MM_QUEST_NORMAL_AUTOSLOT                 = 187,
	MM_SLOT_QUEST                            = 188,
	MM_SLOT_REQUEST                          = 189,
	MM_B_QUESTNORMAL                         = 190,
	MM_B_REQUEST                             = 191,
	MM_POPUP_QUESTINFO                       = 192,
	MM_POPUP_QUEST_ACCEPT                    = 193,
	MM_B_QUESTRELATION                       = 194,
	MM_QUEST_RELATION_SLOT                   = 195,
	MM_QUEST_RELATION_DETAIL_SLOT            = 196,
	MM_QUEST_RELATION_GROUP_SLOT             = 197,
	MM_HUD_QUEST_MESSAGE                     = 198,
	MM_HUD_ADD_RELATION                      = 199,
	MM_HUD_COMPLETE_RELATION                 = 200,
	MM_POPUP_RELATION_REWARDINFO             = 201,
	MM_RELATION_REWARDINFO_SLOT              = 202,
	MM_B_VEHICLE                             = 203,
	MM_VEHICLE_SLOT                          = 204,
	MM_B_COSTUME                             = 205,
	MM_COSTUME_LIST_SLOT                     = 206,
	MM_COSTUME_LIST_SLOT_LONG                = 207,
	MM_COSTUME_COLLECTIONLIST_SLOT           = 208,
	MM_COSTUME_POPUP_ABILITY_PART_OPTION     = 209,
	MM_COSTUME_PALETTE_SLOT                  = 210,
	MM_COSTUME_PALETTE_SLOT_SMALL            = 211,
	MM_B_MAP                                 = 212,
	MM_MAP_PLAYER                            = 213,
	MM_MAP_DEATH_ITEM                        = 214,
	MM_MAP_DEST                              = 215,
	MM_MAP_WAYPOINTDEST                      = 216,
	MM_MAP_PARTY                             = 217,
	MM_MAP_NAMETAG                           = 218,
	MM_MAP_AREABTN                           = 219,
	MM_MAP_WAYPOINT_LIST_SLOT                = 220,
	MM_MAP_CHANNEL_SLOT                      = 221,
	MM_MAP_CHANNEL                           = 222,
	MM_POPUP_IMMEDIATE_CONFIRM               = 223,
	MM_POPUP_MAP_GRADE_INFO                  = 224,
	MM_POPUP_OCCUPATION_INFO                 = 225,
	MM_B_HUD                                 = 226,
	MM_B_PKMode                              = 227,
	MM_HUD_PARTY_USER                        = 228,
	MM_HUD_PARTY_USER_SUBMENU                = 229,
	MM_LIMITTIME                             = 230,
	MM_SKILL_VIRTUALPAD                      = 231,
	MM_B_Growth                              = 232,
	MM_B_GrowthPopup                         = 233,
	MM_HUD_MINIMAP                           = 234,
	MM_HUD_ALARM_TOWN                        = 235,
	MM_HUD_PARTY_INVITE_POPUP                = 236,
	MM_B_HUD_FOLD_MAIN                       = 237,
	MM_B_HUD_DEAD_VALLEY                     = 238,
	MM_HUD_DEAD_VALLEY_BUFF_INFO_SLOT        = 239,
	MM_HUD_DEAD_VALLEY_TIMELINE_SLOT         = 240,
	MM_DAMAGE                                = 241,
	MM_COMBO                                 = 242,
	MM_CROWDCONTROLTEXT                      = 243,
	MM_SUBTARGET                             = 244,
	MM_HUD_RIGHTMENU_DUNGEON                 = 245,
	MM_HUD_RIGHTMENU_MAGICSQUARE             = 246,
	MM_HUD_RIGHTMENU_OCCUPATION              = 247,
	MM_HUD_RIGHTMENU_STRONGPOINT             = 248,
	MM_HUD_RIGHTMENU_SERVERVISIT             = 249,
	MM_HUD_RIGHTMENU_SABUK_OCCUPATION        = 250,
	MM_HUD_RIGHTMENU_GUILDTOURNAMENT         = 251,
	MM_POPUP_SALE_ITEM                       = 252,
	MM_POPUP_ITEM_ORDER_OPTION               = 253,
	MM_POPUP_INVENTORY_EXTEND                = 254,
	MM_POPUP_SUCCESSION_INFO                 = 255,
	MM_INVENTORY_SLOT                        = 256,
	MM_ITEMSLOT_MATERIAL                     = 257,
	MM_ITEMSLOT_SIMPLE_CNT                   = 258,
	MM_SLOT_MATERIAL_RECT                    = 259,
	MM_CONTENTS_OPEN_POPUP                   = 260,
	MM_B_PARTY_INVITE                        = 261,
	MM_B_PARTY_MANAGE                        = 262,
	MM_B_PARTY_SEARCH                        = 263,
	MM_B_SQUAD_LIST                          = 264,
	MM_B_PARTY_INFO                          = 265,
	MM_B_SQUAD_INFO                          = 266,
	MM_B_PARTY_ALARM                         = 267,
	MM_B_PARTY_CREATE                        = 268,
	MM_PARTY_LIST_SLOT                       = 269,
	MM_PARTY_MEMBER_SLOT                     = 270,
	MM_PARTY_INVITE_MEMBER_SLOT              = 271,
	MM_POPUP_PARTY_INFO                      = 272,
	MM_POPUP_PARTY_INFO_SLOT                 = 273,
	MM_PARTY_DUNGEON_LIST_SLOT               = 274,
	MM_PARTY_DUNGEON_MONSTER_SLOT_CREATE     = 275,
	MM_PARTY_DUNGEON_MONSTER_SLOT_MANAGE     = 276,
	MM_PARTY_DUNGEON_STAGE_LEVEL_SLOT        = 277,
	MM_POPUP_PARTY_SLOT_OPTION               = 278,
	MM_POPUP_PARTY_SLOT_OPTION_ITEM          = 279,
	MM_POPUP_DUNGEON_SEARCH                  = 280,
	MM_POPUP_PARTY_MAKE                      = 281,
	MM_POPUP_PARTY_PUBLICIZE                 = 282,
	MM_DUNGEON_SEARCHLIST                    = 283,
	MM_PARTY_MEMBERLIST                      = 284,
	MM_PARTY_SEARCHLIST                      = 285,
	MM_PARTY_INVITE_MEMBERLIST               = 286,
	MM_PARTY_LEFTTAB_SLOT                    = 287,
	MM_B_GUILD                               = 288,
	MM_B_GUILD_CREATION                      = 289,
	MM_B_GUILD_JOIN                          = 290,
	MM_B_GUILD_PERUSE_WORLD                  = 291,
	MM_POPUP_GUILD_JOIN_OR_CREATION          = 292,
	MM_POPUP_GUILD_PERUSE                    = 293,
	MM_GUILD_PERUSE_LIST_SLOT                = 294,
	MM_GUILD_JOIN_REQUEST_LIST_SLOT          = 295,
	MM_GUILD_MEMBER_SLOT_BY_GROUP            = 296,
	MM_GUILD_MEMBER_SLOT_LIST_01             = 297,
	MM_GUILD_MEMBER_SLOT_LIST_02             = 298,
	MM_GUILD_POPUP_MEMBERS                   = 299,
	MM_GUILD_POPUP_GUILD_MEMBER_GRADE_SLOT   = 300,
	MM_GUILD_POPUP_GUILD_MEMBER_POSITION_SLOT = 301,
	MM_GUILD_SHORT_CUT                       = 302,
	MM_POPUP_GUILD_BOARD                     = 303,
	MM_GUILD_ICON_SLOT                       = 304,
	MM_GUILD_DIPLOMACY                       = 305,
	MM_GUILD_DIPLOMACY_LIST_SLOT             = 306,
	MM_POPUP_GUILD_HOSTILITY                 = 307,
	MM_POPUP_GUILD_CREATION                  = 308,
	MM_POPUP_GUILD_SEARCH_EDIT               = 309,
	MM_POPUP_GUILD_SEARCH                    = 310,
	MM_POPUP_GUILD_SEARCH_SLOT               = 311,
	MM_POPUP_CHARACTER_SEARCH_EDIT           = 312,
	MM_POPUP_CHARACTER_SEARCH                = 313,
	MM_POPUP_CHARACTER_SEARCH_SLOT           = 314,
	MM_POPUP_GUILD_INVITE                    = 315,
	MM_POPUP_GUILD_INVITE_SLOT               = 316,
	MM_POPUP_EDIT                            = 317,
	MM_POPUP_GUILD_NAME_CHANGE_EDIT          = 318,
	MM_GUILD_DEV                             = 319,
	MM_POPUP_GUILD_DEV_INFO                  = 320,
	MM_POPUP_GUILD_DEV_INFO_BENEFIT          = 321,
	MM_GUILD_DEV_BENEFIT_SLOT                = 322,
	MM_POPUP_GUILD_DEV_LEVELUP_RESULT        = 323,
	MM_POPUP_GUILD_DEV_SHORTCUT              = 324,
	MM_GUILD_SUPPORT                         = 325,
	MM_GUILD_SUPPORT_SLOT                    = 326,
	MM_GUILD_WANTED                          = 327,
	MM_GUILD_WANTED_SLOT                     = 328,
	MM_POPUP_GUILD_WANTED                    = 329,
	MM_GUILD_SUPPLY                          = 330,
	MM_GUILD_SUPPLY_SLOT                     = 331,
	MM_GUILD_REPORT_SLOT                     = 332,
	MM_GUILD_GIFT_SLOT                       = 333,
	MM_GUILD_GIFT_RESULT                     = 334,
	MM_GUILD_INVENTORY                       = 335,
	MM_GUILD_INVENTORY_LIST_SLOT             = 336,
	MM_GUILD_HISTORY_SLOT                    = 337,
	MM_B_GUILD_MARK_CHANGE                   = 338,
	MM_POPUP_GUILD_REWARD_INFO               = 339,
	MM_POPUP_GUILD_PERMISSION                = 340,
	MM_GUILD_SHOP                            = 341,
	MM_GUILD_SHOP_LIST                       = 342,
	MM_POPUP_GUILD_SHOP_RECORD               = 343,
	MM_GUILD_SHOP_RECORD_LIST_SLOT           = 344,
	MM_GUILD_POPUP_PARTNER                   = 345,
	MM_GUILD_POPUP_PARTNER_SLOT              = 346,
	MM_POPUP_GUILD_DONATION                  = 347,
	MM_POPUP_GUILD_DONATION_DETAILS          = 348,
	MM_POPUP_GUILD_DONATION_DETAILS_SLOT     = 349,
	MM_POPUP_GUILD_GIVE_PERSONAL             = 350,
	MM_POPUP_GUILD_GIVE_MEMBER_SLOT          = 351,
	MM_POPUP_GUILD_GIVE_OTHER_SLOT           = 352,
	MM_POPUP_GUILD_GIVE_ALLIANCE             = 353,
	MM_POPUP_GUILD_GIVE_ALLIANCE_SLOT        = 354,
	MM_POPUP_GUILD_GIVE                      = 355,
	MM_POPUP_GUILD_COST_EXCHANGE             = 356,
	MM_POPUP_GUILD_FRIENDSHIP_LIST           = 357,
	MM_POPUP_GUILD_FRIENDSHIP_LIST_SLOT      = 358,
	MM_POPUP_GUILD_BLACK_IRON_SHOP_SELL      = 359,
	MM_POPUP_GUILD_BLACK_IRON_SHOP_STATE     = 360,
	MM_POPUP_GUILD_AUTHORITY                 = 361,
	MM_POPUP_GUILD_AUTHORITY_SLOT            = 362,
	MM_POPUP_GUILD_OTHER_MEMBERS             = 363,
	MM_POPUP_GUILD_OTHER_MEMBERS_SLOT        = 364,
	MM_POPUP_ALTAR                           = 365,
	MM_ALTAR_GROUP                           = 366,
	MM_ALTAR_SLOT                            = 367,
	MM_B_GUILD_BLACK_IRON_INVENTORY          = 368,
	MM_B_GUILD_BLACK_IRON_INVENTORY_LIST_SLOT = 369,
	MM_POPUP_GUILD_BLACK_IRON_SHOP_MOVE      = 370,
	MM_POPUP_GUILD_BLACK_IRON_SHOP_GIVE      = 371,
	MM_POPUP_GUILD_LIST                      = 372,
	MM_GUILD_LIST_SLOT                       = 373,
	MM_B_PKRECORD                            = 374,
	MM_PKRECORD_LIST_SLOT                    = 375,
	MM_POPUP_PKRECORDINFO                    = 376,
	MM_B_WANTED                              = 377,
	MM_POPUP_WANTED_REGIST                   = 378,
	MM_WANTED_SLOT                           = 379,
	MM_B_AUCTION                             = 380,
	MM_AUCTION_SLOT_BOOKMARK                 = 381,
	MM_AUCTION_SLOT_SELL                     = 382,
	MM_AUCTION_SLOT_NORMAL                   = 383,
	MM_AUCTION_SLOT_RESULT                   = 384,
	MM_AUCTION_SLOT_MATERIAL                 = 385,
	MM_POPUP_AUCTION_BUYINFO                 = 386,
	MM_POPUP_AUCTION_CBACK                   = 387,
	MM_POPUP_AUCTION_COUNT                   = 388,
	MM_POPUP_AUCTION_GUILD                   = 389,
	MM_POPUP_AUCTION_REGIST                  = 390,
	MM_POPUP_AUCTION_INFO_REGIST             = 391,
	MM_AUCTION_COMBO_SLOT                    = 392,
	MM_AUCTION_ENCHANT_COMBO_SLOT            = 393,
	MM_B_CHANCE                              = 394,
	MM_B_RANKING                             = 395,
	MM_RANKING_REWARD_LIST                   = 396,
	MM_RANKING_REWARD_POPUP                  = 397,
	MM_RANKING_SEASON_START                  = 398,
	MM_RANKING_LIST_SLOT                     = 399,
	MM_RANKING_REWARD_LIST_NEW               = 400,
	MM_RANKING_REWARD_POPUP_NEW              = 401,
	EDITOR_CHEATS                            = 402,
	EDITOR_MAP_PREVIEW_TOOL                  = 403,
	EDITOR_UI_PREVIEW_TOOL                   = 404,
	EDITOR_CHEAT_CONNECTSERVER               = 405,
	MM_HUD_CHAT_POPUP                        = 406,
	MM_POPUP_CHAT                            = 407,
	MM_POPUP_CHAT_SETTING                    = 408,
	MM_POPUP_CHAT_BLOCKLIST                  = 409,
	MM_POPUP_CHAT_MACROLIST                  = 410,
	MM_POPUP_CHAT_VOICEOPTION                = 411,
	MM_HUD_CHAT_BROADCAST_MESSAGE            = 412,
	MM_POPUP_COMMON_CHECKBOX                 = 413,
	MM_POPUP_CHAT_RENDER_OPACITY             = 414,
	MM_POPUP_EMPEROR_SHOUT                   = 415,
	MM_HUD_CHAT_CHANNEL_TAB                  = 416,
	MM_HUD_CHAT_MESSAGE                      = 417,
	MM_HUD_CHAT_TALKMESSAGE_MINE             = 418,
	MM_HUD_CHAT_TALKMESSAGE_OTHER            = 419,
	MM_HUD_CHAT_STATUS_MESSAGE               = 420,
	MM_HUD_CHAT_ITEMSHARE_MINE               = 421,
	MM_HUD_CHAT_ITEMSHARE_OTHER              = 422,
	MM_HUD_CHAT_ADVERTISE                    = 423,
	MM_HUD_CHAT_BLOCKLIST_SLOT               = 424,
	MM_HUD_CHAT_WHISPER_SLOT                 = 425,
	MM_HUD_CHAT_USER_SLOT                    = 426,
	MM_HUD_CHAT_DOTTED_LINE                  = 427,
	MM_HUD_CHAT_BROADCAST_MSG                = 428,
	MM_HUD_CHAT_PARTYINVITE_MINE             = 429,
	MM_HUD_CHAT_PARTYINVITE_OTHER            = 430,
	MM_HUD_CHAT_EMPEROR_SHOUT                = 431,
	MM_ALARM_LIST_POPUP                      = 432,
	MM_ALARM_LIST_SLOT                       = 433,
	MM_B_OCCUPATION                          = 434,
	MM_OCCUPATION_STAGEPOPUP                 = 435,
	MM_WORSHIP_POPUP                         = 436,
	MM_OCCUPATION_BATTLESTART                = 437,
	MM_OCCUPATION_BATTLERESULT               = 438,
	MM_OCCUPATION_RANKLIST                   = 439,
	MM_OCCUPATION_AUCTION_POPUP              = 440,
	MM_OCCUPATION_AUCTION_INVITE_POPUP       = 441,
	MM_OCCUPATION_INVITE_SLOT                = 442,
	MM_OCCUPATION_SITUATION_BOARD            = 443,
	MM_OCCUPATION_MINIMAP_ICON               = 444,
	MM_OCCUPATION_KILL_LOG_SLOT              = 445,
	MM_POPUP_SIEGE_COMMAND_EDITTEXT          = 446,
	MM_OCCUPATION_COMMANDMARK                = 447,
	MM_OCCUPATION_KINGASCENSION              = 448,
	MM_B_STRONGPOINT                         = 449,
	MM_STRONGPOINT_LIST_SLOT                 = 450,
	MM_STRONGPOINT_RESULT                    = 451,
	MM_POPUP_STRONGPOINT_WINTARGET           = 452,
	MM_POPUP_STRONGPOINT_WINTARGET_PROCLAMATION = 453,
	MM_POPUP_DARKALTAR_TARGET                = 454,
	WIDGET_ID_FADE                           = 455,
	MM_POPUP_REVIVAL                         = 456,
	MM_POPUP_DEATH_PENALTY                   = 457,
	MM_POPUP_RESTORE_EXP                     = 458,
	MM_POPUP_RESTORE_EXP_SLOT                = 459,
	MM_POPUP_RESTORE_ITEM                    = 460,
	MM_POPUP_RESTORE_ITEM_SLOT               = 461,
	MM_B_MAIL                                = 462,
	MM_MAIL_SLOT_MESSAGE                     = 463,
	MM_POPUP_MAILWRITE                       = 464,
	MM_POPUP_ADDRESSBOOK                     = 465,
	MM_POPUP_ADDRESSBOOK_SLOT                = 466,
	MM_B_PET                                 = 467,
	MM_PETSLOT                               = 468,
	MM_PET_STAT_SLOT                         = 469,
	MM_PET_ABILITY_SLOT                      = 470,
	MM_POPUP_UNLOCKED_PET_STAT_INFO          = 471,
	MM_POPUP_EQUIPPED_PET_STAT_INFO          = 472,
	MM_POPUP_REVIVAL_SELECT                  = 473,
	MM_POPUP_REVIVAL_SELECT_SLOT             = 474,
	MM_POPUP_PET_GRADEUP                     = 475,
	MM_B_DOMINION                            = 476,
	MM_B_DOMINION_BICHEON                    = 477,
	MM_B_DOMINION_VALLEY                     = 478,
	MM_DOMINION_BASE_SLOT                    = 479,
	MM_DOMINION_TAX_LIST                     = 480,
	MM_DOMINION_TAX_GROUP                    = 481,
	MM_DOMINION_TAX_SLOT                     = 482,
	MM_DOMINION_HISTORY                      = 483,
	MM_DOMINION_HISTORY_SLOT                 = 484,
	MM_POPUP_DOMINION_TAX_DETAIL             = 485,
	MM_POPUP_DOMINION_REWARD                 = 486,
	MM_POPUP_DOMINION_REWARD_SLOT            = 487,
	MM_POPUP_DOMINION_REWARD_LIST            = 488,
	MM_POPUP_DOMINION_REWARD_LIST_SLOT       = 489,
	MM_POPUP_DOMINION_CLASS                  = 490,
	MM_POPUP_DOMINION_CLASS_RARE_GROUP       = 491,
	MM_POPUP_DOMINION_CLASS_RARE_LIST        = 492,
	MM_POPUP_DOMINION_CLASS_RARE_SLOT        = 493,
	MM_POPUP_DOMINION_CLASS_NORMAL_GROUP     = 494,
	MM_POPUP_DOMINION_CLASS_NORMAL_LIST      = 495,
	MM_POPUP_DOMINION_CLASS_NORMAL_SLOT      = 496,
	MM_POPUP_DOMINION_COMMAND                = 497,
	MM_POPUP_DOMINION_COMMAND_SLOT           = 498,
	MM_POPUP_DOMINION_WITHDRAWAL             = 499,
	MM_POPUP_DOMINION_GUILD_MEMBER_LIST      = 500,
	MM_POPUP_DOMINION_GUILD_MEMBER_LIST_SLOT = 501,
	MM_B_DOMINION_WANTED                     = 502,
	MM_DOMINION_WANTED_SLOT                  = 503,
	MM_POPUP_DOMINION_TOOLTIP                = 504,
	MM_DOMINION_STORAGE_GOLD                 = 505,
	MM_DOMINION_STORAGE_BLACKIRON            = 506,
	MM_B_SABUK_DOMINION                      = 507,
	MM_POPUP_SABUK_EMPEROR_ORDER             = 508,
	MM_POPUP_SABUK_EMPEROR_ORDER_LIST_SLOT   = 509,
	MM_POPUP_SABUK_EMPEROR_ORDER_EFFECT      = 510,
	MM_POPUP_SABUK_EMPEROR_ORDER_EFFECT_SLOT = 511,
	MM_POPUP_SABUK_CLASS                     = 512,
	MM_POPUP_SABUK_CLASS_LIST                = 513,
	MM_POPUP_SABUK_CLASS_GROUP               = 514,
	MM_POPUP_SABUK_CLASS_SLOT                = 515,
	MM_POPUP_SABUK_PRIZE                     = 516,
	MM_POPUP_SABUK_PRIZE_SLOT                = 517,
	MM_POPUP_SABUK_PRIZELIST                 = 518,
	MM_POPUP_SABUK_PRIZELIST_SLOT            = 519,
	MM_POPUP_SABUK_TAXRATE_ADJUST            = 520,
	MM_POPUP_SABUK_TAXRATE_ADJUST_SLOT       = 521,
	MM_POPUP_SABUK_TAXRATE_INFO              = 522,
	MM_POPUP_SABUK_TAXRATE_INFO_SLOT         = 523,
	MM_POPUP_SABUK_REWARD_INFO               = 524,
	MM_POPUP_SABUK_CAPTURE_OCCUPY            = 525,
	MM_POPUP_SABUK_R1R2_ROUND_RESULT         = 526,
	MM_SABUK_THIRD_ROUND_RESULT              = 527,
	MM_SABUK_EMPEROR_APPOINTMENT             = 528,
	MM_POPUP_GATHER_LIST                     = 529,
	MM_POPUP_GATHER_LIST_SLOT                = 530,
	MM_COMMON_COMBO_SLOT                     = 531,
	MM_B_ITEM_TRANSCEND                      = 532,
	MM_B_ITEM_REFINE                         = 533,
	MM_B_MYSTICALPIECE                       = 534,
	MM_MYSTICALPIECE_STAMPOPTION             = 535,
	MM_B_HOLYSTUFF                           = 536,
	MM_HOLYSTUFF_TAB                         = 537,
	MM_POPUP_HOLYSTUFF_DETAIL                = 538,
	MM_HOLYSTUFF_DETAIL_STAT_SLOT            = 539,
	MM_HOLYSTUFF_PASSIVE_SLOT                = 540,
	MM_POPUP_HOLYSTUFF_DETAIL_PASSIVE_INFO   = 541,
	MM_HOLYSTUFF_DETAIL_PASSIVE_SLOT         = 542,
	MM_GUILD_COOP_MISSION                    = 543,
	MM_GUILD_COOP_MISSION_SLOT               = 544,
	MM_POPUP_COOP_BOSS                       = 545,
	WIDGET_ID_CHARACTER_SELECT               = 546,
	WIDGET_ID_CLASS_SELECT                   = 547,
	WIDGET_ID_CUSTOMIZING                    = 548,
	WIDGET_ID_CUSTOMIZING_LIST               = 549,
	WIDGET_ID_CUSTOMIZING_LIST_SLOT          = 550,
	WIDGET_ID_CUSTOMIZING_PALETTE            = 551,
	WIDGET_ID_CUSTOMIZING_PALETTE_SLOT       = 552,
	WIDGET_ID_CUSTOMIZING_SLIDER             = 553,
	WIDGET_ID_CUSTOMIZING_PICKER             = 554,
	WIDGET_ID_CUSTOMIZING_MY_COSTUME         = 555,
	WIDGET_ID_CUSTOMIZING_COSTUME_DYE        = 556,
	WIDGET_ID_CUSTOMIZING_SCREENSHOOT        = 557,
	WIDGET_ID_CUSTOMIZING_STYLEBOOK          = 558,
	WIDGET_ID_LOADING                        = 559,
	WIDGET_ID_DEBUGPANEL                     = 560,
	WIDGET_ID_PHASE_FAIL                     = 561,
	WIDGET_ID_PLAYER_LEVEL_UP                = 562,
	WIDGET_ID_INGAME_BUFF_ICON               = 563,
	WIDGET_ID_INGAME_GET_GOLD                = 564,
	WIDGET_ID_CUTSCENE_DIALOGUE              = 565,
	WIDGET_ID_SMALLTALK                      = 566,
	WIDGET_ID_ACHIEVEMENT                    = 567,
	WIDGET_ID_ACHIEVEMENTLIST                = 568,
	WIDGET_ID_CHATTING                       = 569,
	WIDGET_ID_COMMONPOPUPLINE                = 570,
	WIDGET_ID_BUFFINFOLIST                   = 571,
	WIDGET_ID_COMBATPOINTPOPUP               = 572,
	WIDGET_ID_NAMETAG                        = 573,
	WIDGET_ID_TARGETINFO                     = 574,
	MM_POPUP_GUILD_COMMAND_MARK              = 575,
	MM_PATCH_WIDGET                          = 576,
	MM_PATCHMOVIE_WIDGET                     = 577,
	MM_MINIGAME_WIDGET                       = 578,
	WIDGET_ID_REVIVAL                        = 579,
	WIDGET_ID_MOVIEPLAYER                    = 580,
	WIDGET_ID_BOSSAPPEAR                     = 581,
	WIDGET_ID_COUNT_DOWN                     = 582,
	WIDGET_ID_OPERATING_BUTTON               = 583,
	WIDGET_ID_BLOCK_SCREEN                   = 584,
	WIDGET_ID_OBJECTNAMETAG                  = 585,
	WIDGET_ID_SCRIPT_SUBTITLE                = 586,
	WIDGET_ID_SEQUENCE_SKIP                  = 587,
	WIDGET_ID_TUTORIAL_START                 = 588,
	WIDGET_ID_TUTORIAL_GUID                  = 589,
	WIDGET_ID_TUTORIAL_GUID_COMMENT          = 590,
	WIDGET_ID_TUTORIAL_NPCDIALOG             = 591,
	WIDGET_ID_TUTORIAL_PAGE                  = 592,
	WIDGET_ID_TUTORIAL_GUIDE_PET             = 593,
	WIDGET_ID_MY_LOG                         = 594,
	MM_B_UISHOP                              = 595,
	MM_UISHOP_MAIN_TAB                       = 596,
	MM_UISHOP_SUB_TAB                        = 597,
	MM_UISHOP_GOODS_BIG_SLOT                 = 598,
	MM_UISHOP_GOODS_SLOT                     = 599,
	MM_UISHOP_GOODS_SCROLL_BOX               = 600,
	MM_UISHOP_GOODS_DETAIL_SLOT              = 601,
	MM_POPUP_GOODS_BUY                       = 602,
	MM_POPUP_NPC_SHOP_BUY_COUNT              = 603,
	MM_NPC_SHOP_LIST_SLOT                    = 604,
	MM_DUNGEON_SHOP                          = 605,
	MM_DUNGEON_SHOP_LIST                     = 606,
	MM_B_BLACKIRONCHANGE                     = 607,
	MM_SLEEPMODE                             = 608,
	MM_POPUP_GET_HISTORY                     = 609,
	MM_SLOT_GET_HISTORY                      = 610,
	MM_B_WORLDBOSS_LIST                      = 611,
	MM_BOSS_APPEARANCE                       = 612,
	MM_BOSS_CONTRIBUTION                     = 613,
	MM_POPUP_WORLDBOSS_CHANNEL               = 614,
	MM_SLOT_WORLDBOSS_CHANNEL                = 615,
	MM_POPUP_BOSS_TIME                       = 616,
	MM_POPUP_BOSS_REWARD                     = 617,
	MM_B_SQUARE_LIST                         = 618,
	MM_POPUP_SQUARESTAGE_LIST                = 619,
	MM_POPUP_SQUARESTAGE_LIST_SLOT           = 620,
	MM_POPUP_QUICKSLOT_OPTION                = 621,
	MM_SLOT_QUICKSLOT                        = 622,
	MM_SQUARE_DROP_LIST                      = 623,
	MM_TOTAL_QUICK                           = 624,
	MM_TOTAL_QUICK_SKILL_SLOT                = 625,
	MM_POPUP_QUICKSLOT_TOWNNPC_POSITION      = 626,
	MM_B_SECRET_DUNGEON                      = 627,
	MM_DUNGEON_QUEST_SLOT                    = 628,
	MM_POPUP_SECRET_INFO                     = 629,
	MM_B_FRIEND                              = 630,
	MM_FRIEND_LIST_SLOT                      = 631,
	MM_POPUP_FRIEND_SEARCH                   = 632,
	MM_POPUP_FRIEND_ORDER_OPTION             = 633,
	MM_POPUP_RAID_REWARD                     = 634,
	MM_CHARACTER_REWARD_SLOT                 = 635,
	MM_CHARACTER_REWARD_SLOT2                = 636,
	MM_B_POPUP_DUNGEON_EVENT_TIME_SLOT       = 637,
	MM_B_POPUP_DUNGEON_EVENT_ICON_SLOT       = 638,
	MM_POPUP_EMOTE                           = 639,
	MM_PHOTOMODE                             = 640,
	MM_DUNGEON_COMMON_SLOT                   = 641,
	MM_GUILD_EXPEDITION_LIST                 = 642,
	MM_GUILD_BOSS_EXPEDITION_LIST            = 643,
	MM_GUILD_BOSS_WAVE_EXPEDITION_LIST       = 644,
	MM_B_GREAT_BUILDING                      = 645,
	MM_POPUP_BUILDING                        = 646,
	MM_POPUP_BUILDING_LIST                   = 647,
	MM_POPUP_BUILDING_CHART                  = 648,
	MM_POPUP_BUILDING_CHART_LIST             = 649,
	MM_POPUP_BUILDING_ACCEL                  = 650,
	MM_WARNING_SCREEN                        = 651,
	MM_PK_WARNING_SCREEN                     = 652,
	MM_SHOCK_WARNING_SCREEN                  = 653,
	MM_POPUP_PK_PENALTY                      = 654,
	MM_POPUP_GACHA_RESULT                    = 655,
	MM_POPUP_USER_EVENT                      = 656,
	MM_USER_EVENT_ATTENDANCE_MONTH           = 657,
	MM_USER_EVENT_TAB_SLOT                   = 658,
	MM_USER_EVENT_ITEM_SLOT                  = 659,
	MM_USER_EVENT_BATTLEPASS_REWARD_SLOT     = 660,
	MM_USER_EVENT_BATTLEPASS_MISSION_SLOT    = 661,
	MM_USER_EVENT_BATTLEPASS_DAY_REWARD_SLOT = 662,
	MM_POPUP_BATTLEPASS_BUYINFO              = 663,
	MM_USER_EVENT_GOAL_SLOT                  = 664,
	MM_USER_EVENT_GOLD_SLOT                  = 665,
	MM_POPUP_USEREVENT_PAINT_EXCHANGE        = 666,
	MM_POPUP_USEREVENT_PAINT_EXCHANGE_SLOT   = 667,
	MM_POPUP_USEREVENT_PAINT_REGIST          = 668,
	MM_USER_EVENT_EVENTPASS_REWARD_SLOT      = 669,
	MM_USER_EVENT_EVENTPASS_MISSION_SLOT     = 670,
	MM_POPUP_EVENTPASS_BUYINFO               = 671,
	MM_USER_EVENT_EXCHANGE_SHOP_SLOT         = 672,
	MM_USER_EVENT_MISSIONPASS_SLOT           = 673,
	MM_POPUP_TELEPORT                        = 674,
	MM_TELEPORT_SLOT                         = 675,
	MM_DEUL_RESULT                           = 676,
	MM_NEW_OCCUPATION_BATTLERESULT           = 677,
	MM_NEW_OCCUPATION_RANKING_LIST           = 678,
	MM_POPUP_OCCUPATION_RANK_REWARD          = 679,
	MM_OCCUPATION_RANK_REWARD_LIST           = 680,
	MM_POPUP_OCCUPATION_RANK_BOARD           = 681,
	MM_SLOT_OCCUPATION_RANKING               = 682,
	MM_POPUP_OCCUPATION_SIEGESET             = 683,
	MM_POPUP_OCCUPATION_SIEGETANK            = 684,
	MM_OCCUPATION_OBSERVER                   = 685,
	MM_OCCUPATION_OBSERVER_KILLLOG_SLOT      = 686,
	MM_COMMON_POPUP_CHANNELWAITING           = 687,
	MM_POPUP_GUILD_WELCOME                   = 688,
	MM_POPUP_GACHA_PERCENT                   = 689,
	MM_POPUP_EXP_BOOSTER                     = 690,
	MM_POPUP_EXP_BOOSTER_SLOT                = 691,
	MM_POPUP_EXP_BOOSTER_CHARGE              = 692,
	MM_B_ITEM_EXCHANGE                       = 693,
	MM_GAMEOPTION_KEYSETTING_GROUP           = 694,
	MM_GAMEOPTION_KEYSETTING_GROUP_SLOT      = 695,
	MM_SHORT_CUT_KEY                         = 696,
	MM_SHORT_CUT_KEY_2                       = 697,
	MM_UISHOP_CASH_BAG_SLOT                  = 698,
	MM_POPUP_GIFT_GIVE                       = 699,
	MM_POPUP_UISHOP_GOODS_DETAIL             = 700,
	MM_POPUP_UISHOP_GUILD_GIFT               = 701,
	MM_POPUP_UISHOP_BANNER                   = 702,
	MM_POPUP_UISHOP_MESSAGE                  = 703,
	MM_COMMON_POPUP_STOP_WATCHING_TODAY      = 704,
	MM_COMMON_POPUP_STOP_WATCHING_ITEM_TODAY = 705,
	MM_B_SKILL_AWAKEN_RESULT                 = 706,
	MM_POPUP_NAMECHANGE                      = 707,
	MM_UISHOP_GOODS_PREIOD_DETAIL_SLOT       = 708,
	MM_B_INDIVIDUAL_STORAGE                  = 709,
	MM_POPUP_SERVERRELOCATION                = 710,
	MM_POPUP_SERVERLIST                      = 711,
	MM_SERVERRELOCATION_SERVERLIST           = 712,
	MM_SERVERRELOCATION_SETLIST              = 713,
	MM_POPUP_SERVERLIST_GLOBAL               = 714,
	MM_SERVERRELOCATIONGROUP_GLOBAL          = 715,
	MM_SERVERRELOCATIONREGION_GLOBAL         = 716,
	MM_SERVERRELOCATIONSLOT_GLOBAL           = 717,
	MM_POPUP_FRONT_BANNER                    = 718,
	MM_POPUP_AUTO_SMELT                      = 719,
	MM_USER_EVENT_GACHA_RESULT               = 720,
	MM_POPUP_SKILL_AWAKEN_LIST               = 721,
	MM_POPUP_UISHOP_STEP_LIST                = 722,
	MM_POPUP_SERVERVISIT_MEMBERS             = 723,
	MM_POPUP_SERVERVISIT_MEMBERS_SLOT        = 724,
	MM_POPUP_SERVERVISITLLIST                = 725,
	MM_POPUP_SERVERVISITSELECT               = 726,
	MM_POPUP_SERVERVISITRELOCATION           = 727,
	MM_SERVERVISITRELOCATION_SERVERLIST      = 728,
	MM_SERVERVISITRELOCATION_SETLIST         = 729,
	MM_HUD_SERVERVISITMAP                    = 730,
	MM_SERVERVISIT_WAYPOINT_CATEGORY         = 731,
	MM_SERVERVISIT_WAYPOINT_LIST_SLOT        = 732,
	MM_POPUP_SERVERVISIT_GUILDALLY           = 733,
	MM_POPUP_SERVERVISIT_GUILDALLY_SLOT      = 734,
	MM_POPUP_SERVERVISITSELECT_SLOT          = 735,
	MM_B_SERVERVISIT_PLUNDER                 = 736,
	MM_B_SERVERVISIT_PLUNDERSTAGE_SLOT       = 737,
	MM_POPUP_SERVERVISIT_PLUNDER_INFO        = 738,
	MM_POPUP_SERVERVISIT_PLUNDER_STORE       = 739,
	MM_HUD_GULD_EXCEPT_ATTACK                = 740,
	MM_HUD_GULD_EXCEPT_ATTACK_SLOT           = 741,
	MM_B_CLOSED_TRAINING                     = 742,
	MM_POPUP_CLOSED_TRAINING_COLLECT         = 743,
	MM_POPUP_CLOSED_TRAINING_ABILITY         = 744,
	MM_POPUP_CLOSED_TRAINING_COLLECT_RESULT  = 745,
	MM_POPUP_CLOSED_TRAINING_DETAIL_STAT     = 746,
	MM_CLOSED_TRAINING_COLLECT_LIST_SLOT     = 747,
	MM_CLOSED_TRAINING_ABILITY_SLOT          = 748,
	MM_CLOSED_TRAINING_COLLECT_RESULT_SLOT   = 749,
	MM_CLOSED_TRAINING_DETAIL_STAT_SLOT      = 750,
	MM_GAMEOPTION_LANGUAGE_SLOT              = 751,
	MM_WEMIX_WEBBROWSER                      = 752,
	MM_B_CLASS_PHASE                         = 753,
	MM_CLASS_PHASE_CLASS_SLOT                = 754,
	MM_CLASS_PHASE_INFO_SLOT                 = 755,
	MM_CLASS_PHASE_SKILL_INFO_SLOT           = 756,
	MM_CLASS_PHASE_SKILL_SLOT                = 757,
	MM_SIEGE_OBSERVER_SITUATION_BOARD        = 758,
	MM_B_FT_EXCHANGE                         = 759,
	MM_B_HYDRA_EXCHANGE                      = 760,
	MM_B_DRAGONSTEEL_EXCHANGE                = 761,
	MM_B_SEASONTOKEN                         = 762,
	MM_B_NFT_RELOCATION                      = 763,
	MM_NFTRELOCATION_SETLIST                 = 764,
	MM_B_XDRACO_STORAGE                      = 765,
	MM_B_XDRACO_SEALING                      = 766,
	MM_ITEMSEALING_SLOT                      = 767,
	MM_POPUP_XDRACO_SEALING                  = 768,
	MM_B_POPUP_NFT_CHARACTER_LIST            = 769,
	MM_B_POPUP_NFT_CHARACTER_LIST_SLOT       = 770,
	MM_B_UISHOP_ADS                          = 771,
	MM_POPUP_UISHOP_ADS_REWARD               = 772,
	MM_B_UISHOP_CASHBAG                      = 773,
	MM_POPUP_GIFTGIVESLOT_01                 = 774,
	MM_POPUP_GIFTGIVESLOT_02                 = 775,
	MM_POPUP_GIFT_USER_SERACH                = 776,
	MM_POPUP_GIFT_USER_SERACH_SLOT           = 777,
	MM_POPUP_GIFT_HISOTRY                    = 778,
	MM_POPUP_GIFT_HISOTRY_SLOT               = 779,
	MM_POPUP_AUTO_EXTENDTIME                 = 780,
	MM_B_LUXURY                              = 781,
	MM_SLOT_LUXURY_INVENTORY                 = 782,
	MM_POPUP_AUTO_LOGOUT                     = 783,
	MM_POPUP_UISHOP_SHOPPING_BAG             = 784,
	MM_UISHOP_SHOPPING_BAG_SLOT              = 785,
	MM_BLACKDRAGON_DUNGEON_LIST              = 786,
	MM_POPUP_CONQUERSERVER                   = 787,
	MM_CONQUERSERVER_SCHEDULE                = 788,
	MM_CONQUERSERVER_SETLIST                 = 789,
	MM_POPUP_ITEM_DISPLAY_INFO               = 790,
	MM_XSOLLA_SOCIAL_WEBBROWSER              = 791,
	MM_B_DRAGONICGEAR                        = 792,
	MM_POPUP_DRAGONICGEAR_EQUIPAUTO          = 793,
	MM_B_DRAGONGEAR_TRANSFER                 = 794,
	MM_POPUP_SABUK_RANK                      = 795,
	MM_SABUK_RANK_LIST_SLOT                  = 796,
	MM_SABUK_WARSITUATION_SLOT               = 797,
	MM_POPUP_SABUK_ROUND                     = 798,
	MM_SABUK_ROUND_STAGE_LIST_SLOT           = 799,
	MM_B_SABUK_SITUATIONBOARD                = 800,
	MM_HELL_RAID_DUNGEON_LIST                = 801,
	MM_B_POTENTIAL                           = 802,
	MM_POPUP_POTENTIAL_TOTALINFO             = 803,
	MM_POPUP_POTENTIAL_NODEINFO              = 804,
	MM_POPUP_POTENTIAL_NODEDETAILINFO        = 805,
	MM_POPUP_POTENTIAL_FILTER                = 806,
	MM_POTENTIAL_NODEDETAILINFO_SLOT         = 807,
	MM_POTENTIAL_LINE                        = 808,
	MM_POTENTIAL_STATUS_SLOT                 = 809,
	MM_POTENTIAL_PASSIVE_SLOT                = 810,
	MM_POTENTIAL_FILTER_SLOT                 = 811,
	MM_POPUP_MAPMARK                         = 812,
	MM_POPUP_MAPMARK_SLOT                    = 813,
	MM_POPUP_PERSONAL_INFO                   = 814,
	MM_POPUP_POSTCODE_CHANGE                 = 815,
	MM_B_DEATH_VALLEY_ENTRY                  = 816,
	MM_B_DEADVALLEY_RESULTMSG                = 817,
	MM_B_DEADVALLEY_RESULTMSG_DRAW           = 818,
	MM_POPUP_DEATH_VALLEY_RESULT             = 819,
	MM_DEATH_VALLEY_RESULT_SLOT              = 820,
	MM_POPUP_DEATH_VALLEY_RECORD             = 821,
	MM_DEATH_VALLEY_RECORD_SLOT              = 822,
	MM_DEATH_VALLEY_RECORD_USER_SLOT         = 823,
	MM_DEATH_VALLEY_STAGE_SLOT               = 824,
	MM_DEATH_VALLEY_BUFF_SLOT                = 825,
	MM_DEATH_VALLEY_SHORTCUT                 = 826,
	MM_BUFF_INFO_SLOT                        = 827,
	MM_POPUP_DEADVALLEY_BATTLELOG            = 828,
	MM_DEADVALLEY_BATTLELOG_SLOT             = 829,
	MM_POPUP_DEADVALLEY_REWARD               = 830,
	MM_DEADVALLEY_REWARD_SLOT                = 831,
	MM_DEADVALLEY_DROP_BUFF_SLOT             = 832,
	MM_B_MAGICORB_EQUIP                      = 833,
	MM_B_MAGICORB_GROW                       = 834,
	MM_B_MAGICORB_UPGRADE                    = 835,
	MM_B_MAGICORB_OPTION_CHANGE              = 836,
	MM_MAGICORB_COLLECTION                   = 837,
	MM_MAGICORB_POPUP_REGISTER_FILTER        = 838,
	MM_MAGICORB_POPUP_ALARM                  = 839,
	MM_MAGICORB_POPUP_OPTION_CHANGE          = 840,
	MM_MAGICORB_POPUP_AUTO_OPTION_CHANGE     = 841,
	MM_B_SUCCESSION_WEAPON                   = 842,
	MM_POPUP_SUCCESSION_EQUIPAUTO            = 843,
	MM_B_NPC_ITEM_CRAFT                      = 844,
	MM_POPUP_QUICKTAB_OPTION                 = 845,
	MM_QUICKTAB_LIST_SLOT                    = 846,
	MM_B_GUILD_TOURNAMENT                    = 847,
	MM_POPUP_GUILD_TOURNAMENT_REWARD         = 848,
	MM_POPUP_GUILD_TOURNAMENT_REWARD_SLOT    = 849,
	MM_POPUP_GUILD_TOURNAMENT_CHAMPION       = 850,
	MM_POPUP_GUILD_TOURNAMENT_CHAMPION_SLOT  = 851,
	MM_POPUP_GUILD_TOURNAMENT_ENTER          = 852,
	MM_POPUP_GUILD_TOURNAMENT_ENTER_LIST_SLOT = 853,
	MM_GUILD_TOURNAMENT_SKILL_SLOT           = 854,
	MM_POPUP_GUILD_TOURNAMENT_SCORE          = 855,
	MM_POPUP_GUILD_TOURNAMENT_SCORE_SLOT     = 856,
	MM_POPUP_GUILD_TOURNAMENT_SKILLUSE       = 857,
	MM_GUILD_TOURNAMENT_BATTLE_RESULT        = 858,
	MM_POPUP_GUILD_TOURNAMENT_RANKING_BOARD  = 859,
	MM_POPUP_GUILD_TOURNAMENT_RANKING_BOARD_SLOT = 860,
	MM_POPUP_GUILD_TOURNAMENT_RANKING_REWARD = 861,
	MM_POPUP_GUILD_TOURNAMENT_RANKING_REWARD_SLOT = 862,
	MM_B_GUILD_TOURNAMENT_SITUATIONBOARD     = 863,
	MM_GUILD_TOURNAMENT_RESULT_MSG           = 864,
	MM_B_HEAVENTRAINING                      = 865,
	MM_POPUP_HEAVENTRAINING_NODEINFO         = 866,
	MM_B_HEAVENTRAINING_OPTIONCHANGE         = 867,
	MM_HEAVENTRAINING_PASSIVESLOT            = 868,
	MM_POPUP_HEAVENTRAINING_TOTALINFO        = 869,
	MM_POPUP_HEAVENTRAINING_OPTIONCHANGE     = 870,
	MM_POPUP_ACCEL                           = 871,
	MM_POPUP_POPUPSTORE                      = 872,
	MM_POPUPSTORE_SLOT                       = 873,
	MM_POPUPSTORE_MAIN_SLOT                  = 874,
	MM_B_ANCIENT_TREASURE_EQUIP              = 875,
	MM_B_ANCIENT_TREASURE_UPGRADE            = 876,
	MM_ANCIENT_TREASURE_ATTRIBUTE_SLOT       = 877,
	MM_POPUP_ANCIENT_TREASURE_UPGRADE_INFO   = 878,
	MM_ANCIENT_TREASURE_UPGRADE_INFO_SLOT    = 879,
	MAX                                      = 880,
};

// Enum MirMobile.EACTION_RESULT
// NumValues: 0x0003
enum class EACTION_RESULT : uint8
{
	SUCCESS                                  = 0,
	FAIL                                     = 1,
	EACTION_MAX                              = 2,
};

// Enum MirMobile.LOAD_RESULT
// NumValues: 0x0003
enum class ELOAD_RESULT : uint8
{
	LOAD_SUCCESS                             = 0,
	LOAD_FAIL                                = 1,
	LOAD_MAX                                 = 2,
};

// Enum MirMobile.ENavAreaFlag
// NumValues: 0x0003
enum class ENavAreaFlag : uint8
{
	Default                                  = 0,
	NavLink                                  = 1,
	ENavAreaFlag_MAX                         = 2,
};

// Enum MirMobile.EObjectActivateType
// NumValues: 0x0012
enum class EObjectActivateType : uint8
{
	ALWAYS                                   = 0,
	QUEST                                    = 1,
	CHARLEVEL                                = 2,
	NEED_GUILD                               = 3,
	RELATION_QUEST                           = 7,
	MISSION                                  = 8,
	REPLACE_MISSION                          = 9,
	REQUEST_MISSION                          = 10,
	NECESSARY_ITEM                           = 11,
	SANCTUM                                  = 12,
	PLUNDER                                  = 13,
	OUTPOST                                  = 15,
	GUILDTOURNAMENT                          = 17,
	KILLMONSTER                              = 20,
	ITEM_DISPLAY                             = 51,
	OBJECT_MON_GEN                           = 98,
	NOACTIVE                                 = 99,
	EObjectActivateType_MAX                  = 100,
};

// Enum MirMobile.EGatherObjectType
// NumValues: 0x000D
enum class EGatherObjectType : uint8
{
	NORMAL                                   = 0,
	Drop_Object                              = 1,
	SIEGEREVIVALFLAG                         = 11,
	SPARRINGOBJ                              = 21,
	SANCTUMSHRINE                            = 31,
	PLUNDERBOX                               = 41,
	ITEM_DISPLAY                             = 51,
	OUTPOSTINSTALL                           = 71,
	BLACKDGAGONALTAR                         = 81,
	GUILDTOURNAMENTCASTING                   = 91,
	GUILDTOURNAMENTUSERNUM                   = 92,
	GUILDTOURNAMENTGATHER                    = 93,
	EGatherObjectType_MAX                    = 94,
};

// Enum MirMobile.EParticleEffectElementType
// NumValues: 0x0004
enum class EParticleEffectElementType : uint8
{
	EPEElement_NORMAL                        = 0,
	EPEElement_RED                           = 1,
	EPEElement_GREEN                         = 2,
	EPEElement_MAX                           = 3,
};

// Enum MirMobile.EPhotoModeOptionType
// NumValues: 0x000C
enum class EPhotoModeOptionType : uint8
{
	NONE                                     = 0,
	Actor_My                                 = 1,
	Actor_Other                              = 2,
	Actor_NPC                                = 3,
	UI_My                                    = 4,
	UI_Other                                 = 5,
	UI_NPC                                   = 6,
	GuildMark_My                             = 7,
	GuildMark_Other                          = 8,
	GuildName_My                             = 9,
	GuildName_Other                          = 10,
	MAX                                      = 11,
};

// Enum MirMobile.EPhotoModeCameraMoveButton
// NumValues: 0x0006
enum class EPhotoModeCameraMoveButton : uint8
{
	NONE                                     = 0,
	UP                                       = 1,
	LEFT                                     = 2,
	RIGHT                                    = 4,
	DOWN                                     = 8,
	EPhotoModeCameraMoveButton_MAX           = 9,
};

// Enum MirMobile.EPhotoModeType
// NumValues: 0x000B
enum class EPhotoModeType : uint8
{
	None                                     = 0,
	Pose                                     = 1,
	Filter                                   = 2,
	DepthOfField                             = 3,
	FieldOfView                              = 4,
	Brightness                               = 5,
	LogoImage                                = 6,
	LookAt                                   = 7,
	Option                                   = 8,
	Exit                                     = 9,
	EPhotoModeType_MAX                       = 10,
};

// Enum MirMobile.QuestBattleType
// NumValues: 0x0004
enum class EQuestBattleType : uint8
{
	NONE                                     = 0,
	FIND_MONSTER                             = 1,
	START_AUTOBATTLE                         = 2,
	QuestBattleType_MAX                      = 3,
};

// Enum MirMobile.QuestHelperType
// NumValues: 0x002D
enum class EQuestHelperType : uint32
{
	NONE                                     = 0,
	TALK_NPC                                 = 10,
	POS_TO_TALK_NPC                          = 11,
	POS_TO_PHASE                             = 20,
	POS_TO_COMPLETE                          = 30,
	OPEN_CONTENT                             = 40,
	OPEN_QUEST_CONTENT                       = 41,
	OPEN_ITEM_MAKE_CONTENT                   = 42,
	OPEN_STAGE_QUEST_CONTENT                 = 43,
	OPEN_CONTENT_WITH_PLAYDATA               = 44,
	OPEN_FORCE                               = 45,
	OPEN_FORCE_BY_PLAYDATA                   = 46,
	WARP                                     = 50,
	TRACKER_CLICK                            = 60,
	ITEM_GET                                 = 70,
	COST_DELIVERY                            = 80,
	ITEM_DELIVERY                            = 90,
	TALKNPC_WITHITEM                         = 95,
	QUEST_END                                = 999,
	MONSTER_KILL                             = 1000,
	GROUP_MONSTER_KILL                       = 1001,
	STAGE_MONSTER_KILL                       = 1002,
	NPC_GUARD                                = 1003,
	GRADE_MONSTER_KILL                       = 1004,
	MONSTER_FIND_KILL                        = 1005,
	OBJ_GET                                  = 2000,
	TYPE_OBJ_GET                             = 2001,
	ALL_OBJ_GET                              = 2002,
	CHAR_MOVE_VIACOORDINATE1                 = 3001,
	CHAR_MOVE_VIACOORDINATE2                 = 3002,
	CHAR_MOVE_NONE                           = 3003,
	CHAR_MOVE_NONE_ALLSTAGE_ACTIVE           = 3004,
	CHAR_MOVE_ACCEPT_NPC                     = 3006,
	SHOW_ITEM_DELIVERY_POPUP                 = 3007,
	OPEN_CONTENT_ACTION_NONE                 = 3008,
	CHAR_MOVE_MAKENPC_MON                    = 3101,
	CHAR_MOVE_MAKENPC_DELIVERY               = 3201,
	CHAR_MOVE_MAKENPC_NPCDELIVERY            = 3251,
	CHAR_MOVE_VIACOORDINATE5                 = 3501,
	CHAR_MOVE_AND_TRACKER_OFF                = 3502,
	AUTO_OBJ_GET                             = 4001,
	PcMoveEmotion                            = 5000,
	ITEM_TYPE_MAKE                           = 9211,
	ITEM_MAKE_SEARCH                         = 9221,
	QuestHelperType_MAX                      = 9222,
};

// Enum MirMobile.QuestMissionType
// NumValues: 0x0069
enum class EQuestMissionType : uint32
{
	None                                     = 0,
	ScriptPlay                               = 1,
	TalkNPCFind                              = 11,
	TalkNPCFindToPos                         = 12,
	PhaseQuestComplete                       = 84,
	MoveTo                                   = 100,
	ArrivePosWithBuff                        = 101,
	ArrivePosWithLevel                       = 102,
	ArrivePosWithItem                        = 103,
	ArrivePosWithAchive                      = 104,
	ArrivePosWithMainQuest                   = 105,
	ArrivePosWithRelation                    = 106,
	ArrivePosWithMission                     = 107,
	ArrivePosWithRequest                     = 108,
	ArrivePosWithMoney                       = 109,
	NPCToPos                                 = 110,
	Warp                                     = 200,
	TrackerClick                             = 300,
	EmotionInPos                             = 500,
	EmotionInPosRelation                     = 501,
	MonsterKill_Relation                     = 3000,
	GroupMonsterKill_Relation                = 3001,
	TalkNPC_Chance                           = 3101,
	TalkNPC_EquipCheck                       = 3102,
	TalkNPC_BuffCheck                        = 3103,
	TalkNPC_ItemCheck                        = 3104,
	TalkNPC_AchievementCheck                 = 3105,
	TalkNPC_StateCheck                       = 3106,
	TalkNPC_RelationCheck                    = 3107,
	TalkNPC_QuestCheck                       = 3108,
	TalkCheck_WithLevel                      = 3109,
	TalkCheck_WithMission                    = 3110,
	TalkCheck_WithRequest                    = 3111,
	Gathering_Chance                         = 3201,
	Gathering_EquipCheck                     = 3202,
	Gathering_BuffCheck                      = 3203,
	Gathering_ItemCheck                      = 3204,
	Gathering_AchievementCheck               = 3205,
	Gathering_WithLevel                      = 3206,
	Gathering_WithMainQuest                  = 3207,
	Gathering_WithRelation                   = 3208,
	Phase_Relation                           = 3400,
	ItemUsage                                = 3500,
	ItemMake_SearchedTarget                  = 5000,
	CheckPlayDataForceOpened                 = 5010,
	CheckPlayDataForceBloodOpened            = 5020,
	CheckPlayDataForceUpgradedCount          = 5030,
	CheckPlayDataForceUpgradeNLevel          = 5040,
	CheckPlayDataSmeltingItemDefLev          = 5100,
	CheckPlayDataEnterStage                  = 5200,
	CheckPlayDataCondition                   = 5900,
	Level                                    = 6000,
	CombatPoint                              = 6100,
	ItemGet                                  = 6500,
	MonsterKill                              = 8000,
	MonsterKill_WithBuff                     = 8001,
	KillMonsterLastAttack                    = 8010,
	KillMonsterLastAttackAlone               = 8011,
	KillMonsterAloneOrFiveParty              = 8012,
	KillMonsterAloneOrFifteenParty           = 8050,
	KillMonsterInGuild                       = 8051,
	KillTargetMonsterAloneOrFifteenParty     = 8052,
	KillMonsterAllArea                       = 8060,
	MonsterFindKill                          = 8100,
	MonsterGroupKill                         = 8200,
	MonsterGroupKill_WithBuff                = 8201,
	KillGroupMonsterLastAttack               = 8210,
	KillGroupMonsterLastAttackAlone          = 8211,
	KillGroupMonsterAloneOrFiveParty         = 8212,
	KillGroupMonsterAloneOrFifteenParty      = 8250,
	KillGroupMonsterInGuild                  = 8251,
	StageMonsterKill                         = 8300,
	StageMonsterKillNoShare                  = 8302,
	MonsterGradeKill                         = 8310,
	KillMonsterPartyAllStageType             = 8500,
	KillMonsterPartyAllLastAttackStageType   = 8501,
	QuestItemGetFromMonster                  = 9000,
	ObjectQuestItemGet                       = 9100,
	ObjectQuestItemGetNoShare                = 9101,
	GatheringObjectType                      = 9110,
	GatheringObjectTypeNoShare               = 9111,
	GatheringAllObject                       = 9120,
	GatherObjectOnAllStage                   = 9130,
	GatherAllObjectOnAllStage                = 9140,
	Learn                                    = 9200,
	ItemMake                                 = 9210,
	TryItemTypeMake                          = 9211,
	ItemUpgrade                              = 9230,
	DeliveryCost                             = 9310,
	DeliveryItem                             = 9320,
	TalkNPC_DeliveryCost                     = 9330,
	TalkNPC_DeliveryItem                     = 9340,
	TalkNPC_WithItem                         = 9350,
	PKWin_OtherServer                        = 9410,
	ForceBloodNLevel                         = 9420,
	ForceBloodUpgradeCount                   = 9430,
	MissionClearCheckInStage                 = 9600,
	UpgradeEnchantCount                      = 9220,
	PKWin_Area                               = 9400,
	QuestCount                               = 9500,
	StageEnterCount                          = 9710,
	StageTypeEnterCount                      = 9720,
	CompleteQuestCount                       = 9800,
	QuestEnd                                 = 9999,
	Max                                      = 10000,
};

// Enum MirMobile.ETriggerScriptType
// NumValues: 0x0019
enum class ETriggerScriptType : uint32
{
	BATTLESTART                              = 0,
	BATTLESTOP                               = 1,
	CAMERAFOCUS                              = 2,
	CAMERASET                                = 3,
	CAMERASHAKE                              = 4,
	DELAY                                    = 5,
	EFFECTHIDE                               = 6,
	EFFECTSHOW                               = 7,
	FADE                                     = 8,
	HUDHIDE                                  = 9,
	HUDSHOW                                  = 10,
	MONSTERANIM                              = 11,
	MONSTERBB                                = 12,
	MONSTERHIDE                              = 13,
	MONSTERRUN                               = 14,
	NPCANIM                                  = 15,
	NPCBB                                    = 16,
	NPCHIDE                                  = 17,
	NPCJUMP                                  = 18,
	NPCRUN                                   = 19,
	NPCSEARCHRUN                             = 20,
	PCBB                                     = 21,
	SMALLTALK                                = 22,
	STRINGMESSAGE                            = 23,
	ETriggerScriptType_MAX                   = 24,
};

// Enum MirMobile.EWaypointSubType
// NumValues: 0x0013
enum class EWaypointSubType : uint32
{
	NONE                                     = 0,
	MINING_OBJECT                            = 1,
	GATHER_OBJECT                            = 2,
	BLACK_IRON                               = 3,
	JINKI                                    = 4,
	WARGATE                                  = 11,
	WARBOSS                                  = 12,
	WARTRAP                                  = 13,
	DRAGONCRACK                              = 21,
	GUILDCOOPBOSS                            = 22,
	SANCTUARY                                = 31,
	MONOLITH                                 = 32,
	ALTAROFDARKNESS                          = 33,
	SABUKWARGATE                             = 34,
	SABUKWARBOSS                             = 35,
	SABUKWAROUTPOST                          = 36,
	SABUKWARCAPTURE                          = 37,
	BLACKDRAGONALTAR                         = 41,
	EWaypointSubType_MAX                     = 42,
};

// Enum MirMobile.EWaypointType
// NumValues: 0x000B
enum class EWaypointType : uint32
{
	NONE                                     = 0,
	DEFAULT                                  = 1,
	MONSTER                                  = 2,
	COLLECT_ZONE                             = 3,
	NPC                                      = 4,
	SUMMON_AREA                              = 6,
	PLUNDER                                  = 9,
	NON_LIST                                 = 12,
	COMPETE                                  = 13,
	TREASURE_OBJECT                          = 14,
	EWaypointType_MAX                        = 15,
};

// Enum MirMobile.EWeaponMaterialParameterType
// NumValues: 0x0003
enum class EWeaponMaterialParameterType : uint8
{
	EWeaponMaterialParamType_Vector          = 0,
	EWeaponMaterialParamType_Scalar          = 1,
	EWeaponMaterialParamType_MAX             = 2,
};

// ScriptStruct MirMobile.VehicleRideEffectTemplate
// 0x0010 (0x0018 - 0x0008)
struct FVehicleRideEffectTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectGroupid;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Notifyid;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleRideEffectTemplate) == 0x000008, "Wrong alignment on FVehicleRideEffectTemplate");
static_assert(sizeof(FVehicleRideEffectTemplate) == 0x000018, "Wrong size on FVehicleRideEffectTemplate");
static_assert(offsetof(FVehicleRideEffectTemplate, RowId) == 0x000008, "Member 'FVehicleRideEffectTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FVehicleRideEffectTemplate, EffectGroupid) == 0x00000C, "Member 'FVehicleRideEffectTemplate::EffectGroupid' has a wrong offset!");
static_assert(offsetof(FVehicleRideEffectTemplate, Notifyid) == 0x000010, "Member 'FVehicleRideEffectTemplate::Notifyid' has a wrong offset!");
static_assert(offsetof(FVehicleRideEffectTemplate, EffectId) == 0x000014, "Member 'FVehicleRideEffectTemplate::EffectId' has a wrong offset!");

// ScriptStruct MirMobile.CharacterMiningLicenseTemplate
// 0x0028 (0x0030 - 0x0008)
struct FCharacterMiningLicenseTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Season_BuffId;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Season_Icon;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Season_Grade;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Season_Name;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Season_Symbol;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Season_Exp;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Season_BattlePass;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterMiningLicenseTemplate) == 0x000008, "Wrong alignment on FCharacterMiningLicenseTemplate");
static_assert(sizeof(FCharacterMiningLicenseTemplate) == 0x000030, "Wrong size on FCharacterMiningLicenseTemplate");
static_assert(offsetof(FCharacterMiningLicenseTemplate, Name) == 0x000008, "Member 'FCharacterMiningLicenseTemplate::Name' has a wrong offset!");
static_assert(offsetof(FCharacterMiningLicenseTemplate, RowId) == 0x00000C, "Member 'FCharacterMiningLicenseTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FCharacterMiningLicenseTemplate, Season_BuffId) == 0x000010, "Member 'FCharacterMiningLicenseTemplate::Season_BuffId' has a wrong offset!");
static_assert(offsetof(FCharacterMiningLicenseTemplate, Season_Icon) == 0x000014, "Member 'FCharacterMiningLicenseTemplate::Season_Icon' has a wrong offset!");
static_assert(offsetof(FCharacterMiningLicenseTemplate, Season_Grade) == 0x000018, "Member 'FCharacterMiningLicenseTemplate::Season_Grade' has a wrong offset!");
static_assert(offsetof(FCharacterMiningLicenseTemplate, Season_Name) == 0x00001C, "Member 'FCharacterMiningLicenseTemplate::Season_Name' has a wrong offset!");
static_assert(offsetof(FCharacterMiningLicenseTemplate, Season_Symbol) == 0x000020, "Member 'FCharacterMiningLicenseTemplate::Season_Symbol' has a wrong offset!");
static_assert(offsetof(FCharacterMiningLicenseTemplate, Season_Exp) == 0x000024, "Member 'FCharacterMiningLicenseTemplate::Season_Exp' has a wrong offset!");
static_assert(offsetof(FCharacterMiningLicenseTemplate, Season_BattlePass) == 0x000028, "Member 'FCharacterMiningLicenseTemplate::Season_BattlePass' has a wrong offset!");

// ScriptStruct MirMobile.StringToolTipTemplate
// 0x00D0 (0x00D8 - 0x0008)
struct FStringToolTipTemplate final : public FTableRowBase
{
public:
	int32                                         ToolTipID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EToolTipLocation                              PopupLocation;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WidthSize;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextKr;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHT;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHS;                                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JPN;                                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ENG;                                               // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 THA;                                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IND;                                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VIE;                                               // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GER;                                               // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SPA;                                               // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 POR;                                               // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RUS;                                               // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringToolTipTemplate) == 0x000008, "Wrong alignment on FStringToolTipTemplate");
static_assert(sizeof(FStringToolTipTemplate) == 0x0000D8, "Wrong size on FStringToolTipTemplate");
static_assert(offsetof(FStringToolTipTemplate, ToolTipID) == 0x000008, "Member 'FStringToolTipTemplate::ToolTipID' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, PopupLocation) == 0x00000C, "Member 'FStringToolTipTemplate::PopupLocation' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, WidthSize) == 0x000010, "Member 'FStringToolTipTemplate::WidthSize' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, TextKr) == 0x000018, "Member 'FStringToolTipTemplate::TextKr' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, CHT) == 0x000028, "Member 'FStringToolTipTemplate::CHT' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, CHS) == 0x000038, "Member 'FStringToolTipTemplate::CHS' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, JPN) == 0x000048, "Member 'FStringToolTipTemplate::JPN' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, ENG) == 0x000058, "Member 'FStringToolTipTemplate::ENG' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, THA) == 0x000068, "Member 'FStringToolTipTemplate::THA' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, IND) == 0x000078, "Member 'FStringToolTipTemplate::IND' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, VIE) == 0x000088, "Member 'FStringToolTipTemplate::VIE' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, GER) == 0x000098, "Member 'FStringToolTipTemplate::GER' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, SPA) == 0x0000A8, "Member 'FStringToolTipTemplate::SPA' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, POR) == 0x0000B8, "Member 'FStringToolTipTemplate::POR' has a wrong offset!");
static_assert(offsetof(FStringToolTipTemplate, RUS) == 0x0000C8, "Member 'FStringToolTipTemplate::RUS' has a wrong offset!");

// ScriptStruct MirMobile.ContentsPostProcessValue
// 0x001C (0x001C - 0x0000)
struct FContentsPostProcessValue final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Slope;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Toe;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectBright;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterBright;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterIndirect;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentsPostProcessValue) == 0x000004, "Wrong alignment on FContentsPostProcessValue");
static_assert(sizeof(FContentsPostProcessValue) == 0x00001C, "Wrong size on FContentsPostProcessValue");
static_assert(offsetof(FContentsPostProcessValue, Intensity) == 0x000000, "Member 'FContentsPostProcessValue::Intensity' has a wrong offset!");
static_assert(offsetof(FContentsPostProcessValue, Threshold) == 0x000004, "Member 'FContentsPostProcessValue::Threshold' has a wrong offset!");
static_assert(offsetof(FContentsPostProcessValue, Slope) == 0x000008, "Member 'FContentsPostProcessValue::Slope' has a wrong offset!");
static_assert(offsetof(FContentsPostProcessValue, Toe) == 0x00000C, "Member 'FContentsPostProcessValue::Toe' has a wrong offset!");
static_assert(offsetof(FContentsPostProcessValue, EffectBright) == 0x000010, "Member 'FContentsPostProcessValue::EffectBright' has a wrong offset!");
static_assert(offsetof(FContentsPostProcessValue, CharacterBright) == 0x000014, "Member 'FContentsPostProcessValue::CharacterBright' has a wrong offset!");
static_assert(offsetof(FContentsPostProcessValue, CharacterIndirect) == 0x000018, "Member 'FContentsPostProcessValue::CharacterIndirect' has a wrong offset!");

// ScriptStruct MirMobile.AutoPathData
// 0x0020 (0x0020 - 0x0000)
struct FAutoPathData final
{
public:
	TArray<bool>                                  AirwalkPoints;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PathPoints;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAutoPathData) == 0x000008, "Wrong alignment on FAutoPathData");
static_assert(sizeof(FAutoPathData) == 0x000020, "Wrong size on FAutoPathData");
static_assert(offsetof(FAutoPathData, AirwalkPoints) == 0x000000, "Member 'FAutoPathData::AirwalkPoints' has a wrong offset!");
static_assert(offsetof(FAutoPathData, PathPoints) == 0x000010, "Member 'FAutoPathData::PathPoints' has a wrong offset!");

// ScriptStruct MirMobile.DeadValleyRevivalTemplate
// 0x0060 (0x0068 - 0x0008)
struct FDeadValleyRevivalTemplate final : public FTableRowBase
{
public:
	int32                                         RevivalId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RevivalPositionLocation1;                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RevivalPositionLocation2;                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RevivalPositionLocation3;                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RevivalPositionLocation4;                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RevivalPositionLocation5;                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Revival_RuleId;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeadValleyRevivalTemplate) == 0x000008, "Wrong alignment on FDeadValleyRevivalTemplate");
static_assert(sizeof(FDeadValleyRevivalTemplate) == 0x000068, "Wrong size on FDeadValleyRevivalTemplate");
static_assert(offsetof(FDeadValleyRevivalTemplate, RevivalId) == 0x000008, "Member 'FDeadValleyRevivalTemplate::RevivalId' has a wrong offset!");
static_assert(offsetof(FDeadValleyRevivalTemplate, StageID) == 0x00000C, "Member 'FDeadValleyRevivalTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FDeadValleyRevivalTemplate, RevivalPositionLocation1) == 0x000010, "Member 'FDeadValleyRevivalTemplate::RevivalPositionLocation1' has a wrong offset!");
static_assert(offsetof(FDeadValleyRevivalTemplate, RevivalPositionLocation2) == 0x000020, "Member 'FDeadValleyRevivalTemplate::RevivalPositionLocation2' has a wrong offset!");
static_assert(offsetof(FDeadValleyRevivalTemplate, RevivalPositionLocation3) == 0x000030, "Member 'FDeadValleyRevivalTemplate::RevivalPositionLocation3' has a wrong offset!");
static_assert(offsetof(FDeadValleyRevivalTemplate, RevivalPositionLocation4) == 0x000040, "Member 'FDeadValleyRevivalTemplate::RevivalPositionLocation4' has a wrong offset!");
static_assert(offsetof(FDeadValleyRevivalTemplate, RevivalPositionLocation5) == 0x000050, "Member 'FDeadValleyRevivalTemplate::RevivalPositionLocation5' has a wrong offset!");
static_assert(offsetof(FDeadValleyRevivalTemplate, Revival_RuleId) == 0x000060, "Member 'FDeadValleyRevivalTemplate::Revival_RuleId' has a wrong offset!");

// ScriptStruct MirMobile.ClientDataTablesTemplate
// 0x0030 (0x0038 - 0x0008)
struct FClientDataTablesTemplate final : public FTableRowBase
{
public:
	class FString                                 DataTableJsonFilePath;                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DataTableAssetFolderPath;                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DataTableRowStruct;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDataTablesTemplate) == 0x000008, "Wrong alignment on FClientDataTablesTemplate");
static_assert(sizeof(FClientDataTablesTemplate) == 0x000038, "Wrong size on FClientDataTablesTemplate");
static_assert(offsetof(FClientDataTablesTemplate, DataTableJsonFilePath) == 0x000008, "Member 'FClientDataTablesTemplate::DataTableJsonFilePath' has a wrong offset!");
static_assert(offsetof(FClientDataTablesTemplate, DataTableAssetFolderPath) == 0x000018, "Member 'FClientDataTablesTemplate::DataTableAssetFolderPath' has a wrong offset!");
static_assert(offsetof(FClientDataTablesTemplate, DataTableRowStruct) == 0x000028, "Member 'FClientDataTablesTemplate::DataTableRowStruct' has a wrong offset!");

// ScriptStruct MirMobile.CrowdControlData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FCrowdControlData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrowdControlData) == 0x000008, "Wrong alignment on FCrowdControlData");
static_assert(sizeof(FCrowdControlData) == 0x000020, "Wrong size on FCrowdControlData");

// ScriptStruct MirMobile.CharacterForceTemplate
// 0x0040 (0x0048 - 0x0008)
struct FCharacterForceTemplate final : public FTableRowBase
{
public:
	int32                                         ForcePanelID;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodSetID;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanel_TitleStringID;                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanel_DescriptionStringID;                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanel_Icon;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanel_OpenUseId_1;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanel_OpenItemValue_1;                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanel_OpenUseId_2;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanel_OpenItemValue_2;                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanel_OpenUseId_3;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanel_OpenItemValue_3;                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood_Name_1;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood_Name_2;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood_Name_3;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood_Name_4;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterForceTemplate) == 0x000008, "Wrong alignment on FCharacterForceTemplate");
static_assert(sizeof(FCharacterForceTemplate) == 0x000048, "Wrong size on FCharacterForceTemplate");
static_assert(offsetof(FCharacterForceTemplate, ForcePanelID) == 0x000008, "Member 'FCharacterForceTemplate::ForcePanelID' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, ClassID) == 0x00000C, "Member 'FCharacterForceTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, BloodSetID) == 0x000010, "Member 'FCharacterForceTemplate::BloodSetID' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, ForcePanel_TitleStringID) == 0x000014, "Member 'FCharacterForceTemplate::ForcePanel_TitleStringID' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, ForcePanel_DescriptionStringID) == 0x000018, "Member 'FCharacterForceTemplate::ForcePanel_DescriptionStringID' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, ForcePanel_Icon) == 0x00001C, "Member 'FCharacterForceTemplate::ForcePanel_Icon' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, ForcePanel_OpenUseId_1) == 0x000020, "Member 'FCharacterForceTemplate::ForcePanel_OpenUseId_1' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, ForcePanel_OpenItemValue_1) == 0x000024, "Member 'FCharacterForceTemplate::ForcePanel_OpenItemValue_1' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, ForcePanel_OpenUseId_2) == 0x000028, "Member 'FCharacterForceTemplate::ForcePanel_OpenUseId_2' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, ForcePanel_OpenItemValue_2) == 0x00002C, "Member 'FCharacterForceTemplate::ForcePanel_OpenItemValue_2' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, ForcePanel_OpenUseId_3) == 0x000030, "Member 'FCharacterForceTemplate::ForcePanel_OpenUseId_3' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, ForcePanel_OpenItemValue_3) == 0x000034, "Member 'FCharacterForceTemplate::ForcePanel_OpenItemValue_3' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, Blood_Name_1) == 0x000038, "Member 'FCharacterForceTemplate::Blood_Name_1' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, Blood_Name_2) == 0x00003C, "Member 'FCharacterForceTemplate::Blood_Name_2' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, Blood_Name_3) == 0x000040, "Member 'FCharacterForceTemplate::Blood_Name_3' has a wrong offset!");
static_assert(offsetof(FCharacterForceTemplate, Blood_Name_4) == 0x000044, "Member 'FCharacterForceTemplate::Blood_Name_4' has a wrong offset!");

// ScriptStruct MirMobile.QuestListTemplate
// 0x0010 (0x0018 - 0x0008)
struct FQuestListTemplate final : public FTableRowBase
{
public:
	class FString                                 QuestFileName;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestListTemplate) == 0x000008, "Wrong alignment on FQuestListTemplate");
static_assert(sizeof(FQuestListTemplate) == 0x000018, "Wrong size on FQuestListTemplate");
static_assert(offsetof(FQuestListTemplate, QuestFileName) == 0x000008, "Member 'FQuestListTemplate::QuestFileName' has a wrong offset!");

// ScriptStruct MirMobile.AccountLoginInfo
// 0x0050 (0x0050 - 0x0000)
struct FAccountLoginInfo final
{
public:
	class FString                                 GuestID;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TokenID;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkID;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildName;                                         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChannelType;                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLinkPW;                                          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGoogleLinked;                                    // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFacebookLinked;                                  // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAppleLinked;                                     // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSteamLinked;                                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKakaoLinked;                                     // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccountLoginInfo) == 0x000008, "Wrong alignment on FAccountLoginInfo");
static_assert(sizeof(FAccountLoginInfo) == 0x000050, "Wrong size on FAccountLoginInfo");
static_assert(offsetof(FAccountLoginInfo, GuestID) == 0x000000, "Member 'FAccountLoginInfo::GuestID' has a wrong offset!");
static_assert(offsetof(FAccountLoginInfo, TokenID) == 0x000010, "Member 'FAccountLoginInfo::TokenID' has a wrong offset!");
static_assert(offsetof(FAccountLoginInfo, LinkID) == 0x000020, "Member 'FAccountLoginInfo::LinkID' has a wrong offset!");
static_assert(offsetof(FAccountLoginInfo, BuildName) == 0x000030, "Member 'FAccountLoginInfo::BuildName' has a wrong offset!");
static_assert(offsetof(FAccountLoginInfo, ChannelType) == 0x000040, "Member 'FAccountLoginInfo::ChannelType' has a wrong offset!");
static_assert(offsetof(FAccountLoginInfo, IsLinkPW) == 0x000044, "Member 'FAccountLoginInfo::IsLinkPW' has a wrong offset!");
static_assert(offsetof(FAccountLoginInfo, IsGoogleLinked) == 0x000045, "Member 'FAccountLoginInfo::IsGoogleLinked' has a wrong offset!");
static_assert(offsetof(FAccountLoginInfo, IsFacebookLinked) == 0x000046, "Member 'FAccountLoginInfo::IsFacebookLinked' has a wrong offset!");
static_assert(offsetof(FAccountLoginInfo, IsAppleLinked) == 0x000047, "Member 'FAccountLoginInfo::IsAppleLinked' has a wrong offset!");
static_assert(offsetof(FAccountLoginInfo, IsSteamLinked) == 0x000048, "Member 'FAccountLoginInfo::IsSteamLinked' has a wrong offset!");
static_assert(offsetof(FAccountLoginInfo, IsKakaoLinked) == 0x000049, "Member 'FAccountLoginInfo::IsKakaoLinked' has a wrong offset!");

// ScriptStruct MirMobile.IconInfo
// 0x000C (0x000C - 0x0000)
struct FIconInfo final
{
public:
	int32                                         M_iIconID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_vIconSize;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIconInfo) == 0x000004, "Wrong alignment on FIconInfo");
static_assert(sizeof(FIconInfo) == 0x00000C, "Wrong size on FIconInfo");
static_assert(offsetof(FIconInfo, M_iIconID) == 0x000000, "Member 'FIconInfo::M_iIconID' has a wrong offset!");
static_assert(offsetof(FIconInfo, M_vIconSize) == 0x000004, "Member 'FIconInfo::M_vIconSize' has a wrong offset!");

// ScriptStruct MirMobile.CharacterEmoteTemplate
// 0x0028 (0x0030 - 0x0008)
struct FCharacterEmoteTemplate final : public FTableRowBase
{
public:
	int32                                         IconID;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmoteID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringID;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayLoop;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Class1AnimID;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class2AnimID;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class3AnimID;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class4AnimID;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class5AnimID;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class6AnimID;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterEmoteTemplate) == 0x000008, "Wrong alignment on FCharacterEmoteTemplate");
static_assert(sizeof(FCharacterEmoteTemplate) == 0x000030, "Wrong size on FCharacterEmoteTemplate");
static_assert(offsetof(FCharacterEmoteTemplate, IconID) == 0x000008, "Member 'FCharacterEmoteTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FCharacterEmoteTemplate, EmoteID) == 0x00000C, "Member 'FCharacterEmoteTemplate::EmoteID' has a wrong offset!");
static_assert(offsetof(FCharacterEmoteTemplate, StringID) == 0x000010, "Member 'FCharacterEmoteTemplate::StringID' has a wrong offset!");
static_assert(offsetof(FCharacterEmoteTemplate, PlayLoop) == 0x000014, "Member 'FCharacterEmoteTemplate::PlayLoop' has a wrong offset!");
static_assert(offsetof(FCharacterEmoteTemplate, Class1AnimID) == 0x000018, "Member 'FCharacterEmoteTemplate::Class1AnimID' has a wrong offset!");
static_assert(offsetof(FCharacterEmoteTemplate, Class2AnimID) == 0x00001C, "Member 'FCharacterEmoteTemplate::Class2AnimID' has a wrong offset!");
static_assert(offsetof(FCharacterEmoteTemplate, Class3AnimID) == 0x000020, "Member 'FCharacterEmoteTemplate::Class3AnimID' has a wrong offset!");
static_assert(offsetof(FCharacterEmoteTemplate, Class4AnimID) == 0x000024, "Member 'FCharacterEmoteTemplate::Class4AnimID' has a wrong offset!");
static_assert(offsetof(FCharacterEmoteTemplate, Class5AnimID) == 0x000028, "Member 'FCharacterEmoteTemplate::Class5AnimID' has a wrong offset!");
static_assert(offsetof(FCharacterEmoteTemplate, Class6AnimID) == 0x00002C, "Member 'FCharacterEmoteTemplate::Class6AnimID' has a wrong offset!");

// ScriptStruct MirMobile.GuildMemberGradeTemplate
// 0x0018 (0x0020 - 0x0008)
struct FGuildMemberGradeTemplate final : public FTableRowBase
{
public:
	int32                                         MemberGradeId;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GradeStrId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GradeNameId;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GradeNickNameId;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GradeFrameIconId;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GradeSymbolId;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildMemberGradeTemplate) == 0x000008, "Wrong alignment on FGuildMemberGradeTemplate");
static_assert(sizeof(FGuildMemberGradeTemplate) == 0x000020, "Wrong size on FGuildMemberGradeTemplate");
static_assert(offsetof(FGuildMemberGradeTemplate, MemberGradeId) == 0x000008, "Member 'FGuildMemberGradeTemplate::MemberGradeId' has a wrong offset!");
static_assert(offsetof(FGuildMemberGradeTemplate, GradeStrId) == 0x00000C, "Member 'FGuildMemberGradeTemplate::GradeStrId' has a wrong offset!");
static_assert(offsetof(FGuildMemberGradeTemplate, GradeNameId) == 0x000010, "Member 'FGuildMemberGradeTemplate::GradeNameId' has a wrong offset!");
static_assert(offsetof(FGuildMemberGradeTemplate, GradeNickNameId) == 0x000014, "Member 'FGuildMemberGradeTemplate::GradeNickNameId' has a wrong offset!");
static_assert(offsetof(FGuildMemberGradeTemplate, GradeFrameIconId) == 0x000018, "Member 'FGuildMemberGradeTemplate::GradeFrameIconId' has a wrong offset!");
static_assert(offsetof(FGuildMemberGradeTemplate, GradeSymbolId) == 0x00001C, "Member 'FGuildMemberGradeTemplate::GradeSymbolId' has a wrong offset!");

// ScriptStruct MirMobile.GuildDominionBuffTemplate
// 0x0030 (0x0038 - 0x0008)
struct FGuildDominionBuffTemplate final : public FTableRowBase
{
public:
	int32                                         DominionBuffId;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionType;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionBuffCostType;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionBuffCostValue;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionBuffNameId;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionBuffIconId;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionBuffDescId;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionWorldBuffId;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionBuffCnt;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotifyMessage;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BUFFJUDGMENT;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDominionBuffTemplate) == 0x000008, "Wrong alignment on FGuildDominionBuffTemplate");
static_assert(sizeof(FGuildDominionBuffTemplate) == 0x000038, "Wrong size on FGuildDominionBuffTemplate");
static_assert(offsetof(FGuildDominionBuffTemplate, DominionBuffId) == 0x000008, "Member 'FGuildDominionBuffTemplate::DominionBuffId' has a wrong offset!");
static_assert(offsetof(FGuildDominionBuffTemplate, DominionType) == 0x00000C, "Member 'FGuildDominionBuffTemplate::DominionType' has a wrong offset!");
static_assert(offsetof(FGuildDominionBuffTemplate, DominionBuffCostType) == 0x000010, "Member 'FGuildDominionBuffTemplate::DominionBuffCostType' has a wrong offset!");
static_assert(offsetof(FGuildDominionBuffTemplate, DominionBuffCostValue) == 0x000014, "Member 'FGuildDominionBuffTemplate::DominionBuffCostValue' has a wrong offset!");
static_assert(offsetof(FGuildDominionBuffTemplate, DominionBuffNameId) == 0x000018, "Member 'FGuildDominionBuffTemplate::DominionBuffNameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionBuffTemplate, DominionBuffIconId) == 0x00001C, "Member 'FGuildDominionBuffTemplate::DominionBuffIconId' has a wrong offset!");
static_assert(offsetof(FGuildDominionBuffTemplate, DominionBuffDescId) == 0x000020, "Member 'FGuildDominionBuffTemplate::DominionBuffDescId' has a wrong offset!");
static_assert(offsetof(FGuildDominionBuffTemplate, DominionWorldBuffId) == 0x000024, "Member 'FGuildDominionBuffTemplate::DominionWorldBuffId' has a wrong offset!");
static_assert(offsetof(FGuildDominionBuffTemplate, DominionBuffCnt) == 0x000028, "Member 'FGuildDominionBuffTemplate::DominionBuffCnt' has a wrong offset!");
static_assert(offsetof(FGuildDominionBuffTemplate, NotifyMessage) == 0x00002C, "Member 'FGuildDominionBuffTemplate::NotifyMessage' has a wrong offset!");
static_assert(offsetof(FGuildDominionBuffTemplate, BUFFJUDGMENT) == 0x000030, "Member 'FGuildDominionBuffTemplate::BUFFJUDGMENT' has a wrong offset!");

// ScriptStruct MirMobile.BoneMinMaxData
// 0x000C (0x000C - 0x0000)
struct FBoneMinMaxData final
{
public:
	EBoneVectorType                               BoneVectorType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoneMinValue;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneMaxValue;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneMinMaxData) == 0x000004, "Wrong alignment on FBoneMinMaxData");
static_assert(sizeof(FBoneMinMaxData) == 0x00000C, "Wrong size on FBoneMinMaxData");
static_assert(offsetof(FBoneMinMaxData, BoneVectorType) == 0x000000, "Member 'FBoneMinMaxData::BoneVectorType' has a wrong offset!");
static_assert(offsetof(FBoneMinMaxData, BoneMinValue) == 0x000004, "Member 'FBoneMinMaxData::BoneMinValue' has a wrong offset!");
static_assert(offsetof(FBoneMinMaxData, BoneMaxValue) == 0x000008, "Member 'FBoneMinMaxData::BoneMaxValue' has a wrong offset!");

// ScriptStruct MirMobile.CustomBoneData
// 0x0020 (0x0020 - 0x0000)
struct FCustomBoneData final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneDataType                                 BoneType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneMinMaxData>                BoneMinMaxDataArray;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomBoneData) == 0x000008, "Wrong alignment on FCustomBoneData");
static_assert(sizeof(FCustomBoneData) == 0x000020, "Wrong size on FCustomBoneData");
static_assert(offsetof(FCustomBoneData, BoneName) == 0x000000, "Member 'FCustomBoneData::BoneName' has a wrong offset!");
static_assert(offsetof(FCustomBoneData, BoneType) == 0x000008, "Member 'FCustomBoneData::BoneType' has a wrong offset!");
static_assert(offsetof(FCustomBoneData, BoneMinMaxDataArray) == 0x000010, "Member 'FCustomBoneData::BoneMinMaxDataArray' has a wrong offset!");

// ScriptStruct MirMobile.ItemOptionPassiveTemplate
// 0x0010 (0x0018 - 0x0008)
struct FItemOptionPassiveTemplate final : public FTableRowBase
{
public:
	int32                                         OptionID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Option_PassiveGroup;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemOptionPassiveTemplate) == 0x000008, "Wrong alignment on FItemOptionPassiveTemplate");
static_assert(sizeof(FItemOptionPassiveTemplate) == 0x000018, "Wrong size on FItemOptionPassiveTemplate");
static_assert(offsetof(FItemOptionPassiveTemplate, OptionID) == 0x000008, "Member 'FItemOptionPassiveTemplate::OptionID' has a wrong offset!");
static_assert(offsetof(FItemOptionPassiveTemplate, Option_PassiveGroup) == 0x00000C, "Member 'FItemOptionPassiveTemplate::Option_PassiveGroup' has a wrong offset!");
static_assert(offsetof(FItemOptionPassiveTemplate, PassiveID) == 0x000010, "Member 'FItemOptionPassiveTemplate::PassiveID' has a wrong offset!");
static_assert(offsetof(FItemOptionPassiveTemplate, ClassID) == 0x000014, "Member 'FItemOptionPassiveTemplate::ClassID' has a wrong offset!");

// ScriptStruct MirMobile.AutoFlightData
// 0x0030 (0x0030 - 0x0000)
struct FAutoFlightData final
{
public:
	struct FAutoPathData                          PathData;                                          // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<class AAutoFlightTrigger*>             LinkTriggers;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAutoFlightData) == 0x000008, "Wrong alignment on FAutoFlightData");
static_assert(sizeof(FAutoFlightData) == 0x000030, "Wrong size on FAutoFlightData");
static_assert(offsetof(FAutoFlightData, PathData) == 0x000000, "Member 'FAutoFlightData::PathData' has a wrong offset!");
static_assert(offsetof(FAutoFlightData, LinkTriggers) == 0x000020, "Member 'FAutoFlightData::LinkTriggers' has a wrong offset!");

// ScriptStruct MirMobile.BattlePassRewardTemplate
// 0x0038 (0x0040 - 0x0008)
struct FBattlePassRewardTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedPoint;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameStrId;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGroup;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCategory;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardCount;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlePassRewardTemplate) == 0x000008, "Wrong alignment on FBattlePassRewardTemplate");
static_assert(sizeof(FBattlePassRewardTemplate) == 0x000040, "Wrong size on FBattlePassRewardTemplate");
static_assert(offsetof(FBattlePassRewardTemplate, ID) == 0x000008, "Member 'FBattlePassRewardTemplate::ID' has a wrong offset!");
static_assert(offsetof(FBattlePassRewardTemplate, GroupId) == 0x00000C, "Member 'FBattlePassRewardTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FBattlePassRewardTemplate, NeedPoint) == 0x000010, "Member 'FBattlePassRewardTemplate::NeedPoint' has a wrong offset!");
static_assert(offsetof(FBattlePassRewardTemplate, Number) == 0x000014, "Member 'FBattlePassRewardTemplate::Number' has a wrong offset!");
static_assert(offsetof(FBattlePassRewardTemplate, NameStrId) == 0x000018, "Member 'FBattlePassRewardTemplate::NameStrId' has a wrong offset!");
static_assert(offsetof(FBattlePassRewardTemplate, RewardGroup) == 0x00001C, "Member 'FBattlePassRewardTemplate::RewardGroup' has a wrong offset!");
static_assert(offsetof(FBattlePassRewardTemplate, RewardCategory) == 0x000020, "Member 'FBattlePassRewardTemplate::RewardCategory' has a wrong offset!");
static_assert(offsetof(FBattlePassRewardTemplate, RewardType) == 0x000024, "Member 'FBattlePassRewardTemplate::RewardType' has a wrong offset!");
static_assert(offsetof(FBattlePassRewardTemplate, RewardId) == 0x000028, "Member 'FBattlePassRewardTemplate::RewardId' has a wrong offset!");
static_assert(offsetof(FBattlePassRewardTemplate, RewardCount) == 0x000038, "Member 'FBattlePassRewardTemplate::RewardCount' has a wrong offset!");

// ScriptStruct MirMobile.UIShopGoodsTemplate
// 0x0120 (0x0128 - 0x0008)
struct FUIShopGoodsTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldType;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TabId;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         GoodsType;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrontID;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LinkID;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameStrId;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExplainStrId;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Description;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsCommodityId;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsValue;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusType1;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusId1;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusCount1;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyId;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyIValue;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MileageId;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MileageValue;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitTarget;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitCountType;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitCountValue;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelType;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitLevelMin;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitLevelMax;                                     // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderType;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 OrderNum;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TagIconId;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnOffType;                                         // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnOfTimeStart;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnOfTimeEnd;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubIBag;                                           // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOnOff;                                      // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HotDeal;                                           // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HotDealTimeStart;                                  // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HotDealTimeEnd;                                    // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountRate;                                      // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildGift;                                         // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildGiftStr;                                      // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gotab;                                             // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReleaseTime;                                       // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnePlus;                                           // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BgColor;                                           // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LabelIconId;                                       // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailDescription;                                 // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PopupStoreId;                                      // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIShopGoodsTemplate) == 0x000008, "Wrong alignment on FUIShopGoodsTemplate");
static_assert(sizeof(FUIShopGoodsTemplate) == 0x000128, "Wrong size on FUIShopGoodsTemplate");
static_assert(offsetof(FUIShopGoodsTemplate, Name) == 0x000008, "Member 'FUIShopGoodsTemplate::Name' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, RowId) == 0x00000C, "Member 'FUIShopGoodsTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, WorldType) == 0x000010, "Member 'FUIShopGoodsTemplate::WorldType' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, GoodsID) == 0x000014, "Member 'FUIShopGoodsTemplate::GoodsID' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, TabId) == 0x000018, "Member 'FUIShopGoodsTemplate::TabId' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, GoodsType) == 0x000028, "Member 'FUIShopGoodsTemplate::GoodsType' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, FrontID) == 0x00002C, "Member 'FUIShopGoodsTemplate::FrontID' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, LinkID) == 0x000030, "Member 'FUIShopGoodsTemplate::LinkID' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, GroupId) == 0x000034, "Member 'FUIShopGoodsTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, NameStrId) == 0x000038, "Member 'FUIShopGoodsTemplate::NameStrId' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, ExplainStrId) == 0x00003C, "Member 'FUIShopGoodsTemplate::ExplainStrId' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, Description) == 0x000040, "Member 'FUIShopGoodsTemplate::Description' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, GoodsCommodityId) == 0x000044, "Member 'FUIShopGoodsTemplate::GoodsCommodityId' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, GoodsValue) == 0x000048, "Member 'FUIShopGoodsTemplate::GoodsValue' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, BonusType1) == 0x00004C, "Member 'FUIShopGoodsTemplate::BonusType1' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, BonusId1) == 0x000050, "Member 'FUIShopGoodsTemplate::BonusId1' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, BonusCount1) == 0x000054, "Member 'FUIShopGoodsTemplate::BonusCount1' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, MoneyId) == 0x000058, "Member 'FUIShopGoodsTemplate::MoneyId' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, MoneyIValue) == 0x00005C, "Member 'FUIShopGoodsTemplate::MoneyIValue' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, MileageId) == 0x000060, "Member 'FUIShopGoodsTemplate::MileageId' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, MileageValue) == 0x000064, "Member 'FUIShopGoodsTemplate::MileageValue' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, LimitTarget) == 0x000068, "Member 'FUIShopGoodsTemplate::LimitTarget' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, LimitCountType) == 0x00006C, "Member 'FUIShopGoodsTemplate::LimitCountType' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, LimitCountValue) == 0x000070, "Member 'FUIShopGoodsTemplate::LimitCountValue' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, LevelType) == 0x000074, "Member 'FUIShopGoodsTemplate::LevelType' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, LimitLevelMin) == 0x000078, "Member 'FUIShopGoodsTemplate::LimitLevelMin' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, LimitLevelMax) == 0x00007C, "Member 'FUIShopGoodsTemplate::LimitLevelMax' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, IconID) == 0x000080, "Member 'FUIShopGoodsTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, OrderType) == 0x000084, "Member 'FUIShopGoodsTemplate::OrderType' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, OrderNum) == 0x000088, "Member 'FUIShopGoodsTemplate::OrderNum' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, TagIconId) == 0x000098, "Member 'FUIShopGoodsTemplate::TagIconId' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, OnOffType) == 0x00009C, "Member 'FUIShopGoodsTemplate::OnOffType' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, OnOfTimeStart) == 0x0000A0, "Member 'FUIShopGoodsTemplate::OnOfTimeStart' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, OnOfTimeEnd) == 0x0000B0, "Member 'FUIShopGoodsTemplate::OnOfTimeEnd' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, SubIBag) == 0x0000C0, "Member 'FUIShopGoodsTemplate::SubIBag' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, DisplayOnOff) == 0x0000C4, "Member 'FUIShopGoodsTemplate::DisplayOnOff' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, HotDeal) == 0x0000C8, "Member 'FUIShopGoodsTemplate::HotDeal' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, HotDealTimeStart) == 0x0000D0, "Member 'FUIShopGoodsTemplate::HotDealTimeStart' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, HotDealTimeEnd) == 0x0000E0, "Member 'FUIShopGoodsTemplate::HotDealTimeEnd' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, DiscountRate) == 0x0000F0, "Member 'FUIShopGoodsTemplate::DiscountRate' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, GuildGift) == 0x0000F4, "Member 'FUIShopGoodsTemplate::GuildGift' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, GuildGiftStr) == 0x0000F8, "Member 'FUIShopGoodsTemplate::GuildGiftStr' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, Gotab) == 0x0000FC, "Member 'FUIShopGoodsTemplate::Gotab' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, ReleaseTime) == 0x000100, "Member 'FUIShopGoodsTemplate::ReleaseTime' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, OnePlus) == 0x000110, "Member 'FUIShopGoodsTemplate::OnePlus' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, BgColor) == 0x000114, "Member 'FUIShopGoodsTemplate::BgColor' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, LabelIconId) == 0x000118, "Member 'FUIShopGoodsTemplate::LabelIconId' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, DetailDescription) == 0x00011C, "Member 'FUIShopGoodsTemplate::DetailDescription' has a wrong offset!");
static_assert(offsetof(FUIShopGoodsTemplate, PopupStoreId) == 0x000120, "Member 'FUIShopGoodsTemplate::PopupStoreId' has a wrong offset!");

// ScriptStruct MirMobile.SectorGradeTemplate
// 0x0018 (0x0020 - 0x0008)
struct FSectorGradeTemplate final : public FTableRowBase
{
public:
	int32                                         SectorID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectorRange;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SectorLocation;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSectorGradeTemplate) == 0x000008, "Wrong alignment on FSectorGradeTemplate");
static_assert(sizeof(FSectorGradeTemplate) == 0x000020, "Wrong size on FSectorGradeTemplate");
static_assert(offsetof(FSectorGradeTemplate, SectorID) == 0x000008, "Member 'FSectorGradeTemplate::SectorID' has a wrong offset!");
static_assert(offsetof(FSectorGradeTemplate, SectorRange) == 0x00000C, "Member 'FSectorGradeTemplate::SectorRange' has a wrong offset!");
static_assert(offsetof(FSectorGradeTemplate, SectorLocation) == 0x000010, "Member 'FSectorGradeTemplate::SectorLocation' has a wrong offset!");

// ScriptStruct MirMobile.DeckSymbolListTemplate
// 0x0018 (0x0020 - 0x0008)
struct FDeckSymbolListTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SymbolId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSymbol;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeckSymbolListTemplate) == 0x000008, "Wrong alignment on FDeckSymbolListTemplate");
static_assert(sizeof(FDeckSymbolListTemplate) == 0x000020, "Wrong size on FDeckSymbolListTemplate");
static_assert(offsetof(FDeckSymbolListTemplate, Name) == 0x000008, "Member 'FDeckSymbolListTemplate::Name' has a wrong offset!");
static_assert(offsetof(FDeckSymbolListTemplate, SymbolId) == 0x00000C, "Member 'FDeckSymbolListTemplate::SymbolId' has a wrong offset!");
static_assert(offsetof(FDeckSymbolListTemplate, IconID) == 0x000010, "Member 'FDeckSymbolListTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FDeckSymbolListTemplate, SortOrder) == 0x000014, "Member 'FDeckSymbolListTemplate::SortOrder' has a wrong offset!");
static_assert(offsetof(FDeckSymbolListTemplate, DefaultSymbol) == 0x000018, "Member 'FDeckSymbolListTemplate::DefaultSymbol' has a wrong offset!");

// ScriptStruct MirMobile.CameraFocus
// 0x0024 (0x0024 - 0x0000)
struct alignas(0x04) FCameraFocus final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraFocus) == 0x000004, "Wrong alignment on FCameraFocus");
static_assert(sizeof(FCameraFocus) == 0x000024, "Wrong size on FCameraFocus");

// ScriptStruct MirMobile.AutoFlightPathTemplate
// 0x0070 (0x0078 - 0x0008)
struct FAutoFlightPathTemplate final : public FTableRowBase
{
public:
	int32                                         AutoFlightPathId;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartCoordinate;                                   // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndCoordinate;                                     // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomRange;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirStep1;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveCoordinate1;                                   // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirStep2;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveCoordinate2;                                   // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirStep3;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveCoordinate3;                                   // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirStep4;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveCoordinate4;                                   // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirStep5;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveCoordinate5;                                   // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAutoFlightPathTemplate) == 0x000008, "Wrong alignment on FAutoFlightPathTemplate");
static_assert(sizeof(FAutoFlightPathTemplate) == 0x000078, "Wrong size on FAutoFlightPathTemplate");
static_assert(offsetof(FAutoFlightPathTemplate, AutoFlightPathId) == 0x000008, "Member 'FAutoFlightPathTemplate::AutoFlightPathId' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, StartCoordinate) == 0x00000C, "Member 'FAutoFlightPathTemplate::StartCoordinate' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, EndCoordinate) == 0x000018, "Member 'FAutoFlightPathTemplate::EndCoordinate' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, RandomRange) == 0x000024, "Member 'FAutoFlightPathTemplate::RandomRange' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, AirStep1) == 0x000028, "Member 'FAutoFlightPathTemplate::AirStep1' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, MoveCoordinate1) == 0x00002C, "Member 'FAutoFlightPathTemplate::MoveCoordinate1' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, AirStep2) == 0x000038, "Member 'FAutoFlightPathTemplate::AirStep2' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, MoveCoordinate2) == 0x00003C, "Member 'FAutoFlightPathTemplate::MoveCoordinate2' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, AirStep3) == 0x000048, "Member 'FAutoFlightPathTemplate::AirStep3' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, MoveCoordinate3) == 0x00004C, "Member 'FAutoFlightPathTemplate::MoveCoordinate3' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, AirStep4) == 0x000058, "Member 'FAutoFlightPathTemplate::AirStep4' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, MoveCoordinate4) == 0x00005C, "Member 'FAutoFlightPathTemplate::MoveCoordinate4' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, AirStep5) == 0x000068, "Member 'FAutoFlightPathTemplate::AirStep5' has a wrong offset!");
static_assert(offsetof(FAutoFlightPathTemplate, MoveCoordinate5) == 0x00006C, "Member 'FAutoFlightPathTemplate::MoveCoordinate5' has a wrong offset!");

// ScriptStruct MirMobile.QueueUITemplate
// 0x0020 (0x0028 - 0x0008)
struct FQueueUITemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverTake;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueueUITemplate) == 0x000008, "Wrong alignment on FQueueUITemplate");
static_assert(sizeof(FQueueUITemplate) == 0x000028, "Wrong size on FQueueUITemplate");
static_assert(offsetof(FQueueUITemplate, UniqueId) == 0x000008, "Member 'FQueueUITemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FQueueUITemplate, Priority) == 0x00000C, "Member 'FQueueUITemplate::Priority' has a wrong offset!");
static_assert(offsetof(FQueueUITemplate, OverTake) == 0x000010, "Member 'FQueueUITemplate::OverTake' has a wrong offset!");
static_assert(offsetof(FQueueUITemplate, Filename) == 0x000018, "Member 'FQueueUITemplate::Filename' has a wrong offset!");

// ScriptStruct MirMobile.HitPostProcessMaterialData
// 0x0028 (0x0028 - 0x0000)
struct FHitPostProcessMaterialData final
{
public:
	float                                         ControlTime;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PWeightCurve;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PEffectUseCurve;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PPowerCurve;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitPostProcessMaterialData) == 0x000008, "Wrong alignment on FHitPostProcessMaterialData");
static_assert(sizeof(FHitPostProcessMaterialData) == 0x000028, "Wrong size on FHitPostProcessMaterialData");
static_assert(offsetof(FHitPostProcessMaterialData, ControlTime) == 0x000000, "Member 'FHitPostProcessMaterialData::ControlTime' has a wrong offset!");
static_assert(offsetof(FHitPostProcessMaterialData, PWeightCurve) == 0x000008, "Member 'FHitPostProcessMaterialData::PWeightCurve' has a wrong offset!");
static_assert(offsetof(FHitPostProcessMaterialData, PEffectUseCurve) == 0x000010, "Member 'FHitPostProcessMaterialData::PEffectUseCurve' has a wrong offset!");
static_assert(offsetof(FHitPostProcessMaterialData, PPowerCurve) == 0x000018, "Member 'FHitPostProcessMaterialData::PPowerCurve' has a wrong offset!");

// ScriptStruct MirMobile.SkillCameraValue
// 0x0040 (0x0040 - 0x0000)
struct FSkillCameraValue final
{
public:
	bool                                          UseManualCamera;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkillCameraDuration;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PZoomCameraCurve;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtBoneName;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LookAtOffsetCheck;                                 // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PLookAtOffsetCurve;                                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CameraAngleCheck;                                  // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaintainCurrentAngle;                              // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PCameraAngleCurve;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PLookAtBoneSpeedCurve;                             // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillCameraValue) == 0x000008, "Wrong alignment on FSkillCameraValue");
static_assert(sizeof(FSkillCameraValue) == 0x000040, "Wrong size on FSkillCameraValue");
static_assert(offsetof(FSkillCameraValue, UseManualCamera) == 0x000000, "Member 'FSkillCameraValue::UseManualCamera' has a wrong offset!");
static_assert(offsetof(FSkillCameraValue, SkillCameraDuration) == 0x000004, "Member 'FSkillCameraValue::SkillCameraDuration' has a wrong offset!");
static_assert(offsetof(FSkillCameraValue, PZoomCameraCurve) == 0x000008, "Member 'FSkillCameraValue::PZoomCameraCurve' has a wrong offset!");
static_assert(offsetof(FSkillCameraValue, LookAtBoneName) == 0x000010, "Member 'FSkillCameraValue::LookAtBoneName' has a wrong offset!");
static_assert(offsetof(FSkillCameraValue, LookAtOffsetCheck) == 0x000018, "Member 'FSkillCameraValue::LookAtOffsetCheck' has a wrong offset!");
static_assert(offsetof(FSkillCameraValue, PLookAtOffsetCurve) == 0x000020, "Member 'FSkillCameraValue::PLookAtOffsetCurve' has a wrong offset!");
static_assert(offsetof(FSkillCameraValue, CameraAngleCheck) == 0x000028, "Member 'FSkillCameraValue::CameraAngleCheck' has a wrong offset!");
static_assert(offsetof(FSkillCameraValue, MaintainCurrentAngle) == 0x000029, "Member 'FSkillCameraValue::MaintainCurrentAngle' has a wrong offset!");
static_assert(offsetof(FSkillCameraValue, PCameraAngleCurve) == 0x000030, "Member 'FSkillCameraValue::PCameraAngleCurve' has a wrong offset!");
static_assert(offsetof(FSkillCameraValue, PLookAtBoneSpeedCurve) == 0x000038, "Member 'FSkillCameraValue::PLookAtBoneSpeedCurve' has a wrong offset!");

// ScriptStruct MirMobile.QuickSlotTemplate
// 0x0018 (0x0020 - 0x0008)
struct FQuickSlotTemplate final : public FTableRowBase
{
public:
	int32                                         SubType;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoUse;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoUseType;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoUseActive;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAddUp;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuickSlotTemplate) == 0x000008, "Wrong alignment on FQuickSlotTemplate");
static_assert(sizeof(FQuickSlotTemplate) == 0x000020, "Wrong size on FQuickSlotTemplate");
static_assert(offsetof(FQuickSlotTemplate, SubType) == 0x000008, "Member 'FQuickSlotTemplate::SubType' has a wrong offset!");
static_assert(offsetof(FQuickSlotTemplate, AutoUse) == 0x00000C, "Member 'FQuickSlotTemplate::AutoUse' has a wrong offset!");
static_assert(offsetof(FQuickSlotTemplate, AutoUseType) == 0x000010, "Member 'FQuickSlotTemplate::AutoUseType' has a wrong offset!");
static_assert(offsetof(FQuickSlotTemplate, AutoUseActive) == 0x000014, "Member 'FQuickSlotTemplate::AutoUseActive' has a wrong offset!");
static_assert(offsetof(FQuickSlotTemplate, ItemAddUp) == 0x000018, "Member 'FQuickSlotTemplate::ItemAddUp' has a wrong offset!");

// ScriptStruct MirMobile.DamageTextInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FDamageTextInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageTextInfo) == 0x000004, "Wrong alignment on FDamageTextInfo");
static_assert(sizeof(FDamageTextInfo) == 0x000018, "Wrong size on FDamageTextInfo");

// ScriptStruct MirMobile.BoneCustomizingTemplate
// 0x0020 (0x0028 - 0x0008)
struct FBoneCustomizingTemplate final : public FTableRowBase
{
public:
	class FString                                 ControlName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomBoneData>                BoneDataArray;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneCustomizingTemplate) == 0x000008, "Wrong alignment on FBoneCustomizingTemplate");
static_assert(sizeof(FBoneCustomizingTemplate) == 0x000028, "Wrong size on FBoneCustomizingTemplate");
static_assert(offsetof(FBoneCustomizingTemplate, ControlName) == 0x000008, "Member 'FBoneCustomizingTemplate::ControlName' has a wrong offset!");
static_assert(offsetof(FBoneCustomizingTemplate, BoneDataArray) == 0x000018, "Member 'FBoneCustomizingTemplate::BoneDataArray' has a wrong offset!");

// ScriptStruct MirMobile.ItemMagicOrbOptionChangeTemplate
// 0x0030 (0x0038 - 0x0008)
struct FItemMagicOrbOptionChangeTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubType;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemUseId01;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemCount01;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostType01;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostCount01;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostType02;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostCount02;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMagicOrbOptionChangeTemplate) == 0x000008, "Wrong alignment on FItemMagicOrbOptionChangeTemplate");
static_assert(sizeof(FItemMagicOrbOptionChangeTemplate) == 0x000038, "Wrong size on FItemMagicOrbOptionChangeTemplate");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, Name) == 0x000008, "Member 'FItemMagicOrbOptionChangeTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, RowId) == 0x00000C, "Member 'FItemMagicOrbOptionChangeTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, SubType) == 0x000010, "Member 'FItemMagicOrbOptionChangeTemplate::SubType' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, Grade) == 0x000014, "Member 'FItemMagicOrbOptionChangeTemplate::Grade' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, Level) == 0x000018, "Member 'FItemMagicOrbOptionChangeTemplate::Level' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, NeedItemUseId01) == 0x00001C, "Member 'FItemMagicOrbOptionChangeTemplate::NeedItemUseId01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, NeedItemCount01) == 0x000020, "Member 'FItemMagicOrbOptionChangeTemplate::NeedItemCount01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, NeedCostType01) == 0x000024, "Member 'FItemMagicOrbOptionChangeTemplate::NeedCostType01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, NeedCostCount01) == 0x000028, "Member 'FItemMagicOrbOptionChangeTemplate::NeedCostCount01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, NeedCostType02) == 0x00002C, "Member 'FItemMagicOrbOptionChangeTemplate::NeedCostType02' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionChangeTemplate, NeedCostCount02) == 0x000030, "Member 'FItemMagicOrbOptionChangeTemplate::NeedCostCount02' has a wrong offset!");

// ScriptStruct MirMobile.StageCommonTemplate
// 0x0000 (0x0008 - 0x0008)
struct FStageCommonTemplate : public FTableRowBase
{
};
static_assert(alignof(FStageCommonTemplate) == 0x000008, "Wrong alignment on FStageCommonTemplate");
static_assert(sizeof(FStageCommonTemplate) == 0x000008, "Wrong size on FStageCommonTemplate");

// ScriptStruct MirMobile.CameraInfoPreset
// 0x0010 (0x0010 - 0x0000)
struct FCameraInfoPreset final
{
public:
	float                                         CameraFov;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraHeight;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistance;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraInfoPreset) == 0x000004, "Wrong alignment on FCameraInfoPreset");
static_assert(sizeof(FCameraInfoPreset) == 0x000010, "Wrong size on FCameraInfoPreset");
static_assert(offsetof(FCameraInfoPreset, CameraFov) == 0x000000, "Member 'FCameraInfoPreset::CameraFov' has a wrong offset!");
static_assert(offsetof(FCameraInfoPreset, CameraHeight) == 0x000004, "Member 'FCameraInfoPreset::CameraHeight' has a wrong offset!");
static_assert(offsetof(FCameraInfoPreset, MinDistance) == 0x000008, "Member 'FCameraInfoPreset::MinDistance' has a wrong offset!");
static_assert(offsetof(FCameraInfoPreset, MaxDistance) == 0x00000C, "Member 'FCameraInfoPreset::MaxDistance' has a wrong offset!");

// ScriptStruct MirMobile.AirWalkTemplate
// 0x0038 (0x0040 - 0x0008)
struct FAirWalkTemplate final : public FTableRowBase
{
public:
	int32                                         AirWalkId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirStep;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirCoolTime;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StandardSpeed;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirStandHeight;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AirMoveHeight;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirWalkTime;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnableTime;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvailableTime;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AirMotionBlur;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DashReady;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashStart;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallStartSpeed;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAirWalkTemplate) == 0x000008, "Wrong alignment on FAirWalkTemplate");
static_assert(sizeof(FAirWalkTemplate) == 0x000040, "Wrong size on FAirWalkTemplate");
static_assert(offsetof(FAirWalkTemplate, AirWalkId) == 0x000008, "Member 'FAirWalkTemplate::AirWalkId' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, ClassID) == 0x00000C, "Member 'FAirWalkTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, AirStep) == 0x000010, "Member 'FAirWalkTemplate::AirStep' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, AirCoolTime) == 0x000014, "Member 'FAirWalkTemplate::AirCoolTime' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, StandardSpeed) == 0x000018, "Member 'FAirWalkTemplate::StandardSpeed' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, AirStandHeight) == 0x00001C, "Member 'FAirWalkTemplate::AirStandHeight' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, AirMoveHeight) == 0x000020, "Member 'FAirWalkTemplate::AirMoveHeight' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, AirWalkTime) == 0x000024, "Member 'FAirWalkTemplate::AirWalkTime' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, UnableTime) == 0x000028, "Member 'FAirWalkTemplate::UnableTime' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, AvailableTime) == 0x00002C, "Member 'FAirWalkTemplate::AvailableTime' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, AirMotionBlur) == 0x000030, "Member 'FAirWalkTemplate::AirMotionBlur' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, DashReady) == 0x000034, "Member 'FAirWalkTemplate::DashReady' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, DashStart) == 0x000038, "Member 'FAirWalkTemplate::DashStart' has a wrong offset!");
static_assert(offsetof(FAirWalkTemplate, FallStartSpeed) == 0x00003C, "Member 'FAirWalkTemplate::FallStartSpeed' has a wrong offset!");

// ScriptStruct MirMobile.GuildCoopMissionGroupTemplate
// 0x0068 (0x0070 - 0x0008)
struct FGuildCoopMissionGroupTemplate final : public FTableRowBase
{
public:
	int32                                         GuildCoopMissionGroupId;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mission_Difficulty_Easy;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mission_Difficulty_Normal;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mission_Difficulty_Hard;                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCoopPoint;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevId;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevLevel;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoopBossId;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoopBossIcon;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PosID;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WayPoint;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_MailPresetId;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_CoopRewardType1;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_CoopRewardId1;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_CoopRewardCount1;                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_CoopRewardType2;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_CoopRewardId2;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_CoopRewardCount2;                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_CoopRewardType1;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_CoopRewardId1;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_CoopRewardCount1;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_CoopRewardType2;                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_CoopRewardId2;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_CoopRewardCount2;                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildCoopMissionGroupTemplate) == 0x000008, "Wrong alignment on FGuildCoopMissionGroupTemplate");
static_assert(sizeof(FGuildCoopMissionGroupTemplate) == 0x000070, "Wrong size on FGuildCoopMissionGroupTemplate");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, GuildCoopMissionGroupId) == 0x000008, "Member 'FGuildCoopMissionGroupTemplate::GuildCoopMissionGroupId' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, Mission_Difficulty_Easy) == 0x00000C, "Member 'FGuildCoopMissionGroupTemplate::Mission_Difficulty_Easy' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, Mission_Difficulty_Normal) == 0x000010, "Member 'FGuildCoopMissionGroupTemplate::Mission_Difficulty_Normal' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, Mission_Difficulty_Hard) == 0x000014, "Member 'FGuildCoopMissionGroupTemplate::Mission_Difficulty_Hard' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, NeedCoopPoint) == 0x000018, "Member 'FGuildCoopMissionGroupTemplate::NeedCoopPoint' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, DevId) == 0x00001C, "Member 'FGuildCoopMissionGroupTemplate::DevId' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, DevLevel) == 0x000020, "Member 'FGuildCoopMissionGroupTemplate::DevLevel' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, CoopBossId) == 0x000024, "Member 'FGuildCoopMissionGroupTemplate::CoopBossId' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, CoopBossIcon) == 0x000028, "Member 'FGuildCoopMissionGroupTemplate::CoopBossIcon' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, StageID) == 0x00002C, "Member 'FGuildCoopMissionGroupTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, PosID) == 0x000030, "Member 'FGuildCoopMissionGroupTemplate::PosID' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, WayPoint) == 0x000034, "Member 'FGuildCoopMissionGroupTemplate::WayPoint' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, Guild_MailPresetId) == 0x000038, "Member 'FGuildCoopMissionGroupTemplate::Guild_MailPresetId' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, Guild_CoopRewardType1) == 0x00003C, "Member 'FGuildCoopMissionGroupTemplate::Guild_CoopRewardType1' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, Guild_CoopRewardId1) == 0x000040, "Member 'FGuildCoopMissionGroupTemplate::Guild_CoopRewardId1' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, Guild_CoopRewardCount1) == 0x000044, "Member 'FGuildCoopMissionGroupTemplate::Guild_CoopRewardCount1' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, Guild_CoopRewardType2) == 0x000048, "Member 'FGuildCoopMissionGroupTemplate::Guild_CoopRewardType2' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, Guild_CoopRewardId2) == 0x00004C, "Member 'FGuildCoopMissionGroupTemplate::Guild_CoopRewardId2' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, Guild_CoopRewardCount2) == 0x000050, "Member 'FGuildCoopMissionGroupTemplate::Guild_CoopRewardCount2' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, MVP_CoopRewardType1) == 0x000054, "Member 'FGuildCoopMissionGroupTemplate::MVP_CoopRewardType1' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, MVP_CoopRewardId1) == 0x000058, "Member 'FGuildCoopMissionGroupTemplate::MVP_CoopRewardId1' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, MVP_CoopRewardCount1) == 0x00005C, "Member 'FGuildCoopMissionGroupTemplate::MVP_CoopRewardCount1' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, MVP_CoopRewardType2) == 0x000060, "Member 'FGuildCoopMissionGroupTemplate::MVP_CoopRewardType2' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, MVP_CoopRewardId2) == 0x000064, "Member 'FGuildCoopMissionGroupTemplate::MVP_CoopRewardId2' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupTemplate, MVP_CoopRewardCount2) == 0x000068, "Member 'FGuildCoopMissionGroupTemplate::MVP_CoopRewardCount2' has a wrong offset!");

// ScriptStruct MirMobile.ClassCreateTemplate
// 0x0070 (0x0078 - 0x0008)
struct FClassCreateTemplate final : public FTableRowBase
{
public:
	int32                                         ClassID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassNameID;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubIcon;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassDesc;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HQ_Weapon_Mesh;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Init_Weapon_Mesh;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InitBasicMesh;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpStyleHairMesh;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitWeapon;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitCostume;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitSkill01;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitSkill02;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitSkill03;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitSkill04;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitSkill05;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitSkill06;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitStageId;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CreateFaceIcon;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassMovieID;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimBP;                                            // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClassCreateTemplate) == 0x000008, "Wrong alignment on FClassCreateTemplate");
static_assert(sizeof(FClassCreateTemplate) == 0x000078, "Wrong size on FClassCreateTemplate");
static_assert(offsetof(FClassCreateTemplate, ClassID) == 0x000008, "Member 'FClassCreateTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, ClassNameID) == 0x00000C, "Member 'FClassCreateTemplate::ClassNameID' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, Icon) == 0x000010, "Member 'FClassCreateTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, SubIcon) == 0x000014, "Member 'FClassCreateTemplate::SubIcon' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, ClassDesc) == 0x000018, "Member 'FClassCreateTemplate::ClassDesc' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, HQ_Weapon_Mesh) == 0x000020, "Member 'FClassCreateTemplate::HQ_Weapon_Mesh' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, Init_Weapon_Mesh) == 0x000030, "Member 'FClassCreateTemplate::Init_Weapon_Mesh' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, InitBasicMesh) == 0x000040, "Member 'FClassCreateTemplate::InitBasicMesh' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, UpStyleHairMesh) == 0x000044, "Member 'FClassCreateTemplate::UpStyleHairMesh' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, InitWeapon) == 0x000048, "Member 'FClassCreateTemplate::InitWeapon' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, InitCostume) == 0x00004C, "Member 'FClassCreateTemplate::InitCostume' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, InitSkill01) == 0x000050, "Member 'FClassCreateTemplate::InitSkill01' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, InitSkill02) == 0x000054, "Member 'FClassCreateTemplate::InitSkill02' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, InitSkill03) == 0x000058, "Member 'FClassCreateTemplate::InitSkill03' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, InitSkill04) == 0x00005C, "Member 'FClassCreateTemplate::InitSkill04' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, InitSkill05) == 0x000060, "Member 'FClassCreateTemplate::InitSkill05' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, InitSkill06) == 0x000064, "Member 'FClassCreateTemplate::InitSkill06' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, InitStageId) == 0x000068, "Member 'FClassCreateTemplate::InitStageId' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, CreateFaceIcon) == 0x00006C, "Member 'FClassCreateTemplate::CreateFaceIcon' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, ClassMovieID) == 0x000070, "Member 'FClassCreateTemplate::ClassMovieID' has a wrong offset!");
static_assert(offsetof(FClassCreateTemplate, AnimBP) == 0x000074, "Member 'FClassCreateTemplate::AnimBP' has a wrong offset!");

// ScriptStruct MirMobile.BuffTemplate
// 0x0100 (0x0108 - 0x0008)
struct FBuffTemplate final : public FTableRowBase
{
public:
	int32                                         BuffId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffName;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffExplain;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowDamageFont;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowDamageLog;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PetBuff_IconId;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PetId;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffUseType;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApplyType;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffTarget;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActEffect;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffEffect;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon_Big;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffTime;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelUpBuffTime;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffType;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffIndexType_1;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffIndex_1;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffValue_1;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpBuffValue_1;                                // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffValueEx_1;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffIndexType_2;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffIndex_2;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffValue_2;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpBuffValue_2;                                // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffValueEx_2;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffIndexType_3;                                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffIndex_3;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffValue_3;                                       // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpBuffValue_3;                                // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffValueEx_3;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffOverlap;                                       // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectSocket;                                      // 0x009C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffSocketType                               EffectSocket_Type;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectHeight;                                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffArmorType;                                     // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffProbability;                                   // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateRule;                                        // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Emissive_Dcolor;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Fresnel_Exponenth;                                 // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fresnel_BaseReflect;                               // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffAttackID;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtinctionEffect;                                  // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExtinctionEffectSocket;                            // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverLapCallGroupID;                                // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsHideRemainTime;                                  // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 DetachBuffID;                                      // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffTemplate) == 0x000008, "Wrong alignment on FBuffTemplate");
static_assert(sizeof(FBuffTemplate) == 0x000108, "Wrong size on FBuffTemplate");
static_assert(offsetof(FBuffTemplate, BuffId) == 0x000008, "Member 'FBuffTemplate::BuffId' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffName) == 0x00000C, "Member 'FBuffTemplate::BuffName' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffExplain) == 0x000010, "Member 'FBuffTemplate::BuffExplain' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, ShowDamageFont) == 0x000014, "Member 'FBuffTemplate::ShowDamageFont' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, ShowDamageLog) == 0x000018, "Member 'FBuffTemplate::ShowDamageLog' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, PetBuff_IconId) == 0x000020, "Member 'FBuffTemplate::PetBuff_IconId' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, PetId) == 0x000030, "Member 'FBuffTemplate::PetId' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffUseType) == 0x000034, "Member 'FBuffTemplate::BuffUseType' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, ApplyType) == 0x000038, "Member 'FBuffTemplate::ApplyType' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffTarget) == 0x00003C, "Member 'FBuffTemplate::BuffTarget' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, ActEffect) == 0x000040, "Member 'FBuffTemplate::ActEffect' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffEffect) == 0x000044, "Member 'FBuffTemplate::BuffEffect' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, Icon) == 0x000048, "Member 'FBuffTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, Icon_Big) == 0x00004C, "Member 'FBuffTemplate::Icon_Big' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffTime) == 0x000050, "Member 'FBuffTemplate::BuffTime' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, LevelUpBuffTime) == 0x000054, "Member 'FBuffTemplate::LevelUpBuffTime' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffType) == 0x000058, "Member 'FBuffTemplate::BuffType' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffIndexType_1) == 0x00005C, "Member 'FBuffTemplate::BuffIndexType_1' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffIndex_1) == 0x000060, "Member 'FBuffTemplate::BuffIndex_1' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffValue_1) == 0x000064, "Member 'FBuffTemplate::BuffValue_1' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, LevelUpBuffValue_1) == 0x000068, "Member 'FBuffTemplate::LevelUpBuffValue_1' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffValueEx_1) == 0x00006C, "Member 'FBuffTemplate::BuffValueEx_1' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffIndexType_2) == 0x000070, "Member 'FBuffTemplate::BuffIndexType_2' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffIndex_2) == 0x000074, "Member 'FBuffTemplate::BuffIndex_2' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffValue_2) == 0x000078, "Member 'FBuffTemplate::BuffValue_2' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, LevelUpBuffValue_2) == 0x00007C, "Member 'FBuffTemplate::LevelUpBuffValue_2' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffValueEx_2) == 0x000080, "Member 'FBuffTemplate::BuffValueEx_2' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffIndexType_3) == 0x000084, "Member 'FBuffTemplate::BuffIndexType_3' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffIndex_3) == 0x000088, "Member 'FBuffTemplate::BuffIndex_3' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffValue_3) == 0x00008C, "Member 'FBuffTemplate::BuffValue_3' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, LevelUpBuffValue_3) == 0x000090, "Member 'FBuffTemplate::LevelUpBuffValue_3' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffValueEx_3) == 0x000094, "Member 'FBuffTemplate::BuffValueEx_3' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffOverlap) == 0x000098, "Member 'FBuffTemplate::BuffOverlap' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, EffectSocket) == 0x00009C, "Member 'FBuffTemplate::EffectSocket' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, EffectSocket_Type) == 0x0000A4, "Member 'FBuffTemplate::EffectSocket_Type' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, EffectHeight) == 0x0000A8, "Member 'FBuffTemplate::EffectHeight' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffArmorType) == 0x0000AC, "Member 'FBuffTemplate::BuffArmorType' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffProbability) == 0x0000B0, "Member 'FBuffTemplate::BuffProbability' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, UpdateRule) == 0x0000B4, "Member 'FBuffTemplate::UpdateRule' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, Emissive_Dcolor) == 0x0000B8, "Member 'FBuffTemplate::Emissive_Dcolor' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, Fresnel_Exponenth) == 0x0000C8, "Member 'FBuffTemplate::Fresnel_Exponenth' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, Fresnel_BaseReflect) == 0x0000CC, "Member 'FBuffTemplate::Fresnel_BaseReflect' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, BuffAttackID) == 0x0000D0, "Member 'FBuffTemplate::BuffAttackID' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, ExtinctionEffect) == 0x0000D4, "Member 'FBuffTemplate::ExtinctionEffect' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, ExtinctionEffectSocket) == 0x0000D8, "Member 'FBuffTemplate::ExtinctionEffectSocket' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, OverLapCallGroupID) == 0x0000E0, "Member 'FBuffTemplate::OverLapCallGroupID' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, IsHideRemainTime) == 0x0000E4, "Member 'FBuffTemplate::IsHideRemainTime' has a wrong offset!");
static_assert(offsetof(FBuffTemplate, DetachBuffID) == 0x0000E8, "Member 'FBuffTemplate::DetachBuffID' has a wrong offset!");

// ScriptStruct MirMobile.CostumePaletteTemplate
// 0x0018 (0x0020 - 0x0008)
struct FCostumePaletteTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaletteGroupId;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Color01Id;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Color02Id;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCostumePaletteTemplate) == 0x000008, "Wrong alignment on FCostumePaletteTemplate");
static_assert(sizeof(FCostumePaletteTemplate) == 0x000020, "Wrong size on FCostumePaletteTemplate");
static_assert(offsetof(FCostumePaletteTemplate, RowId) == 0x000008, "Member 'FCostumePaletteTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FCostumePaletteTemplate, PaletteGroupId) == 0x00000C, "Member 'FCostumePaletteTemplate::PaletteGroupId' has a wrong offset!");
static_assert(offsetof(FCostumePaletteTemplate, Number) == 0x000010, "Member 'FCostumePaletteTemplate::Number' has a wrong offset!");
static_assert(offsetof(FCostumePaletteTemplate, Color01Id) == 0x000014, "Member 'FCostumePaletteTemplate::Color01Id' has a wrong offset!");
static_assert(offsetof(FCostumePaletteTemplate, Color02Id) == 0x000018, "Member 'FCostumePaletteTemplate::Color02Id' has a wrong offset!");

// ScriptStruct MirMobile.GuildDailyMissionTemplate
// 0x00A0 (0x00A8 - 0x0008)
struct FGuildDailyMissionTemplate final : public FTableRowBase
{
public:
	int32                                         Guild_Daily_MissionId;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Daily_Mission_Enable;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Daily_MissionIcon;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Daily_MissionTitle;                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionType;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionTarget;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter1;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter2;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Type1;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Value1_1;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Value1_2;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Type2;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Value2_1;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Value2_2;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Type3;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Value3_1;                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Value3_2;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Type4;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Value4_1;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Value4_2;                             // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Type5;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Value5_1;                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Reward_Value5_2;                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Type1;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Value1_1;                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Value1_2;                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Type2;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Value2_1;                          // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Value2_2;                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Type3;                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Value3_1;                          // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Value3_2;                          // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Type4;                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Value4_1;                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Value4_2;                          // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Type5;                             // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Value5_1;                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Personal_Reward_Value5_2;                          // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Daily_Mission_MaxCnt;                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildDailyMissionTemplate) == 0x000008, "Wrong alignment on FGuildDailyMissionTemplate");
static_assert(sizeof(FGuildDailyMissionTemplate) == 0x0000A8, "Wrong size on FGuildDailyMissionTemplate");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Daily_MissionId) == 0x000008, "Member 'FGuildDailyMissionTemplate::Guild_Daily_MissionId' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Daily_Mission_Enable) == 0x00000C, "Member 'FGuildDailyMissionTemplate::Guild_Daily_Mission_Enable' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Daily_MissionIcon) == 0x000010, "Member 'FGuildDailyMissionTemplate::Guild_Daily_MissionIcon' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Daily_MissionTitle) == 0x000014, "Member 'FGuildDailyMissionTemplate::Guild_Daily_MissionTitle' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, MissionType) == 0x000018, "Member 'FGuildDailyMissionTemplate::MissionType' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, MissionTarget) == 0x00001C, "Member 'FGuildDailyMissionTemplate::MissionTarget' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Parameter1) == 0x000020, "Member 'FGuildDailyMissionTemplate::Parameter1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Parameter2) == 0x000024, "Member 'FGuildDailyMissionTemplate::Parameter2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Type1) == 0x000028, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Type1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Value1_1) == 0x00002C, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Value1_1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Value1_2) == 0x000030, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Value1_2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Type2) == 0x000034, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Type2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Value2_1) == 0x000038, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Value2_1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Value2_2) == 0x00003C, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Value2_2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Type3) == 0x000040, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Type3' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Value3_1) == 0x000044, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Value3_1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Value3_2) == 0x000048, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Value3_2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Type4) == 0x00004C, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Type4' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Value4_1) == 0x000050, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Value4_1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Value4_2) == 0x000054, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Value4_2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Type5) == 0x000058, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Type5' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Value5_1) == 0x00005C, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Value5_1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Reward_Value5_2) == 0x000060, "Member 'FGuildDailyMissionTemplate::Guild_Reward_Value5_2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Type1) == 0x000064, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Type1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Value1_1) == 0x000068, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Value1_1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Value1_2) == 0x00006C, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Value1_2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Type2) == 0x000070, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Type2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Value2_1) == 0x000074, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Value2_1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Value2_2) == 0x000078, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Value2_2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Type3) == 0x00007C, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Type3' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Value3_1) == 0x000080, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Value3_1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Value3_2) == 0x000084, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Value3_2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Type4) == 0x000088, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Type4' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Value4_1) == 0x00008C, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Value4_1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Value4_2) == 0x000090, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Value4_2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Type5) == 0x000094, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Type5' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Value5_1) == 0x000098, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Value5_1' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Personal_Reward_Value5_2) == 0x00009C, "Member 'FGuildDailyMissionTemplate::Personal_Reward_Value5_2' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Guild_Daily_Mission_MaxCnt) == 0x0000A0, "Member 'FGuildDailyMissionTemplate::Guild_Daily_Mission_MaxCnt' has a wrong offset!");
static_assert(offsetof(FGuildDailyMissionTemplate, Icon) == 0x0000A4, "Member 'FGuildDailyMissionTemplate::Icon' has a wrong offset!");

// ScriptStruct MirMobile.FinalBoneOffset
// 0x0030 (0x0030 - 0x0000)
struct FFinalBoneOffset final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoneLocationOffset;                                // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoneRotationOffset;                                // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoneScaleOffset;                                   // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFinalBoneOffset) == 0x000004, "Wrong alignment on FFinalBoneOffset");
static_assert(sizeof(FFinalBoneOffset) == 0x000030, "Wrong size on FFinalBoneOffset");
static_assert(offsetof(FFinalBoneOffset, BoneName) == 0x000000, "Member 'FFinalBoneOffset::BoneName' has a wrong offset!");
static_assert(offsetof(FFinalBoneOffset, BoneLocationOffset) == 0x000008, "Member 'FFinalBoneOffset::BoneLocationOffset' has a wrong offset!");
static_assert(offsetof(FFinalBoneOffset, BoneRotationOffset) == 0x000014, "Member 'FFinalBoneOffset::BoneRotationOffset' has a wrong offset!");
static_assert(offsetof(FFinalBoneOffset, BoneScaleOffset) == 0x000020, "Member 'FFinalBoneOffset::BoneScaleOffset' has a wrong offset!");

// ScriptStruct MirMobile.ClientErrorStringTemplate
// 0x0010 (0x0018 - 0x0008)
struct FClientErrorStringTemplate final : public FTableRowBase
{
public:
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientErrorStringTemplate) == 0x000008, "Wrong alignment on FClientErrorStringTemplate");
static_assert(sizeof(FClientErrorStringTemplate) == 0x000018, "Wrong size on FClientErrorStringTemplate");
static_assert(offsetof(FClientErrorStringTemplate, ErrorString) == 0x000008, "Member 'FClientErrorStringTemplate::ErrorString' has a wrong offset!");

// ScriptStruct MirMobile.BoneCustomizingData
// 0x0028 (0x0028 - 0x0000)
struct FBoneCustomizingData final
{
public:
	int32                                         TapId;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ControlName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomBoneData>                BoneDataArray;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneCustomizingData) == 0x000008, "Wrong alignment on FBoneCustomizingData");
static_assert(sizeof(FBoneCustomizingData) == 0x000028, "Wrong size on FBoneCustomizingData");
static_assert(offsetof(FBoneCustomizingData, TapId) == 0x000000, "Member 'FBoneCustomizingData::TapId' has a wrong offset!");
static_assert(offsetof(FBoneCustomizingData, ControlName) == 0x000008, "Member 'FBoneCustomizingData::ControlName' has a wrong offset!");
static_assert(offsetof(FBoneCustomizingData, BoneDataArray) == 0x000018, "Member 'FBoneCustomizingData::BoneDataArray' has a wrong offset!");

// ScriptStruct MirMobile.CharStatistics
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FCharStatistics final
{
public:
	int32                                         CombatPoint;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPShield;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHP;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MP;                                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMP;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SP;                                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSP;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rage;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRage;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x74];                                      // 0x002C(0x0074)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharStatistics) == 0x000008, "Wrong alignment on FCharStatistics");
static_assert(sizeof(FCharStatistics) == 0x0000A0, "Wrong size on FCharStatistics");
static_assert(offsetof(FCharStatistics, CombatPoint) == 0x000000, "Member 'FCharStatistics::CombatPoint' has a wrong offset!");
static_assert(offsetof(FCharStatistics, Level) == 0x000004, "Member 'FCharStatistics::Level' has a wrong offset!");
static_assert(offsetof(FCharStatistics, HP) == 0x000008, "Member 'FCharStatistics::HP' has a wrong offset!");
static_assert(offsetof(FCharStatistics, HPShield) == 0x00000C, "Member 'FCharStatistics::HPShield' has a wrong offset!");
static_assert(offsetof(FCharStatistics, MaxHP) == 0x000010, "Member 'FCharStatistics::MaxHP' has a wrong offset!");
static_assert(offsetof(FCharStatistics, MP) == 0x000014, "Member 'FCharStatistics::MP' has a wrong offset!");
static_assert(offsetof(FCharStatistics, MaxMP) == 0x000018, "Member 'FCharStatistics::MaxMP' has a wrong offset!");
static_assert(offsetof(FCharStatistics, SP) == 0x00001C, "Member 'FCharStatistics::SP' has a wrong offset!");
static_assert(offsetof(FCharStatistics, MaxSP) == 0x000020, "Member 'FCharStatistics::MaxSP' has a wrong offset!");
static_assert(offsetof(FCharStatistics, Rage) == 0x000024, "Member 'FCharStatistics::Rage' has a wrong offset!");
static_assert(offsetof(FCharStatistics, MaxRage) == 0x000028, "Member 'FCharStatistics::MaxRage' has a wrong offset!");

// ScriptStruct MirMobile.MapMarkInfo
// 0x0034 (0x0034 - 0x0000)
struct FMapMarkInfo final
{
public:
	int32                                         StageID;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EliteType;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Name;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoMainType;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoSubType;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoSubTypeValue;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoValue;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInfoValue;                                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoStringId;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoStringPosType;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InfoCoordinate;                                    // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapMarkInfo) == 0x000004, "Wrong alignment on FMapMarkInfo");
static_assert(sizeof(FMapMarkInfo) == 0x000034, "Wrong size on FMapMarkInfo");
static_assert(offsetof(FMapMarkInfo, StageID) == 0x000000, "Member 'FMapMarkInfo::StageID' has a wrong offset!");
static_assert(offsetof(FMapMarkInfo, EliteType) == 0x000004, "Member 'FMapMarkInfo::EliteType' has a wrong offset!");
static_assert(offsetof(FMapMarkInfo, Name) == 0x000008, "Member 'FMapMarkInfo::Name' has a wrong offset!");
static_assert(offsetof(FMapMarkInfo, InfoMainType) == 0x00000C, "Member 'FMapMarkInfo::InfoMainType' has a wrong offset!");
static_assert(offsetof(FMapMarkInfo, InfoSubType) == 0x000010, "Member 'FMapMarkInfo::InfoSubType' has a wrong offset!");
static_assert(offsetof(FMapMarkInfo, InfoSubTypeValue) == 0x000014, "Member 'FMapMarkInfo::InfoSubTypeValue' has a wrong offset!");
static_assert(offsetof(FMapMarkInfo, InfoValue) == 0x000018, "Member 'FMapMarkInfo::InfoValue' has a wrong offset!");
static_assert(offsetof(FMapMarkInfo, DetailInfoValue) == 0x00001C, "Member 'FMapMarkInfo::DetailInfoValue' has a wrong offset!");
static_assert(offsetof(FMapMarkInfo, InfoStringId) == 0x000020, "Member 'FMapMarkInfo::InfoStringId' has a wrong offset!");
static_assert(offsetof(FMapMarkInfo, InfoStringPosType) == 0x000024, "Member 'FMapMarkInfo::InfoStringPosType' has a wrong offset!");
static_assert(offsetof(FMapMarkInfo, InfoCoordinate) == 0x000028, "Member 'FMapMarkInfo::InfoCoordinate' has a wrong offset!");

// ScriptStruct MirMobile.ShoppingBagData
// 0x0028 (0x0028 - 0x0000)
struct FShoppingBagData final
{
public:
	int32                                         GoodsID;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsCount;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        HydraCost;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PWemixCost;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TimeTick;                                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShoppingBagData) == 0x000008, "Wrong alignment on FShoppingBagData");
static_assert(sizeof(FShoppingBagData) == 0x000028, "Wrong size on FShoppingBagData");
static_assert(offsetof(FShoppingBagData, GoodsID) == 0x000000, "Member 'FShoppingBagData::GoodsID' has a wrong offset!");
static_assert(offsetof(FShoppingBagData, GoodsCount) == 0x000004, "Member 'FShoppingBagData::GoodsCount' has a wrong offset!");
static_assert(offsetof(FShoppingBagData, HydraCost) == 0x000008, "Member 'FShoppingBagData::HydraCost' has a wrong offset!");
static_assert(offsetof(FShoppingBagData, PWemixCost) == 0x000010, "Member 'FShoppingBagData::PWemixCost' has a wrong offset!");
static_assert(offsetof(FShoppingBagData, TimeTick) == 0x000018, "Member 'FShoppingBagData::TimeTick' has a wrong offset!");
static_assert(offsetof(FShoppingBagData, IsSelected) == 0x000020, "Member 'FShoppingBagData::IsSelected' has a wrong offset!");

// ScriptStruct MirMobile.ItemEquipSlotTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemEquipSlotTemplate final : public FTableRowBase
{
public:
	int32                                         SlotNumber;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNameId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotOpenClassLv;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipMainType;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipSubType;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowIcon;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemEquipSlotTemplate) == 0x000008, "Wrong alignment on FItemEquipSlotTemplate");
static_assert(sizeof(FItemEquipSlotTemplate) == 0x000020, "Wrong size on FItemEquipSlotTemplate");
static_assert(offsetof(FItemEquipSlotTemplate, SlotNumber) == 0x000008, "Member 'FItemEquipSlotTemplate::SlotNumber' has a wrong offset!");
static_assert(offsetof(FItemEquipSlotTemplate, SlotNameId) == 0x00000C, "Member 'FItemEquipSlotTemplate::SlotNameId' has a wrong offset!");
static_assert(offsetof(FItemEquipSlotTemplate, SlotOpenClassLv) == 0x000010, "Member 'FItemEquipSlotTemplate::SlotOpenClassLv' has a wrong offset!");
static_assert(offsetof(FItemEquipSlotTemplate, EquipMainType) == 0x000014, "Member 'FItemEquipSlotTemplate::EquipMainType' has a wrong offset!");
static_assert(offsetof(FItemEquipSlotTemplate, EquipSubType) == 0x000018, "Member 'FItemEquipSlotTemplate::EquipSubType' has a wrong offset!");
static_assert(offsetof(FItemEquipSlotTemplate, ShadowIcon) == 0x00001C, "Member 'FItemEquipSlotTemplate::ShadowIcon' has a wrong offset!");

// ScriptStruct MirMobile.BuffOverlapCallTemplate
// 0x0028 (0x0030 - 0x0008)
struct FBuffOverlapCallTemplate final : public FTableRowBase
{
public:
	int32                                         OverLapCallID;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverLapCallGroupID;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffOverlapCntMin;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffOverlapCntMax;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AttachBuffID;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BuffOverlapLevel;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffOverlapCallTemplate) == 0x000008, "Wrong alignment on FBuffOverlapCallTemplate");
static_assert(sizeof(FBuffOverlapCallTemplate) == 0x000030, "Wrong size on FBuffOverlapCallTemplate");
static_assert(offsetof(FBuffOverlapCallTemplate, OverLapCallID) == 0x000008, "Member 'FBuffOverlapCallTemplate::OverLapCallID' has a wrong offset!");
static_assert(offsetof(FBuffOverlapCallTemplate, OverLapCallGroupID) == 0x00000C, "Member 'FBuffOverlapCallTemplate::OverLapCallGroupID' has a wrong offset!");
static_assert(offsetof(FBuffOverlapCallTemplate, BuffOverlapCntMin) == 0x000010, "Member 'FBuffOverlapCallTemplate::BuffOverlapCntMin' has a wrong offset!");
static_assert(offsetof(FBuffOverlapCallTemplate, BuffOverlapCntMax) == 0x000014, "Member 'FBuffOverlapCallTemplate::BuffOverlapCntMax' has a wrong offset!");
static_assert(offsetof(FBuffOverlapCallTemplate, AttachBuffID) == 0x000018, "Member 'FBuffOverlapCallTemplate::AttachBuffID' has a wrong offset!");
static_assert(offsetof(FBuffOverlapCallTemplate, BuffOverlapLevel) == 0x000028, "Member 'FBuffOverlapCallTemplate::BuffOverlapLevel' has a wrong offset!");

// ScriptStruct MirMobile.MovieSubtitleInfo
// 0x0020 (0x0020 - 0x0000)
struct FMovieSubtitleInfo final
{
public:
	int32                                         SubtitleNumber;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubtitleBegin;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubtitleEnd;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SubtitleText;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSubtitleInfo) == 0x000008, "Wrong alignment on FMovieSubtitleInfo");
static_assert(sizeof(FMovieSubtitleInfo) == 0x000020, "Wrong size on FMovieSubtitleInfo");
static_assert(offsetof(FMovieSubtitleInfo, SubtitleNumber) == 0x000000, "Member 'FMovieSubtitleInfo::SubtitleNumber' has a wrong offset!");
static_assert(offsetof(FMovieSubtitleInfo, SubtitleBegin) == 0x000004, "Member 'FMovieSubtitleInfo::SubtitleBegin' has a wrong offset!");
static_assert(offsetof(FMovieSubtitleInfo, SubtitleEnd) == 0x000008, "Member 'FMovieSubtitleInfo::SubtitleEnd' has a wrong offset!");
static_assert(offsetof(FMovieSubtitleInfo, SubtitleText) == 0x000010, "Member 'FMovieSubtitleInfo::SubtitleText' has a wrong offset!");

// ScriptStruct MirMobile.NpcDialogTemplate
// 0x0020 (0x0028 - 0x0008)
struct FNpcDialogTemplate final : public FTableRowBase
{
public:
	TArray<int32>                                 DialogValue;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DialogVoice;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcDialogTemplate) == 0x000008, "Wrong alignment on FNpcDialogTemplate");
static_assert(sizeof(FNpcDialogTemplate) == 0x000028, "Wrong size on FNpcDialogTemplate");
static_assert(offsetof(FNpcDialogTemplate, DialogValue) == 0x000008, "Member 'FNpcDialogTemplate::DialogValue' has a wrong offset!");
static_assert(offsetof(FNpcDialogTemplate, DialogVoice) == 0x000018, "Member 'FNpcDialogTemplate::DialogVoice' has a wrong offset!");

// ScriptStruct MirMobile.RewardCommonTemplate
// 0x0090 (0x0098 - 0x0008)
struct FRewardCommonTemplate : public FStageCommonTemplate
{
public:
	int32                                         FirstClearRewardType1;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstClearRewardType2;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstClearRewardType3;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstClearRewardType4;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstClearRewardType5;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstClearRewardValue1;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstClearRewardValue2;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstClearRewardValue3;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstClearRewardValue4;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstClearRewardValue5;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 FirstClearRewardTypeSub1;                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FirstClearRewardTypeSub2;                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FirstClearRewardTypeSub3;                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FirstClearRewardTypeSub4;                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FirstClearRewardTypeSub5;                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x18];                                      // 0x0080(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRewardCommonTemplate) == 0x000008, "Wrong alignment on FRewardCommonTemplate");
static_assert(sizeof(FRewardCommonTemplate) == 0x000098, "Wrong size on FRewardCommonTemplate");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardType1) == 0x000008, "Member 'FRewardCommonTemplate::FirstClearRewardType1' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardType2) == 0x00000C, "Member 'FRewardCommonTemplate::FirstClearRewardType2' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardType3) == 0x000010, "Member 'FRewardCommonTemplate::FirstClearRewardType3' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardType4) == 0x000014, "Member 'FRewardCommonTemplate::FirstClearRewardType4' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardType5) == 0x000018, "Member 'FRewardCommonTemplate::FirstClearRewardType5' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardValue1) == 0x00001C, "Member 'FRewardCommonTemplate::FirstClearRewardValue1' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardValue2) == 0x000020, "Member 'FRewardCommonTemplate::FirstClearRewardValue2' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardValue3) == 0x000024, "Member 'FRewardCommonTemplate::FirstClearRewardValue3' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardValue4) == 0x000028, "Member 'FRewardCommonTemplate::FirstClearRewardValue4' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardValue5) == 0x00002C, "Member 'FRewardCommonTemplate::FirstClearRewardValue5' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardTypeSub1) == 0x000030, "Member 'FRewardCommonTemplate::FirstClearRewardTypeSub1' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardTypeSub2) == 0x000040, "Member 'FRewardCommonTemplate::FirstClearRewardTypeSub2' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardTypeSub3) == 0x000050, "Member 'FRewardCommonTemplate::FirstClearRewardTypeSub3' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardTypeSub4) == 0x000060, "Member 'FRewardCommonTemplate::FirstClearRewardTypeSub4' has a wrong offset!");
static_assert(offsetof(FRewardCommonTemplate, FirstClearRewardTypeSub5) == 0x000070, "Member 'FRewardCommonTemplate::FirstClearRewardTypeSub5' has a wrong offset!");

// ScriptStruct MirMobile.BossTemplate
// 0x0078 (0x0110 - 0x0098)
struct FBossTemplate final : public FRewardCommonTemplate
{
public:
	int32                                         WorldBossId;                                       // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BossThumbnail;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterId;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 GenTime;                                           // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PositionLocation;                                  // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionLevel;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionReqCombatPoint;                           // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedUseItemId;                                     // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemCount;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostId;                                        // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostCount;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterType;                                     // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterTypeSub;                                  // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterCount;                                    // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedCombatPoint;                            // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCNum;                                             // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ContributeReward;                                  // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OccupationID;                                      // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x14];                                      // 0x00FC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBossTemplate) == 0x000008, "Wrong alignment on FBossTemplate");
static_assert(sizeof(FBossTemplate) == 0x000110, "Wrong size on FBossTemplate");
static_assert(offsetof(FBossTemplate, WorldBossId) == 0x000098, "Member 'FBossTemplate::WorldBossId' has a wrong offset!");
static_assert(offsetof(FBossTemplate, BossThumbnail) == 0x00009C, "Member 'FBossTemplate::BossThumbnail' has a wrong offset!");
static_assert(offsetof(FBossTemplate, MonsterId) == 0x0000A0, "Member 'FBossTemplate::MonsterId' has a wrong offset!");
static_assert(offsetof(FBossTemplate, StageID) == 0x0000A4, "Member 'FBossTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FBossTemplate, GenTime) == 0x0000A8, "Member 'FBossTemplate::GenTime' has a wrong offset!");
static_assert(offsetof(FBossTemplate, PositionLocation) == 0x0000B8, "Member 'FBossTemplate::PositionLocation' has a wrong offset!");
static_assert(offsetof(FBossTemplate, ConditionLevel) == 0x0000BC, "Member 'FBossTemplate::ConditionLevel' has a wrong offset!");
static_assert(offsetof(FBossTemplate, ConditionReqCombatPoint) == 0x0000C0, "Member 'FBossTemplate::ConditionReqCombatPoint' has a wrong offset!");
static_assert(offsetof(FBossTemplate, NeedUseItemId) == 0x0000C4, "Member 'FBossTemplate::NeedUseItemId' has a wrong offset!");
static_assert(offsetof(FBossTemplate, NeedItemCount) == 0x0000C8, "Member 'FBossTemplate::NeedItemCount' has a wrong offset!");
static_assert(offsetof(FBossTemplate, NeedCostId) == 0x0000CC, "Member 'FBossTemplate::NeedCostId' has a wrong offset!");
static_assert(offsetof(FBossTemplate, NeedCostCount) == 0x0000D0, "Member 'FBossTemplate::NeedCostCount' has a wrong offset!");
static_assert(offsetof(FBossTemplate, NeedEnterType) == 0x0000D4, "Member 'FBossTemplate::NeedEnterType' has a wrong offset!");
static_assert(offsetof(FBossTemplate, NeedEnterTypeSub) == 0x0000D8, "Member 'FBossTemplate::NeedEnterTypeSub' has a wrong offset!");
static_assert(offsetof(FBossTemplate, NeedEnterCount) == 0x0000DC, "Member 'FBossTemplate::NeedEnterCount' has a wrong offset!");
static_assert(offsetof(FBossTemplate, RecommendedCombatPoint) == 0x0000E0, "Member 'FBossTemplate::RecommendedCombatPoint' has a wrong offset!");
static_assert(offsetof(FBossTemplate, PCNum) == 0x0000E4, "Member 'FBossTemplate::PCNum' has a wrong offset!");
static_assert(offsetof(FBossTemplate, ContributeReward) == 0x0000E8, "Member 'FBossTemplate::ContributeReward' has a wrong offset!");
static_assert(offsetof(FBossTemplate, OccupationID) == 0x0000F8, "Member 'FBossTemplate::OccupationID' has a wrong offset!");

// ScriptStruct MirMobile.SequencePlayTemplate
// 0x0040 (0x0048 - 0x0008)
struct FSequencePlayTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SequencePlayId;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SequenceType;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequenceSkipDelay;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClassCheck;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SequenceResourceName;                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CoordinateOffset;                                  // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSequencePlayTemplate) == 0x000008, "Wrong alignment on FSequencePlayTemplate");
static_assert(sizeof(FSequencePlayTemplate) == 0x000048, "Wrong size on FSequencePlayTemplate");
static_assert(offsetof(FSequencePlayTemplate, Name) == 0x000008, "Member 'FSequencePlayTemplate::Name' has a wrong offset!");
static_assert(offsetof(FSequencePlayTemplate, SequencePlayId) == 0x00000C, "Member 'FSequencePlayTemplate::SequencePlayId' has a wrong offset!");
static_assert(offsetof(FSequencePlayTemplate, SequenceType) == 0x000010, "Member 'FSequencePlayTemplate::SequenceType' has a wrong offset!");
static_assert(offsetof(FSequencePlayTemplate, SequenceSkipDelay) == 0x000014, "Member 'FSequencePlayTemplate::SequenceSkipDelay' has a wrong offset!");
static_assert(offsetof(FSequencePlayTemplate, FadeOutTime) == 0x000018, "Member 'FSequencePlayTemplate::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FSequencePlayTemplate, FadeInTime) == 0x00001C, "Member 'FSequencePlayTemplate::FadeInTime' has a wrong offset!");
static_assert(offsetof(FSequencePlayTemplate, ClassCheck) == 0x000020, "Member 'FSequencePlayTemplate::ClassCheck' has a wrong offset!");
static_assert(offsetof(FSequencePlayTemplate, SequenceResourceName) == 0x000028, "Member 'FSequencePlayTemplate::SequenceResourceName' has a wrong offset!");
static_assert(offsetof(FSequencePlayTemplate, CoordinateOffset) == 0x000038, "Member 'FSequencePlayTemplate::CoordinateOffset' has a wrong offset!");

// ScriptStruct MirMobile.BlackDragonTemplate
// 0x0048 (0x0050 - 0x0008)
struct FBlackDragonTemplate final : public FStageCommonTemplate
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BdragonID;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BDragonName;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BDragonInfo;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BDragonThumbnail;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsShow;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLevel;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterItemID;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterItemCount;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BDragonTimer;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MonsterLevel;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PositionLocation;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlackDragonTemplate) == 0x000008, "Wrong alignment on FBlackDragonTemplate");
static_assert(sizeof(FBlackDragonTemplate) == 0x000050, "Wrong size on FBlackDragonTemplate");
static_assert(offsetof(FBlackDragonTemplate, Name) == 0x000008, "Member 'FBlackDragonTemplate::Name' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, BdragonID) == 0x00000C, "Member 'FBlackDragonTemplate::BdragonID' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, BDragonName) == 0x000010, "Member 'FBlackDragonTemplate::BDragonName' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, BDragonInfo) == 0x000014, "Member 'FBlackDragonTemplate::BDragonInfo' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, BDragonThumbnail) == 0x000018, "Member 'FBlackDragonTemplate::BDragonThumbnail' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, StageID) == 0x00001C, "Member 'FBlackDragonTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, IsShow) == 0x000020, "Member 'FBlackDragonTemplate::IsShow' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, MinLevel) == 0x000024, "Member 'FBlackDragonTemplate::MinLevel' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, MaxLevel) == 0x000028, "Member 'FBlackDragonTemplate::MaxLevel' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, NeedEnterItemID) == 0x00002C, "Member 'FBlackDragonTemplate::NeedEnterItemID' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, NeedEnterItemCount) == 0x000030, "Member 'FBlackDragonTemplate::NeedEnterItemCount' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, BDragonTimer) == 0x000034, "Member 'FBlackDragonTemplate::BDragonTimer' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, MonsterLevel) == 0x000038, "Member 'FBlackDragonTemplate::MonsterLevel' has a wrong offset!");
static_assert(offsetof(FBlackDragonTemplate, PositionLocation) == 0x000048, "Member 'FBlackDragonTemplate::PositionLocation' has a wrong offset!");

// ScriptStruct MirMobile.MapUINaviTemplate
// 0x0028 (0x0030 - 0x0008)
struct FMapUINaviTemplate final : public FTableRowBase
{
public:
	struct FVector                                StartPoint;                                        // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileSize;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileLineCount;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  NaviTileArray;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapUINaviTemplate) == 0x000008, "Wrong alignment on FMapUINaviTemplate");
static_assert(sizeof(FMapUINaviTemplate) == 0x000030, "Wrong size on FMapUINaviTemplate");
static_assert(offsetof(FMapUINaviTemplate, StartPoint) == 0x000008, "Member 'FMapUINaviTemplate::StartPoint' has a wrong offset!");
static_assert(offsetof(FMapUINaviTemplate, TileSize) == 0x000014, "Member 'FMapUINaviTemplate::TileSize' has a wrong offset!");
static_assert(offsetof(FMapUINaviTemplate, TileLineCount) == 0x000018, "Member 'FMapUINaviTemplate::TileLineCount' has a wrong offset!");
static_assert(offsetof(FMapUINaviTemplate, NaviTileArray) == 0x000020, "Member 'FMapUINaviTemplate::NaviTileArray' has a wrong offset!");

// ScriptStruct MirMobile.CharMaterialData
// 0x0018 (0x0018 - 0x0000)
struct FCharMaterialData final
{
public:
	ECharMaterialParameterType                    M_eParameterType;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_strName;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveBase*                             M_pCurve;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharMaterialData) == 0x000008, "Wrong alignment on FCharMaterialData");
static_assert(sizeof(FCharMaterialData) == 0x000018, "Wrong size on FCharMaterialData");
static_assert(offsetof(FCharMaterialData, M_eParameterType) == 0x000000, "Member 'FCharMaterialData::M_eParameterType' has a wrong offset!");
static_assert(offsetof(FCharMaterialData, M_strName) == 0x000004, "Member 'FCharMaterialData::M_strName' has a wrong offset!");
static_assert(offsetof(FCharMaterialData, M_pCurve) == 0x000010, "Member 'FCharMaterialData::M_pCurve' has a wrong offset!");

// ScriptStruct MirMobile.CharacterMasteryLevelLimitTemplate
// 0x0078 (0x0080 - 0x0008)
struct FCharacterMasteryLevelLimitTemplate final : public FTableRowBase
{
public:
	int32                                         ClassID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepGrade;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLv;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapMaterialUseId1;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapMaterialUseId1Count;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapMaterialUseId2;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapMaterialUseId2Count;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapMaterialUseId3;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapMaterialUseId3Count;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapMaterialUseId4;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapMaterialUseId4Count;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepCostType;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepCost;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus1;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus1Value;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus2;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus2Value;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus3;                                    // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus3Value;                               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus4;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus4Value;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus5;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus5Value;                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus6;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus6Value;                               // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus7;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus7Value;                               // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus8;                                    // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapStepStatus8Value;                               // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapNeedLevel;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterMasteryLevelLimitTemplate) == 0x000008, "Wrong alignment on FCharacterMasteryLevelLimitTemplate");
static_assert(sizeof(FCharacterMasteryLevelLimitTemplate) == 0x000080, "Wrong size on FCharacterMasteryLevelLimitTemplate");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, ClassID) == 0x000008, "Member 'FCharacterMasteryLevelLimitTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, StepGrade) == 0x00000C, "Member 'FCharacterMasteryLevelLimitTemplate::StepGrade' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, MaxLv) == 0x000010, "Member 'FCharacterMasteryLevelLimitTemplate::MaxLv' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapMaterialUseId1) == 0x000014, "Member 'FCharacterMasteryLevelLimitTemplate::CapMaterialUseId1' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapMaterialUseId1Count) == 0x000018, "Member 'FCharacterMasteryLevelLimitTemplate::CapMaterialUseId1Count' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapMaterialUseId2) == 0x00001C, "Member 'FCharacterMasteryLevelLimitTemplate::CapMaterialUseId2' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapMaterialUseId2Count) == 0x000020, "Member 'FCharacterMasteryLevelLimitTemplate::CapMaterialUseId2Count' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapMaterialUseId3) == 0x000024, "Member 'FCharacterMasteryLevelLimitTemplate::CapMaterialUseId3' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapMaterialUseId3Count) == 0x000028, "Member 'FCharacterMasteryLevelLimitTemplate::CapMaterialUseId3Count' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapMaterialUseId4) == 0x00002C, "Member 'FCharacterMasteryLevelLimitTemplate::CapMaterialUseId4' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapMaterialUseId4Count) == 0x000030, "Member 'FCharacterMasteryLevelLimitTemplate::CapMaterialUseId4Count' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepCostType) == 0x000034, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepCostType' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepCost) == 0x000038, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepCost' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus1) == 0x00003C, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus1' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus1Value) == 0x000040, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus1Value' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus2) == 0x000044, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus2' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus2Value) == 0x000048, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus2Value' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus3) == 0x00004C, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus3' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus3Value) == 0x000050, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus3Value' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus4) == 0x000054, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus4' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus4Value) == 0x000058, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus4Value' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus5) == 0x00005C, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus5' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus5Value) == 0x000060, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus5Value' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus6) == 0x000064, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus6' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus6Value) == 0x000068, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus6Value' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus7) == 0x00006C, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus7' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus7Value) == 0x000070, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus7Value' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus8) == 0x000074, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus8' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapStepStatus8Value) == 0x000078, "Member 'FCharacterMasteryLevelLimitTemplate::CapStepStatus8Value' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryLevelLimitTemplate, CapNeedLevel) == 0x00007C, "Member 'FCharacterMasteryLevelLimitTemplate::CapNeedLevel' has a wrong offset!");

// ScriptStruct MirMobile.ContentsDirectionalLight
// 0x0014 (0x0014 - 0x0000)
struct FContentsDirectionalLight final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentsDirectionalLight) == 0x000004, "Wrong alignment on FContentsDirectionalLight");
static_assert(sizeof(FContentsDirectionalLight) == 0x000014, "Wrong size on FContentsDirectionalLight");
static_assert(offsetof(FContentsDirectionalLight, Rotation) == 0x000000, "Member 'FContentsDirectionalLight::Rotation' has a wrong offset!");
static_assert(offsetof(FContentsDirectionalLight, LightColor) == 0x00000C, "Member 'FContentsDirectionalLight::LightColor' has a wrong offset!");
static_assert(offsetof(FContentsDirectionalLight, Intensity) == 0x000010, "Member 'FContentsDirectionalLight::Intensity' has a wrong offset!");

// ScriptStruct MirMobile.ContentsPointLight
// 0x0018 (0x0018 - 0x0000)
struct FContentsPointLight final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentsPointLight) == 0x000004, "Wrong alignment on FContentsPointLight");
static_assert(sizeof(FContentsPointLight) == 0x000018, "Wrong size on FContentsPointLight");
static_assert(offsetof(FContentsPointLight, Location) == 0x000000, "Member 'FContentsPointLight::Location' has a wrong offset!");
static_assert(offsetof(FContentsPointLight, Intensity) == 0x00000C, "Member 'FContentsPointLight::Intensity' has a wrong offset!");
static_assert(offsetof(FContentsPointLight, LightColor) == 0x000010, "Member 'FContentsPointLight::LightColor' has a wrong offset!");
static_assert(offsetof(FContentsPointLight, AttenuationRadius) == 0x000014, "Member 'FContentsPointLight::AttenuationRadius' has a wrong offset!");

// ScriptStruct MirMobile.ContentsLightValue
// 0x0044 (0x0044 - 0x0000)
struct FContentsLightValue final
{
public:
	struct FContentsDirectionalLight              DirectionalLightData;                              // 0x0000(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FContentsPointLight                    PointLight1Data;                                   // 0x0014(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FContentsPointLight                    PointLight2Data;                                   // 0x002C(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentsLightValue) == 0x000004, "Wrong alignment on FContentsLightValue");
static_assert(sizeof(FContentsLightValue) == 0x000044, "Wrong size on FContentsLightValue");
static_assert(offsetof(FContentsLightValue, DirectionalLightData) == 0x000000, "Member 'FContentsLightValue::DirectionalLightData' has a wrong offset!");
static_assert(offsetof(FContentsLightValue, PointLight1Data) == 0x000014, "Member 'FContentsLightValue::PointLight1Data' has a wrong offset!");
static_assert(offsetof(FContentsLightValue, PointLight2Data) == 0x00002C, "Member 'FContentsLightValue::PointLight2Data' has a wrong offset!");

// ScriptStruct MirMobile.EffectTemplate
// 0x0098 (0x00A0 - 0x0008)
struct FEffectTemplate final : public FTableRowBase
{
public:
	int32                                         EffectId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainType;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubType;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectType;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopType;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTarget;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTarget;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartSocket;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 StartPos;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 EndSocket;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EndPos;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Attach;                                            // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 StartRot;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Scale;                                             // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEffectTemplate) == 0x000008, "Wrong alignment on FEffectTemplate");
static_assert(sizeof(FEffectTemplate) == 0x0000A0, "Wrong size on FEffectTemplate");
static_assert(offsetof(FEffectTemplate, EffectId) == 0x000008, "Member 'FEffectTemplate::EffectId' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, Class) == 0x00000C, "Member 'FEffectTemplate::Class' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, MainType) == 0x000010, "Member 'FEffectTemplate::MainType' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, SubType) == 0x000014, "Member 'FEffectTemplate::SubType' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, Filename) == 0x000018, "Member 'FEffectTemplate::Filename' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, EffectType) == 0x000028, "Member 'FEffectTemplate::EffectType' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, LoopType) == 0x00002C, "Member 'FEffectTemplate::LoopType' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, StartTarget) == 0x000030, "Member 'FEffectTemplate::StartTarget' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, EndTarget) == 0x000034, "Member 'FEffectTemplate::EndTarget' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, StartSocket) == 0x000038, "Member 'FEffectTemplate::StartSocket' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, StartPos) == 0x000048, "Member 'FEffectTemplate::StartPos' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, EndSocket) == 0x000058, "Member 'FEffectTemplate::EndSocket' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, EndPos) == 0x000068, "Member 'FEffectTemplate::EndPos' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, Attach) == 0x000078, "Member 'FEffectTemplate::Attach' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, StartRot) == 0x000080, "Member 'FEffectTemplate::StartRot' has a wrong offset!");
static_assert(offsetof(FEffectTemplate, Scale) == 0x000090, "Member 'FEffectTemplate::Scale' has a wrong offset!");

// ScriptStruct MirMobile.AreaNameTemplate
// 0x0010 (0x0018 - 0x0008)
struct FAreaNameTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetName;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooltime;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAreaNameTemplate) == 0x000008, "Wrong alignment on FAreaNameTemplate");
static_assert(sizeof(FAreaNameTemplate) == 0x000018, "Wrong size on FAreaNameTemplate");
static_assert(offsetof(FAreaNameTemplate, RowId) == 0x000008, "Member 'FAreaNameTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FAreaNameTemplate, TargetName) == 0x00000C, "Member 'FAreaNameTemplate::TargetName' has a wrong offset!");
static_assert(offsetof(FAreaNameTemplate, Cooltime) == 0x000010, "Member 'FAreaNameTemplate::Cooltime' has a wrong offset!");

// ScriptStruct MirMobile.ActorPlacement
// 0x0018 (0x0018 - 0x0000)
struct FActorPlacement final
{
public:
	struct FVector                                ActorPos;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ActorRot;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorPlacement) == 0x000004, "Wrong alignment on FActorPlacement");
static_assert(sizeof(FActorPlacement) == 0x000018, "Wrong size on FActorPlacement");
static_assert(offsetof(FActorPlacement, ActorPos) == 0x000000, "Member 'FActorPlacement::ActorPos' has a wrong offset!");
static_assert(offsetof(FActorPlacement, ActorRot) == 0x00000C, "Member 'FActorPlacement::ActorRot' has a wrong offset!");

// ScriptStruct MirMobile.CinematicActorAction
// 0x0050 (0x0050 - 0x0000)
struct FCinematicActorAction final
{
public:
	int32                                         NpcID;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActorHidden;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActorPlacement>                ActorPlacement;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ActorMoveSpeed;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FirstAniName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecondAniName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimationLoop;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookAt;                                           // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtLocation;                                    // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCinematicActorAction) == 0x000008, "Wrong alignment on FCinematicActorAction");
static_assert(sizeof(FCinematicActorAction) == 0x000050, "Wrong size on FCinematicActorAction");
static_assert(offsetof(FCinematicActorAction, NpcID) == 0x000000, "Member 'FCinematicActorAction::NpcID' has a wrong offset!");
static_assert(offsetof(FCinematicActorAction, ActorHidden) == 0x000004, "Member 'FCinematicActorAction::ActorHidden' has a wrong offset!");
static_assert(offsetof(FCinematicActorAction, ActorPlacement) == 0x000008, "Member 'FCinematicActorAction::ActorPlacement' has a wrong offset!");
static_assert(offsetof(FCinematicActorAction, ActorMoveSpeed) == 0x000018, "Member 'FCinematicActorAction::ActorMoveSpeed' has a wrong offset!");
static_assert(offsetof(FCinematicActorAction, FirstAniName) == 0x000020, "Member 'FCinematicActorAction::FirstAniName' has a wrong offset!");
static_assert(offsetof(FCinematicActorAction, SecondAniName) == 0x000030, "Member 'FCinematicActorAction::SecondAniName' has a wrong offset!");
static_assert(offsetof(FCinematicActorAction, bAnimationLoop) == 0x000040, "Member 'FCinematicActorAction::bAnimationLoop' has a wrong offset!");
static_assert(offsetof(FCinematicActorAction, bLookAt) == 0x000041, "Member 'FCinematicActorAction::bLookAt' has a wrong offset!");
static_assert(offsetof(FCinematicActorAction, LookAtLocation) == 0x000044, "Member 'FCinematicActorAction::LookAtLocation' has a wrong offset!");

// ScriptStruct MirMobile.PotentialTemplate
// 0x0038 (0x0040 - 0x0008)
struct FPotentialTemplate final : public FTableRowBase
{
public:
	int32                                         Potential_Id;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Potential_NameSid;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Potential_ExplanId;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Potential_NodeuiId;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Node_Category;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Node_Grade;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnLockPotential01_Id;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnLockPotential01_Level;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnLockPotential02_Id;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnLockPotential02_Level;                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnLockPotential03_Id;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnLockPotential03_Level;                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnLockPotential04_Id;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnLockPotential04_Level;                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPotentialTemplate) == 0x000008, "Wrong alignment on FPotentialTemplate");
static_assert(sizeof(FPotentialTemplate) == 0x000040, "Wrong size on FPotentialTemplate");
static_assert(offsetof(FPotentialTemplate, Potential_Id) == 0x000008, "Member 'FPotentialTemplate::Potential_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, Potential_NameSid) == 0x00000C, "Member 'FPotentialTemplate::Potential_NameSid' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, Potential_ExplanId) == 0x000010, "Member 'FPotentialTemplate::Potential_ExplanId' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, Potential_NodeuiId) == 0x000014, "Member 'FPotentialTemplate::Potential_NodeuiId' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, Node_Category) == 0x000018, "Member 'FPotentialTemplate::Node_Category' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, Node_Grade) == 0x00001C, "Member 'FPotentialTemplate::Node_Grade' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, UnLockPotential01_Id) == 0x000020, "Member 'FPotentialTemplate::UnLockPotential01_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, UnLockPotential01_Level) == 0x000024, "Member 'FPotentialTemplate::UnLockPotential01_Level' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, UnLockPotential02_Id) == 0x000028, "Member 'FPotentialTemplate::UnLockPotential02_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, UnLockPotential02_Level) == 0x00002C, "Member 'FPotentialTemplate::UnLockPotential02_Level' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, UnLockPotential03_Id) == 0x000030, "Member 'FPotentialTemplate::UnLockPotential03_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, UnLockPotential03_Level) == 0x000034, "Member 'FPotentialTemplate::UnLockPotential03_Level' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, UnLockPotential04_Id) == 0x000038, "Member 'FPotentialTemplate::UnLockPotential04_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTemplate, UnLockPotential04_Level) == 0x00003C, "Member 'FPotentialTemplate::UnLockPotential04_Level' has a wrong offset!");

// ScriptStruct MirMobile.AchievementTemplate
// 0x0088 (0x0090 - 0x0008)
struct FAchievementTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementId;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementGroupId;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementGroupGrade;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementCategory;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementIcon;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementShowType;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoCheck;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementName;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementText;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDataId;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompleteCount;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CompleteCountAccrue;                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentOpenPage;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardAchievementExp;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGOLD;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsType;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsCount;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemEnchant01;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItemId01;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount01;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemEnchant02;                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItemId02;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount02;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementRepeat;                                 // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsId;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAchievementTemplate) == 0x000008, "Wrong alignment on FAchievementTemplate");
static_assert(sizeof(FAchievementTemplate) == 0x000090, "Wrong size on FAchievementTemplate");
static_assert(offsetof(FAchievementTemplate, Name) == 0x000008, "Member 'FAchievementTemplate::Name' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, AchievementId) == 0x00000C, "Member 'FAchievementTemplate::AchievementId' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, AchievementGroupId) == 0x000010, "Member 'FAchievementTemplate::AchievementGroupId' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, AchievementGroupGrade) == 0x000014, "Member 'FAchievementTemplate::AchievementGroupGrade' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, AchievementCategory) == 0x000018, "Member 'FAchievementTemplate::AchievementCategory' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, AchievementIcon) == 0x00001C, "Member 'FAchievementTemplate::AchievementIcon' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, AchievementShowType) == 0x000020, "Member 'FAchievementTemplate::AchievementShowType' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, AutoCheck) == 0x000024, "Member 'FAchievementTemplate::AutoCheck' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, AchievementName) == 0x000028, "Member 'FAchievementTemplate::AchievementName' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, AchievementText) == 0x00002C, "Member 'FAchievementTemplate::AchievementText' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, PlayDataId) == 0x000030, "Member 'FAchievementTemplate::PlayDataId' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, CompleteCount) == 0x000034, "Member 'FAchievementTemplate::CompleteCount' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, CompleteCountAccrue) == 0x000038, "Member 'FAchievementTemplate::CompleteCountAccrue' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, ContentOpenPage) == 0x000040, "Member 'FAchievementTemplate::ContentOpenPage' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, RewardAchievementExp) == 0x000044, "Member 'FAchievementTemplate::RewardAchievementExp' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, RewardGOLD) == 0x000048, "Member 'FAchievementTemplate::RewardGOLD' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, RewardGoodsType) == 0x00004C, "Member 'FAchievementTemplate::RewardGoodsType' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, RewardGoodsCount) == 0x000050, "Member 'FAchievementTemplate::RewardGoodsCount' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, RewardItemEnchant01) == 0x000054, "Member 'FAchievementTemplate::RewardItemEnchant01' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, RewardItemId01) == 0x000058, "Member 'FAchievementTemplate::RewardItemId01' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, RewardItemCount01) == 0x000068, "Member 'FAchievementTemplate::RewardItemCount01' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, RewardItemEnchant02) == 0x00006C, "Member 'FAchievementTemplate::RewardItemEnchant02' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, RewardItemId02) == 0x000070, "Member 'FAchievementTemplate::RewardItemId02' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, RewardItemCount02) == 0x000080, "Member 'FAchievementTemplate::RewardItemCount02' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, AchievementRepeat) == 0x000084, "Member 'FAchievementTemplate::AchievementRepeat' has a wrong offset!");
static_assert(offsetof(FAchievementTemplate, ContentsId) == 0x000088, "Member 'FAchievementTemplate::ContentsId' has a wrong offset!");

// ScriptStruct MirMobile.AdsInfoTemplate
// 0x0020 (0x0028 - 0x0008)
struct FAdsInfoTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdsGetMoneyId;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdsGetMoneyValue;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdsViewCountLimit;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPointMax;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdsRewardItemId;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdsViewCoolTime;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdsInfoTemplate) == 0x000008, "Wrong alignment on FAdsInfoTemplate");
static_assert(sizeof(FAdsInfoTemplate) == 0x000028, "Wrong size on FAdsInfoTemplate");
static_assert(offsetof(FAdsInfoTemplate, Name) == 0x000008, "Member 'FAdsInfoTemplate::Name' has a wrong offset!");
static_assert(offsetof(FAdsInfoTemplate, UniqueId) == 0x00000C, "Member 'FAdsInfoTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FAdsInfoTemplate, AdsGetMoneyId) == 0x000010, "Member 'FAdsInfoTemplate::AdsGetMoneyId' has a wrong offset!");
static_assert(offsetof(FAdsInfoTemplate, AdsGetMoneyValue) == 0x000014, "Member 'FAdsInfoTemplate::AdsGetMoneyValue' has a wrong offset!");
static_assert(offsetof(FAdsInfoTemplate, AdsViewCountLimit) == 0x000018, "Member 'FAdsInfoTemplate::AdsViewCountLimit' has a wrong offset!");
static_assert(offsetof(FAdsInfoTemplate, RewardPointMax) == 0x00001C, "Member 'FAdsInfoTemplate::RewardPointMax' has a wrong offset!");
static_assert(offsetof(FAdsInfoTemplate, AdsRewardItemId) == 0x000020, "Member 'FAdsInfoTemplate::AdsRewardItemId' has a wrong offset!");
static_assert(offsetof(FAdsInfoTemplate, AdsViewCoolTime) == 0x000024, "Member 'FAdsInfoTemplate::AdsViewCoolTime' has a wrong offset!");

// ScriptStruct MirMobile.BattlePassGroupTemplate
// 0x0010 (0x0018 - 0x0008)
struct FBattlePassGroupTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionGroupId;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassGroupTemplate) == 0x000008, "Wrong alignment on FBattlePassGroupTemplate");
static_assert(sizeof(FBattlePassGroupTemplate) == 0x000018, "Wrong size on FBattlePassGroupTemplate");
static_assert(offsetof(FBattlePassGroupTemplate, ID) == 0x000008, "Member 'FBattlePassGroupTemplate::ID' has a wrong offset!");
static_assert(offsetof(FBattlePassGroupTemplate, GroupId) == 0x00000C, "Member 'FBattlePassGroupTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FBattlePassGroupTemplate, Order) == 0x000010, "Member 'FBattlePassGroupTemplate::Order' has a wrong offset!");
static_assert(offsetof(FBattlePassGroupTemplate, MissionGroupId) == 0x000014, "Member 'FBattlePassGroupTemplate::MissionGroupId' has a wrong offset!");

// ScriptStruct MirMobile.CameraPresetTemplate
// 0x0128 (0x0130 - 0x0008)
struct FCameraPresetTemplate final : public FTableRowBase
{
public:
	float                                         Camera1Name_StringID;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Caemra2Name_StringID;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Caemra3Name_StringID;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Common_InterpSpeedReachTime;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Common_InterpRotationSpeed;                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionPullSpeed;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionReturnSpeed;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_ResetTime;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_InterpSpeed;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_DefaultHeight;                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_DefaultDistance;                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_MinDistance;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_MaxDistance;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_DefaultPitch;                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_MinPitchAngle;                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_MaxPitchAngle;                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_CameraFOV;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_RotationSensitivity;                    // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCamera_ZoomSensitivity;                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonBattleKeyInput_Delay;                           // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonBattleKeyInput_InterpSpeed;                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonBattleKeyInput_Pitch;                           // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonBattleKeyInput_Height;                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonBattleKeyInput_Distance;                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoMoving_Delay;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoMoving_InterpSpeed;                            // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoMoving_Pitch;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoMoving_Distance;                               // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoMoving_Height;                                 // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RideAutoMovingFirst_Delay;                         // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RideAutoMovingSecond_Delay;                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RideAutoMovingFirst_Distance;                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RideAutoMovingSecond_Distance;                     // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RideAutoMoving_InterpSpeed;                        // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RideAutoMoving_Pitch;                              // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RideAutoMoving_SideAngle;                          // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RideAutoMoving_SideDistance;                       // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RideAutoMoving_Height;                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualBattle_Delay;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualBattle_InterpSpeed;                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualBattle_Pitch;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualBattle_Height;                               // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoBattle_Delay;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoBattle_InterpSpeed;                            // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoBattle_Pitch;                                  // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoBattle_Distance;                               // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoBattle_SideAngle;                              // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoBattle_SlowSpeedDegree;                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoBattle_Height;                                 // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_ResetTime;                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_InterpSpeed;                           // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_PitchInterpSpeed;                      // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_DefaultDistance;                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_MinDistance;                           // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_MaxDistance;                           // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_DefaultHeight;                         // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_MinPitch;                              // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_MaxPitch;                              // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_DefaultPitch;                          // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_RotationSensitivity;                   // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_ZoomSensitivity;                       // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuarterView_CameraFOV;                             // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_InterpSpeed;                            // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_DefaultDistance;                        // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_MinDistance;                            // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_MaxDistance;                            // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_DefaultHeight;                          // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_DefaultPitch;                           // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_MinPitchAngle;                          // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_MaxPitchAngle;                          // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_RotationSensitivity;                    // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_ZoomSensitivity;                        // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualMode_CameraFOV;                              // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraPresetTemplate) == 0x000008, "Wrong alignment on FCameraPresetTemplate");
static_assert(sizeof(FCameraPresetTemplate) == 0x000130, "Wrong size on FCameraPresetTemplate");
static_assert(offsetof(FCameraPresetTemplate, Camera1Name_StringID) == 0x000008, "Member 'FCameraPresetTemplate::Camera1Name_StringID' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, Caemra2Name_StringID) == 0x00000C, "Member 'FCameraPresetTemplate::Caemra2Name_StringID' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, Caemra3Name_StringID) == 0x000010, "Member 'FCameraPresetTemplate::Caemra3Name_StringID' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, Common_InterpSpeedReachTime) == 0x000014, "Member 'FCameraPresetTemplate::Common_InterpSpeedReachTime' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, Common_InterpRotationSpeed) == 0x000018, "Member 'FCameraPresetTemplate::Common_InterpRotationSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, CollisionPullSpeed) == 0x00001C, "Member 'FCameraPresetTemplate::CollisionPullSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, CollisionReturnSpeed) == 0x000020, "Member 'FCameraPresetTemplate::CollisionReturnSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_ResetTime) == 0x000024, "Member 'FCameraPresetTemplate::AutoCamera_ResetTime' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_InterpSpeed) == 0x000028, "Member 'FCameraPresetTemplate::AutoCamera_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_DefaultHeight) == 0x00002C, "Member 'FCameraPresetTemplate::AutoCamera_DefaultHeight' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_DefaultDistance) == 0x000030, "Member 'FCameraPresetTemplate::AutoCamera_DefaultDistance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_MinDistance) == 0x000034, "Member 'FCameraPresetTemplate::AutoCamera_MinDistance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_MaxDistance) == 0x000038, "Member 'FCameraPresetTemplate::AutoCamera_MaxDistance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_DefaultPitch) == 0x00003C, "Member 'FCameraPresetTemplate::AutoCamera_DefaultPitch' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_MinPitchAngle) == 0x000040, "Member 'FCameraPresetTemplate::AutoCamera_MinPitchAngle' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_MaxPitchAngle) == 0x000044, "Member 'FCameraPresetTemplate::AutoCamera_MaxPitchAngle' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_CameraFOV) == 0x000048, "Member 'FCameraPresetTemplate::AutoCamera_CameraFOV' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_RotationSensitivity) == 0x00004C, "Member 'FCameraPresetTemplate::AutoCamera_RotationSensitivity' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoCamera_ZoomSensitivity) == 0x000050, "Member 'FCameraPresetTemplate::AutoCamera_ZoomSensitivity' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, NonBattleKeyInput_Delay) == 0x000054, "Member 'FCameraPresetTemplate::NonBattleKeyInput_Delay' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, NonBattleKeyInput_InterpSpeed) == 0x000058, "Member 'FCameraPresetTemplate::NonBattleKeyInput_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, NonBattleKeyInput_Pitch) == 0x00005C, "Member 'FCameraPresetTemplate::NonBattleKeyInput_Pitch' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, NonBattleKeyInput_Height) == 0x000060, "Member 'FCameraPresetTemplate::NonBattleKeyInput_Height' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, NonBattleKeyInput_Distance) == 0x000064, "Member 'FCameraPresetTemplate::NonBattleKeyInput_Distance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoMoving_Delay) == 0x000068, "Member 'FCameraPresetTemplate::AutoMoving_Delay' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoMoving_InterpSpeed) == 0x00006C, "Member 'FCameraPresetTemplate::AutoMoving_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoMoving_Pitch) == 0x000070, "Member 'FCameraPresetTemplate::AutoMoving_Pitch' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoMoving_Distance) == 0x000074, "Member 'FCameraPresetTemplate::AutoMoving_Distance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoMoving_Height) == 0x000078, "Member 'FCameraPresetTemplate::AutoMoving_Height' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, RideAutoMovingFirst_Delay) == 0x00007C, "Member 'FCameraPresetTemplate::RideAutoMovingFirst_Delay' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, RideAutoMovingSecond_Delay) == 0x000080, "Member 'FCameraPresetTemplate::RideAutoMovingSecond_Delay' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, RideAutoMovingFirst_Distance) == 0x000084, "Member 'FCameraPresetTemplate::RideAutoMovingFirst_Distance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, RideAutoMovingSecond_Distance) == 0x000088, "Member 'FCameraPresetTemplate::RideAutoMovingSecond_Distance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, RideAutoMoving_InterpSpeed) == 0x00008C, "Member 'FCameraPresetTemplate::RideAutoMoving_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, RideAutoMoving_Pitch) == 0x000090, "Member 'FCameraPresetTemplate::RideAutoMoving_Pitch' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, RideAutoMoving_SideAngle) == 0x000094, "Member 'FCameraPresetTemplate::RideAutoMoving_SideAngle' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, RideAutoMoving_SideDistance) == 0x000098, "Member 'FCameraPresetTemplate::RideAutoMoving_SideDistance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, RideAutoMoving_Height) == 0x00009C, "Member 'FCameraPresetTemplate::RideAutoMoving_Height' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualBattle_Delay) == 0x0000A0, "Member 'FCameraPresetTemplate::ManualBattle_Delay' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualBattle_InterpSpeed) == 0x0000A4, "Member 'FCameraPresetTemplate::ManualBattle_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualBattle_Pitch) == 0x0000A8, "Member 'FCameraPresetTemplate::ManualBattle_Pitch' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualBattle_Height) == 0x0000AC, "Member 'FCameraPresetTemplate::ManualBattle_Height' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoBattle_Delay) == 0x0000B0, "Member 'FCameraPresetTemplate::AutoBattle_Delay' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoBattle_InterpSpeed) == 0x0000B4, "Member 'FCameraPresetTemplate::AutoBattle_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoBattle_Pitch) == 0x0000B8, "Member 'FCameraPresetTemplate::AutoBattle_Pitch' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoBattle_Distance) == 0x0000BC, "Member 'FCameraPresetTemplate::AutoBattle_Distance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoBattle_SideAngle) == 0x0000C0, "Member 'FCameraPresetTemplate::AutoBattle_SideAngle' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoBattle_SlowSpeedDegree) == 0x0000C4, "Member 'FCameraPresetTemplate::AutoBattle_SlowSpeedDegree' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, AutoBattle_Height) == 0x0000C8, "Member 'FCameraPresetTemplate::AutoBattle_Height' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_ResetTime) == 0x0000CC, "Member 'FCameraPresetTemplate::QuarterView_ResetTime' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_InterpSpeed) == 0x0000D0, "Member 'FCameraPresetTemplate::QuarterView_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_PitchInterpSpeed) == 0x0000D4, "Member 'FCameraPresetTemplate::QuarterView_PitchInterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_DefaultDistance) == 0x0000D8, "Member 'FCameraPresetTemplate::QuarterView_DefaultDistance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_MinDistance) == 0x0000DC, "Member 'FCameraPresetTemplate::QuarterView_MinDistance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_MaxDistance) == 0x0000E0, "Member 'FCameraPresetTemplate::QuarterView_MaxDistance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_DefaultHeight) == 0x0000E4, "Member 'FCameraPresetTemplate::QuarterView_DefaultHeight' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_MinPitch) == 0x0000E8, "Member 'FCameraPresetTemplate::QuarterView_MinPitch' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_MaxPitch) == 0x0000EC, "Member 'FCameraPresetTemplate::QuarterView_MaxPitch' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_DefaultPitch) == 0x0000F0, "Member 'FCameraPresetTemplate::QuarterView_DefaultPitch' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_RotationSensitivity) == 0x0000F4, "Member 'FCameraPresetTemplate::QuarterView_RotationSensitivity' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_ZoomSensitivity) == 0x0000F8, "Member 'FCameraPresetTemplate::QuarterView_ZoomSensitivity' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, QuarterView_CameraFOV) == 0x0000FC, "Member 'FCameraPresetTemplate::QuarterView_CameraFOV' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_InterpSpeed) == 0x000100, "Member 'FCameraPresetTemplate::ManualMode_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_DefaultDistance) == 0x000104, "Member 'FCameraPresetTemplate::ManualMode_DefaultDistance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_MinDistance) == 0x000108, "Member 'FCameraPresetTemplate::ManualMode_MinDistance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_MaxDistance) == 0x00010C, "Member 'FCameraPresetTemplate::ManualMode_MaxDistance' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_DefaultHeight) == 0x000110, "Member 'FCameraPresetTemplate::ManualMode_DefaultHeight' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_DefaultPitch) == 0x000114, "Member 'FCameraPresetTemplate::ManualMode_DefaultPitch' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_MinPitchAngle) == 0x000118, "Member 'FCameraPresetTemplate::ManualMode_MinPitchAngle' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_MaxPitchAngle) == 0x00011C, "Member 'FCameraPresetTemplate::ManualMode_MaxPitchAngle' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_RotationSensitivity) == 0x000120, "Member 'FCameraPresetTemplate::ManualMode_RotationSensitivity' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_ZoomSensitivity) == 0x000124, "Member 'FCameraPresetTemplate::ManualMode_ZoomSensitivity' has a wrong offset!");
static_assert(offsetof(FCameraPresetTemplate, ManualMode_CameraFOV) == 0x000128, "Member 'FCameraPresetTemplate::ManualMode_CameraFOV' has a wrong offset!");

// ScriptStruct MirMobile.BattlePassMissionTemplate
// 0x0030 (0x0038 - 0x0008)
struct FBattlePassMissionTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Title;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Description;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventDataId;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompleteCount;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionPoint;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImmediateType;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImmediateId;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentId;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassMissionTemplate) == 0x000008, "Wrong alignment on FBattlePassMissionTemplate");
static_assert(sizeof(FBattlePassMissionTemplate) == 0x000038, "Wrong size on FBattlePassMissionTemplate");
static_assert(offsetof(FBattlePassMissionTemplate, ID) == 0x000008, "Member 'FBattlePassMissionTemplate::ID' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, GroupId) == 0x00000C, "Member 'FBattlePassMissionTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, Icon) == 0x000010, "Member 'FBattlePassMissionTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, Title) == 0x000014, "Member 'FBattlePassMissionTemplate::Title' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, Description) == 0x000018, "Member 'FBattlePassMissionTemplate::Description' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, EventDataId) == 0x00001C, "Member 'FBattlePassMissionTemplate::EventDataId' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, CompleteCount) == 0x000020, "Member 'FBattlePassMissionTemplate::CompleteCount' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, MissionPoint) == 0x000024, "Member 'FBattlePassMissionTemplate::MissionPoint' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, ImmediateType) == 0x000028, "Member 'FBattlePassMissionTemplate::ImmediateType' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, ImmediateId) == 0x00002C, "Member 'FBattlePassMissionTemplate::ImmediateId' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, Value) == 0x000030, "Member 'FBattlePassMissionTemplate::Value' has a wrong offset!");
static_assert(offsetof(FBattlePassMissionTemplate, ContentId) == 0x000034, "Member 'FBattlePassMissionTemplate::ContentId' has a wrong offset!");

// ScriptStruct MirMobile.CharPointLightData
// 0x0040 (0x0040 - 0x0000)
struct FCharPointLightData final
{
public:
	float                                         ControlTime;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0004(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PIntensityCurve;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PRadiusCurve;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightOffset;                                       // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharPointLightData) == 0x000008, "Wrong alignment on FCharPointLightData");
static_assert(sizeof(FCharPointLightData) == 0x000040, "Wrong size on FCharPointLightData");
static_assert(offsetof(FCharPointLightData, ControlTime) == 0x000000, "Member 'FCharPointLightData::ControlTime' has a wrong offset!");
static_assert(offsetof(FCharPointLightData, LightColor) == 0x000004, "Member 'FCharPointLightData::LightColor' has a wrong offset!");
static_assert(offsetof(FCharPointLightData, PIntensityCurve) == 0x000018, "Member 'FCharPointLightData::PIntensityCurve' has a wrong offset!");
static_assert(offsetof(FCharPointLightData, PRadiusCurve) == 0x000020, "Member 'FCharPointLightData::PRadiusCurve' has a wrong offset!");
static_assert(offsetof(FCharPointLightData, LightOffset) == 0x000028, "Member 'FCharPointLightData::LightOffset' has a wrong offset!");

// ScriptStruct MirMobile.SystemDataTemplate
// 0x0278 (0x0280 - 0x0008)
struct FSystemDataTemplate final : public FTableRowBase
{
public:
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCreationMembers;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCreationLevel;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildJoinMaxLevel;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCreationCostType;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCreationCostCount;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildIdentityChangeCostType;                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildIdentityCostCount;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCostumeTitleItemUseId;                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCostumeTitleItemCount;                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNameChangeItemUseId;                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNameChangeItemCount;                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNameChangeCostId;                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterNameChangeCostCount;                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceReflowCureItemId;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceReflowCureUseId;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Use_Item_Time_CriticalFail_Minute;                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetAdditionExpPercent;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PET_READYSTATE_ENDTIMER;                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnsealingSlotCount;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildHelpCount;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Support_Acceleration_Time;                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathPenalty_Injure_AccelerationPoint;             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unsealing_Acceleration_Point;                      // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreatBuilding_Acceleration_Point;                  // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unsealing_Acceleration_GoldExchange;               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreatBuilding_Acceleration_GoldExchange;           // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeItemUseId;                                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeItemCount;                                // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeCostId;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeCostCount;                                // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Base_Accuracy;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min_Accuracy;                                      // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_AccuracyDamage;                                // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_PvP_MinAmplify;                                // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_PvP_MaxAmplify;                                // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_UserToMonster_MinAmplify;                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_UserToMonster_MaxAmplify;                      // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_UserToBoss_MinAmplify;                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_UserToBoss_MaxAmplify;                         // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_MonsterToUser_MinAmplify;                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_MonsterToUser_MaxAmplify;                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_BossToUser_MinAmplify;                         // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_BossToUser_MaxAmplify;                         // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_MonsterToMonster_MinAmplify;                   // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_MonsterToMonster_MaxAmplify;                   // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_MonsterToBoss_MinAmplify;                      // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_MonsterToBoss_MaxAmplify;                      // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Base_Critical;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Base_CriticalOutcome;                              // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Base_Smite;                                        // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPOverPer;                                         // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPOverDamagePer;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage_Amplify_Max;                                // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Per_Damage_Amplify_Max_Apply;                      // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Per_Buff_Battle_Diff_Min;                          // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Per_Battle_Diff_Min;                               // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_Critical_Max;                                  // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Per_Critical_Max_Apply;                            // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smite_Amplify_Max;                                 // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         REVIVAL_SafetyIncreaseReqLv;                       // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trade_SystemTax;                                   // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trade_ApplyTax;                                    // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trade_SalesTime;                                   // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trade_OverSalePrice;                               // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trade_OverSaleWaitingTime;                         // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trade_SaleLimitLv;                                 // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevivalHP;                                         // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathPenalty_EXP_SaveLogMaxCnt;                    // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathPenalty_EXP_FreeRecovery_Limit;               // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dominion_Strongpoint_BlackIron_Limit;              // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dominion_Tax_SabukCastle_Enable;                   // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dominion_Tax_BicheonCastle_Enable;                 // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dominion_Tax_StrongPoint_Enable;                   // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Dominion_Strongpoint_Blackiron_Max;                // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Dominion_Tax_BicheonCastle_Gold_Max;               // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Dominion_Tax_BicheonCastle_Blackiron_Max;          // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GUILD_DOMINION_Bitcheon_Gold_Transfer_Tax;         // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GUILD_DOMINION_Sabuk_Gold_Transfer_Tax;            // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GUILD_DOMINION_Sabuk_Blackiron_Transfer_Tax;       // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GUILD_DOMINION_Sabuk_Gold_Transfer_Tax_DelayTime;  // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GUILD_DOMINION_Sabuk_Blackiron_Transfer_Tax_DelayTime; // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sabuk_PBS_Appoint_DelayTime;                       // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bicheon_PBS_Appoint_DelayTime;                     // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathPenalty_Injure_GoldExchangeRate;              // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageLimit_StandardDmg;                           // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageLimit_Denominator;                           // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Compose_FailPointMax_INT;                          // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Compose_FailPoint_INT;                             // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterMaxSlotCount;                             // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_CriticalFail_Tolerance;                   // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_Visit_Max_Count;                            // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_Visit_Open_Hour;                            // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_Visit_Open_Min;                             // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_Visit_Keep_Time;                            // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerVisit_PkWin_ADay_Gain_MaxCount_ServerVister; // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerVisit_PkWin_ADay_Gain_MaxCount_NotServerVister; // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guest_ShopEnter_Enable;                            // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Per_NormalAtk_Min;                                 // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SaleItemBasket_MaxCount;                           // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_BlackIron_to_Coin_Cost;                         // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_to_BlackIron_Cost;                         // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_to_Balckiron_Sum_Denominator;              // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_BlackIron_to_Coin_Success_Mail;                 // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_BlackIron_to_Coin_Fail_Mail;                    // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_to_BlackIron_Success_Mail;                 // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_to_BlackIron_Fail_Normal_Mail;             // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_to_BlackIron_Fail_DailyLimit_Mail;         // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_to_BlackIron_Fail_MaxLimit_Mail;           // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_Derby_StartHour;                           // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_Derby_StartMin;                            // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_Derby_KeepTime;                            // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_DailySmeltLimit;                           // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Coin_Delay_BuffId;                              // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkSteel_MinimumReserve;                          // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FT_Hydra_to_Coin_Cost_ItemID;                      // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HYDRA_Max_Exchange;                                // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonCoin_EXDRAS1_Success_Mail;                   // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonCoin_EXDRAS1_Fail_Mail;                      // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonCoin_MakeBox_Success_Mail;                   // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonCoin_EXDRAS1_DailySmeltLimit;                // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldChattingLv;                                   // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAutoOptionChangeLevelLimit;                    // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkSteel_Block_Buff;                              // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildMarkerGlobalCool;                             // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoLogOut_Level;                                  // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoLogOut_Time;                                   // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoLogOut_OnOff;                                  // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoLogOut_CaptchaTime;                            // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShoppingBasket_Max;                                // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserToDarkDamage_Min;                              // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserToDarkDamage_Max;                              // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterToDarkDamage_Min;                           // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterToDarkDamage_Max;                           // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Emperor_Shout_Delay;                               // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mail_Send_King_Duration;                           // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mail_Send_King_Cost_Type;                          // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mail_Send_King_Cost_Value;                         // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mail_Send_King_Delay;                              // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mail_Send_Emperor_Duration;                        // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mail_Send_Emperor_Cost_Type;                       // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mail_Send_Emperor_Cost_Value;                      // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mail_Send_Emperor_Delay;                           // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeadValley_ElecShockMon_ScreenFX;                  // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftHistory_Period;                                // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WonderDelay;                                       // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubWeaponDisable_Delay;                            // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConquerServer_EnterIngame_HoldTime;                // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyRaid_RefreshDelay;                            // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result_MoveSpeed_Min;                              // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result_MoveSpeed_Max;                              // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Guild_Tournament_Warp_LimitTime;                   // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mythic_Pet_Mesh;                                   // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mythic_Pet_ABP;                                    // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSystemDataTemplate) == 0x000008, "Wrong alignment on FSystemDataTemplate");
static_assert(sizeof(FSystemDataTemplate) == 0x000280, "Wrong size on FSystemDataTemplate");
static_assert(offsetof(FSystemDataTemplate, Index) == 0x000008, "Member 'FSystemDataTemplate::Index' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GuildCreationMembers) == 0x00000C, "Member 'FSystemDataTemplate::GuildCreationMembers' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GuildCreationLevel) == 0x000010, "Member 'FSystemDataTemplate::GuildCreationLevel' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GuildJoinMaxLevel) == 0x000014, "Member 'FSystemDataTemplate::GuildJoinMaxLevel' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GuildCreationCostType) == 0x000018, "Member 'FSystemDataTemplate::GuildCreationCostType' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GuildCreationCostCount) == 0x00001C, "Member 'FSystemDataTemplate::GuildCreationCostCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GuildIdentityChangeCostType) == 0x000020, "Member 'FSystemDataTemplate::GuildIdentityChangeCostType' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GuildIdentityCostCount) == 0x000024, "Member 'FSystemDataTemplate::GuildIdentityCostCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CharacterCostumeTitleItemUseId) == 0x000028, "Member 'FSystemDataTemplate::CharacterCostumeTitleItemUseId' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CharacterCostumeTitleItemCount) == 0x00002C, "Member 'FSystemDataTemplate::CharacterCostumeTitleItemCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CharacterNameChangeItemUseId) == 0x000030, "Member 'FSystemDataTemplate::CharacterNameChangeItemUseId' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CharacterNameChangeItemCount) == 0x000034, "Member 'FSystemDataTemplate::CharacterNameChangeItemCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CharacterNameChangeCostId) == 0x000038, "Member 'FSystemDataTemplate::CharacterNameChangeCostId' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CharacterNameChangeCostCount) == 0x00003C, "Member 'FSystemDataTemplate::CharacterNameChangeCostCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, ForceReflowCureItemId) == 0x000040, "Member 'FSystemDataTemplate::ForceReflowCureItemId' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, ForceReflowCureUseId) == 0x000044, "Member 'FSystemDataTemplate::ForceReflowCureUseId' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Use_Item_Time_CriticalFail_Minute) == 0x000048, "Member 'FSystemDataTemplate::Use_Item_Time_CriticalFail_Minute' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, PetAdditionExpPercent) == 0x00004C, "Member 'FSystemDataTemplate::PetAdditionExpPercent' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, PET_READYSTATE_ENDTIMER) == 0x000050, "Member 'FSystemDataTemplate::PET_READYSTATE_ENDTIMER' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, UnsealingSlotCount) == 0x000054, "Member 'FSystemDataTemplate::UnsealingSlotCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GuildHelpCount) == 0x000058, "Member 'FSystemDataTemplate::GuildHelpCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Support_Acceleration_Time) == 0x00005C, "Member 'FSystemDataTemplate::Support_Acceleration_Time' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, DeathPenalty_Injure_AccelerationPoint) == 0x000060, "Member 'FSystemDataTemplate::DeathPenalty_Injure_AccelerationPoint' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Unsealing_Acceleration_Point) == 0x000064, "Member 'FSystemDataTemplate::Unsealing_Acceleration_Point' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GreatBuilding_Acceleration_Point) == 0x000068, "Member 'FSystemDataTemplate::GreatBuilding_Acceleration_Point' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Unsealing_Acceleration_GoldExchange) == 0x00006C, "Member 'FSystemDataTemplate::Unsealing_Acceleration_GoldExchange' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GreatBuilding_Acceleration_GoldExchange) == 0x000070, "Member 'FSystemDataTemplate::GreatBuilding_Acceleration_GoldExchange' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CustomizeItemUseId) == 0x000074, "Member 'FSystemDataTemplate::CustomizeItemUseId' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CustomizeItemCount) == 0x000078, "Member 'FSystemDataTemplate::CustomizeItemCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CustomizeCostId) == 0x00007C, "Member 'FSystemDataTemplate::CustomizeCostId' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CustomizeCostCount) == 0x000080, "Member 'FSystemDataTemplate::CustomizeCostCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Base_Accuracy) == 0x000084, "Member 'FSystemDataTemplate::Base_Accuracy' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Min_Accuracy) == 0x000088, "Member 'FSystemDataTemplate::Min_Accuracy' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_AccuracyDamage) == 0x00008C, "Member 'FSystemDataTemplate::Per_AccuracyDamage' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_PvP_MinAmplify) == 0x000090, "Member 'FSystemDataTemplate::Per_PvP_MinAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_PvP_MaxAmplify) == 0x000094, "Member 'FSystemDataTemplate::Per_PvP_MaxAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_UserToMonster_MinAmplify) == 0x000098, "Member 'FSystemDataTemplate::Per_UserToMonster_MinAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_UserToMonster_MaxAmplify) == 0x00009C, "Member 'FSystemDataTemplate::Per_UserToMonster_MaxAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_UserToBoss_MinAmplify) == 0x0000A0, "Member 'FSystemDataTemplate::Per_UserToBoss_MinAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_UserToBoss_MaxAmplify) == 0x0000A4, "Member 'FSystemDataTemplate::Per_UserToBoss_MaxAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_MonsterToUser_MinAmplify) == 0x0000A8, "Member 'FSystemDataTemplate::Per_MonsterToUser_MinAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_MonsterToUser_MaxAmplify) == 0x0000AC, "Member 'FSystemDataTemplate::Per_MonsterToUser_MaxAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_BossToUser_MinAmplify) == 0x0000B0, "Member 'FSystemDataTemplate::Per_BossToUser_MinAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_BossToUser_MaxAmplify) == 0x0000B4, "Member 'FSystemDataTemplate::Per_BossToUser_MaxAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_MonsterToMonster_MinAmplify) == 0x0000B8, "Member 'FSystemDataTemplate::Per_MonsterToMonster_MinAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_MonsterToMonster_MaxAmplify) == 0x0000BC, "Member 'FSystemDataTemplate::Per_MonsterToMonster_MaxAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_MonsterToBoss_MinAmplify) == 0x0000C0, "Member 'FSystemDataTemplate::Per_MonsterToBoss_MinAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_MonsterToBoss_MaxAmplify) == 0x0000C4, "Member 'FSystemDataTemplate::Per_MonsterToBoss_MaxAmplify' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Base_Critical) == 0x0000C8, "Member 'FSystemDataTemplate::Base_Critical' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Base_CriticalOutcome) == 0x0000CC, "Member 'FSystemDataTemplate::Base_CriticalOutcome' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Base_Smite) == 0x0000D0, "Member 'FSystemDataTemplate::Base_Smite' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, HPOverPer) == 0x0000D4, "Member 'FSystemDataTemplate::HPOverPer' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, HPOverDamagePer) == 0x0000D8, "Member 'FSystemDataTemplate::HPOverDamagePer' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Damage_Amplify_Max) == 0x0000DC, "Member 'FSystemDataTemplate::Damage_Amplify_Max' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_Damage_Amplify_Max_Apply) == 0x0000E0, "Member 'FSystemDataTemplate::Per_Damage_Amplify_Max_Apply' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_Buff_Battle_Diff_Min) == 0x0000E4, "Member 'FSystemDataTemplate::Per_Buff_Battle_Diff_Min' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_Battle_Diff_Min) == 0x0000E8, "Member 'FSystemDataTemplate::Per_Battle_Diff_Min' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_Critical_Max) == 0x0000EC, "Member 'FSystemDataTemplate::Per_Critical_Max' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_Critical_Max_Apply) == 0x0000F0, "Member 'FSystemDataTemplate::Per_Critical_Max_Apply' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Smite_Amplify_Max) == 0x0000F4, "Member 'FSystemDataTemplate::Smite_Amplify_Max' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, REVIVAL_SafetyIncreaseReqLv) == 0x0000F8, "Member 'FSystemDataTemplate::REVIVAL_SafetyIncreaseReqLv' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Trade_SystemTax) == 0x0000FC, "Member 'FSystemDataTemplate::Trade_SystemTax' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Trade_ApplyTax) == 0x000100, "Member 'FSystemDataTemplate::Trade_ApplyTax' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Trade_SalesTime) == 0x000104, "Member 'FSystemDataTemplate::Trade_SalesTime' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Trade_OverSalePrice) == 0x000108, "Member 'FSystemDataTemplate::Trade_OverSalePrice' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Trade_OverSaleWaitingTime) == 0x00010C, "Member 'FSystemDataTemplate::Trade_OverSaleWaitingTime' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Trade_SaleLimitLv) == 0x000110, "Member 'FSystemDataTemplate::Trade_SaleLimitLv' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, RevivalHP) == 0x000114, "Member 'FSystemDataTemplate::RevivalHP' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, DeathPenalty_EXP_SaveLogMaxCnt) == 0x000118, "Member 'FSystemDataTemplate::DeathPenalty_EXP_SaveLogMaxCnt' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, DeathPenalty_EXP_FreeRecovery_Limit) == 0x00011C, "Member 'FSystemDataTemplate::DeathPenalty_EXP_FreeRecovery_Limit' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Dominion_Strongpoint_BlackIron_Limit) == 0x000120, "Member 'FSystemDataTemplate::Dominion_Strongpoint_BlackIron_Limit' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Dominion_Tax_SabukCastle_Enable) == 0x000124, "Member 'FSystemDataTemplate::Dominion_Tax_SabukCastle_Enable' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Dominion_Tax_BicheonCastle_Enable) == 0x000128, "Member 'FSystemDataTemplate::Dominion_Tax_BicheonCastle_Enable' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Dominion_Tax_StrongPoint_Enable) == 0x00012C, "Member 'FSystemDataTemplate::Dominion_Tax_StrongPoint_Enable' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Dominion_Strongpoint_Blackiron_Max) == 0x000130, "Member 'FSystemDataTemplate::Dominion_Strongpoint_Blackiron_Max' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Dominion_Tax_BicheonCastle_Gold_Max) == 0x000138, "Member 'FSystemDataTemplate::Dominion_Tax_BicheonCastle_Gold_Max' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Dominion_Tax_BicheonCastle_Blackiron_Max) == 0x000140, "Member 'FSystemDataTemplate::Dominion_Tax_BicheonCastle_Blackiron_Max' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GUILD_DOMINION_Bitcheon_Gold_Transfer_Tax) == 0x000148, "Member 'FSystemDataTemplate::GUILD_DOMINION_Bitcheon_Gold_Transfer_Tax' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GUILD_DOMINION_Sabuk_Gold_Transfer_Tax) == 0x00014C, "Member 'FSystemDataTemplate::GUILD_DOMINION_Sabuk_Gold_Transfer_Tax' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GUILD_DOMINION_Sabuk_Blackiron_Transfer_Tax) == 0x000150, "Member 'FSystemDataTemplate::GUILD_DOMINION_Sabuk_Blackiron_Transfer_Tax' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GUILD_DOMINION_Sabuk_Gold_Transfer_Tax_DelayTime) == 0x000154, "Member 'FSystemDataTemplate::GUILD_DOMINION_Sabuk_Gold_Transfer_Tax_DelayTime' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GUILD_DOMINION_Sabuk_Blackiron_Transfer_Tax_DelayTime) == 0x000158, "Member 'FSystemDataTemplate::GUILD_DOMINION_Sabuk_Blackiron_Transfer_Tax_DelayTime' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Sabuk_PBS_Appoint_DelayTime) == 0x00015C, "Member 'FSystemDataTemplate::Sabuk_PBS_Appoint_DelayTime' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Bicheon_PBS_Appoint_DelayTime) == 0x000160, "Member 'FSystemDataTemplate::Bicheon_PBS_Appoint_DelayTime' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, DeathPenalty_Injure_GoldExchangeRate) == 0x000164, "Member 'FSystemDataTemplate::DeathPenalty_Injure_GoldExchangeRate' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, DamageLimit_StandardDmg) == 0x000168, "Member 'FSystemDataTemplate::DamageLimit_StandardDmg' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, DamageLimit_Denominator) == 0x00016C, "Member 'FSystemDataTemplate::DamageLimit_Denominator' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Compose_FailPointMax_INT) == 0x000170, "Member 'FSystemDataTemplate::Compose_FailPointMax_INT' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Compose_FailPoint_INT) == 0x000174, "Member 'FSystemDataTemplate::Compose_FailPoint_INT' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, CharacterMaxSlotCount) == 0x000178, "Member 'FSystemDataTemplate::CharacterMaxSlotCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Training_CriticalFail_Tolerance) == 0x00017C, "Member 'FSystemDataTemplate::Training_CriticalFail_Tolerance' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Server_Visit_Max_Count) == 0x000180, "Member 'FSystemDataTemplate::Server_Visit_Max_Count' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Server_Visit_Open_Hour) == 0x000184, "Member 'FSystemDataTemplate::Server_Visit_Open_Hour' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Server_Visit_Open_Min) == 0x000188, "Member 'FSystemDataTemplate::Server_Visit_Open_Min' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Server_Visit_Keep_Time) == 0x00018C, "Member 'FSystemDataTemplate::Server_Visit_Keep_Time' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, ServerVisit_PkWin_ADay_Gain_MaxCount_ServerVister) == 0x000190, "Member 'FSystemDataTemplate::ServerVisit_PkWin_ADay_Gain_MaxCount_ServerVister' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, ServerVisit_PkWin_ADay_Gain_MaxCount_NotServerVister) == 0x000194, "Member 'FSystemDataTemplate::ServerVisit_PkWin_ADay_Gain_MaxCount_NotServerVister' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Guest_ShopEnter_Enable) == 0x000198, "Member 'FSystemDataTemplate::Guest_ShopEnter_Enable' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Per_NormalAtk_Min) == 0x00019C, "Member 'FSystemDataTemplate::Per_NormalAtk_Min' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, SaleItemBasket_MaxCount) == 0x0001A0, "Member 'FSystemDataTemplate::SaleItemBasket_MaxCount' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_BlackIron_to_Coin_Cost) == 0x0001A4, "Member 'FSystemDataTemplate::FT_BlackIron_to_Coin_Cost' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_to_BlackIron_Cost) == 0x0001A8, "Member 'FSystemDataTemplate::FT_Coin_to_BlackIron_Cost' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_to_Balckiron_Sum_Denominator) == 0x0001AC, "Member 'FSystemDataTemplate::FT_Coin_to_Balckiron_Sum_Denominator' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_BlackIron_to_Coin_Success_Mail) == 0x0001B0, "Member 'FSystemDataTemplate::FT_BlackIron_to_Coin_Success_Mail' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_BlackIron_to_Coin_Fail_Mail) == 0x0001B4, "Member 'FSystemDataTemplate::FT_BlackIron_to_Coin_Fail_Mail' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_to_BlackIron_Success_Mail) == 0x0001B8, "Member 'FSystemDataTemplate::FT_Coin_to_BlackIron_Success_Mail' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_to_BlackIron_Fail_Normal_Mail) == 0x0001BC, "Member 'FSystemDataTemplate::FT_Coin_to_BlackIron_Fail_Normal_Mail' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_to_BlackIron_Fail_DailyLimit_Mail) == 0x0001C0, "Member 'FSystemDataTemplate::FT_Coin_to_BlackIron_Fail_DailyLimit_Mail' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_to_BlackIron_Fail_MaxLimit_Mail) == 0x0001C4, "Member 'FSystemDataTemplate::FT_Coin_to_BlackIron_Fail_MaxLimit_Mail' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_Derby_StartHour) == 0x0001C8, "Member 'FSystemDataTemplate::FT_Coin_Derby_StartHour' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_Derby_StartMin) == 0x0001CC, "Member 'FSystemDataTemplate::FT_Coin_Derby_StartMin' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_Derby_KeepTime) == 0x0001D0, "Member 'FSystemDataTemplate::FT_Coin_Derby_KeepTime' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_DailySmeltLimit) == 0x0001D4, "Member 'FSystemDataTemplate::FT_Coin_DailySmeltLimit' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Coin_Delay_BuffId) == 0x0001D8, "Member 'FSystemDataTemplate::FT_Coin_Delay_BuffId' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, DarkSteel_MinimumReserve) == 0x0001DC, "Member 'FSystemDataTemplate::DarkSteel_MinimumReserve' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, FT_Hydra_to_Coin_Cost_ItemID) == 0x0001E0, "Member 'FSystemDataTemplate::FT_Hydra_to_Coin_Cost_ItemID' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, HYDRA_Max_Exchange) == 0x0001E4, "Member 'FSystemDataTemplate::HYDRA_Max_Exchange' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, SeasonCoin_EXDRAS1_Success_Mail) == 0x0001E8, "Member 'FSystemDataTemplate::SeasonCoin_EXDRAS1_Success_Mail' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, SeasonCoin_EXDRAS1_Fail_Mail) == 0x0001EC, "Member 'FSystemDataTemplate::SeasonCoin_EXDRAS1_Fail_Mail' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, SeasonCoin_MakeBox_Success_Mail) == 0x0001F0, "Member 'FSystemDataTemplate::SeasonCoin_MakeBox_Success_Mail' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, SeasonCoin_EXDRAS1_DailySmeltLimit) == 0x0001F4, "Member 'FSystemDataTemplate::SeasonCoin_EXDRAS1_DailySmeltLimit' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, WorldChattingLv) == 0x0001F8, "Member 'FSystemDataTemplate::WorldChattingLv' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, ItemAutoOptionChangeLevelLimit) == 0x0001FC, "Member 'FSystemDataTemplate::ItemAutoOptionChangeLevelLimit' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, DarkSteel_Block_Buff) == 0x000200, "Member 'FSystemDataTemplate::DarkSteel_Block_Buff' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GuildMarkerGlobalCool) == 0x000204, "Member 'FSystemDataTemplate::GuildMarkerGlobalCool' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, AutoLogOut_Level) == 0x000208, "Member 'FSystemDataTemplate::AutoLogOut_Level' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, AutoLogOut_Time) == 0x00020C, "Member 'FSystemDataTemplate::AutoLogOut_Time' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, AutoLogOut_OnOff) == 0x000210, "Member 'FSystemDataTemplate::AutoLogOut_OnOff' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, AutoLogOut_CaptchaTime) == 0x000214, "Member 'FSystemDataTemplate::AutoLogOut_CaptchaTime' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, ShoppingBasket_Max) == 0x000218, "Member 'FSystemDataTemplate::ShoppingBasket_Max' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, UserToDarkDamage_Min) == 0x00021C, "Member 'FSystemDataTemplate::UserToDarkDamage_Min' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, UserToDarkDamage_Max) == 0x000220, "Member 'FSystemDataTemplate::UserToDarkDamage_Max' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, MonsterToDarkDamage_Min) == 0x000224, "Member 'FSystemDataTemplate::MonsterToDarkDamage_Min' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, MonsterToDarkDamage_Max) == 0x000228, "Member 'FSystemDataTemplate::MonsterToDarkDamage_Max' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Emperor_Shout_Delay) == 0x00022C, "Member 'FSystemDataTemplate::Emperor_Shout_Delay' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Mail_Send_King_Duration) == 0x000230, "Member 'FSystemDataTemplate::Mail_Send_King_Duration' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Mail_Send_King_Cost_Type) == 0x000234, "Member 'FSystemDataTemplate::Mail_Send_King_Cost_Type' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Mail_Send_King_Cost_Value) == 0x000238, "Member 'FSystemDataTemplate::Mail_Send_King_Cost_Value' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Mail_Send_King_Delay) == 0x00023C, "Member 'FSystemDataTemplate::Mail_Send_King_Delay' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Mail_Send_Emperor_Duration) == 0x000240, "Member 'FSystemDataTemplate::Mail_Send_Emperor_Duration' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Mail_Send_Emperor_Cost_Type) == 0x000244, "Member 'FSystemDataTemplate::Mail_Send_Emperor_Cost_Type' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Mail_Send_Emperor_Cost_Value) == 0x000248, "Member 'FSystemDataTemplate::Mail_Send_Emperor_Cost_Value' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Mail_Send_Emperor_Delay) == 0x00024C, "Member 'FSystemDataTemplate::Mail_Send_Emperor_Delay' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, DeadValley_ElecShockMon_ScreenFX) == 0x000250, "Member 'FSystemDataTemplate::DeadValley_ElecShockMon_ScreenFX' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, GiftHistory_Period) == 0x000254, "Member 'FSystemDataTemplate::GiftHistory_Period' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, WonderDelay) == 0x000258, "Member 'FSystemDataTemplate::WonderDelay' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, SubWeaponDisable_Delay) == 0x00025C, "Member 'FSystemDataTemplate::SubWeaponDisable_Delay' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, ConquerServer_EnterIngame_HoldTime) == 0x000260, "Member 'FSystemDataTemplate::ConquerServer_EnterIngame_HoldTime' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, PartyRaid_RefreshDelay) == 0x000264, "Member 'FSystemDataTemplate::PartyRaid_RefreshDelay' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Result_MoveSpeed_Min) == 0x000268, "Member 'FSystemDataTemplate::Result_MoveSpeed_Min' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Result_MoveSpeed_Max) == 0x00026C, "Member 'FSystemDataTemplate::Result_MoveSpeed_Max' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Guild_Tournament_Warp_LimitTime) == 0x000270, "Member 'FSystemDataTemplate::Guild_Tournament_Warp_LimitTime' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Mythic_Pet_Mesh) == 0x000274, "Member 'FSystemDataTemplate::Mythic_Pet_Mesh' has a wrong offset!");
static_assert(offsetof(FSystemDataTemplate, Mythic_Pet_ABP) == 0x000278, "Member 'FSystemDataTemplate::Mythic_Pet_ABP' has a wrong offset!");

// ScriptStruct MirMobile.ServerChangeConditionTemplate
// 0x0028 (0x0030 - 0x0008)
struct FServerChangeConditionTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCondtionType;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCondtionGroupId;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCondtionGroupName;                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCondtionType1;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCondtionType1Value;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCondtionType1Value2;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCondtionType2;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCondtionType2Value;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsId;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerChangeConditionTemplate) == 0x000008, "Wrong alignment on FServerChangeConditionTemplate");
static_assert(sizeof(FServerChangeConditionTemplate) == 0x000030, "Wrong size on FServerChangeConditionTemplate");
static_assert(offsetof(FServerChangeConditionTemplate, ID) == 0x000008, "Member 'FServerChangeConditionTemplate::ID' has a wrong offset!");
static_assert(offsetof(FServerChangeConditionTemplate, ChangeCondtionType) == 0x00000C, "Member 'FServerChangeConditionTemplate::ChangeCondtionType' has a wrong offset!");
static_assert(offsetof(FServerChangeConditionTemplate, ChangeCondtionGroupId) == 0x000010, "Member 'FServerChangeConditionTemplate::ChangeCondtionGroupId' has a wrong offset!");
static_assert(offsetof(FServerChangeConditionTemplate, ChangeCondtionGroupName) == 0x000014, "Member 'FServerChangeConditionTemplate::ChangeCondtionGroupName' has a wrong offset!");
static_assert(offsetof(FServerChangeConditionTemplate, ChangeCondtionType1) == 0x000018, "Member 'FServerChangeConditionTemplate::ChangeCondtionType1' has a wrong offset!");
static_assert(offsetof(FServerChangeConditionTemplate, ChangeCondtionType1Value) == 0x00001C, "Member 'FServerChangeConditionTemplate::ChangeCondtionType1Value' has a wrong offset!");
static_assert(offsetof(FServerChangeConditionTemplate, ChangeCondtionType1Value2) == 0x000020, "Member 'FServerChangeConditionTemplate::ChangeCondtionType1Value2' has a wrong offset!");
static_assert(offsetof(FServerChangeConditionTemplate, ChangeCondtionType2) == 0x000024, "Member 'FServerChangeConditionTemplate::ChangeCondtionType2' has a wrong offset!");
static_assert(offsetof(FServerChangeConditionTemplate, ChangeCondtionType2Value) == 0x000028, "Member 'FServerChangeConditionTemplate::ChangeCondtionType2Value' has a wrong offset!");
static_assert(offsetof(FServerChangeConditionTemplate, ContentsId) == 0x00002C, "Member 'FServerChangeConditionTemplate::ContentsId' has a wrong offset!");

// ScriptStruct MirMobile.PotentialTrainingTemplate
// 0x0060 (0x0068 - 0x0008)
struct FPotentialTrainingTemplate final : public FTableRowBase
{
public:
	int32                                         Potential_Id;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_Class;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_Level;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_SuccessRate;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_ExplanId;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostMoney_Id;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostMoney_Count;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostItem01_UseId;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostItem01_Count;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostItem02_UseId;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostItem02_Count;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostItem03_UseId;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostItem03_Count;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostItem04_UseId;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostItem04_Count;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Passive_Id;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Passive_CombatPoint;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Passive_CombatPointLevel;                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status01_Id;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status01_Value;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status02_Id;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status02_Value;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status03_Id;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status03_Value;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPotentialTrainingTemplate) == 0x000008, "Wrong alignment on FPotentialTrainingTemplate");
static_assert(sizeof(FPotentialTrainingTemplate) == 0x000068, "Wrong size on FPotentialTrainingTemplate");
static_assert(offsetof(FPotentialTrainingTemplate, Potential_Id) == 0x000008, "Member 'FPotentialTrainingTemplate::Potential_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Training_Class) == 0x00000C, "Member 'FPotentialTrainingTemplate::Training_Class' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Training_Level) == 0x000010, "Member 'FPotentialTrainingTemplate::Training_Level' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Training_SuccessRate) == 0x000014, "Member 'FPotentialTrainingTemplate::Training_SuccessRate' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Training_ExplanId) == 0x000018, "Member 'FPotentialTrainingTemplate::Training_ExplanId' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, CostMoney_Id) == 0x00001C, "Member 'FPotentialTrainingTemplate::CostMoney_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, CostMoney_Count) == 0x000020, "Member 'FPotentialTrainingTemplate::CostMoney_Count' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, CostItem01_UseId) == 0x000024, "Member 'FPotentialTrainingTemplate::CostItem01_UseId' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, CostItem01_Count) == 0x000028, "Member 'FPotentialTrainingTemplate::CostItem01_Count' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, CostItem02_UseId) == 0x00002C, "Member 'FPotentialTrainingTemplate::CostItem02_UseId' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, CostItem02_Count) == 0x000030, "Member 'FPotentialTrainingTemplate::CostItem02_Count' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, CostItem03_UseId) == 0x000034, "Member 'FPotentialTrainingTemplate::CostItem03_UseId' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, CostItem03_Count) == 0x000038, "Member 'FPotentialTrainingTemplate::CostItem03_Count' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, CostItem04_UseId) == 0x00003C, "Member 'FPotentialTrainingTemplate::CostItem04_UseId' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, CostItem04_Count) == 0x000040, "Member 'FPotentialTrainingTemplate::CostItem04_Count' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Passive_Id) == 0x000044, "Member 'FPotentialTrainingTemplate::Passive_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Passive_CombatPoint) == 0x000048, "Member 'FPotentialTrainingTemplate::Passive_CombatPoint' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Passive_CombatPointLevel) == 0x00004C, "Member 'FPotentialTrainingTemplate::Passive_CombatPointLevel' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Status01_Id) == 0x000050, "Member 'FPotentialTrainingTemplate::Status01_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Status01_Value) == 0x000054, "Member 'FPotentialTrainingTemplate::Status01_Value' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Status02_Id) == 0x000058, "Member 'FPotentialTrainingTemplate::Status02_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Status02_Value) == 0x00005C, "Member 'FPotentialTrainingTemplate::Status02_Value' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Status03_Id) == 0x000060, "Member 'FPotentialTrainingTemplate::Status03_Id' has a wrong offset!");
static_assert(offsetof(FPotentialTrainingTemplate, Status03_Value) == 0x000064, "Member 'FPotentialTrainingTemplate::Status03_Value' has a wrong offset!");

// ScriptStruct MirMobile.BattlePassInfoTemplate
// 0x02F8 (0x0300 - 0x0008)
struct FBattlePassInfoTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameStrId;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupType;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseMinLevel;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseMaxLevel;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelCondition;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonBuffFist1;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonBuffFist2;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonBuffSecond1;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonBuffSecond2;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonBuffDesc;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassGroupId;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassRewardGroupId;                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseButton1;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseButton2;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Web1;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Web2;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AosUid1;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IosUid1;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OneStoreUid1;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SamsungUid1;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamUid1;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XsollaUid1;                                        // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MycardUid1;                                        // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HydraUid1;                                         // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HuaweiUid1;                                        // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWemixdUid1;                                       // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AosUidValue1;                                      // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IosUidValue1;                                      // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OneStoreValue1;                                    // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SamsungValue1;                                     // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamValue1;                                       // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XsollaValue1;                                      // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MycardValue1;                                      // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HydraValue1;                                       // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HuaweiValue1;                                      // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWemixdValue1;                                     // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AosUid2;                                           // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IosUid2;                                           // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OneStoreUid2;                                      // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SamsungUid2;                                       // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamUid2;                                         // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XsollaUid2;                                        // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MycardUid2;                                        // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HydraUid2;                                         // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HuaweiUid2;                                        // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWemixdUid2;                                       // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AosUidValue2;                                      // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IosUidValue2;                                      // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OneStoreValue2;                                    // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SamsungValue2;                                     // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamValue2;                                       // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XsollaValue2;                                      // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MycardValue2;                                      // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HydraValue2;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HuaweiValue2;                                      // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PWemixdValue2;                                     // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelText;                                         // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleText;                                         // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketId1;                                         // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketId2;                                         // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketIdCount1;                                    // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketIdCount2;                                    // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassInfoTemplate) == 0x000008, "Wrong alignment on FBattlePassInfoTemplate");
static_assert(sizeof(FBattlePassInfoTemplate) == 0x000300, "Wrong size on FBattlePassInfoTemplate");
static_assert(offsetof(FBattlePassInfoTemplate, ID) == 0x000008, "Member 'FBattlePassInfoTemplate::ID' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, NameStrId) == 0x00000C, "Member 'FBattlePassInfoTemplate::NameStrId' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, GroupType) == 0x000010, "Member 'FBattlePassInfoTemplate::GroupType' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, PurchaseMinLevel) == 0x000014, "Member 'FBattlePassInfoTemplate::PurchaseMinLevel' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, PurchaseMaxLevel) == 0x000018, "Member 'FBattlePassInfoTemplate::PurchaseMaxLevel' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, LevelCondition) == 0x00001C, "Member 'FBattlePassInfoTemplate::LevelCondition' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SeasonBuffFist1) == 0x000020, "Member 'FBattlePassInfoTemplate::SeasonBuffFist1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SeasonBuffFist2) == 0x000024, "Member 'FBattlePassInfoTemplate::SeasonBuffFist2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SeasonBuffSecond1) == 0x000028, "Member 'FBattlePassInfoTemplate::SeasonBuffSecond1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SeasonBuffSecond2) == 0x00002C, "Member 'FBattlePassInfoTemplate::SeasonBuffSecond2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SeasonBuffDesc) == 0x000030, "Member 'FBattlePassInfoTemplate::SeasonBuffDesc' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, BattlePassGroupId) == 0x000034, "Member 'FBattlePassInfoTemplate::BattlePassGroupId' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, BattlePassRewardGroupId) == 0x000038, "Member 'FBattlePassInfoTemplate::BattlePassRewardGroupId' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, PurchaseButton1) == 0x00003C, "Member 'FBattlePassInfoTemplate::PurchaseButton1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, PurchaseButton2) == 0x000040, "Member 'FBattlePassInfoTemplate::PurchaseButton2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, Web1) == 0x000048, "Member 'FBattlePassInfoTemplate::Web1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, Web2) == 0x000058, "Member 'FBattlePassInfoTemplate::Web2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, AosUid1) == 0x000068, "Member 'FBattlePassInfoTemplate::AosUid1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, IosUid1) == 0x000078, "Member 'FBattlePassInfoTemplate::IosUid1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, OneStoreUid1) == 0x000088, "Member 'FBattlePassInfoTemplate::OneStoreUid1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SamsungUid1) == 0x000098, "Member 'FBattlePassInfoTemplate::SamsungUid1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SteamUid1) == 0x0000A8, "Member 'FBattlePassInfoTemplate::SteamUid1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, XsollaUid1) == 0x0000B8, "Member 'FBattlePassInfoTemplate::XsollaUid1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, MycardUid1) == 0x0000C8, "Member 'FBattlePassInfoTemplate::MycardUid1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, HydraUid1) == 0x0000D8, "Member 'FBattlePassInfoTemplate::HydraUid1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, HuaweiUid1) == 0x0000E8, "Member 'FBattlePassInfoTemplate::HuaweiUid1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, PWemixdUid1) == 0x0000F8, "Member 'FBattlePassInfoTemplate::PWemixdUid1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, AosUidValue1) == 0x000108, "Member 'FBattlePassInfoTemplate::AosUidValue1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, IosUidValue1) == 0x000118, "Member 'FBattlePassInfoTemplate::IosUidValue1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, OneStoreValue1) == 0x000128, "Member 'FBattlePassInfoTemplate::OneStoreValue1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SamsungValue1) == 0x000138, "Member 'FBattlePassInfoTemplate::SamsungValue1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SteamValue1) == 0x000148, "Member 'FBattlePassInfoTemplate::SteamValue1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, XsollaValue1) == 0x000158, "Member 'FBattlePassInfoTemplate::XsollaValue1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, MycardValue1) == 0x000168, "Member 'FBattlePassInfoTemplate::MycardValue1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, HydraValue1) == 0x000178, "Member 'FBattlePassInfoTemplate::HydraValue1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, HuaweiValue1) == 0x000188, "Member 'FBattlePassInfoTemplate::HuaweiValue1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, PWemixdValue1) == 0x000198, "Member 'FBattlePassInfoTemplate::PWemixdValue1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, AosUid2) == 0x0001A8, "Member 'FBattlePassInfoTemplate::AosUid2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, IosUid2) == 0x0001B8, "Member 'FBattlePassInfoTemplate::IosUid2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, OneStoreUid2) == 0x0001C8, "Member 'FBattlePassInfoTemplate::OneStoreUid2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SamsungUid2) == 0x0001D8, "Member 'FBattlePassInfoTemplate::SamsungUid2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SteamUid2) == 0x0001E8, "Member 'FBattlePassInfoTemplate::SteamUid2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, XsollaUid2) == 0x0001F8, "Member 'FBattlePassInfoTemplate::XsollaUid2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, MycardUid2) == 0x000208, "Member 'FBattlePassInfoTemplate::MycardUid2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, HydraUid2) == 0x000218, "Member 'FBattlePassInfoTemplate::HydraUid2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, HuaweiUid2) == 0x000228, "Member 'FBattlePassInfoTemplate::HuaweiUid2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, PWemixdUid2) == 0x000238, "Member 'FBattlePassInfoTemplate::PWemixdUid2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, AosUidValue2) == 0x000248, "Member 'FBattlePassInfoTemplate::AosUidValue2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, IosUidValue2) == 0x000258, "Member 'FBattlePassInfoTemplate::IosUidValue2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, OneStoreValue2) == 0x000268, "Member 'FBattlePassInfoTemplate::OneStoreValue2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SamsungValue2) == 0x000278, "Member 'FBattlePassInfoTemplate::SamsungValue2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, SteamValue2) == 0x000288, "Member 'FBattlePassInfoTemplate::SteamValue2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, XsollaValue2) == 0x000298, "Member 'FBattlePassInfoTemplate::XsollaValue2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, MycardValue2) == 0x0002A8, "Member 'FBattlePassInfoTemplate::MycardValue2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, HydraValue2) == 0x0002B8, "Member 'FBattlePassInfoTemplate::HydraValue2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, HuaweiValue2) == 0x0002C8, "Member 'FBattlePassInfoTemplate::HuaweiValue2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, PWemixdValue2) == 0x0002D8, "Member 'FBattlePassInfoTemplate::PWemixdValue2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, LevelText) == 0x0002E8, "Member 'FBattlePassInfoTemplate::LevelText' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, TitleText) == 0x0002EC, "Member 'FBattlePassInfoTemplate::TitleText' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, TicketId1) == 0x0002F0, "Member 'FBattlePassInfoTemplate::TicketId1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, TicketId2) == 0x0002F4, "Member 'FBattlePassInfoTemplate::TicketId2' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, TicketIdCount1) == 0x0002F8, "Member 'FBattlePassInfoTemplate::TicketIdCount1' has a wrong offset!");
static_assert(offsetof(FBattlePassInfoTemplate, TicketIdCount2) == 0x0002FC, "Member 'FBattlePassInfoTemplate::TicketIdCount2' has a wrong offset!");

// ScriptStruct MirMobile.EventPassMissionTemplate
// 0x0030 (0x0038 - 0x0008)
struct FEventPassMissionTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserEventId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupType;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Title;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Description;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventPassDataId;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompleteCount;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompleteCountAccrue;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionPoint;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentId;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventPassMissionTemplate) == 0x000008, "Wrong alignment on FEventPassMissionTemplate");
static_assert(sizeof(FEventPassMissionTemplate) == 0x000038, "Wrong size on FEventPassMissionTemplate");
static_assert(offsetof(FEventPassMissionTemplate, ID) == 0x000008, "Member 'FEventPassMissionTemplate::ID' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, UserEventId) == 0x00000C, "Member 'FEventPassMissionTemplate::UserEventId' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, GroupType) == 0x000010, "Member 'FEventPassMissionTemplate::GroupType' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, Icon) == 0x000014, "Member 'FEventPassMissionTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, Order) == 0x000018, "Member 'FEventPassMissionTemplate::Order' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, Title) == 0x00001C, "Member 'FEventPassMissionTemplate::Title' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, Description) == 0x000020, "Member 'FEventPassMissionTemplate::Description' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, EventPassDataId) == 0x000024, "Member 'FEventPassMissionTemplate::EventPassDataId' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, CompleteCount) == 0x000028, "Member 'FEventPassMissionTemplate::CompleteCount' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, CompleteCountAccrue) == 0x00002C, "Member 'FEventPassMissionTemplate::CompleteCountAccrue' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, MissionPoint) == 0x000030, "Member 'FEventPassMissionTemplate::MissionPoint' has a wrong offset!");
static_assert(offsetof(FEventPassMissionTemplate, ContentId) == 0x000034, "Member 'FEventPassMissionTemplate::ContentId' has a wrong offset!");

// ScriptStruct MirMobile.ClassPhaseTemplate
// 0x0040 (0x0048 - 0x0008)
struct FClassPhaseTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassName;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassPortraitIcon;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PhaseCreateCost;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int64>                                 PhaseCreateCost_Value;                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PhaseExceptionOnOff;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseCreateItemUseId;                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopBuyId;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClassPhaseTemplate) == 0x000008, "Wrong alignment on FClassPhaseTemplate");
static_assert(sizeof(FClassPhaseTemplate) == 0x000048, "Wrong size on FClassPhaseTemplate");
static_assert(offsetof(FClassPhaseTemplate, Name) == 0x000008, "Member 'FClassPhaseTemplate::Name' has a wrong offset!");
static_assert(offsetof(FClassPhaseTemplate, Class) == 0x00000C, "Member 'FClassPhaseTemplate::Class' has a wrong offset!");
static_assert(offsetof(FClassPhaseTemplate, ClassName) == 0x000010, "Member 'FClassPhaseTemplate::ClassName' has a wrong offset!");
static_assert(offsetof(FClassPhaseTemplate, ClassPortraitIcon) == 0x000014, "Member 'FClassPhaseTemplate::ClassPortraitIcon' has a wrong offset!");
static_assert(offsetof(FClassPhaseTemplate, PhaseCreateCost) == 0x000018, "Member 'FClassPhaseTemplate::PhaseCreateCost' has a wrong offset!");
static_assert(offsetof(FClassPhaseTemplate, PhaseCreateCost_Value) == 0x000028, "Member 'FClassPhaseTemplate::PhaseCreateCost_Value' has a wrong offset!");
static_assert(offsetof(FClassPhaseTemplate, PhaseExceptionOnOff) == 0x000038, "Member 'FClassPhaseTemplate::PhaseExceptionOnOff' has a wrong offset!");
static_assert(offsetof(FClassPhaseTemplate, PhaseCreateItemUseId) == 0x00003C, "Member 'FClassPhaseTemplate::PhaseCreateItemUseId' has a wrong offset!");
static_assert(offsetof(FClassPhaseTemplate, ItemCount) == 0x000040, "Member 'FClassPhaseTemplate::ItemCount' has a wrong offset!");
static_assert(offsetof(FClassPhaseTemplate, ShopBuyId) == 0x000044, "Member 'FClassPhaseTemplate::ShopBuyId' has a wrong offset!");

// ScriptStruct MirMobile.ItemSubCoolTimeTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemSubCoolTimeTemplate final : public FTableRowBase
{
public:
	int32                                         SubCoolTimeID;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemSubType;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SubCoolTime;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultipleUseMax;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSubCoolTimeTemplate) == 0x000008, "Wrong alignment on FItemSubCoolTimeTemplate");
static_assert(sizeof(FItemSubCoolTimeTemplate) == 0x000020, "Wrong size on FItemSubCoolTimeTemplate");
static_assert(offsetof(FItemSubCoolTimeTemplate, SubCoolTimeID) == 0x000008, "Member 'FItemSubCoolTimeTemplate::SubCoolTimeID' has a wrong offset!");
static_assert(offsetof(FItemSubCoolTimeTemplate, ItemSubType) == 0x00000C, "Member 'FItemSubCoolTimeTemplate::ItemSubType' has a wrong offset!");
static_assert(offsetof(FItemSubCoolTimeTemplate, SubCoolTime) == 0x000010, "Member 'FItemSubCoolTimeTemplate::SubCoolTime' has a wrong offset!");
static_assert(offsetof(FItemSubCoolTimeTemplate, MultipleUseMax) == 0x000018, "Member 'FItemSubCoolTimeTemplate::MultipleUseMax' has a wrong offset!");

// ScriptStruct MirMobile.BoostingWorldControlTemplate
// 0x0020 (0x0028 - 0x0008)
struct FBoostingWorldControlTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionType;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParameterValue;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CotentsId;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoostingWorldControlTemplate) == 0x000008, "Wrong alignment on FBoostingWorldControlTemplate");
static_assert(sizeof(FBoostingWorldControlTemplate) == 0x000028, "Wrong size on FBoostingWorldControlTemplate");
static_assert(offsetof(FBoostingWorldControlTemplate, ID) == 0x000008, "Member 'FBoostingWorldControlTemplate::ID' has a wrong offset!");
static_assert(offsetof(FBoostingWorldControlTemplate, OptionType) == 0x00000C, "Member 'FBoostingWorldControlTemplate::OptionType' has a wrong offset!");
static_assert(offsetof(FBoostingWorldControlTemplate, ParameterValue) == 0x000010, "Member 'FBoostingWorldControlTemplate::ParameterValue' has a wrong offset!");
static_assert(offsetof(FBoostingWorldControlTemplate, CotentsId) == 0x000020, "Member 'FBoostingWorldControlTemplate::CotentsId' has a wrong offset!");

// ScriptStruct MirMobile.ItemGetWayInfoTemplate
// 0x0028 (0x0030 - 0x0008)
struct FItemGetWayInfoTemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NpcID;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LinkID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGetWayType                               GetWayType;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGetWayLinkType                           LinkType;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemGetWayInfoTemplate) == 0x000008, "Wrong alignment on FItemGetWayInfoTemplate");
static_assert(sizeof(FItemGetWayInfoTemplate) == 0x000030, "Wrong size on FItemGetWayInfoTemplate");
static_assert(offsetof(FItemGetWayInfoTemplate, UniqueId) == 0x000008, "Member 'FItemGetWayInfoTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FItemGetWayInfoTemplate, StageID) == 0x00000C, "Member 'FItemGetWayInfoTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FItemGetWayInfoTemplate, NpcID) == 0x000010, "Member 'FItemGetWayInfoTemplate::NpcID' has a wrong offset!");
static_assert(offsetof(FItemGetWayInfoTemplate, LinkID) == 0x000014, "Member 'FItemGetWayInfoTemplate::LinkID' has a wrong offset!");
static_assert(offsetof(FItemGetWayInfoTemplate, GetWayType) == 0x000018, "Member 'FItemGetWayInfoTemplate::GetWayType' has a wrong offset!");
static_assert(offsetof(FItemGetWayInfoTemplate, LinkType) == 0x00001C, "Member 'FItemGetWayInfoTemplate::LinkType' has a wrong offset!");
static_assert(offsetof(FItemGetWayInfoTemplate, Location) == 0x000020, "Member 'FItemGetWayInfoTemplate::Location' has a wrong offset!");

// ScriptStruct MirMobile.GuildTournamentRoundTemplate
// 0x0028 (0x0030 - 0x0008)
struct FGuildTournamentRoundTemplate final : public FTableRowBase
{
public:
	int32                                         RoundId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundType;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReadyTimeMinute;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RunTimeMinute;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinRewardId;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoseRewardId;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinPersonalRewardGroup;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LosePersonalRewardGroup;                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVPRewardId;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildTournamentRoundTemplate) == 0x000008, "Wrong alignment on FGuildTournamentRoundTemplate");
static_assert(sizeof(FGuildTournamentRoundTemplate) == 0x000030, "Wrong size on FGuildTournamentRoundTemplate");
static_assert(offsetof(FGuildTournamentRoundTemplate, RoundId) == 0x000008, "Member 'FGuildTournamentRoundTemplate::RoundId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRoundTemplate, RoundType) == 0x00000C, "Member 'FGuildTournamentRoundTemplate::RoundType' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRoundTemplate, NameSId) == 0x000010, "Member 'FGuildTournamentRoundTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRoundTemplate, ReadyTimeMinute) == 0x000014, "Member 'FGuildTournamentRoundTemplate::ReadyTimeMinute' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRoundTemplate, RunTimeMinute) == 0x000018, "Member 'FGuildTournamentRoundTemplate::RunTimeMinute' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRoundTemplate, WinRewardId) == 0x00001C, "Member 'FGuildTournamentRoundTemplate::WinRewardId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRoundTemplate, LoseRewardId) == 0x000020, "Member 'FGuildTournamentRoundTemplate::LoseRewardId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRoundTemplate, WinPersonalRewardGroup) == 0x000024, "Member 'FGuildTournamentRoundTemplate::WinPersonalRewardGroup' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRoundTemplate, LosePersonalRewardGroup) == 0x000028, "Member 'FGuildTournamentRoundTemplate::LosePersonalRewardGroup' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRoundTemplate, MVPRewardId) == 0x00002C, "Member 'FGuildTournamentRoundTemplate::MVPRewardId' has a wrong offset!");

// ScriptStruct MirMobile.BroadcastTemplate
// 0x0020 (0x0028 - 0x0008)
struct FBroadcastTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BrocastId;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentId;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainType;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubType;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmeltStep;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBroadcastTemplate) == 0x000008, "Wrong alignment on FBroadcastTemplate");
static_assert(sizeof(FBroadcastTemplate) == 0x000028, "Wrong size on FBroadcastTemplate");
static_assert(offsetof(FBroadcastTemplate, Name) == 0x000008, "Member 'FBroadcastTemplate::Name' has a wrong offset!");
static_assert(offsetof(FBroadcastTemplate, BrocastId) == 0x00000C, "Member 'FBroadcastTemplate::BrocastId' has a wrong offset!");
static_assert(offsetof(FBroadcastTemplate, ContentId) == 0x000010, "Member 'FBroadcastTemplate::ContentId' has a wrong offset!");
static_assert(offsetof(FBroadcastTemplate, MainType) == 0x000014, "Member 'FBroadcastTemplate::MainType' has a wrong offset!");
static_assert(offsetof(FBroadcastTemplate, SubType) == 0x000018, "Member 'FBroadcastTemplate::SubType' has a wrong offset!");
static_assert(offsetof(FBroadcastTemplate, Grade) == 0x00001C, "Member 'FBroadcastTemplate::Grade' has a wrong offset!");
static_assert(offsetof(FBroadcastTemplate, SmeltStep) == 0x000020, "Member 'FBroadcastTemplate::SmeltStep' has a wrong offset!");

// ScriptStruct MirMobile.SkillAttackTemplate
// 0x0258 (0x0260 - 0x0008)
struct FSkillAttackTemplate final : public FTableRowBase
{
public:
	int32                                         AttackID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AniIndex;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AniType;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainAttack;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextAttackLink;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactStartTime;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveType;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveAngleMin;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveAngleMax;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRange;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayMove;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewTarget;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackUseType;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetDistanceMin;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetDistanceMax;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetType;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetValue;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETARGET_SUBTYPE                               TargetSubType;                                     // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ImpactType;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImpactSpawnType;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ImpactTime;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StrikeDelay;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackAngle;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackDistanceMin;                                 // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackDistanceMax;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackWidth;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackHeight;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationOffset;                                    // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletType;                                        // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletMoveType;                                    // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletCount;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletSpeed;                                       // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletTime;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BulletSocketName;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchGapDelay;                                    // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletEffect;                                      // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletEffectScale;                                 // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurveData;                                         // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpeedData;                                         // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageType;                                        // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MulDamage;                                         // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMulDamage;                                  // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDamage;                                         // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpAddDamage;                                  // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageAttribute;                                   // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDamage;                                       // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMagicDamage;                                // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddMagicDamage;                                    // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpAddMagicDamage;                             // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActType;                                           // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperIgnore;                                       // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperArmor;                                        // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CCSTANCE;                                          // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrowdControlType;                                  // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrowdControlValue;                                 // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrowdControlHeight;                                // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrowdControlValueEx;                               // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrowdControlTime;                                  // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CCEffect;                                          // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CCEffectSocket;                                    // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CCEffectHeight;                                    // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CCEffectScale;                                     // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CCMaterialPath;                                    // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitReactionProb;                                   // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuideEffectApplyType;                              // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuideEffect;                                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuideEffectAliveTime;                              // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuideEffectScalingTime;                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActEffect;                                         // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitEffect;                                         // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHitEffect;                                 // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitEffectSound;                                    // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraShake;                                       // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DieReaction;                                       // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Buff;                                              // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                BulletRotationOffset;                              // 0x01A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletAngleSpeed;                                  // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MonScaleApply;                                     // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AniTime;                                           // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackRagePoint;                                   // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitRagePoint;                                      // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CCDirection;                                       // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillTotem;                                        // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillTotemTarget;                                  // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillTotemTime;                                    // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillTotemCount;                                   // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AggroRate;                                         // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Emissive_Dcolor;                                   // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Fresnel_Exponenth;                                 // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fresnel_BaseReflect;                               // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmissiveTime;                                      // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CCBuff;                                            // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CCUserCheck;                                       // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletCurveTime;                                   // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletHeight;                                      // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0x4C];                                     // 0x0214(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillAttackTemplate) == 0x000008, "Wrong alignment on FSkillAttackTemplate");
static_assert(sizeof(FSkillAttackTemplate) == 0x000260, "Wrong size on FSkillAttackTemplate");
static_assert(offsetof(FSkillAttackTemplate, AttackID) == 0x000008, "Member 'FSkillAttackTemplate::AttackID' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AniIndex) == 0x00000C, "Member 'FSkillAttackTemplate::AniIndex' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, SkillId) == 0x000010, "Member 'FSkillAttackTemplate::SkillId' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AniType) == 0x000014, "Member 'FSkillAttackTemplate::AniType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, MainAttack) == 0x000018, "Member 'FSkillAttackTemplate::MainAttack' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, NextAttackLink) == 0x00001C, "Member 'FSkillAttackTemplate::NextAttackLink' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, ImpactStartTime) == 0x000020, "Member 'FSkillAttackTemplate::ImpactStartTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, MoveType) == 0x000024, "Member 'FSkillAttackTemplate::MoveType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, MoveAngleMin) == 0x000028, "Member 'FSkillAttackTemplate::MoveAngleMin' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, MoveAngleMax) == 0x00002C, "Member 'FSkillAttackTemplate::MoveAngleMax' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, MoveRange) == 0x000030, "Member 'FSkillAttackTemplate::MoveRange' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, DelayMove) == 0x000034, "Member 'FSkillAttackTemplate::DelayMove' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, MoveTime) == 0x000038, "Member 'FSkillAttackTemplate::MoveTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, ViewTarget) == 0x00003C, "Member 'FSkillAttackTemplate::ViewTarget' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AttackUseType) == 0x000040, "Member 'FSkillAttackTemplate::AttackUseType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, TargetDistanceMin) == 0x000044, "Member 'FSkillAttackTemplate::TargetDistanceMin' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, TargetDistanceMax) == 0x000048, "Member 'FSkillAttackTemplate::TargetDistanceMax' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, TargetType) == 0x00004C, "Member 'FSkillAttackTemplate::TargetType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, TargetValue) == 0x000050, "Member 'FSkillAttackTemplate::TargetValue' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, TargetSubType) == 0x000054, "Member 'FSkillAttackTemplate::TargetSubType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, ImpactType) == 0x000058, "Member 'FSkillAttackTemplate::ImpactType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, ImpactSpawnType) == 0x00005C, "Member 'FSkillAttackTemplate::ImpactSpawnType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, ImpactTime) == 0x000060, "Member 'FSkillAttackTemplate::ImpactTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, StrikeDelay) == 0x000070, "Member 'FSkillAttackTemplate::StrikeDelay' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AttackAngle) == 0x000074, "Member 'FSkillAttackTemplate::AttackAngle' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AttackDistanceMin) == 0x000078, "Member 'FSkillAttackTemplate::AttackDistanceMin' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AttackDistanceMax) == 0x00007C, "Member 'FSkillAttackTemplate::AttackDistanceMax' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AttackWidth) == 0x000080, "Member 'FSkillAttackTemplate::AttackWidth' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AttackHeight) == 0x000084, "Member 'FSkillAttackTemplate::AttackHeight' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, LocationOffset) == 0x000088, "Member 'FSkillAttackTemplate::LocationOffset' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, RotationOffset) == 0x000094, "Member 'FSkillAttackTemplate::RotationOffset' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletType) == 0x000098, "Member 'FSkillAttackTemplate::BulletType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletMoveType) == 0x00009C, "Member 'FSkillAttackTemplate::BulletMoveType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletCount) == 0x0000A0, "Member 'FSkillAttackTemplate::BulletCount' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletSpeed) == 0x0000A4, "Member 'FSkillAttackTemplate::BulletSpeed' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletTime) == 0x0000A8, "Member 'FSkillAttackTemplate::BulletTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletSocketName) == 0x0000B0, "Member 'FSkillAttackTemplate::BulletSocketName' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, LaunchGapDelay) == 0x0000C0, "Member 'FSkillAttackTemplate::LaunchGapDelay' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletEffect) == 0x0000C4, "Member 'FSkillAttackTemplate::BulletEffect' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletEffectScale) == 0x0000C8, "Member 'FSkillAttackTemplate::BulletEffectScale' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CurveData) == 0x0000D0, "Member 'FSkillAttackTemplate::CurveData' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, SpeedData) == 0x0000E0, "Member 'FSkillAttackTemplate::SpeedData' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, DamageType) == 0x0000F0, "Member 'FSkillAttackTemplate::DamageType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, MulDamage) == 0x0000F4, "Member 'FSkillAttackTemplate::MulDamage' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, LevelUpMulDamage) == 0x0000F8, "Member 'FSkillAttackTemplate::LevelUpMulDamage' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AddDamage) == 0x0000FC, "Member 'FSkillAttackTemplate::AddDamage' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, LevelUpAddDamage) == 0x000100, "Member 'FSkillAttackTemplate::LevelUpAddDamage' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, DamageAttribute) == 0x000104, "Member 'FSkillAttackTemplate::DamageAttribute' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, MagicDamage) == 0x000108, "Member 'FSkillAttackTemplate::MagicDamage' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, LevelUpMagicDamage) == 0x00010C, "Member 'FSkillAttackTemplate::LevelUpMagicDamage' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AddMagicDamage) == 0x000110, "Member 'FSkillAttackTemplate::AddMagicDamage' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, LevelUpAddMagicDamage) == 0x000114, "Member 'FSkillAttackTemplate::LevelUpAddMagicDamage' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, ActType) == 0x000118, "Member 'FSkillAttackTemplate::ActType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, SuperIgnore) == 0x00011C, "Member 'FSkillAttackTemplate::SuperIgnore' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, SuperArmor) == 0x000120, "Member 'FSkillAttackTemplate::SuperArmor' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CCSTANCE) == 0x000124, "Member 'FSkillAttackTemplate::CCSTANCE' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CrowdControlType) == 0x000128, "Member 'FSkillAttackTemplate::CrowdControlType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CrowdControlValue) == 0x00012C, "Member 'FSkillAttackTemplate::CrowdControlValue' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CrowdControlHeight) == 0x000130, "Member 'FSkillAttackTemplate::CrowdControlHeight' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CrowdControlValueEx) == 0x000134, "Member 'FSkillAttackTemplate::CrowdControlValueEx' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CrowdControlTime) == 0x000138, "Member 'FSkillAttackTemplate::CrowdControlTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CCEffect) == 0x00013C, "Member 'FSkillAttackTemplate::CCEffect' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CCEffectSocket) == 0x000140, "Member 'FSkillAttackTemplate::CCEffectSocket' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CCEffectHeight) == 0x000148, "Member 'FSkillAttackTemplate::CCEffectHeight' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CCEffectScale) == 0x00014C, "Member 'FSkillAttackTemplate::CCEffectScale' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CCMaterialPath) == 0x000150, "Member 'FSkillAttackTemplate::CCMaterialPath' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, HitReactionProb) == 0x000160, "Member 'FSkillAttackTemplate::HitReactionProb' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, GuideEffectApplyType) == 0x000164, "Member 'FSkillAttackTemplate::GuideEffectApplyType' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, GuideEffect) == 0x000168, "Member 'FSkillAttackTemplate::GuideEffect' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, GuideEffectAliveTime) == 0x00016C, "Member 'FSkillAttackTemplate::GuideEffectAliveTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, GuideEffectScalingTime) == 0x000170, "Member 'FSkillAttackTemplate::GuideEffectScalingTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, ActEffect) == 0x000174, "Member 'FSkillAttackTemplate::ActEffect' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, HitEffect) == 0x000178, "Member 'FSkillAttackTemplate::HitEffect' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CriticalHitEffect) == 0x00017C, "Member 'FSkillAttackTemplate::CriticalHitEffect' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, HitEffectSound) == 0x000180, "Member 'FSkillAttackTemplate::HitEffectSound' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CameraShake) == 0x000184, "Member 'FSkillAttackTemplate::CameraShake' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, DieReaction) == 0x000188, "Member 'FSkillAttackTemplate::DieReaction' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, Buff) == 0x000190, "Member 'FSkillAttackTemplate::Buff' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletRotationOffset) == 0x0001A0, "Member 'FSkillAttackTemplate::BulletRotationOffset' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletAngleSpeed) == 0x0001AC, "Member 'FSkillAttackTemplate::BulletAngleSpeed' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, MonScaleApply) == 0x0001B0, "Member 'FSkillAttackTemplate::MonScaleApply' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AniTime) == 0x0001B4, "Member 'FSkillAttackTemplate::AniTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AttackRagePoint) == 0x0001B8, "Member 'FSkillAttackTemplate::AttackRagePoint' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, HitRagePoint) == 0x0001BC, "Member 'FSkillAttackTemplate::HitRagePoint' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CCDirection) == 0x0001C0, "Member 'FSkillAttackTemplate::CCDirection' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, SkillTotem) == 0x0001C4, "Member 'FSkillAttackTemplate::SkillTotem' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, SkillTotemTarget) == 0x0001C8, "Member 'FSkillAttackTemplate::SkillTotemTarget' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, SkillTotemTime) == 0x0001CC, "Member 'FSkillAttackTemplate::SkillTotemTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, SkillTotemCount) == 0x0001D0, "Member 'FSkillAttackTemplate::SkillTotemCount' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, AggroRate) == 0x0001D4, "Member 'FSkillAttackTemplate::AggroRate' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, Emissive_Dcolor) == 0x0001D8, "Member 'FSkillAttackTemplate::Emissive_Dcolor' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, Fresnel_Exponenth) == 0x0001E8, "Member 'FSkillAttackTemplate::Fresnel_Exponenth' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, Fresnel_BaseReflect) == 0x0001EC, "Member 'FSkillAttackTemplate::Fresnel_BaseReflect' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, EmissiveTime) == 0x0001F0, "Member 'FSkillAttackTemplate::EmissiveTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CCBuff) == 0x0001F8, "Member 'FSkillAttackTemplate::CCBuff' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, CCUserCheck) == 0x000208, "Member 'FSkillAttackTemplate::CCUserCheck' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletCurveTime) == 0x00020C, "Member 'FSkillAttackTemplate::BulletCurveTime' has a wrong offset!");
static_assert(offsetof(FSkillAttackTemplate, BulletHeight) == 0x000210, "Member 'FSkillAttackTemplate::BulletHeight' has a wrong offset!");

// ScriptStruct MirMobile.BuffAttackTemplate
// 0x00D0 (0x00D8 - 0x0008)
struct FBuffAttackTemplate final : public FTableRowBase
{
public:
	int32                                         BuffAttackID;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetType;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetValue;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImpactType;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackDistanceMax;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackHeight;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MulDamage;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMulDamage;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDamage;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpAddDamage;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDamage;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMagicDamage;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddMagicDamage;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpAddMagicDamage;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperIgnore;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CCSTANCE;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrowdControlType;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CCDirection;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrowdControlValue;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrowdControlHeight;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrowdControlValueEx;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrowdControlTime;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CCEffect;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CCEffectSocket;                                    // 0x0064(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CCEffectHeight;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CCEffectScale;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CCMaterialPath;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitEffect;                                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHitEffect;                                 // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x48];                                      // 0x0090(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffAttackTemplate) == 0x000008, "Wrong alignment on FBuffAttackTemplate");
static_assert(sizeof(FBuffAttackTemplate) == 0x0000D8, "Wrong size on FBuffAttackTemplate");
static_assert(offsetof(FBuffAttackTemplate, BuffAttackID) == 0x000008, "Member 'FBuffAttackTemplate::BuffAttackID' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, TargetType) == 0x00000C, "Member 'FBuffAttackTemplate::TargetType' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, TargetValue) == 0x000010, "Member 'FBuffAttackTemplate::TargetValue' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, ImpactType) == 0x000014, "Member 'FBuffAttackTemplate::ImpactType' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, AttackDistanceMax) == 0x000018, "Member 'FBuffAttackTemplate::AttackDistanceMax' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, AttackHeight) == 0x00001C, "Member 'FBuffAttackTemplate::AttackHeight' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, MulDamage) == 0x000020, "Member 'FBuffAttackTemplate::MulDamage' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, LevelUpMulDamage) == 0x000024, "Member 'FBuffAttackTemplate::LevelUpMulDamage' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, AddDamage) == 0x000028, "Member 'FBuffAttackTemplate::AddDamage' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, LevelUpAddDamage) == 0x00002C, "Member 'FBuffAttackTemplate::LevelUpAddDamage' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, MagicDamage) == 0x000030, "Member 'FBuffAttackTemplate::MagicDamage' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, LevelUpMagicDamage) == 0x000034, "Member 'FBuffAttackTemplate::LevelUpMagicDamage' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, AddMagicDamage) == 0x000038, "Member 'FBuffAttackTemplate::AddMagicDamage' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, LevelUpAddMagicDamage) == 0x00003C, "Member 'FBuffAttackTemplate::LevelUpAddMagicDamage' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, SuperIgnore) == 0x000040, "Member 'FBuffAttackTemplate::SuperIgnore' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CCSTANCE) == 0x000044, "Member 'FBuffAttackTemplate::CCSTANCE' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CrowdControlType) == 0x000048, "Member 'FBuffAttackTemplate::CrowdControlType' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CCDirection) == 0x00004C, "Member 'FBuffAttackTemplate::CCDirection' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CrowdControlValue) == 0x000050, "Member 'FBuffAttackTemplate::CrowdControlValue' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CrowdControlHeight) == 0x000054, "Member 'FBuffAttackTemplate::CrowdControlHeight' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CrowdControlValueEx) == 0x000058, "Member 'FBuffAttackTemplate::CrowdControlValueEx' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CrowdControlTime) == 0x00005C, "Member 'FBuffAttackTemplate::CrowdControlTime' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CCEffect) == 0x000060, "Member 'FBuffAttackTemplate::CCEffect' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CCEffectSocket) == 0x000064, "Member 'FBuffAttackTemplate::CCEffectSocket' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CCEffectHeight) == 0x00006C, "Member 'FBuffAttackTemplate::CCEffectHeight' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CCEffectScale) == 0x000070, "Member 'FBuffAttackTemplate::CCEffectScale' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CCMaterialPath) == 0x000078, "Member 'FBuffAttackTemplate::CCMaterialPath' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, HitEffect) == 0x000088, "Member 'FBuffAttackTemplate::HitEffect' has a wrong offset!");
static_assert(offsetof(FBuffAttackTemplate, CriticalHitEffect) == 0x00008C, "Member 'FBuffAttackTemplate::CriticalHitEffect' has a wrong offset!");

// ScriptStruct MirMobile.ATTACK_DATA
// 0x0020 (0x0020 - 0x0000)
struct FATTACK_DATA final
{
public:
	float                                         CombatPoint;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillLevel;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalAttack;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagicAttack;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MulDamage;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelUpMulDamage;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddDamage;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelUpAddDamage;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATTACK_DATA) == 0x000004, "Wrong alignment on FATTACK_DATA");
static_assert(sizeof(FATTACK_DATA) == 0x000020, "Wrong size on FATTACK_DATA");
static_assert(offsetof(FATTACK_DATA, CombatPoint) == 0x000000, "Member 'FATTACK_DATA::CombatPoint' has a wrong offset!");
static_assert(offsetof(FATTACK_DATA, SkillLevel) == 0x000004, "Member 'FATTACK_DATA::SkillLevel' has a wrong offset!");
static_assert(offsetof(FATTACK_DATA, PhysicalAttack) == 0x000008, "Member 'FATTACK_DATA::PhysicalAttack' has a wrong offset!");
static_assert(offsetof(FATTACK_DATA, MagicAttack) == 0x00000C, "Member 'FATTACK_DATA::MagicAttack' has a wrong offset!");
static_assert(offsetof(FATTACK_DATA, MulDamage) == 0x000010, "Member 'FATTACK_DATA::MulDamage' has a wrong offset!");
static_assert(offsetof(FATTACK_DATA, LevelUpMulDamage) == 0x000014, "Member 'FATTACK_DATA::LevelUpMulDamage' has a wrong offset!");
static_assert(offsetof(FATTACK_DATA, AddDamage) == 0x000018, "Member 'FATTACK_DATA::AddDamage' has a wrong offset!");
static_assert(offsetof(FATTACK_DATA, LevelUpAddDamage) == 0x00001C, "Member 'FATTACK_DATA::LevelUpAddDamage' has a wrong offset!");

// ScriptStruct MirMobile.ClosedTrainingLevelTemplate
// 0x0040 (0x0048 - 0x0008)
struct FClosedTrainingLevelTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingStatusId;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingLevel;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_NeedCostId;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_NeedCostCount;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_NeedUse01Id;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_NeedItem01Count;                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_NeedUse02Id;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_NeedItem02Count;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_Success;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_Fail;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Training_CriticalFail;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot_Bg_Grade;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClosedTrainingLevelTemplate) == 0x000008, "Wrong alignment on FClosedTrainingLevelTemplate");
static_assert(sizeof(FClosedTrainingLevelTemplate) == 0x000048, "Wrong size on FClosedTrainingLevelTemplate");
static_assert(offsetof(FClosedTrainingLevelTemplate, Name) == 0x000008, "Member 'FClosedTrainingLevelTemplate::Name' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, UniqueId) == 0x00000C, "Member 'FClosedTrainingLevelTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, TrainingStatusId) == 0x000010, "Member 'FClosedTrainingLevelTemplate::TrainingStatusId' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, TrainingLevel) == 0x000014, "Member 'FClosedTrainingLevelTemplate::TrainingLevel' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, AttributeType) == 0x000018, "Member 'FClosedTrainingLevelTemplate::AttributeType' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, AttributeValue) == 0x00001C, "Member 'FClosedTrainingLevelTemplate::AttributeValue' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, Training_NeedCostId) == 0x000020, "Member 'FClosedTrainingLevelTemplate::Training_NeedCostId' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, Training_NeedCostCount) == 0x000024, "Member 'FClosedTrainingLevelTemplate::Training_NeedCostCount' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, Training_NeedUse01Id) == 0x000028, "Member 'FClosedTrainingLevelTemplate::Training_NeedUse01Id' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, Training_NeedItem01Count) == 0x00002C, "Member 'FClosedTrainingLevelTemplate::Training_NeedItem01Count' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, Training_NeedUse02Id) == 0x000030, "Member 'FClosedTrainingLevelTemplate::Training_NeedUse02Id' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, Training_NeedItem02Count) == 0x000034, "Member 'FClosedTrainingLevelTemplate::Training_NeedItem02Count' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, Training_Success) == 0x000038, "Member 'FClosedTrainingLevelTemplate::Training_Success' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, Training_Fail) == 0x00003C, "Member 'FClosedTrainingLevelTemplate::Training_Fail' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, Training_CriticalFail) == 0x000040, "Member 'FClosedTrainingLevelTemplate::Training_CriticalFail' has a wrong offset!");
static_assert(offsetof(FClosedTrainingLevelTemplate, Slot_Bg_Grade) == 0x000044, "Member 'FClosedTrainingLevelTemplate::Slot_Bg_Grade' has a wrong offset!");

// ScriptStruct MirMobile.GuildCoopMissionGroupListTemplate
// 0x0010 (0x0018 - 0x0008)
struct FGuildCoopMissionGroupListTemplate final : public FTableRowBase
{
public:
	int32                                         GuildCoopMissionListId;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevLevel;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCoopMissionGroupId;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupRate;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildCoopMissionGroupListTemplate) == 0x000008, "Wrong alignment on FGuildCoopMissionGroupListTemplate");
static_assert(sizeof(FGuildCoopMissionGroupListTemplate) == 0x000018, "Wrong size on FGuildCoopMissionGroupListTemplate");
static_assert(offsetof(FGuildCoopMissionGroupListTemplate, GuildCoopMissionListId) == 0x000008, "Member 'FGuildCoopMissionGroupListTemplate::GuildCoopMissionListId' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupListTemplate, DevLevel) == 0x00000C, "Member 'FGuildCoopMissionGroupListTemplate::DevLevel' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupListTemplate, GuildCoopMissionGroupId) == 0x000010, "Member 'FGuildCoopMissionGroupListTemplate::GuildCoopMissionGroupId' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionGroupListTemplate, GroupRate) == 0x000014, "Member 'FGuildCoopMissionGroupListTemplate::GroupRate' has a wrong offset!");

// ScriptStruct MirMobile.BuffGuildDevTemplate
// 0x0010 (0x0018 - 0x0008)
struct FBuffGuildDevTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffType;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffGuildDevTemplate) == 0x000008, "Wrong alignment on FBuffGuildDevTemplate");
static_assert(sizeof(FBuffGuildDevTemplate) == 0x000018, "Wrong size on FBuffGuildDevTemplate");
static_assert(offsetof(FBuffGuildDevTemplate, Name) == 0x000008, "Member 'FBuffGuildDevTemplate::Name' has a wrong offset!");
static_assert(offsetof(FBuffGuildDevTemplate, BuffId) == 0x00000C, "Member 'FBuffGuildDevTemplate::BuffId' has a wrong offset!");
static_assert(offsetof(FBuffGuildDevTemplate, BuffType) == 0x000010, "Member 'FBuffGuildDevTemplate::BuffType' has a wrong offset!");

// ScriptStruct MirMobile.ItemTranscendenceDefineTemplate
// 0x0080 (0x0088 - 0x0008)
struct FItemTranscendenceDefineTemplate final : public FTableRowBase
{
public:
	int32                                         TranID;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceGroup;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceStep;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostType1;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostValue1;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostType2;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqItemUseId;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqItemValue;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChooseItemUseId;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChooseItemValue;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChooseItemAddRatioPer;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostValue2;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceSuccessRatio;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceDestroyRatio;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceEffectValue;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemID1;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemRatio1;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemCntMin1;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemCntMax1;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemID2;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemRatio2;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemCntMin2;                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemCntMax2;                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemID3;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemRatio3;                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemCntMin3;                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemCntMax3;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemID4;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemRatio4;                              // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemCntMin4;                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceFailItemCntMax4;                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemTranscendenceDefineTemplate) == 0x000008, "Wrong alignment on FItemTranscendenceDefineTemplate");
static_assert(sizeof(FItemTranscendenceDefineTemplate) == 0x000088, "Wrong size on FItemTranscendenceDefineTemplate");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranID) == 0x000008, "Member 'FItemTranscendenceDefineTemplate::TranID' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceGroup) == 0x00000C, "Member 'FItemTranscendenceDefineTemplate::TranceGroup' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceStep) == 0x000010, "Member 'FItemTranscendenceDefineTemplate::TranceStep' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, ReqCostType1) == 0x000014, "Member 'FItemTranscendenceDefineTemplate::ReqCostType1' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, ReqCostValue1) == 0x000018, "Member 'FItemTranscendenceDefineTemplate::ReqCostValue1' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, ReqCostType2) == 0x00001C, "Member 'FItemTranscendenceDefineTemplate::ReqCostType2' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, ReqItemUseId) == 0x000020, "Member 'FItemTranscendenceDefineTemplate::ReqItemUseId' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, ReqItemValue) == 0x000024, "Member 'FItemTranscendenceDefineTemplate::ReqItemValue' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, ChooseItemUseId) == 0x000028, "Member 'FItemTranscendenceDefineTemplate::ChooseItemUseId' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, ChooseItemValue) == 0x00002C, "Member 'FItemTranscendenceDefineTemplate::ChooseItemValue' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, ChooseItemAddRatioPer) == 0x000030, "Member 'FItemTranscendenceDefineTemplate::ChooseItemAddRatioPer' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, ReqCostValue2) == 0x000034, "Member 'FItemTranscendenceDefineTemplate::ReqCostValue2' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceSuccessRatio) == 0x000038, "Member 'FItemTranscendenceDefineTemplate::TranceSuccessRatio' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceDestroyRatio) == 0x00003C, "Member 'FItemTranscendenceDefineTemplate::TranceDestroyRatio' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceEffectValue) == 0x000040, "Member 'FItemTranscendenceDefineTemplate::TranceEffectValue' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemID1) == 0x000044, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemID1' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemRatio1) == 0x000048, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemRatio1' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemCntMin1) == 0x00004C, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemCntMin1' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemCntMax1) == 0x000050, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemCntMax1' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemID2) == 0x000054, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemID2' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemRatio2) == 0x000058, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemRatio2' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemCntMin2) == 0x00005C, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemCntMin2' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemCntMax2) == 0x000060, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemCntMax2' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemID3) == 0x000064, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemID3' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemRatio3) == 0x000068, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemRatio3' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemCntMin3) == 0x00006C, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemCntMin3' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemCntMax3) == 0x000070, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemCntMax3' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemID4) == 0x000074, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemID4' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemRatio4) == 0x000078, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemRatio4' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemCntMin4) == 0x00007C, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemCntMin4' has a wrong offset!");
static_assert(offsetof(FItemTranscendenceDefineTemplate, TranceFailItemCntMax4) == 0x000080, "Member 'FItemTranscendenceDefineTemplate::TranceFailItemCntMax4' has a wrong offset!");

// ScriptStruct MirMobile.BuffPartyTemplate
// 0x0010 (0x0018 - 0x0008)
struct FBuffPartyTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionPeople;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyProfitValue1;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyProfitValue2;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffPartyTemplate) == 0x000008, "Wrong alignment on FBuffPartyTemplate");
static_assert(sizeof(FBuffPartyTemplate) == 0x000018, "Wrong size on FBuffPartyTemplate");
static_assert(offsetof(FBuffPartyTemplate, Name) == 0x000008, "Member 'FBuffPartyTemplate::Name' has a wrong offset!");
static_assert(offsetof(FBuffPartyTemplate, ConditionPeople) == 0x00000C, "Member 'FBuffPartyTemplate::ConditionPeople' has a wrong offset!");
static_assert(offsetof(FBuffPartyTemplate, PartyProfitValue1) == 0x000010, "Member 'FBuffPartyTemplate::PartyProfitValue1' has a wrong offset!");
static_assert(offsetof(FBuffPartyTemplate, PartyProfitValue2) == 0x000014, "Member 'FBuffPartyTemplate::PartyProfitValue2' has a wrong offset!");

// ScriptStruct MirMobile.GuildDominionPBSTemplate
// 0x0060 (0x0068 - 0x0008)
struct FGuildDominionPBSTemplate final : public FTableRowBase
{
public:
	int32                                         DominionPBSId;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSGrade;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionOrder;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSNameId;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSFrameId;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSType;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSAuthority_Manage;                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSAuthority_Tax;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSAuthority_PBS;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSAuthority_Buff;                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSAuthority_PK;                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSAuthority_Prize;                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSAuthority_TaxRate;                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSType1;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSType2;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSType3;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSStatusType1;                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSStatusType2;                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSStatusType3;                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSStatusValue1;                           // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSStatusValue2;                           // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSStatusValue3;                           // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPBSAuthority_Mail;                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDominionPBSTemplate) == 0x000008, "Wrong alignment on FGuildDominionPBSTemplate");
static_assert(sizeof(FGuildDominionPBSTemplate) == 0x000068, "Wrong size on FGuildDominionPBSTemplate");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSId) == 0x000008, "Member 'FGuildDominionPBSTemplate::DominionPBSId' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSGrade) == 0x00000C, "Member 'FGuildDominionPBSTemplate::DominionPBSGrade' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionOrder) == 0x000010, "Member 'FGuildDominionPBSTemplate::DominionOrder' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSNameId) == 0x000014, "Member 'FGuildDominionPBSTemplate::DominionPBSNameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSFrameId) == 0x000018, "Member 'FGuildDominionPBSTemplate::DominionPBSFrameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSType) == 0x00001C, "Member 'FGuildDominionPBSTemplate::DominionPBSType' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSAuthority_Manage) == 0x000020, "Member 'FGuildDominionPBSTemplate::DominionPBSAuthority_Manage' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSAuthority_Tax) == 0x000024, "Member 'FGuildDominionPBSTemplate::DominionPBSAuthority_Tax' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSAuthority_PBS) == 0x000028, "Member 'FGuildDominionPBSTemplate::DominionPBSAuthority_PBS' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSAuthority_Buff) == 0x00002C, "Member 'FGuildDominionPBSTemplate::DominionPBSAuthority_Buff' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSAuthority_PK) == 0x000030, "Member 'FGuildDominionPBSTemplate::DominionPBSAuthority_PK' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSAuthority_Prize) == 0x000034, "Member 'FGuildDominionPBSTemplate::DominionPBSAuthority_Prize' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSAuthority_TaxRate) == 0x000038, "Member 'FGuildDominionPBSTemplate::DominionPBSAuthority_TaxRate' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSType1) == 0x00003C, "Member 'FGuildDominionPBSTemplate::DominionPBSType1' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSType2) == 0x000040, "Member 'FGuildDominionPBSTemplate::DominionPBSType2' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSType3) == 0x000044, "Member 'FGuildDominionPBSTemplate::DominionPBSType3' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSStatusType1) == 0x000048, "Member 'FGuildDominionPBSTemplate::DominionPBSStatusType1' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSStatusType2) == 0x00004C, "Member 'FGuildDominionPBSTemplate::DominionPBSStatusType2' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSStatusType3) == 0x000050, "Member 'FGuildDominionPBSTemplate::DominionPBSStatusType3' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSStatusValue1) == 0x000054, "Member 'FGuildDominionPBSTemplate::DominionPBSStatusValue1' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSStatusValue2) == 0x000058, "Member 'FGuildDominionPBSTemplate::DominionPBSStatusValue2' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSStatusValue3) == 0x00005C, "Member 'FGuildDominionPBSTemplate::DominionPBSStatusValue3' has a wrong offset!");
static_assert(offsetof(FGuildDominionPBSTemplate, DominionPBSAuthority_Mail) == 0x000060, "Member 'FGuildDominionPBSTemplate::DominionPBSAuthority_Mail' has a wrong offset!");

// ScriptStruct MirMobile.ChannelTemplate
// 0x0010 (0x0018 - 0x0008)
struct FChannelTemplate final : public FTableRowBase
{
public:
	int32                                         ChannelId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ch_DefaultCount;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ch_MaxCount;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChannelTemplate) == 0x000008, "Wrong alignment on FChannelTemplate");
static_assert(sizeof(FChannelTemplate) == 0x000018, "Wrong size on FChannelTemplate");
static_assert(offsetof(FChannelTemplate, ChannelId) == 0x000008, "Member 'FChannelTemplate::ChannelId' has a wrong offset!");
static_assert(offsetof(FChannelTemplate, Ch_DefaultCount) == 0x00000C, "Member 'FChannelTemplate::Ch_DefaultCount' has a wrong offset!");
static_assert(offsetof(FChannelTemplate, Ch_MaxCount) == 0x000010, "Member 'FChannelTemplate::Ch_MaxCount' has a wrong offset!");

// ScriptStruct MirMobile.NpcItemCraftGroupTemplate
// 0x0010 (0x0018 - 0x0008)
struct FNpcItemCraftGroupTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CraftGroupId;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CraftId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabVertical;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcItemCraftGroupTemplate) == 0x000008, "Wrong alignment on FNpcItemCraftGroupTemplate");
static_assert(sizeof(FNpcItemCraftGroupTemplate) == 0x000018, "Wrong size on FNpcItemCraftGroupTemplate");
static_assert(offsetof(FNpcItemCraftGroupTemplate, RowId) == 0x000008, "Member 'FNpcItemCraftGroupTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftGroupTemplate, CraftGroupId) == 0x00000C, "Member 'FNpcItemCraftGroupTemplate::CraftGroupId' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftGroupTemplate, CraftId) == 0x000010, "Member 'FNpcItemCraftGroupTemplate::CraftId' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftGroupTemplate, TabVertical) == 0x000014, "Member 'FNpcItemCraftGroupTemplate::TabVertical' has a wrong offset!");

// ScriptStruct MirMobile.ItemGetWayUITemplate
// 0x0028 (0x0030 - 0x0008)
struct FItemGetWayUITemplate final : public FTableRowBase
{
public:
	int32                                         GetWayId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemGetWay;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         GetWayFilterType;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetWayFilterValueMin;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetWayFilterValueMax;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemGetWayUITemplate) == 0x000008, "Wrong alignment on FItemGetWayUITemplate");
static_assert(sizeof(FItemGetWayUITemplate) == 0x000030, "Wrong size on FItemGetWayUITemplate");
static_assert(offsetof(FItemGetWayUITemplate, GetWayId) == 0x000008, "Member 'FItemGetWayUITemplate::GetWayId' has a wrong offset!");
static_assert(offsetof(FItemGetWayUITemplate, ItemGetWay) == 0x000010, "Member 'FItemGetWayUITemplate::ItemGetWay' has a wrong offset!");
static_assert(offsetof(FItemGetWayUITemplate, GetWayFilterType) == 0x000020, "Member 'FItemGetWayUITemplate::GetWayFilterType' has a wrong offset!");
static_assert(offsetof(FItemGetWayUITemplate, GetWayFilterValueMin) == 0x000024, "Member 'FItemGetWayUITemplate::GetWayFilterValueMin' has a wrong offset!");
static_assert(offsetof(FItemGetWayUITemplate, GetWayFilterValueMax) == 0x000028, "Member 'FItemGetWayUITemplate::GetWayFilterValueMax' has a wrong offset!");

// ScriptStruct MirMobile.CharacterExpBoosterItemTemplate
// 0x0010 (0x0018 - 0x0008)
struct FCharacterExpBoosterItemTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnergyTime_Charge;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterExpBoosterItemTemplate) == 0x000008, "Wrong alignment on FCharacterExpBoosterItemTemplate");
static_assert(sizeof(FCharacterExpBoosterItemTemplate) == 0x000018, "Wrong size on FCharacterExpBoosterItemTemplate");
static_assert(offsetof(FCharacterExpBoosterItemTemplate, Name) == 0x000008, "Member 'FCharacterExpBoosterItemTemplate::Name' has a wrong offset!");
static_assert(offsetof(FCharacterExpBoosterItemTemplate, ItemId) == 0x00000C, "Member 'FCharacterExpBoosterItemTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FCharacterExpBoosterItemTemplate, EnergyTime_Charge) == 0x000010, "Member 'FCharacterExpBoosterItemTemplate::EnergyTime_Charge' has a wrong offset!");

// ScriptStruct MirMobile.HEAVEN_TRAINING_LEVELTemplate
// 0x0098 (0x00A0 - 0x0008)
struct FHEAVEN_TRAINING_LEVELTemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTrainingGroupId;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Grade;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Level;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_MinLevel;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_MaxLevel;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NodeGroup;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status_Id;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status_Value;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedCostId;                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedCostCount;                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedUse01Id;                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedItem01Count;                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedUse02Id;                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedItem02Count;                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedUse03Id;                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedItem03Count;                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedUse04Id;                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedItem04Count;                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Success;                            // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Fail;                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_CriticalFail;                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_FailBonus;                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_CriticalFailBonus;                  // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_CriticalFailTimeSec;                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_GuildHelpTimeSec;                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Success_Up1Level;                                  // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Success_Up2Level;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Success_Up3Level;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalFail_Down1Level;                           // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalFail_Down2Level;                           // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalFail_Down3Level;                           // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Success_NextLevel;                                 // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Before_UniqueId;                                   // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot_Bg_Grade;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHEAVEN_TRAINING_LEVELTemplate) == 0x000008, "Wrong alignment on FHEAVEN_TRAINING_LEVELTemplate");
static_assert(sizeof(FHEAVEN_TRAINING_LEVELTemplate) == 0x0000A0, "Wrong size on FHEAVEN_TRAINING_LEVELTemplate");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, UniqueId) == 0x000008, "Member 'FHEAVEN_TRAINING_LEVELTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTrainingGroupId) == 0x00000C, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTrainingGroupId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, PhaseId) == 0x000010, "Member 'FHEAVEN_TRAINING_LEVELTemplate::PhaseId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, ClassID) == 0x000014, "Member 'FHEAVEN_TRAINING_LEVELTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_Grade) == 0x000018, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_Grade' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_Level) == 0x00001C, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_Level' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_MinLevel) == 0x000020, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_MinLevel' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_MaxLevel) == 0x000024, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_MaxLevel' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NodeGroup) == 0x000028, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NodeGroup' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, Status_Id) == 0x00002C, "Member 'FHEAVEN_TRAINING_LEVELTemplate::Status_Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, Status_Value) == 0x000030, "Member 'FHEAVEN_TRAINING_LEVELTemplate::Status_Value' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NeedCostId) == 0x000034, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NeedCostId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NeedCostCount) == 0x000038, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NeedCostCount' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NeedUse01Id) == 0x00003C, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NeedUse01Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NeedItem01Count) == 0x000040, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NeedItem01Count' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NeedUse02Id) == 0x000044, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NeedUse02Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NeedItem02Count) == 0x000048, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NeedItem02Count' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NeedUse03Id) == 0x00004C, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NeedUse03Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NeedItem03Count) == 0x000050, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NeedItem03Count' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NeedUse04Id) == 0x000054, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NeedUse04Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_NeedItem04Count) == 0x000058, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_NeedItem04Count' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_Success) == 0x00005C, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_Success' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_Fail) == 0x000060, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_Fail' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_CriticalFail) == 0x000064, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_CriticalFail' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_FailBonus) == 0x000068, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_FailBonus' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_CriticalFailBonus) == 0x00006C, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_CriticalFailBonus' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_CriticalFailTimeSec) == 0x000070, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_CriticalFailTimeSec' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, HeavenTraining_GuildHelpTimeSec) == 0x000074, "Member 'FHEAVEN_TRAINING_LEVELTemplate::HeavenTraining_GuildHelpTimeSec' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, Success_Up1Level) == 0x000078, "Member 'FHEAVEN_TRAINING_LEVELTemplate::Success_Up1Level' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, Success_Up2Level) == 0x00007C, "Member 'FHEAVEN_TRAINING_LEVELTemplate::Success_Up2Level' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, Success_Up3Level) == 0x000080, "Member 'FHEAVEN_TRAINING_LEVELTemplate::Success_Up3Level' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, CriticalFail_Down1Level) == 0x000084, "Member 'FHEAVEN_TRAINING_LEVELTemplate::CriticalFail_Down1Level' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, CriticalFail_Down2Level) == 0x000088, "Member 'FHEAVEN_TRAINING_LEVELTemplate::CriticalFail_Down2Level' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, CriticalFail_Down3Level) == 0x00008C, "Member 'FHEAVEN_TRAINING_LEVELTemplate::CriticalFail_Down3Level' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, Success_NextLevel) == 0x000090, "Member 'FHEAVEN_TRAINING_LEVELTemplate::Success_NextLevel' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, Before_UniqueId) == 0x000094, "Member 'FHEAVEN_TRAINING_LEVELTemplate::Before_UniqueId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_LEVELTemplate, Slot_Bg_Grade) == 0x000098, "Member 'FHEAVEN_TRAINING_LEVELTemplate::Slot_Bg_Grade' has a wrong offset!");

// ScriptStruct MirMobile.CharacterMasteryTemplate
// 0x0050 (0x0058 - 0x0008)
struct FCharacterMasteryTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNumber;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryCount;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryItemUseId1;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryItemUseId1Count;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryItemUseId2;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryItemUseId2Count;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryItemUseId3;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryItemUseId3Count;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryItemUseId4;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryItemUseId4Count;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryCostValueType;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryCostValue;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasterySuccessProbability;                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status1Type;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status1Value;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status2Type;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status2Value;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterMasteryTemplate) == 0x000008, "Wrong alignment on FCharacterMasteryTemplate");
static_assert(sizeof(FCharacterMasteryTemplate) == 0x000058, "Wrong size on FCharacterMasteryTemplate");
static_assert(offsetof(FCharacterMasteryTemplate, RowId) == 0x000008, "Member 'FCharacterMasteryTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, ClassID) == 0x00000C, "Member 'FCharacterMasteryTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, SlotNumber) == 0x000010, "Member 'FCharacterMasteryTemplate::SlotNumber' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryCount) == 0x000014, "Member 'FCharacterMasteryTemplate::MasteryCount' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryItemUseId1) == 0x000018, "Member 'FCharacterMasteryTemplate::MasteryItemUseId1' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryItemUseId1Count) == 0x00001C, "Member 'FCharacterMasteryTemplate::MasteryItemUseId1Count' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryItemUseId2) == 0x000020, "Member 'FCharacterMasteryTemplate::MasteryItemUseId2' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryItemUseId2Count) == 0x000024, "Member 'FCharacterMasteryTemplate::MasteryItemUseId2Count' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryItemUseId3) == 0x000028, "Member 'FCharacterMasteryTemplate::MasteryItemUseId3' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryItemUseId3Count) == 0x00002C, "Member 'FCharacterMasteryTemplate::MasteryItemUseId3Count' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryItemUseId4) == 0x000030, "Member 'FCharacterMasteryTemplate::MasteryItemUseId4' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryItemUseId4Count) == 0x000034, "Member 'FCharacterMasteryTemplate::MasteryItemUseId4Count' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryCostValueType) == 0x000038, "Member 'FCharacterMasteryTemplate::MasteryCostValueType' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasteryCostValue) == 0x00003C, "Member 'FCharacterMasteryTemplate::MasteryCostValue' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, MasterySuccessProbability) == 0x000040, "Member 'FCharacterMasteryTemplate::MasterySuccessProbability' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, Status1Type) == 0x000044, "Member 'FCharacterMasteryTemplate::Status1Type' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, Status1Value) == 0x000048, "Member 'FCharacterMasteryTemplate::Status1Value' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, Status2Type) == 0x00004C, "Member 'FCharacterMasteryTemplate::Status2Type' has a wrong offset!");
static_assert(offsetof(FCharacterMasteryTemplate, Status2Value) == 0x000050, "Member 'FCharacterMasteryTemplate::Status2Value' has a wrong offset!");

// ScriptStruct MirMobile.EffectSpawnInfo
// 0x003C (0x003C - 0x0000)
struct alignas(0x04) FEffectSpawnInfo
{
public:
	uint8                                         Pad_0[0x3C];                                       // 0x0000(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEffectSpawnInfo) == 0x000004, "Wrong alignment on FEffectSpawnInfo");
static_assert(sizeof(FEffectSpawnInfo) == 0x00003C, "Wrong size on FEffectSpawnInfo");

// ScriptStruct MirMobile.ParticleSpawnInfo
// 0x0044 (0x0080 - 0x003C)
struct alignas(0x08) FParticleSpawnInfo final : public FEffectSpawnInfo
{
public:
	uint8                                         Pad_3C[0x44];                                      // 0x003C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParticleSpawnInfo) == 0x000008, "Wrong alignment on FParticleSpawnInfo");
static_assert(sizeof(FParticleSpawnInfo) == 0x000080, "Wrong size on FParticleSpawnInfo");

// ScriptStruct MirMobile.CharacterExpBoosterTemplate
// 0x0028 (0x0030 - 0x0008)
struct FCharacterExpBoosterTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoosterExpBonusRate;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoosterExpBonusValue;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnergyTimeMax;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UiShopGoodsId;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 StatusId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterExpBoosterTemplate) == 0x000008, "Wrong alignment on FCharacterExpBoosterTemplate");
static_assert(sizeof(FCharacterExpBoosterTemplate) == 0x000030, "Wrong size on FCharacterExpBoosterTemplate");
static_assert(offsetof(FCharacterExpBoosterTemplate, Name) == 0x000008, "Member 'FCharacterExpBoosterTemplate::Name' has a wrong offset!");
static_assert(offsetof(FCharacterExpBoosterTemplate, RowId) == 0x00000C, "Member 'FCharacterExpBoosterTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FCharacterExpBoosterTemplate, BoosterExpBonusRate) == 0x000010, "Member 'FCharacterExpBoosterTemplate::BoosterExpBonusRate' has a wrong offset!");
static_assert(offsetof(FCharacterExpBoosterTemplate, BoosterExpBonusValue) == 0x000014, "Member 'FCharacterExpBoosterTemplate::BoosterExpBonusValue' has a wrong offset!");
static_assert(offsetof(FCharacterExpBoosterTemplate, EnergyTimeMax) == 0x000018, "Member 'FCharacterExpBoosterTemplate::EnergyTimeMax' has a wrong offset!");
static_assert(offsetof(FCharacterExpBoosterTemplate, UiShopGoodsId) == 0x00001C, "Member 'FCharacterExpBoosterTemplate::UiShopGoodsId' has a wrong offset!");
static_assert(offsetof(FCharacterExpBoosterTemplate, StatusId) == 0x000020, "Member 'FCharacterExpBoosterTemplate::StatusId' has a wrong offset!");

// ScriptStruct MirMobile.GhostMaterialParam
// 0x0018 (0x0018 - 0x0000)
struct FGhostMaterialParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      ColorCurve;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGhostMaterialParam) == 0x000008, "Wrong alignment on FGhostMaterialParam");
static_assert(sizeof(FGhostMaterialParam) == 0x000018, "Wrong size on FGhostMaterialParam");
static_assert(offsetof(FGhostMaterialParam, ParamName) == 0x000000, "Member 'FGhostMaterialParam::ParamName' has a wrong offset!");
static_assert(offsetof(FGhostMaterialParam, Curve) == 0x000008, "Member 'FGhostMaterialParam::Curve' has a wrong offset!");
static_assert(offsetof(FGhostMaterialParam, ColorCurve) == 0x000010, "Member 'FGhostMaterialParam::ColorCurve' has a wrong offset!");

// ScriptStruct MirMobile.NpcShopGoodsTemplate
// 0x0030 (0x0038 - 0x0008)
struct FNpcShopGoodsTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsGroupId;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsCommodityType;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsCommodityId;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsCount;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsCountAdjustMin;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsCountAdjustMax;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyId;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitCountType;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkSteelCheck;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitLevel;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcShopGoodsTemplate) == 0x000008, "Wrong alignment on FNpcShopGoodsTemplate");
static_assert(sizeof(FNpcShopGoodsTemplate) == 0x000038, "Wrong size on FNpcShopGoodsTemplate");
static_assert(offsetof(FNpcShopGoodsTemplate, RowId) == 0x000008, "Member 'FNpcShopGoodsTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, GoodsGroupId) == 0x00000C, "Member 'FNpcShopGoodsTemplate::GoodsGroupId' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, GoodsID) == 0x000010, "Member 'FNpcShopGoodsTemplate::GoodsID' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, GoodsCommodityType) == 0x000014, "Member 'FNpcShopGoodsTemplate::GoodsCommodityType' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, GoodsCommodityId) == 0x000018, "Member 'FNpcShopGoodsTemplate::GoodsCommodityId' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, GoodsCount) == 0x00001C, "Member 'FNpcShopGoodsTemplate::GoodsCount' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, GoodsCountAdjustMin) == 0x000020, "Member 'FNpcShopGoodsTemplate::GoodsCountAdjustMin' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, GoodsCountAdjustMax) == 0x000024, "Member 'FNpcShopGoodsTemplate::GoodsCountAdjustMax' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, MoneyId) == 0x000028, "Member 'FNpcShopGoodsTemplate::MoneyId' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, LimitCountType) == 0x00002C, "Member 'FNpcShopGoodsTemplate::LimitCountType' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, DarkSteelCheck) == 0x000030, "Member 'FNpcShopGoodsTemplate::DarkSteelCheck' has a wrong offset!");
static_assert(offsetof(FNpcShopGoodsTemplate, LimitLevel) == 0x000034, "Member 'FNpcShopGoodsTemplate::LimitLevel' has a wrong offset!");

// ScriptStruct MirMobile.CharacterForceBloodTemplate
// 0x0080 (0x0088 - 0x0008)
struct FCharacterForceBloodTemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodSetID;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodLevel;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingCost_Spirit;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood1_Training_NeedUse01Id;                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood1_Training_NeedItem01Count;                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood1_Training_NeedUse02Id;                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood1_Training_NeedItem02Count;                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood2_Training_NeedUse01Id;                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood2_Training_NeedItem01Count;                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood2_Training_NeedUse02Id;                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood2_Training_NeedItem02Count;                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood3_Training_NeedUse01Id;                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood3_Training_NeedItem01Count;                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood3_Training_NeedUse02Id;                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood3_Training_NeedItem02Count;                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood4_Training_NeedUse01Id;                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood4_Training_NeedItem01Count;                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood4_Training_NeedUse02Id;                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood4_Training_NeedItem02Count;                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingChanceSuccess;                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingChanceCriticalFail;                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood1_AttributeType;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood1_AttributeValue;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood2_AttributeType;                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood2_AttributeValue;                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood3_AttributeType;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood3_AttributeValue;                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood4_AttributeType;                              // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Blood4_AttributeValue;                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_ForcePanelLevel;                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterForceBloodTemplate) == 0x000008, "Wrong alignment on FCharacterForceBloodTemplate");
static_assert(sizeof(FCharacterForceBloodTemplate) == 0x000088, "Wrong size on FCharacterForceBloodTemplate");
static_assert(offsetof(FCharacterForceBloodTemplate, UniqueId) == 0x000008, "Member 'FCharacterForceBloodTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, BloodSetID) == 0x00000C, "Member 'FCharacterForceBloodTemplate::BloodSetID' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, BloodLevel) == 0x000010, "Member 'FCharacterForceBloodTemplate::BloodLevel' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, TrainingCost_Spirit) == 0x000014, "Member 'FCharacterForceBloodTemplate::TrainingCost_Spirit' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood1_Training_NeedUse01Id) == 0x000018, "Member 'FCharacterForceBloodTemplate::Blood1_Training_NeedUse01Id' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood1_Training_NeedItem01Count) == 0x00001C, "Member 'FCharacterForceBloodTemplate::Blood1_Training_NeedItem01Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood1_Training_NeedUse02Id) == 0x000020, "Member 'FCharacterForceBloodTemplate::Blood1_Training_NeedUse02Id' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood1_Training_NeedItem02Count) == 0x000024, "Member 'FCharacterForceBloodTemplate::Blood1_Training_NeedItem02Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood2_Training_NeedUse01Id) == 0x000028, "Member 'FCharacterForceBloodTemplate::Blood2_Training_NeedUse01Id' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood2_Training_NeedItem01Count) == 0x00002C, "Member 'FCharacterForceBloodTemplate::Blood2_Training_NeedItem01Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood2_Training_NeedUse02Id) == 0x000030, "Member 'FCharacterForceBloodTemplate::Blood2_Training_NeedUse02Id' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood2_Training_NeedItem02Count) == 0x000034, "Member 'FCharacterForceBloodTemplate::Blood2_Training_NeedItem02Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood3_Training_NeedUse01Id) == 0x000038, "Member 'FCharacterForceBloodTemplate::Blood3_Training_NeedUse01Id' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood3_Training_NeedItem01Count) == 0x00003C, "Member 'FCharacterForceBloodTemplate::Blood3_Training_NeedItem01Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood3_Training_NeedUse02Id) == 0x000040, "Member 'FCharacterForceBloodTemplate::Blood3_Training_NeedUse02Id' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood3_Training_NeedItem02Count) == 0x000044, "Member 'FCharacterForceBloodTemplate::Blood3_Training_NeedItem02Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood4_Training_NeedUse01Id) == 0x000048, "Member 'FCharacterForceBloodTemplate::Blood4_Training_NeedUse01Id' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood4_Training_NeedItem01Count) == 0x00004C, "Member 'FCharacterForceBloodTemplate::Blood4_Training_NeedItem01Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood4_Training_NeedUse02Id) == 0x000050, "Member 'FCharacterForceBloodTemplate::Blood4_Training_NeedUse02Id' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood4_Training_NeedItem02Count) == 0x000054, "Member 'FCharacterForceBloodTemplate::Blood4_Training_NeedItem02Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, TrainingChanceSuccess) == 0x000058, "Member 'FCharacterForceBloodTemplate::TrainingChanceSuccess' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, TrainingChanceCriticalFail) == 0x00005C, "Member 'FCharacterForceBloodTemplate::TrainingChanceCriticalFail' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood1_AttributeType) == 0x000060, "Member 'FCharacterForceBloodTemplate::Blood1_AttributeType' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood1_AttributeValue) == 0x000064, "Member 'FCharacterForceBloodTemplate::Blood1_AttributeValue' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood2_AttributeType) == 0x000068, "Member 'FCharacterForceBloodTemplate::Blood2_AttributeType' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood2_AttributeValue) == 0x00006C, "Member 'FCharacterForceBloodTemplate::Blood2_AttributeValue' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood3_AttributeType) == 0x000070, "Member 'FCharacterForceBloodTemplate::Blood3_AttributeType' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood3_AttributeValue) == 0x000074, "Member 'FCharacterForceBloodTemplate::Blood3_AttributeValue' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood4_AttributeType) == 0x000078, "Member 'FCharacterForceBloodTemplate::Blood4_AttributeType' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, Blood4_AttributeValue) == 0x00007C, "Member 'FCharacterForceBloodTemplate::Blood4_AttributeValue' has a wrong offset!");
static_assert(offsetof(FCharacterForceBloodTemplate, HardTraining_ForcePanelLevel) == 0x000080, "Member 'FCharacterForceBloodTemplate::HardTraining_ForcePanelLevel' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarRevivalTemplate
// 0x0180 (0x0188 - 0x0008)
struct FGuildWarRevivalTemplate final : public FTableRowBase
{
public:
	int32                                         GuildWarRevivalId;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp01_NameId;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp01_IconId;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp01_IconId_List;                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp02_NameId;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp02_IconId;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp02_IconId_List;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp03_NameId;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp03_IconId;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp03_IconId_List;                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp04_NameId;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp04_IconId;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp04_IconId_List;                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp05_NameId;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp05_IconId;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarp05_IconId_List;                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival01_WarpId;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival01_NameId;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival01_IconId_None;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival01_IconId_Mine;                             // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival01_IconId_Other;                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival01_IconId_None_List;                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival01_IconId_Mine_List;                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival01_IconId_Other_List;                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival02_WarpId;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival02_NameId;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival02_IconId_None;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival02_IconId_Mine;                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival02_IconId_Other;                            // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival02_IconId_None_List;                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival02_IconId_Mine_List;                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival02_IconId_Other_List;                       // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival03_WarpId;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival03_NameId;                                  // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival03_IconId_None;                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival03_IconId_Mine;                             // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival03_IconId_Other;                            // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival03_IconId_None_List;                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival03_IconId_Mine_List;                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival03_IconId_Other_List;                       // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival04_WarpId;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival04_NameId;                                  // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival04_IconId_None;                             // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival04_IconId_Mine;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival04_IconId_Other;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival04_IconId_None_List;                        // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival04_IconId_Mine_List;                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival04_IconId_Other_List;                       // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival05_WarpId;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival05_NameId;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival05_IconId_None;                             // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival05_IconId_Mine;                             // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival05_IconId_Other;                            // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival05_IconId_None_List;                        // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival05_IconId_Mine_List;                        // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival05_IconId_Other_List;                       // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival06_WarpId;                                  // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival06_NameId;                                  // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival06_IconId_None;                             // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival06_IconId_Mine;                             // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival06_IconId_Other;                            // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival06_IconId_None_List;                        // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival06_IconId_Mine_List;                        // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival06_IconId_Other_List;                       // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival07_WarpId;                                  // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival07_NameId;                                  // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival07_IconId_None;                             // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival07_IconId_Mine;                             // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival07_IconId_Other;                            // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival07_IconId_None_List;                        // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival07_IconId_Mine_List;                        // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival07_IconId_Other_List;                       // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival08_WarpId;                                  // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival08_NameId;                                  // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival08_IconId_None;                             // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival08_IconId_Mine;                             // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival08_IconId_Other;                            // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival08_IconId_None_List;                        // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival08_IconId_Mine_List;                        // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival08_IconId_Other_List;                       // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival09_WarpId;                                  // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival09_NameId;                                  // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival09_IconId_None;                             // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival09_IconId_Mine;                             // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival09_IconId_Other;                            // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival09_IconId_None_List;                        // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival09_IconId_Mine_List;                        // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival09_IconId_Other_List;                       // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival10_WarpId;                                  // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival10_NameId;                                  // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival10_IconId_None;                             // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival10_IconId_Mine;                             // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival10_IconId_Other;                            // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival10_IconId_None_List;                        // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival10_IconId_Mine_List;                        // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revival10_IconId_Other_List;                       // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildWarRevivalTemplate) == 0x000008, "Wrong alignment on FGuildWarRevivalTemplate");
static_assert(sizeof(FGuildWarRevivalTemplate) == 0x000188, "Wrong size on FGuildWarRevivalTemplate");
static_assert(offsetof(FGuildWarRevivalTemplate, GuildWarRevivalId) == 0x000008, "Member 'FGuildWarRevivalTemplate::GuildWarRevivalId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp01_NameId) == 0x00000C, "Member 'FGuildWarRevivalTemplate::SafetyWarp01_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp01_IconId) == 0x000010, "Member 'FGuildWarRevivalTemplate::SafetyWarp01_IconId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp01_IconId_List) == 0x000014, "Member 'FGuildWarRevivalTemplate::SafetyWarp01_IconId_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp02_NameId) == 0x000018, "Member 'FGuildWarRevivalTemplate::SafetyWarp02_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp02_IconId) == 0x00001C, "Member 'FGuildWarRevivalTemplate::SafetyWarp02_IconId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp02_IconId_List) == 0x000020, "Member 'FGuildWarRevivalTemplate::SafetyWarp02_IconId_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp03_NameId) == 0x000024, "Member 'FGuildWarRevivalTemplate::SafetyWarp03_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp03_IconId) == 0x000028, "Member 'FGuildWarRevivalTemplate::SafetyWarp03_IconId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp03_IconId_List) == 0x00002C, "Member 'FGuildWarRevivalTemplate::SafetyWarp03_IconId_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp04_NameId) == 0x000030, "Member 'FGuildWarRevivalTemplate::SafetyWarp04_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp04_IconId) == 0x000034, "Member 'FGuildWarRevivalTemplate::SafetyWarp04_IconId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp04_IconId_List) == 0x000038, "Member 'FGuildWarRevivalTemplate::SafetyWarp04_IconId_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp05_NameId) == 0x00003C, "Member 'FGuildWarRevivalTemplate::SafetyWarp05_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp05_IconId) == 0x000040, "Member 'FGuildWarRevivalTemplate::SafetyWarp05_IconId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, SafetyWarp05_IconId_List) == 0x000044, "Member 'FGuildWarRevivalTemplate::SafetyWarp05_IconId_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival01_WarpId) == 0x000048, "Member 'FGuildWarRevivalTemplate::Revival01_WarpId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival01_NameId) == 0x00004C, "Member 'FGuildWarRevivalTemplate::Revival01_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival01_IconId_None) == 0x000050, "Member 'FGuildWarRevivalTemplate::Revival01_IconId_None' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival01_IconId_Mine) == 0x000054, "Member 'FGuildWarRevivalTemplate::Revival01_IconId_Mine' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival01_IconId_Other) == 0x000058, "Member 'FGuildWarRevivalTemplate::Revival01_IconId_Other' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival01_IconId_None_List) == 0x00005C, "Member 'FGuildWarRevivalTemplate::Revival01_IconId_None_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival01_IconId_Mine_List) == 0x000060, "Member 'FGuildWarRevivalTemplate::Revival01_IconId_Mine_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival01_IconId_Other_List) == 0x000064, "Member 'FGuildWarRevivalTemplate::Revival01_IconId_Other_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival02_WarpId) == 0x000068, "Member 'FGuildWarRevivalTemplate::Revival02_WarpId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival02_NameId) == 0x00006C, "Member 'FGuildWarRevivalTemplate::Revival02_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival02_IconId_None) == 0x000070, "Member 'FGuildWarRevivalTemplate::Revival02_IconId_None' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival02_IconId_Mine) == 0x000074, "Member 'FGuildWarRevivalTemplate::Revival02_IconId_Mine' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival02_IconId_Other) == 0x000078, "Member 'FGuildWarRevivalTemplate::Revival02_IconId_Other' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival02_IconId_None_List) == 0x00007C, "Member 'FGuildWarRevivalTemplate::Revival02_IconId_None_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival02_IconId_Mine_List) == 0x000080, "Member 'FGuildWarRevivalTemplate::Revival02_IconId_Mine_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival02_IconId_Other_List) == 0x000084, "Member 'FGuildWarRevivalTemplate::Revival02_IconId_Other_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival03_WarpId) == 0x000088, "Member 'FGuildWarRevivalTemplate::Revival03_WarpId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival03_NameId) == 0x00008C, "Member 'FGuildWarRevivalTemplate::Revival03_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival03_IconId_None) == 0x000090, "Member 'FGuildWarRevivalTemplate::Revival03_IconId_None' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival03_IconId_Mine) == 0x000094, "Member 'FGuildWarRevivalTemplate::Revival03_IconId_Mine' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival03_IconId_Other) == 0x000098, "Member 'FGuildWarRevivalTemplate::Revival03_IconId_Other' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival03_IconId_None_List) == 0x00009C, "Member 'FGuildWarRevivalTemplate::Revival03_IconId_None_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival03_IconId_Mine_List) == 0x0000A0, "Member 'FGuildWarRevivalTemplate::Revival03_IconId_Mine_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival03_IconId_Other_List) == 0x0000A4, "Member 'FGuildWarRevivalTemplate::Revival03_IconId_Other_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival04_WarpId) == 0x0000A8, "Member 'FGuildWarRevivalTemplate::Revival04_WarpId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival04_NameId) == 0x0000AC, "Member 'FGuildWarRevivalTemplate::Revival04_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival04_IconId_None) == 0x0000B0, "Member 'FGuildWarRevivalTemplate::Revival04_IconId_None' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival04_IconId_Mine) == 0x0000B4, "Member 'FGuildWarRevivalTemplate::Revival04_IconId_Mine' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival04_IconId_Other) == 0x0000B8, "Member 'FGuildWarRevivalTemplate::Revival04_IconId_Other' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival04_IconId_None_List) == 0x0000BC, "Member 'FGuildWarRevivalTemplate::Revival04_IconId_None_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival04_IconId_Mine_List) == 0x0000C0, "Member 'FGuildWarRevivalTemplate::Revival04_IconId_Mine_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival04_IconId_Other_List) == 0x0000C4, "Member 'FGuildWarRevivalTemplate::Revival04_IconId_Other_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival05_WarpId) == 0x0000C8, "Member 'FGuildWarRevivalTemplate::Revival05_WarpId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival05_NameId) == 0x0000CC, "Member 'FGuildWarRevivalTemplate::Revival05_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival05_IconId_None) == 0x0000D0, "Member 'FGuildWarRevivalTemplate::Revival05_IconId_None' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival05_IconId_Mine) == 0x0000D4, "Member 'FGuildWarRevivalTemplate::Revival05_IconId_Mine' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival05_IconId_Other) == 0x0000D8, "Member 'FGuildWarRevivalTemplate::Revival05_IconId_Other' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival05_IconId_None_List) == 0x0000DC, "Member 'FGuildWarRevivalTemplate::Revival05_IconId_None_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival05_IconId_Mine_List) == 0x0000E0, "Member 'FGuildWarRevivalTemplate::Revival05_IconId_Mine_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival05_IconId_Other_List) == 0x0000E4, "Member 'FGuildWarRevivalTemplate::Revival05_IconId_Other_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival06_WarpId) == 0x0000E8, "Member 'FGuildWarRevivalTemplate::Revival06_WarpId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival06_NameId) == 0x0000EC, "Member 'FGuildWarRevivalTemplate::Revival06_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival06_IconId_None) == 0x0000F0, "Member 'FGuildWarRevivalTemplate::Revival06_IconId_None' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival06_IconId_Mine) == 0x0000F4, "Member 'FGuildWarRevivalTemplate::Revival06_IconId_Mine' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival06_IconId_Other) == 0x0000F8, "Member 'FGuildWarRevivalTemplate::Revival06_IconId_Other' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival06_IconId_None_List) == 0x0000FC, "Member 'FGuildWarRevivalTemplate::Revival06_IconId_None_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival06_IconId_Mine_List) == 0x000100, "Member 'FGuildWarRevivalTemplate::Revival06_IconId_Mine_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival06_IconId_Other_List) == 0x000104, "Member 'FGuildWarRevivalTemplate::Revival06_IconId_Other_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival07_WarpId) == 0x000108, "Member 'FGuildWarRevivalTemplate::Revival07_WarpId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival07_NameId) == 0x00010C, "Member 'FGuildWarRevivalTemplate::Revival07_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival07_IconId_None) == 0x000110, "Member 'FGuildWarRevivalTemplate::Revival07_IconId_None' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival07_IconId_Mine) == 0x000114, "Member 'FGuildWarRevivalTemplate::Revival07_IconId_Mine' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival07_IconId_Other) == 0x000118, "Member 'FGuildWarRevivalTemplate::Revival07_IconId_Other' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival07_IconId_None_List) == 0x00011C, "Member 'FGuildWarRevivalTemplate::Revival07_IconId_None_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival07_IconId_Mine_List) == 0x000120, "Member 'FGuildWarRevivalTemplate::Revival07_IconId_Mine_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival07_IconId_Other_List) == 0x000124, "Member 'FGuildWarRevivalTemplate::Revival07_IconId_Other_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival08_WarpId) == 0x000128, "Member 'FGuildWarRevivalTemplate::Revival08_WarpId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival08_NameId) == 0x00012C, "Member 'FGuildWarRevivalTemplate::Revival08_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival08_IconId_None) == 0x000130, "Member 'FGuildWarRevivalTemplate::Revival08_IconId_None' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival08_IconId_Mine) == 0x000134, "Member 'FGuildWarRevivalTemplate::Revival08_IconId_Mine' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival08_IconId_Other) == 0x000138, "Member 'FGuildWarRevivalTemplate::Revival08_IconId_Other' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival08_IconId_None_List) == 0x00013C, "Member 'FGuildWarRevivalTemplate::Revival08_IconId_None_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival08_IconId_Mine_List) == 0x000140, "Member 'FGuildWarRevivalTemplate::Revival08_IconId_Mine_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival08_IconId_Other_List) == 0x000144, "Member 'FGuildWarRevivalTemplate::Revival08_IconId_Other_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival09_WarpId) == 0x000148, "Member 'FGuildWarRevivalTemplate::Revival09_WarpId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival09_NameId) == 0x00014C, "Member 'FGuildWarRevivalTemplate::Revival09_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival09_IconId_None) == 0x000150, "Member 'FGuildWarRevivalTemplate::Revival09_IconId_None' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival09_IconId_Mine) == 0x000154, "Member 'FGuildWarRevivalTemplate::Revival09_IconId_Mine' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival09_IconId_Other) == 0x000158, "Member 'FGuildWarRevivalTemplate::Revival09_IconId_Other' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival09_IconId_None_List) == 0x00015C, "Member 'FGuildWarRevivalTemplate::Revival09_IconId_None_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival09_IconId_Mine_List) == 0x000160, "Member 'FGuildWarRevivalTemplate::Revival09_IconId_Mine_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival09_IconId_Other_List) == 0x000164, "Member 'FGuildWarRevivalTemplate::Revival09_IconId_Other_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival10_WarpId) == 0x000168, "Member 'FGuildWarRevivalTemplate::Revival10_WarpId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival10_NameId) == 0x00016C, "Member 'FGuildWarRevivalTemplate::Revival10_NameId' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival10_IconId_None) == 0x000170, "Member 'FGuildWarRevivalTemplate::Revival10_IconId_None' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival10_IconId_Mine) == 0x000174, "Member 'FGuildWarRevivalTemplate::Revival10_IconId_Mine' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival10_IconId_Other) == 0x000178, "Member 'FGuildWarRevivalTemplate::Revival10_IconId_Other' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival10_IconId_None_List) == 0x00017C, "Member 'FGuildWarRevivalTemplate::Revival10_IconId_None_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival10_IconId_Mine_List) == 0x000180, "Member 'FGuildWarRevivalTemplate::Revival10_IconId_Mine_List' has a wrong offset!");
static_assert(offsetof(FGuildWarRevivalTemplate, Revival10_IconId_Other_List) == 0x000184, "Member 'FGuildWarRevivalTemplate::Revival10_IconId_Other_List' has a wrong offset!");

// ScriptStruct MirMobile.CharacterForceLevelTemplate
// 0x0068 (0x0070 - 0x0008)
struct FCharacterForceLevelTemplate final : public FTableRowBase
{
public:
	int32                                         ForceLevelID;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanelID;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcePanelLevel;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceReward_Attribute01Type;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceReward_Attribute01Value;                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceReward_Attribute02Type;                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceReward_Attribute02Value;                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceReward_Attribute03Type;                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceReward_Attribute03Value;                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceReward_Attribute04Type;                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceReward_Attribute04Value;                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedLevel;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedCostId;                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedCostCount;                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedUseId01;                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedItem01Count;                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedUseId02;                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedItem02Count;                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedUseId03;                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedItem03Count;                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedUseId04;                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_NeedItem04Count;                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_Time;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_Pass_NeedUseId;                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_Pass_NeedItem_UseTime;                // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardTraining_Succecs_ForceLevel;                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterForceLevelTemplate) == 0x000008, "Wrong alignment on FCharacterForceLevelTemplate");
static_assert(sizeof(FCharacterForceLevelTemplate) == 0x000070, "Wrong size on FCharacterForceLevelTemplate");
static_assert(offsetof(FCharacterForceLevelTemplate, ForceLevelID) == 0x000008, "Member 'FCharacterForceLevelTemplate::ForceLevelID' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, ForcePanelID) == 0x00000C, "Member 'FCharacterForceLevelTemplate::ForcePanelID' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, ForcePanelLevel) == 0x000010, "Member 'FCharacterForceLevelTemplate::ForcePanelLevel' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, ForceReward_Attribute01Type) == 0x000014, "Member 'FCharacterForceLevelTemplate::ForceReward_Attribute01Type' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, ForceReward_Attribute01Value) == 0x000018, "Member 'FCharacterForceLevelTemplate::ForceReward_Attribute01Value' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, ForceReward_Attribute02Type) == 0x00001C, "Member 'FCharacterForceLevelTemplate::ForceReward_Attribute02Type' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, ForceReward_Attribute02Value) == 0x000020, "Member 'FCharacterForceLevelTemplate::ForceReward_Attribute02Value' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, ForceReward_Attribute03Type) == 0x000024, "Member 'FCharacterForceLevelTemplate::ForceReward_Attribute03Type' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, ForceReward_Attribute03Value) == 0x000028, "Member 'FCharacterForceLevelTemplate::ForceReward_Attribute03Value' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, ForceReward_Attribute04Type) == 0x00002C, "Member 'FCharacterForceLevelTemplate::ForceReward_Attribute04Type' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, ForceReward_Attribute04Value) == 0x000030, "Member 'FCharacterForceLevelTemplate::ForceReward_Attribute04Value' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedLevel) == 0x000034, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedLevel' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedCostId) == 0x000038, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedCostId' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedCostCount) == 0x00003C, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedCostCount' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedUseId01) == 0x000040, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedUseId01' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedItem01Count) == 0x000044, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedItem01Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedUseId02) == 0x000048, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedUseId02' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedItem02Count) == 0x00004C, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedItem02Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedUseId03) == 0x000050, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedUseId03' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedItem03Count) == 0x000054, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedItem03Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedUseId04) == 0x000058, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedUseId04' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_NeedItem04Count) == 0x00005C, "Member 'FCharacterForceLevelTemplate::HardTraining_NeedItem04Count' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_Time) == 0x000060, "Member 'FCharacterForceLevelTemplate::HardTraining_Time' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_Pass_NeedUseId) == 0x000064, "Member 'FCharacterForceLevelTemplate::HardTraining_Pass_NeedUseId' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_Pass_NeedItem_UseTime) == 0x000068, "Member 'FCharacterForceLevelTemplate::HardTraining_Pass_NeedItem_UseTime' has a wrong offset!");
static_assert(offsetof(FCharacterForceLevelTemplate, HardTraining_Succecs_ForceLevel) == 0x00006C, "Member 'FCharacterForceLevelTemplate::HardTraining_Succecs_ForceLevel' has a wrong offset!");

// ScriptStruct MirMobile.CharacterGrowTemplate
// 0x0018 (0x0020 - 0x0008)
struct FCharacterGrowTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionValue;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowPercent;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowGraph;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterGrowTemplate) == 0x000008, "Wrong alignment on FCharacterGrowTemplate");
static_assert(sizeof(FCharacterGrowTemplate) == 0x000020, "Wrong size on FCharacterGrowTemplate");
static_assert(offsetof(FCharacterGrowTemplate, RowId) == 0x000008, "Member 'FCharacterGrowTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FCharacterGrowTemplate, ContentsId) == 0x00000C, "Member 'FCharacterGrowTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FCharacterGrowTemplate, Level) == 0x000010, "Member 'FCharacterGrowTemplate::Level' has a wrong offset!");
static_assert(offsetof(FCharacterGrowTemplate, ConditionValue) == 0x000014, "Member 'FCharacterGrowTemplate::ConditionValue' has a wrong offset!");
static_assert(offsetof(FCharacterGrowTemplate, GrowPercent) == 0x000018, "Member 'FCharacterGrowTemplate::GrowPercent' has a wrong offset!");
static_assert(offsetof(FCharacterGrowTemplate, GrowGraph) == 0x00001C, "Member 'FCharacterGrowTemplate::GrowGraph' has a wrong offset!");

// ScriptStruct MirMobile.CharacterMasterySlotTemplate
// 0x0010 (0x0018 - 0x0008)
struct FCharacterMasterySlotTemplate final : public FTableRowBase
{
public:
	int32                                         SlotID;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotName;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIcon;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotMaxLevel;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterMasterySlotTemplate) == 0x000008, "Wrong alignment on FCharacterMasterySlotTemplate");
static_assert(sizeof(FCharacterMasterySlotTemplate) == 0x000018, "Wrong size on FCharacterMasterySlotTemplate");
static_assert(offsetof(FCharacterMasterySlotTemplate, SlotID) == 0x000008, "Member 'FCharacterMasterySlotTemplate::SlotID' has a wrong offset!");
static_assert(offsetof(FCharacterMasterySlotTemplate, SlotName) == 0x00000C, "Member 'FCharacterMasterySlotTemplate::SlotName' has a wrong offset!");
static_assert(offsetof(FCharacterMasterySlotTemplate, SlotIcon) == 0x000010, "Member 'FCharacterMasterySlotTemplate::SlotIcon' has a wrong offset!");
static_assert(offsetof(FCharacterMasterySlotTemplate, SlotMaxLevel) == 0x000014, "Member 'FCharacterMasterySlotTemplate::SlotMaxLevel' has a wrong offset!");

// ScriptStruct MirMobile.CharacterPartsDefinesTemplate
// 0x0010 (0x0018 - 0x0008)
struct FCharacterPartsDefinesTemplate final : public FTableRowBase
{
public:
	TArray<int32>                                 PartsIndex;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterPartsDefinesTemplate) == 0x000008, "Wrong alignment on FCharacterPartsDefinesTemplate");
static_assert(sizeof(FCharacterPartsDefinesTemplate) == 0x000018, "Wrong size on FCharacterPartsDefinesTemplate");
static_assert(offsetof(FCharacterPartsDefinesTemplate, PartsIndex) == 0x000008, "Member 'FCharacterPartsDefinesTemplate::PartsIndex' has a wrong offset!");

// ScriptStruct MirMobile.UIShopWebShopTemplate
// 0x0018 (0x0020 - 0x0008)
struct FUIShopWebShopTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WebShopURL;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIShopWebShopTemplate) == 0x000008, "Wrong alignment on FUIShopWebShopTemplate");
static_assert(sizeof(FUIShopWebShopTemplate) == 0x000020, "Wrong size on FUIShopWebShopTemplate");
static_assert(offsetof(FUIShopWebShopTemplate, Name) == 0x000008, "Member 'FUIShopWebShopTemplate::Name' has a wrong offset!");
static_assert(offsetof(FUIShopWebShopTemplate, GoodsID) == 0x00000C, "Member 'FUIShopWebShopTemplate::GoodsID' has a wrong offset!");
static_assert(offsetof(FUIShopWebShopTemplate, WebShopURL) == 0x000010, "Member 'FUIShopWebShopTemplate::WebShopURL' has a wrong offset!");

// ScriptStruct MirMobile.CinematicDialogueTemplate
// 0x0208 (0x0210 - 0x0008)
struct FCinematicDialogueTemplate final : public FTableRowBase
{
public:
	int32                                         CinematicDialogueID;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TalkNpcID;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DialogueEndCheck;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Dialogue_Male;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_CHT;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_CHS;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_JPN;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_ENG;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_THA;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_IND;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_VIE;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_GER;                                 // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_SPA;                                 // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_POR;                                 // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_RUS;                                 // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female;                                   // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_CHT;                               // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_CHS;                               // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_JPN;                               // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_ENG;                               // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_THA;                               // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_IND;                               // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_VIE;                               // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_GER;                               // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_SPA;                               // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_POR;                               // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_RUS;                               // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCinematicActorAction>          ActorAction;                                       // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CameraShake;                                       // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraShakeDelay;                                  // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraPresetID;                                    // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActorPlacement>                CameraPlacement;                                   // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         CameraMoveSpeed;                                   // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraFov;                                         // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DialogueSkipDelay;                                 // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sound_Male;                                        // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sound_Female;                                      // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelSequencePath;                                 // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DOF_FocalDistance;                                 // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DOF_FarTransitionRegion;                           // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DOF_NearBlurSize;                                  // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DOF_FarBlurSize;                                   // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DOF_Scale;                                         // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CoordinateOffset;                                  // 0x0204(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCinematicDialogueTemplate) == 0x000008, "Wrong alignment on FCinematicDialogueTemplate");
static_assert(sizeof(FCinematicDialogueTemplate) == 0x000210, "Wrong size on FCinematicDialogueTemplate");
static_assert(offsetof(FCinematicDialogueTemplate, CinematicDialogueID) == 0x000008, "Member 'FCinematicDialogueTemplate::CinematicDialogueID' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, TalkNpcID) == 0x00000C, "Member 'FCinematicDialogueTemplate::TalkNpcID' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, DialogueEndCheck) == 0x000010, "Member 'FCinematicDialogueTemplate::DialogueEndCheck' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male) == 0x000018, "Member 'FCinematicDialogueTemplate::Dialogue_Male' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_CHT) == 0x000028, "Member 'FCinematicDialogueTemplate::Dialogue_Male_CHT' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_CHS) == 0x000038, "Member 'FCinematicDialogueTemplate::Dialogue_Male_CHS' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_JPN) == 0x000048, "Member 'FCinematicDialogueTemplate::Dialogue_Male_JPN' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_ENG) == 0x000058, "Member 'FCinematicDialogueTemplate::Dialogue_Male_ENG' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_THA) == 0x000068, "Member 'FCinematicDialogueTemplate::Dialogue_Male_THA' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_IND) == 0x000078, "Member 'FCinematicDialogueTemplate::Dialogue_Male_IND' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_VIE) == 0x000088, "Member 'FCinematicDialogueTemplate::Dialogue_Male_VIE' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_GER) == 0x000098, "Member 'FCinematicDialogueTemplate::Dialogue_Male_GER' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_SPA) == 0x0000A8, "Member 'FCinematicDialogueTemplate::Dialogue_Male_SPA' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_POR) == 0x0000B8, "Member 'FCinematicDialogueTemplate::Dialogue_Male_POR' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Male_RUS) == 0x0000C8, "Member 'FCinematicDialogueTemplate::Dialogue_Male_RUS' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female) == 0x0000D8, "Member 'FCinematicDialogueTemplate::Dialogue_Female' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_CHT) == 0x0000E8, "Member 'FCinematicDialogueTemplate::Dialogue_Female_CHT' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_CHS) == 0x0000F8, "Member 'FCinematicDialogueTemplate::Dialogue_Female_CHS' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_JPN) == 0x000108, "Member 'FCinematicDialogueTemplate::Dialogue_Female_JPN' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_ENG) == 0x000118, "Member 'FCinematicDialogueTemplate::Dialogue_Female_ENG' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_THA) == 0x000128, "Member 'FCinematicDialogueTemplate::Dialogue_Female_THA' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_IND) == 0x000138, "Member 'FCinematicDialogueTemplate::Dialogue_Female_IND' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_VIE) == 0x000148, "Member 'FCinematicDialogueTemplate::Dialogue_Female_VIE' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_GER) == 0x000158, "Member 'FCinematicDialogueTemplate::Dialogue_Female_GER' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_SPA) == 0x000168, "Member 'FCinematicDialogueTemplate::Dialogue_Female_SPA' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_POR) == 0x000178, "Member 'FCinematicDialogueTemplate::Dialogue_Female_POR' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Dialogue_Female_RUS) == 0x000188, "Member 'FCinematicDialogueTemplate::Dialogue_Female_RUS' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, ActorAction) == 0x000198, "Member 'FCinematicDialogueTemplate::ActorAction' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, CameraShake) == 0x0001A8, "Member 'FCinematicDialogueTemplate::CameraShake' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, CameraShakeDelay) == 0x0001AC, "Member 'FCinematicDialogueTemplate::CameraShakeDelay' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, CameraPresetID) == 0x0001B0, "Member 'FCinematicDialogueTemplate::CameraPresetID' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, CameraPlacement) == 0x0001B8, "Member 'FCinematicDialogueTemplate::CameraPlacement' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, CameraMoveSpeed) == 0x0001C8, "Member 'FCinematicDialogueTemplate::CameraMoveSpeed' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, CameraFov) == 0x0001CC, "Member 'FCinematicDialogueTemplate::CameraFov' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, PlayTime) == 0x0001D0, "Member 'FCinematicDialogueTemplate::PlayTime' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, DialogueSkipDelay) == 0x0001D4, "Member 'FCinematicDialogueTemplate::DialogueSkipDelay' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Sound_Male) == 0x0001D8, "Member 'FCinematicDialogueTemplate::Sound_Male' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, Sound_Female) == 0x0001DC, "Member 'FCinematicDialogueTemplate::Sound_Female' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, LevelSequencePath) == 0x0001E0, "Member 'FCinematicDialogueTemplate::LevelSequencePath' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, DOF_FocalDistance) == 0x0001F0, "Member 'FCinematicDialogueTemplate::DOF_FocalDistance' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, DOF_FarTransitionRegion) == 0x0001F4, "Member 'FCinematicDialogueTemplate::DOF_FarTransitionRegion' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, DOF_NearBlurSize) == 0x0001F8, "Member 'FCinematicDialogueTemplate::DOF_NearBlurSize' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, DOF_FarBlurSize) == 0x0001FC, "Member 'FCinematicDialogueTemplate::DOF_FarBlurSize' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, DOF_Scale) == 0x000200, "Member 'FCinematicDialogueTemplate::DOF_Scale' has a wrong offset!");
static_assert(offsetof(FCinematicDialogueTemplate, CoordinateOffset) == 0x000204, "Member 'FCinematicDialogueTemplate::CoordinateOffset' has a wrong offset!");

// ScriptStruct MirMobile.ItemSetTemplate
// 0x0050 (0x0058 - 0x0008)
struct FItemSetTemplate final : public FTableRowBase
{
public:
	int32                                         SetGroupId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId01;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId02;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId03;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId04;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId05;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId06;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId07;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId08;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bonus01Count;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bonus01AttributeType;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bonus01Value;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bonus02Count;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bonus02AttributeType;                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bonus02Value;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bonus03Count;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bonus03AttributeType;                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bonus03Value;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSetTemplate) == 0x000008, "Wrong alignment on FItemSetTemplate");
static_assert(sizeof(FItemSetTemplate) == 0x000058, "Wrong size on FItemSetTemplate");
static_assert(offsetof(FItemSetTemplate, SetGroupId) == 0x000008, "Member 'FItemSetTemplate::SetGroupId' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, NameSId) == 0x00000C, "Member 'FItemSetTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, ItemId01) == 0x000010, "Member 'FItemSetTemplate::ItemId01' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, ItemId02) == 0x000014, "Member 'FItemSetTemplate::ItemId02' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, ItemId03) == 0x000018, "Member 'FItemSetTemplate::ItemId03' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, ItemId04) == 0x00001C, "Member 'FItemSetTemplate::ItemId04' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, ItemId05) == 0x000020, "Member 'FItemSetTemplate::ItemId05' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, ItemId06) == 0x000024, "Member 'FItemSetTemplate::ItemId06' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, ItemId07) == 0x000028, "Member 'FItemSetTemplate::ItemId07' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, ItemId08) == 0x00002C, "Member 'FItemSetTemplate::ItemId08' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, Bonus01Count) == 0x000030, "Member 'FItemSetTemplate::Bonus01Count' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, Bonus01AttributeType) == 0x000034, "Member 'FItemSetTemplate::Bonus01AttributeType' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, Bonus01Value) == 0x000038, "Member 'FItemSetTemplate::Bonus01Value' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, Bonus02Count) == 0x00003C, "Member 'FItemSetTemplate::Bonus02Count' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, Bonus02AttributeType) == 0x000040, "Member 'FItemSetTemplate::Bonus02AttributeType' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, Bonus02Value) == 0x000044, "Member 'FItemSetTemplate::Bonus02Value' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, Bonus03Count) == 0x000048, "Member 'FItemSetTemplate::Bonus03Count' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, Bonus03AttributeType) == 0x00004C, "Member 'FItemSetTemplate::Bonus03AttributeType' has a wrong offset!");
static_assert(offsetof(FItemSetTemplate, Bonus03Value) == 0x000050, "Member 'FItemSetTemplate::Bonus03Value' has a wrong offset!");

// ScriptStruct MirMobile.MirClassTemplate
// 0x00E8 (0x00F0 - 0x0008)
struct FMirClassTemplate final : public FTableRowBase
{
public:
	int32                                         ClassID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsCreate;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitMaxLevel;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGenderType                                   Gender;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ProfileImage;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconSmall;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildWarIcon;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarFriendIcon;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarPartyIcon;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarNeutralityIcon;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarOther;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarEnemyIcon;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVigor;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitConGrade;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateConGrade;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveConGrade;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RunSpeed;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleRunSpeed;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FastRunSpeed;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitAttack;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RollSkill;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BackRollSkill;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MontageGroup;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Portrait;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToolMining;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MainStatusList;                                    // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DefaultSkeleton;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultClothes;                                    // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PCAutoBehavior;                                    // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCharacterImageId;                             // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillUseCountOpen;                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildWarCostum;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildWarSabukCostum;                               // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerVisitLifeCount;                              // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssassinNickNameId;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssassinCostumeId;                                 // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssassinVehicleId;                                 // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssassinWeaponId;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IgnoreStatus;                                      // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ItemSpecialExchangeAble;                           // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMirClassTemplate) == 0x000008, "Wrong alignment on FMirClassTemplate");
static_assert(sizeof(FMirClassTemplate) == 0x0000F0, "Wrong size on FMirClassTemplate");
static_assert(offsetof(FMirClassTemplate, ClassID) == 0x000008, "Member 'FMirClassTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, IsCreate) == 0x00000C, "Member 'FMirClassTemplate::IsCreate' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, InitMaxLevel) == 0x000010, "Member 'FMirClassTemplate::InitMaxLevel' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, MaxLevel) == 0x000014, "Member 'FMirClassTemplate::MaxLevel' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, Gender) == 0x000018, "Member 'FMirClassTemplate::Gender' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, ProfileImage) == 0x000020, "Member 'FMirClassTemplate::ProfileImage' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, Icon) == 0x000030, "Member 'FMirClassTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, IconSmall) == 0x000034, "Member 'FMirClassTemplate::IconSmall' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, GuildWarIcon) == 0x000038, "Member 'FMirClassTemplate::GuildWarIcon' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, WarFriendIcon) == 0x00003C, "Member 'FMirClassTemplate::WarFriendIcon' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, WarPartyIcon) == 0x000040, "Member 'FMirClassTemplate::WarPartyIcon' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, WarNeutralityIcon) == 0x000044, "Member 'FMirClassTemplate::WarNeutralityIcon' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, WarOther) == 0x000048, "Member 'FMirClassTemplate::WarOther' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, WarEnemyIcon) == 0x00004C, "Member 'FMirClassTemplate::WarEnemyIcon' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, MaxVigor) == 0x000050, "Member 'FMirClassTemplate::MaxVigor' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, HitConGrade) == 0x000054, "Member 'FMirClassTemplate::HitConGrade' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, StateConGrade) == 0x000058, "Member 'FMirClassTemplate::StateConGrade' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, MoveConGrade) == 0x00005C, "Member 'FMirClassTemplate::MoveConGrade' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, RunSpeed) == 0x000060, "Member 'FMirClassTemplate::RunSpeed' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, BattleRunSpeed) == 0x000064, "Member 'FMirClassTemplate::BattleRunSpeed' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, FastRunSpeed) == 0x000068, "Member 'FMirClassTemplate::FastRunSpeed' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, InitAttack) == 0x00006C, "Member 'FMirClassTemplate::InitAttack' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, RollSkill) == 0x000070, "Member 'FMirClassTemplate::RollSkill' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, BackRollSkill) == 0x000074, "Member 'FMirClassTemplate::BackRollSkill' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, MontageGroup) == 0x000078, "Member 'FMirClassTemplate::MontageGroup' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, Portrait) == 0x00007C, "Member 'FMirClassTemplate::Portrait' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, ToolMining) == 0x000080, "Member 'FMirClassTemplate::ToolMining' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, MainStatusList) == 0x000088, "Member 'FMirClassTemplate::MainStatusList' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, DefaultSkeleton) == 0x000098, "Member 'FMirClassTemplate::DefaultSkeleton' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, DefaultClothes) == 0x00009C, "Member 'FMirClassTemplate::DefaultClothes' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, PCAutoBehavior) == 0x0000A0, "Member 'FMirClassTemplate::PCAutoBehavior' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, GuildCharacterImageId) == 0x0000B0, "Member 'FMirClassTemplate::GuildCharacterImageId' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, SkillUseCountOpen) == 0x0000B4, "Member 'FMirClassTemplate::SkillUseCountOpen' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, GuildWarCostum) == 0x0000B8, "Member 'FMirClassTemplate::GuildWarCostum' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, GuildWarSabukCostum) == 0x0000BC, "Member 'FMirClassTemplate::GuildWarSabukCostum' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, ServerVisitLifeCount) == 0x0000C0, "Member 'FMirClassTemplate::ServerVisitLifeCount' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, AssassinNickNameId) == 0x0000C4, "Member 'FMirClassTemplate::AssassinNickNameId' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, AssassinCostumeId) == 0x0000C8, "Member 'FMirClassTemplate::AssassinCostumeId' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, AssassinVehicleId) == 0x0000CC, "Member 'FMirClassTemplate::AssassinVehicleId' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, AssassinWeaponId) == 0x0000D0, "Member 'FMirClassTemplate::AssassinWeaponId' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, IgnoreStatus) == 0x0000D8, "Member 'FMirClassTemplate::IgnoreStatus' has a wrong offset!");
static_assert(offsetof(FMirClassTemplate, ItemSpecialExchangeAble) == 0x0000E8, "Member 'FMirClassTemplate::ItemSpecialExchangeAble' has a wrong offset!");

// ScriptStruct MirMobile.ClientPreloadTemplate
// 0x0018 (0x0020 - 0x0008)
struct FClientPreloadTemplate final : public FTableRowBase
{
public:
	class FString                                 Filename;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInGameLoad;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientPreloadTemplate) == 0x000008, "Wrong alignment on FClientPreloadTemplate");
static_assert(sizeof(FClientPreloadTemplate) == 0x000020, "Wrong size on FClientPreloadTemplate");
static_assert(offsetof(FClientPreloadTemplate, Filename) == 0x000008, "Member 'FClientPreloadTemplate::Filename' has a wrong offset!");
static_assert(offsetof(FClientPreloadTemplate, bInGameLoad) == 0x000018, "Member 'FClientPreloadTemplate::bInGameLoad' has a wrong offset!");

// ScriptStruct MirMobile.ClosedTrainingCollectTemplate
// 0x0058 (0x0060 - 0x0008)
struct FClosedTrainingCollectTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectId;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectNameSID;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectStep;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingTotalLevel;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingTotalMaxLevel;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType01;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue01;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType02;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue02;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType03;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue03;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType04;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue04;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType05;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue05;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType06;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue06;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType07;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue07;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType08;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue08;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClosedTrainingCollectTemplate) == 0x000008, "Wrong alignment on FClosedTrainingCollectTemplate");
static_assert(sizeof(FClosedTrainingCollectTemplate) == 0x000060, "Wrong size on FClosedTrainingCollectTemplate");
static_assert(offsetof(FClosedTrainingCollectTemplate, Name) == 0x000008, "Member 'FClosedTrainingCollectTemplate::Name' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, CollectId) == 0x00000C, "Member 'FClosedTrainingCollectTemplate::CollectId' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, CollectNameSID) == 0x000010, "Member 'FClosedTrainingCollectTemplate::CollectNameSID' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, CollectStep) == 0x000014, "Member 'FClosedTrainingCollectTemplate::CollectStep' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, TrainingTotalLevel) == 0x000018, "Member 'FClosedTrainingCollectTemplate::TrainingTotalLevel' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, TrainingTotalMaxLevel) == 0x00001C, "Member 'FClosedTrainingCollectTemplate::TrainingTotalMaxLevel' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeType01) == 0x000020, "Member 'FClosedTrainingCollectTemplate::AttributeType01' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeValue01) == 0x000024, "Member 'FClosedTrainingCollectTemplate::AttributeValue01' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeType02) == 0x000028, "Member 'FClosedTrainingCollectTemplate::AttributeType02' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeValue02) == 0x00002C, "Member 'FClosedTrainingCollectTemplate::AttributeValue02' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeType03) == 0x000030, "Member 'FClosedTrainingCollectTemplate::AttributeType03' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeValue03) == 0x000034, "Member 'FClosedTrainingCollectTemplate::AttributeValue03' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeType04) == 0x000038, "Member 'FClosedTrainingCollectTemplate::AttributeType04' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeValue04) == 0x00003C, "Member 'FClosedTrainingCollectTemplate::AttributeValue04' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeType05) == 0x000040, "Member 'FClosedTrainingCollectTemplate::AttributeType05' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeValue05) == 0x000044, "Member 'FClosedTrainingCollectTemplate::AttributeValue05' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeType06) == 0x000048, "Member 'FClosedTrainingCollectTemplate::AttributeType06' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeValue06) == 0x00004C, "Member 'FClosedTrainingCollectTemplate::AttributeValue06' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeType07) == 0x000050, "Member 'FClosedTrainingCollectTemplate::AttributeType07' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeValue07) == 0x000054, "Member 'FClosedTrainingCollectTemplate::AttributeValue07' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeType08) == 0x000058, "Member 'FClosedTrainingCollectTemplate::AttributeType08' has a wrong offset!");
static_assert(offsetof(FClosedTrainingCollectTemplate, AttributeValue08) == 0x00005C, "Member 'FClosedTrainingCollectTemplate::AttributeValue08' has a wrong offset!");

// ScriptStruct MirMobile.MonsterTemplate
// 0x0098 (0x00A0 - 0x0008)
struct FMonsterTemplate final : public FTableRowBase
{
public:
	int32                                         MonsterId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterResourceID;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameTitleSid;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Race;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonGrade;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaypointAuto;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonType;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MonScale;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RunSpeed;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WalkSpeed;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHP;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HpStack;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombatPower;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PierceBody;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMONSTER_FACTION                              FactionType;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonColorGroupID;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseAppear;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeMode;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MonsterFunctionData;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectItemId;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropItemId;                                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicalAttack;                                    // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Physicaldefense;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magicdefense;                                      // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Accuracy;                                          // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dodge;                                             // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiIndex;                                           // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LongAttackRange;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonsterTemplate) == 0x000008, "Wrong alignment on FMonsterTemplate");
static_assert(sizeof(FMonsterTemplate) == 0x0000A0, "Wrong size on FMonsterTemplate");
static_assert(offsetof(FMonsterTemplate, MonsterId) == 0x000008, "Member 'FMonsterTemplate::MonsterId' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, MonsterResourceID) == 0x00000C, "Member 'FMonsterTemplate::MonsterResourceID' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, GroupId) == 0x000010, "Member 'FMonsterTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, NameSId) == 0x000014, "Member 'FMonsterTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, NameTitleSid) == 0x000018, "Member 'FMonsterTemplate::NameTitleSid' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, Race) == 0x00001C, "Member 'FMonsterTemplate::Race' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, MonGrade) == 0x000020, "Member 'FMonsterTemplate::MonGrade' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, WaypointAuto) == 0x000024, "Member 'FMonsterTemplate::WaypointAuto' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, Level) == 0x000028, "Member 'FMonsterTemplate::Level' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, MonType) == 0x00002C, "Member 'FMonsterTemplate::MonType' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, MonScale) == 0x000030, "Member 'FMonsterTemplate::MonScale' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, RunSpeed) == 0x000034, "Member 'FMonsterTemplate::RunSpeed' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, WalkSpeed) == 0x000038, "Member 'FMonsterTemplate::WalkSpeed' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, MaxHP) == 0x00003C, "Member 'FMonsterTemplate::MaxHP' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, HpStack) == 0x000040, "Member 'FMonsterTemplate::HpStack' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, CombatPower) == 0x000044, "Member 'FMonsterTemplate::CombatPower' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, PierceBody) == 0x000048, "Member 'FMonsterTemplate::PierceBody' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, FactionType) == 0x00004C, "Member 'FMonsterTemplate::FactionType' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, MonColorGroupID) == 0x000050, "Member 'FMonsterTemplate::MonColorGroupID' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, CapsuleHalfHeight) == 0x000054, "Member 'FMonsterTemplate::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, CapsuleRadius) == 0x000058, "Member 'FMonsterTemplate::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, UseAppear) == 0x00005C, "Member 'FMonsterTemplate::UseAppear' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, SiegeMode) == 0x000060, "Member 'FMonsterTemplate::SiegeMode' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, MonsterFunctionData) == 0x000068, "Member 'FMonsterTemplate::MonsterFunctionData' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, CollectItemId) == 0x000078, "Member 'FMonsterTemplate::CollectItemId' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, DropItemId) == 0x00007C, "Member 'FMonsterTemplate::DropItemId' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, PhysicalAttack) == 0x000080, "Member 'FMonsterTemplate::PhysicalAttack' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, MagicAttack) == 0x000084, "Member 'FMonsterTemplate::MagicAttack' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, Physicaldefense) == 0x000088, "Member 'FMonsterTemplate::Physicaldefense' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, Magicdefense) == 0x00008C, "Member 'FMonsterTemplate::Magicdefense' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, Accuracy) == 0x000090, "Member 'FMonsterTemplate::Accuracy' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, Dodge) == 0x000094, "Member 'FMonsterTemplate::Dodge' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, AiIndex) == 0x000098, "Member 'FMonsterTemplate::AiIndex' has a wrong offset!");
static_assert(offsetof(FMonsterTemplate, LongAttackRange) == 0x00009C, "Member 'FMonsterTemplate::LongAttackRange' has a wrong offset!");

// ScriptStruct MirMobile.ClosedTrainingStatusTemplate
// 0x0020 (0x0028 - 0x0008)
struct FClosedTrainingStatusTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingStatusId;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingGroupID;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderNum;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionLevel;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingMaxLevel;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClosedTrainingStatusTemplate) == 0x000008, "Wrong alignment on FClosedTrainingStatusTemplate");
static_assert(sizeof(FClosedTrainingStatusTemplate) == 0x000028, "Wrong size on FClosedTrainingStatusTemplate");
static_assert(offsetof(FClosedTrainingStatusTemplate, Name) == 0x000008, "Member 'FClosedTrainingStatusTemplate::Name' has a wrong offset!");
static_assert(offsetof(FClosedTrainingStatusTemplate, TrainingStatusId) == 0x00000C, "Member 'FClosedTrainingStatusTemplate::TrainingStatusId' has a wrong offset!");
static_assert(offsetof(FClosedTrainingStatusTemplate, StatusId) == 0x000010, "Member 'FClosedTrainingStatusTemplate::StatusId' has a wrong offset!");
static_assert(offsetof(FClosedTrainingStatusTemplate, TrainingGroupID) == 0x000014, "Member 'FClosedTrainingStatusTemplate::TrainingGroupID' has a wrong offset!");
static_assert(offsetof(FClosedTrainingStatusTemplate, OrderNum) == 0x000018, "Member 'FClosedTrainingStatusTemplate::OrderNum' has a wrong offset!");
static_assert(offsetof(FClosedTrainingStatusTemplate, OpenConditionLevel) == 0x00001C, "Member 'FClosedTrainingStatusTemplate::OpenConditionLevel' has a wrong offset!");
static_assert(offsetof(FClosedTrainingStatusTemplate, TrainingMaxLevel) == 0x000020, "Member 'FClosedTrainingStatusTemplate::TrainingMaxLevel' has a wrong offset!");

// ScriptStruct MirMobile.ClosedTrainingTemplate
// 0x0028 (0x0030 - 0x0008)
struct FClosedTrainingTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingGroupID;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingGroup_NameSID;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingGroup_Color;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingGroup_TabColor;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabOffID;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabOnID;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SymbolIconID;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClosedTrainingTemplate) == 0x000008, "Wrong alignment on FClosedTrainingTemplate");
static_assert(sizeof(FClosedTrainingTemplate) == 0x000030, "Wrong size on FClosedTrainingTemplate");
static_assert(offsetof(FClosedTrainingTemplate, Name) == 0x000008, "Member 'FClosedTrainingTemplate::Name' has a wrong offset!");
static_assert(offsetof(FClosedTrainingTemplate, TrainingGroupID) == 0x00000C, "Member 'FClosedTrainingTemplate::TrainingGroupID' has a wrong offset!");
static_assert(offsetof(FClosedTrainingTemplate, TrainingGroup_NameSID) == 0x000010, "Member 'FClosedTrainingTemplate::TrainingGroup_NameSID' has a wrong offset!");
static_assert(offsetof(FClosedTrainingTemplate, ClassID) == 0x000014, "Member 'FClosedTrainingTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FClosedTrainingTemplate, TrainingGroup_Color) == 0x000018, "Member 'FClosedTrainingTemplate::TrainingGroup_Color' has a wrong offset!");
static_assert(offsetof(FClosedTrainingTemplate, TrainingGroup_TabColor) == 0x00001C, "Member 'FClosedTrainingTemplate::TrainingGroup_TabColor' has a wrong offset!");
static_assert(offsetof(FClosedTrainingTemplate, TabOffID) == 0x000020, "Member 'FClosedTrainingTemplate::TabOffID' has a wrong offset!");
static_assert(offsetof(FClosedTrainingTemplate, TabOnID) == 0x000024, "Member 'FClosedTrainingTemplate::TabOnID' has a wrong offset!");
static_assert(offsetof(FClosedTrainingTemplate, SymbolIconID) == 0x000028, "Member 'FClosedTrainingTemplate::SymbolIconID' has a wrong offset!");

// ScriptStruct MirMobile.ColorIndexTemplate
// 0x0020 (0x0028 - 0x0008)
struct FColorIndexTemplate final : public FTableRowBase
{
public:
	int32                                         ColorId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HexColor;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColorName;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColorIndexTemplate) == 0x000008, "Wrong alignment on FColorIndexTemplate");
static_assert(sizeof(FColorIndexTemplate) == 0x000028, "Wrong size on FColorIndexTemplate");
static_assert(offsetof(FColorIndexTemplate, ColorId) == 0x000008, "Member 'FColorIndexTemplate::ColorId' has a wrong offset!");
static_assert(offsetof(FColorIndexTemplate, HexColor) == 0x000010, "Member 'FColorIndexTemplate::HexColor' has a wrong offset!");
static_assert(offsetof(FColorIndexTemplate, ColorName) == 0x000020, "Member 'FColorIndexTemplate::ColorName' has a wrong offset!");

// ScriptStruct MirMobile.CombatPointTemplate
// 0x0078 (0x0080 - 0x0008)
struct FCombatPointTemplate final : public FTableRowBase
{
public:
	int32                                         CommonId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Warrior;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magician;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Taoist;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assassin;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Berserker;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkTaoist;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColletStatus;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CalculateType;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x54];                                      // 0x002C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCombatPointTemplate) == 0x000008, "Wrong alignment on FCombatPointTemplate");
static_assert(sizeof(FCombatPointTemplate) == 0x000080, "Wrong size on FCombatPointTemplate");
static_assert(offsetof(FCombatPointTemplate, CommonId) == 0x000008, "Member 'FCombatPointTemplate::CommonId' has a wrong offset!");
static_assert(offsetof(FCombatPointTemplate, Warrior) == 0x00000C, "Member 'FCombatPointTemplate::Warrior' has a wrong offset!");
static_assert(offsetof(FCombatPointTemplate, Magician) == 0x000010, "Member 'FCombatPointTemplate::Magician' has a wrong offset!");
static_assert(offsetof(FCombatPointTemplate, Taoist) == 0x000014, "Member 'FCombatPointTemplate::Taoist' has a wrong offset!");
static_assert(offsetof(FCombatPointTemplate, Assassin) == 0x000018, "Member 'FCombatPointTemplate::Assassin' has a wrong offset!");
static_assert(offsetof(FCombatPointTemplate, Berserker) == 0x00001C, "Member 'FCombatPointTemplate::Berserker' has a wrong offset!");
static_assert(offsetof(FCombatPointTemplate, DarkTaoist) == 0x000020, "Member 'FCombatPointTemplate::DarkTaoist' has a wrong offset!");
static_assert(offsetof(FCombatPointTemplate, ColletStatus) == 0x000024, "Member 'FCombatPointTemplate::ColletStatus' has a wrong offset!");
static_assert(offsetof(FCombatPointTemplate, CalculateType) == 0x000028, "Member 'FCombatPointTemplate::CalculateType' has a wrong offset!");

// ScriptStruct MirMobile.ComboTemplate
// 0x0020 (0x0028 - 0x0008)
struct FComboTemplate final : public FTableRowBase
{
public:
	int32                                         ComboId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComboMin;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComboMax;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffLink;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FontColor;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComboTemplate) == 0x000008, "Wrong alignment on FComboTemplate");
static_assert(sizeof(FComboTemplate) == 0x000028, "Wrong size on FComboTemplate");
static_assert(offsetof(FComboTemplate, ComboId) == 0x000008, "Member 'FComboTemplate::ComboId' has a wrong offset!");
static_assert(offsetof(FComboTemplate, ComboMin) == 0x00000C, "Member 'FComboTemplate::ComboMin' has a wrong offset!");
static_assert(offsetof(FComboTemplate, ComboMax) == 0x000010, "Member 'FComboTemplate::ComboMax' has a wrong offset!");
static_assert(offsetof(FComboTemplate, BuffLink) == 0x000014, "Member 'FComboTemplate::BuffLink' has a wrong offset!");
static_assert(offsetof(FComboTemplate, FontColor) == 0x000018, "Member 'FComboTemplate::FontColor' has a wrong offset!");

// ScriptStruct MirMobile.CommandMarkTemplate
// 0x0018 (0x0020 - 0x0008)
struct FCommandMarkTemplate final : public FTableRowBase
{
public:
	int32                                         MarkId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommandMarkType                              CommandMarkType;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MiniMapIconId;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommandMarkTemplate) == 0x000008, "Wrong alignment on FCommandMarkTemplate");
static_assert(sizeof(FCommandMarkTemplate) == 0x000020, "Wrong size on FCommandMarkTemplate");
static_assert(offsetof(FCommandMarkTemplate, MarkId) == 0x000008, "Member 'FCommandMarkTemplate::MarkId' has a wrong offset!");
static_assert(offsetof(FCommandMarkTemplate, CommandMarkType) == 0x00000C, "Member 'FCommandMarkTemplate::CommandMarkType' has a wrong offset!");
static_assert(offsetof(FCommandMarkTemplate, MiniMapIconId) == 0x000010, "Member 'FCommandMarkTemplate::MiniMapIconId' has a wrong offset!");
static_assert(offsetof(FCommandMarkTemplate, IconID) == 0x000014, "Member 'FCommandMarkTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FCommandMarkTemplate, NameSId) == 0x000018, "Member 'FCommandMarkTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FCommandMarkTemplate, EffectId) == 0x00001C, "Member 'FCommandMarkTemplate::EffectId' has a wrong offset!");

// ScriptStruct MirMobile.CustomizingTypeTemplate
// 0x0038 (0x0040 - 0x0008)
struct FCustomizingTypeTemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizingType;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueType;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Value;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ValueInversion;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizingTypeTemplate) == 0x000008, "Wrong alignment on FCustomizingTypeTemplate");
static_assert(sizeof(FCustomizingTypeTemplate) == 0x000040, "Wrong size on FCustomizingTypeTemplate");
static_assert(offsetof(FCustomizingTypeTemplate, UniqueId) == 0x000008, "Member 'FCustomizingTypeTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FCustomizingTypeTemplate, ClassID) == 0x00000C, "Member 'FCustomizingTypeTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FCustomizingTypeTemplate, CustomizingType) == 0x000010, "Member 'FCustomizingTypeTemplate::CustomizingType' has a wrong offset!");
static_assert(offsetof(FCustomizingTypeTemplate, ValueType) == 0x000014, "Member 'FCustomizingTypeTemplate::ValueType' has a wrong offset!");
static_assert(offsetof(FCustomizingTypeTemplate, String) == 0x000018, "Member 'FCustomizingTypeTemplate::String' has a wrong offset!");
static_assert(offsetof(FCustomizingTypeTemplate, Value) == 0x000028, "Member 'FCustomizingTypeTemplate::Value' has a wrong offset!");
static_assert(offsetof(FCustomizingTypeTemplate, ValueInversion) == 0x000038, "Member 'FCustomizingTypeTemplate::ValueInversion' has a wrong offset!");

// ScriptStruct MirMobile.ContentsAdminTemplate
// 0x0020 (0x0028 - 0x0008)
struct FContentsAdminTemplate final : public FTableRowBase
{
public:
	int32                                         ContentsId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsIcon;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsName;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsOpenName;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsDesc;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuId;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VerTabId;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoriTabId;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentsAdminTemplate) == 0x000008, "Wrong alignment on FContentsAdminTemplate");
static_assert(sizeof(FContentsAdminTemplate) == 0x000028, "Wrong size on FContentsAdminTemplate");
static_assert(offsetof(FContentsAdminTemplate, ContentsId) == 0x000008, "Member 'FContentsAdminTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FContentsAdminTemplate, ContentsIcon) == 0x00000C, "Member 'FContentsAdminTemplate::ContentsIcon' has a wrong offset!");
static_assert(offsetof(FContentsAdminTemplate, ContentsName) == 0x000010, "Member 'FContentsAdminTemplate::ContentsName' has a wrong offset!");
static_assert(offsetof(FContentsAdminTemplate, ContentsOpenName) == 0x000014, "Member 'FContentsAdminTemplate::ContentsOpenName' has a wrong offset!");
static_assert(offsetof(FContentsAdminTemplate, ContentsDesc) == 0x000018, "Member 'FContentsAdminTemplate::ContentsDesc' has a wrong offset!");
static_assert(offsetof(FContentsAdminTemplate, MenuId) == 0x00001C, "Member 'FContentsAdminTemplate::MenuId' has a wrong offset!");
static_assert(offsetof(FContentsAdminTemplate, VerTabId) == 0x000020, "Member 'FContentsAdminTemplate::VerTabId' has a wrong offset!");
static_assert(offsetof(FContentsAdminTemplate, HoriTabId) == 0x000024, "Member 'FContentsAdminTemplate::HoriTabId' has a wrong offset!");

// ScriptStruct MirMobile.ContentsAlarmTemplate
// 0x0018 (0x0020 - 0x0008)
struct FContentsAlarmTemplate final : public FTableRowBase
{
public:
	int32                                         ContentsAlarmId;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlarmConditionType;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentAlarmTitle;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentAlarmDesc;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameOptionGroup;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentsAlarmTemplate) == 0x000008, "Wrong alignment on FContentsAlarmTemplate");
static_assert(sizeof(FContentsAlarmTemplate) == 0x000020, "Wrong size on FContentsAlarmTemplate");
static_assert(offsetof(FContentsAlarmTemplate, ContentsAlarmId) == 0x000008, "Member 'FContentsAlarmTemplate::ContentsAlarmId' has a wrong offset!");
static_assert(offsetof(FContentsAlarmTemplate, ContentsId) == 0x00000C, "Member 'FContentsAlarmTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FContentsAlarmTemplate, AlarmConditionType) == 0x000010, "Member 'FContentsAlarmTemplate::AlarmConditionType' has a wrong offset!");
static_assert(offsetof(FContentsAlarmTemplate, ContentAlarmTitle) == 0x000014, "Member 'FContentsAlarmTemplate::ContentAlarmTitle' has a wrong offset!");
static_assert(offsetof(FContentsAlarmTemplate, ContentAlarmDesc) == 0x000018, "Member 'FContentsAlarmTemplate::ContentAlarmDesc' has a wrong offset!");
static_assert(offsetof(FContentsAlarmTemplate, GameOptionGroup) == 0x00001C, "Member 'FContentsAlarmTemplate::GameOptionGroup' has a wrong offset!");

// ScriptStruct MirMobile.SecretDungeonTemplate
// 0x0068 (0x0070 - 0x0008)
struct FSecretDungeonTemplate final : public FStageCommonTemplate
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SDgnGroupID;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SDgnStep;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SDgnLocationID;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SDgnIconID;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SDgnNameSID;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SDgnDescSID;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SDgnPCPower;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterType;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterTypeSub;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterCount;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SDgnTimer;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SDgnEnterTime;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 MonsterLevel;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSecretDungeonTemplate) == 0x000008, "Wrong alignment on FSecretDungeonTemplate");
static_assert(sizeof(FSecretDungeonTemplate) == 0x000070, "Wrong size on FSecretDungeonTemplate");
static_assert(offsetof(FSecretDungeonTemplate, RowId) == 0x000008, "Member 'FSecretDungeonTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, SDgnGroupID) == 0x00000C, "Member 'FSecretDungeonTemplate::SDgnGroupID' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, SDgnStep) == 0x000010, "Member 'FSecretDungeonTemplate::SDgnStep' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, StageID) == 0x000014, "Member 'FSecretDungeonTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, SDgnLocationID) == 0x000018, "Member 'FSecretDungeonTemplate::SDgnLocationID' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, SDgnIconID) == 0x00001C, "Member 'FSecretDungeonTemplate::SDgnIconID' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, SDgnNameSID) == 0x000020, "Member 'FSecretDungeonTemplate::SDgnNameSID' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, SDgnDescSID) == 0x000024, "Member 'FSecretDungeonTemplate::SDgnDescSID' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, SDgnPCPower) == 0x000028, "Member 'FSecretDungeonTemplate::SDgnPCPower' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, NeedEnterType) == 0x00002C, "Member 'FSecretDungeonTemplate::NeedEnterType' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, NeedEnterTypeSub) == 0x000030, "Member 'FSecretDungeonTemplate::NeedEnterTypeSub' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, NeedEnterCount) == 0x000034, "Member 'FSecretDungeonTemplate::NeedEnterCount' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, SDgnTimer) == 0x000038, "Member 'FSecretDungeonTemplate::SDgnTimer' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, SDgnEnterTime) == 0x000040, "Member 'FSecretDungeonTemplate::SDgnEnterTime' has a wrong offset!");
static_assert(offsetof(FSecretDungeonTemplate, MonsterLevel) == 0x000050, "Member 'FSecretDungeonTemplate::MonsterLevel' has a wrong offset!");

// ScriptStruct MirMobile.ContentsOpenTemplate
// 0x0038 (0x0040 - 0x0008)
struct FContentsOpenTemplate final : public FTableRowBase
{
public:
	int32                                         ContentsId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowOnOff;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultBtnType;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionType;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionValue;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlanAlramType;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlanAlramValue;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TutorialGroupId;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LockOnOff;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerVisitUseContents;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConquerServerUseContents;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnionZoneDungeonUseContents;                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContentsOpenTemplate) == 0x000008, "Wrong alignment on FContentsOpenTemplate");
static_assert(sizeof(FContentsOpenTemplate) == 0x000040, "Wrong size on FContentsOpenTemplate");
static_assert(offsetof(FContentsOpenTemplate, ContentsId) == 0x000008, "Member 'FContentsOpenTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, ClassID) == 0x00000C, "Member 'FContentsOpenTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, ShowOnOff) == 0x000010, "Member 'FContentsOpenTemplate::ShowOnOff' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, DefaultBtnType) == 0x000014, "Member 'FContentsOpenTemplate::DefaultBtnType' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, OpenConditionType) == 0x000018, "Member 'FContentsOpenTemplate::OpenConditionType' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, OpenConditionValue) == 0x00001C, "Member 'FContentsOpenTemplate::OpenConditionValue' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, PlanAlramType) == 0x000020, "Member 'FContentsOpenTemplate::PlanAlramType' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, PlanAlramValue) == 0x000024, "Member 'FContentsOpenTemplate::PlanAlramValue' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, TutorialGroupId) == 0x000028, "Member 'FContentsOpenTemplate::TutorialGroupId' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, LockOnOff) == 0x00002C, "Member 'FContentsOpenTemplate::LockOnOff' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, ServerVisitUseContents) == 0x000030, "Member 'FContentsOpenTemplate::ServerVisitUseContents' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, ConquerServerUseContents) == 0x000034, "Member 'FContentsOpenTemplate::ConquerServerUseContents' has a wrong offset!");
static_assert(offsetof(FContentsOpenTemplate, UnionZoneDungeonUseContents) == 0x000038, "Member 'FContentsOpenTemplate::UnionZoneDungeonUseContents' has a wrong offset!");

// ScriptStruct MirMobile.ResizeFontInfo
// 0x000C (0x000C - 0x0000)
struct FResizeFontInfo final
{
public:
	int32                                         FromSourceSize;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToSourceSize;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestSize;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResizeFontInfo) == 0x000004, "Wrong alignment on FResizeFontInfo");
static_assert(sizeof(FResizeFontInfo) == 0x00000C, "Wrong size on FResizeFontInfo");
static_assert(offsetof(FResizeFontInfo, FromSourceSize) == 0x000000, "Member 'FResizeFontInfo::FromSourceSize' has a wrong offset!");
static_assert(offsetof(FResizeFontInfo, ToSourceSize) == 0x000004, "Member 'FResizeFontInfo::ToSourceSize' has a wrong offset!");
static_assert(offsetof(FResizeFontInfo, DestSize) == 0x000008, "Member 'FResizeFontInfo::DestSize' has a wrong offset!");

// ScriptStruct MirMobile.CostumePresetTemplate
// 0x0020 (0x0028 - 0x0008)
struct FCostumePresetTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PresetGroupId;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderNum;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainColorNumber;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainColorBrightness;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubColorNumber;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubColorBrightness;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCostumePresetTemplate) == 0x000008, "Wrong alignment on FCostumePresetTemplate");
static_assert(sizeof(FCostumePresetTemplate) == 0x000028, "Wrong size on FCostumePresetTemplate");
static_assert(offsetof(FCostumePresetTemplate, RowId) == 0x000008, "Member 'FCostumePresetTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FCostumePresetTemplate, PresetGroupId) == 0x00000C, "Member 'FCostumePresetTemplate::PresetGroupId' has a wrong offset!");
static_assert(offsetof(FCostumePresetTemplate, OrderNum) == 0x000010, "Member 'FCostumePresetTemplate::OrderNum' has a wrong offset!");
static_assert(offsetof(FCostumePresetTemplate, MainColorNumber) == 0x000014, "Member 'FCostumePresetTemplate::MainColorNumber' has a wrong offset!");
static_assert(offsetof(FCostumePresetTemplate, MainColorBrightness) == 0x000018, "Member 'FCostumePresetTemplate::MainColorBrightness' has a wrong offset!");
static_assert(offsetof(FCostumePresetTemplate, SubColorNumber) == 0x00001C, "Member 'FCostumePresetTemplate::SubColorNumber' has a wrong offset!");
static_assert(offsetof(FCostumePresetTemplate, SubColorBrightness) == 0x000020, "Member 'FCostumePresetTemplate::SubColorBrightness' has a wrong offset!");

// ScriptStruct MirMobile.ItemPackageTemplate
// 0x0110 (0x0118 - 0x0008)
struct FItemPackageTemplate final : public FTableRowBase
{
public:
	int32                                         PackageId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenEffect;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType1;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardId1;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue1;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardSmelting1;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType2;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardId2;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue2;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardSmelting2;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType3;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardId3;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue3;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardSmelting3;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItem1;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemValue1;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemSmelting1;                               // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItem2;                                       // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemValue2;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemSmelting2;                               // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItem3;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemValue3;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemSmelting3;                               // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItem4;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemValue4;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemSmelting4;                               // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItem5;                                       // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemValue5;                                  // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemSmelting5;                               // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItem6;                                       // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemValue6;                                  // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemSmelting6;                               // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItem7;                                       // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemValue7;                                  // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemSmelting7;                               // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemPackageTemplate) == 0x000008, "Wrong alignment on FItemPackageTemplate");
static_assert(sizeof(FItemPackageTemplate) == 0x000118, "Wrong size on FItemPackageTemplate");
static_assert(offsetof(FItemPackageTemplate, PackageId) == 0x000008, "Member 'FItemPackageTemplate::PackageId' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, OpenEffect) == 0x00000C, "Member 'FItemPackageTemplate::OpenEffect' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardType1) == 0x000010, "Member 'FItemPackageTemplate::RewardType1' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardId1) == 0x000018, "Member 'FItemPackageTemplate::RewardId1' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardValue1) == 0x000028, "Member 'FItemPackageTemplate::RewardValue1' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardSmelting1) == 0x00002C, "Member 'FItemPackageTemplate::RewardSmelting1' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardType2) == 0x000030, "Member 'FItemPackageTemplate::RewardType2' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardId2) == 0x000038, "Member 'FItemPackageTemplate::RewardId2' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardValue2) == 0x000048, "Member 'FItemPackageTemplate::RewardValue2' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardSmelting2) == 0x00004C, "Member 'FItemPackageTemplate::RewardSmelting2' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardType3) == 0x000050, "Member 'FItemPackageTemplate::RewardType3' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardId3) == 0x000058, "Member 'FItemPackageTemplate::RewardId3' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardValue3) == 0x000068, "Member 'FItemPackageTemplate::RewardValue3' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardSmelting3) == 0x00006C, "Member 'FItemPackageTemplate::RewardSmelting3' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItem1) == 0x000070, "Member 'FItemPackageTemplate::RewardItem1' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemValue1) == 0x000080, "Member 'FItemPackageTemplate::RewardItemValue1' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemSmelting1) == 0x000084, "Member 'FItemPackageTemplate::RewardItemSmelting1' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItem2) == 0x000088, "Member 'FItemPackageTemplate::RewardItem2' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemValue2) == 0x000098, "Member 'FItemPackageTemplate::RewardItemValue2' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemSmelting2) == 0x00009C, "Member 'FItemPackageTemplate::RewardItemSmelting2' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItem3) == 0x0000A0, "Member 'FItemPackageTemplate::RewardItem3' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemValue3) == 0x0000B0, "Member 'FItemPackageTemplate::RewardItemValue3' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemSmelting3) == 0x0000B4, "Member 'FItemPackageTemplate::RewardItemSmelting3' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItem4) == 0x0000B8, "Member 'FItemPackageTemplate::RewardItem4' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemValue4) == 0x0000C8, "Member 'FItemPackageTemplate::RewardItemValue4' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemSmelting4) == 0x0000CC, "Member 'FItemPackageTemplate::RewardItemSmelting4' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItem5) == 0x0000D0, "Member 'FItemPackageTemplate::RewardItem5' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemValue5) == 0x0000E0, "Member 'FItemPackageTemplate::RewardItemValue5' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemSmelting5) == 0x0000E4, "Member 'FItemPackageTemplate::RewardItemSmelting5' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItem6) == 0x0000E8, "Member 'FItemPackageTemplate::RewardItem6' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemValue6) == 0x0000F8, "Member 'FItemPackageTemplate::RewardItemValue6' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemSmelting6) == 0x0000FC, "Member 'FItemPackageTemplate::RewardItemSmelting6' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItem7) == 0x000100, "Member 'FItemPackageTemplate::RewardItem7' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemValue7) == 0x000110, "Member 'FItemPackageTemplate::RewardItemValue7' has a wrong offset!");
static_assert(offsetof(FItemPackageTemplate, RewardItemSmelting7) == 0x000114, "Member 'FItemPackageTemplate::RewardItemSmelting7' has a wrong offset!");

// ScriptStruct MirMobile.CostumeTemplate
// 0x00C0 (0x00C8 - 0x0008)
struct FCostumeTemplate final : public FTableRowBase
{
public:
	int32                                         CostumeID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeName;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeIcon;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectId;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CostumeColor01Id;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeColor02Id;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumePartsType;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourceMesh01Id;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourceMesh02Id;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmeltingEffectId;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute01Type;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute01Value;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute02Type;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute02Value;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseAbleLevel;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseMoneyType;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseMoneyId;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseMoneyValue;                                // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseTagIcon;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DiscountOpenTime;                                  // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DiscountCloseTime;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountPercnetValue;                              // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountMoneyValue;                                // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaletteGroupType;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainPaletteId;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubPaletteId;                                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PresetGroupId;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingCostType;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingCostId;                                      // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingCostValue;                                   // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasicType;                                         // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewProduct;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuxuryType;                                        // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIcon;                                          // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopProduct;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID;                                           // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCostumeTemplate) == 0x000008, "Wrong alignment on FCostumeTemplate");
static_assert(sizeof(FCostumeTemplate) == 0x0000C8, "Wrong size on FCostumeTemplate");
static_assert(offsetof(FCostumeTemplate, CostumeID) == 0x000008, "Member 'FCostumeTemplate::CostumeID' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, ClassID) == 0x00000C, "Member 'FCostumeTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, CostumeName) == 0x000010, "Member 'FCostumeTemplate::CostumeName' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, CostumeIcon) == 0x000014, "Member 'FCostumeTemplate::CostumeIcon' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, EffectId) == 0x000018, "Member 'FCostumeTemplate::EffectId' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, CostumeColor01Id) == 0x000028, "Member 'FCostumeTemplate::CostumeColor01Id' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, CostumeColor02Id) == 0x00002C, "Member 'FCostumeTemplate::CostumeColor02Id' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, CostumePartsType) == 0x000030, "Member 'FCostumeTemplate::CostumePartsType' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, ResourceMesh01Id) == 0x000034, "Member 'FCostumeTemplate::ResourceMesh01Id' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, ResourceMesh02Id) == 0x000038, "Member 'FCostumeTemplate::ResourceMesh02Id' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, SmeltingEffectId) == 0x00003C, "Member 'FCostumeTemplate::SmeltingEffectId' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, Attribute01Type) == 0x000040, "Member 'FCostumeTemplate::Attribute01Type' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, Attribute01Value) == 0x000044, "Member 'FCostumeTemplate::Attribute01Value' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, Attribute02Type) == 0x000048, "Member 'FCostumeTemplate::Attribute02Type' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, Attribute02Value) == 0x00004C, "Member 'FCostumeTemplate::Attribute02Value' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, PurchaseAbleLevel) == 0x000050, "Member 'FCostumeTemplate::PurchaseAbleLevel' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, PurchaseMoneyType) == 0x000054, "Member 'FCostumeTemplate::PurchaseMoneyType' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, PurchaseMoneyId) == 0x000058, "Member 'FCostumeTemplate::PurchaseMoneyId' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, PurchaseMoneyValue) == 0x00005C, "Member 'FCostumeTemplate::PurchaseMoneyValue' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, PurchaseTagIcon) == 0x000060, "Member 'FCostumeTemplate::PurchaseTagIcon' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, DiscountOpenTime) == 0x000068, "Member 'FCostumeTemplate::DiscountOpenTime' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, DiscountCloseTime) == 0x000078, "Member 'FCostumeTemplate::DiscountCloseTime' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, DiscountPercnetValue) == 0x000088, "Member 'FCostumeTemplate::DiscountPercnetValue' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, DiscountMoneyValue) == 0x00008C, "Member 'FCostumeTemplate::DiscountMoneyValue' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, PaletteGroupType) == 0x000090, "Member 'FCostumeTemplate::PaletteGroupType' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, MainPaletteId) == 0x000094, "Member 'FCostumeTemplate::MainPaletteId' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, SubPaletteId) == 0x000098, "Member 'FCostumeTemplate::SubPaletteId' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, PresetGroupId) == 0x00009C, "Member 'FCostumeTemplate::PresetGroupId' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, DyeingCostType) == 0x0000A0, "Member 'FCostumeTemplate::DyeingCostType' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, DyeingCostId) == 0x0000A4, "Member 'FCostumeTemplate::DyeingCostId' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, DyeingCostValue) == 0x0000A8, "Member 'FCostumeTemplate::DyeingCostValue' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, BasicType) == 0x0000AC, "Member 'FCostumeTemplate::BasicType' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, NewProduct) == 0x0000B0, "Member 'FCostumeTemplate::NewProduct' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, LuxuryType) == 0x0000B4, "Member 'FCostumeTemplate::LuxuryType' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, SlotIcon) == 0x0000B8, "Member 'FCostumeTemplate::SlotIcon' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, ShopProduct) == 0x0000BC, "Member 'FCostumeTemplate::ShopProduct' has a wrong offset!");
static_assert(offsetof(FCostumeTemplate, GoodsID) == 0x0000C0, "Member 'FCostumeTemplate::GoodsID' has a wrong offset!");

// ScriptStruct MirMobile.ResourceMeshTemplate
// 0x0048 (0x0050 - 0x0008)
struct FResourceMeshTemplate final : public FTableRowBase
{
public:
	int32                                         ResourceId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartsIndex;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 HidePartsIndex;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AnimBlueprintID;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomizeFileName;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceMeshTemplate) == 0x000008, "Wrong alignment on FResourceMeshTemplate");
static_assert(sizeof(FResourceMeshTemplate) == 0x000050, "Wrong size on FResourceMeshTemplate");
static_assert(offsetof(FResourceMeshTemplate, ResourceId) == 0x000008, "Member 'FResourceMeshTemplate::ResourceId' has a wrong offset!");
static_assert(offsetof(FResourceMeshTemplate, PartsIndex) == 0x00000C, "Member 'FResourceMeshTemplate::PartsIndex' has a wrong offset!");
static_assert(offsetof(FResourceMeshTemplate, HidePartsIndex) == 0x000010, "Member 'FResourceMeshTemplate::HidePartsIndex' has a wrong offset!");
static_assert(offsetof(FResourceMeshTemplate, AnimBlueprintID) == 0x000020, "Member 'FResourceMeshTemplate::AnimBlueprintID' has a wrong offset!");
static_assert(offsetof(FResourceMeshTemplate, SocketName) == 0x000024, "Member 'FResourceMeshTemplate::SocketName' has a wrong offset!");
static_assert(offsetof(FResourceMeshTemplate, Filename) == 0x000030, "Member 'FResourceMeshTemplate::Filename' has a wrong offset!");
static_assert(offsetof(FResourceMeshTemplate, CustomizeFileName) == 0x000040, "Member 'FResourceMeshTemplate::CustomizeFileName' has a wrong offset!");

// ScriptStruct MirMobile.ItemTemplate
// 0x0110 (0x0118 - 0x0008)
struct FItemTemplate final : public FTableRowBase
{
public:
	int32                                         ItemId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoteSid;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MeshID;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainType;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubType;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmeltingType;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqClassLevel;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PET_Origin;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SellType;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SellPrice;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stackable;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Cooltime;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffId;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ItemOptionType;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetGroupId;                                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmeltingMaxCount;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JewelUpgradeType;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JewelUpgradeCount;                                 // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomGetInfoId;                                   // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetWayId;                                          // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverlapEquipAble;                                  // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnsealingType;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenboxRewardType;                                 // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenboxRewardId;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomGetCnt;                                      // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Durability;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Durability_RepairAble;                             // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TradeType;                                         // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseTimeType;                                       // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseId;                                             // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UseEndType_Period;                                 // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UseEndType_Minute;                                 // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lockable;                                          // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XDracoDelayMinute;                                 // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GachaTap;                                          // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceGroup;                                       // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipGroup;                                        // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemCasting;                                       // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectAniType;                                    // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0xC];                                      // 0x010C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemTemplate) == 0x000008, "Wrong alignment on FItemTemplate");
static_assert(sizeof(FItemTemplate) == 0x000118, "Wrong size on FItemTemplate");
static_assert(offsetof(FItemTemplate, ItemId) == 0x000008, "Member 'FItemTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FItemTemplate, NameSId) == 0x00000C, "Member 'FItemTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FItemTemplate, NoteSid) == 0x000010, "Member 'FItemTemplate::NoteSid' has a wrong offset!");
static_assert(offsetof(FItemTemplate, MeshID) == 0x000018, "Member 'FItemTemplate::MeshID' has a wrong offset!");
static_assert(offsetof(FItemTemplate, Icon) == 0x000028, "Member 'FItemTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FItemTemplate, Level) == 0x00002C, "Member 'FItemTemplate::Level' has a wrong offset!");
static_assert(offsetof(FItemTemplate, MainType) == 0x000030, "Member 'FItemTemplate::MainType' has a wrong offset!");
static_assert(offsetof(FItemTemplate, SubType) == 0x000034, "Member 'FItemTemplate::SubType' has a wrong offset!");
static_assert(offsetof(FItemTemplate, SmeltingType) == 0x000038, "Member 'FItemTemplate::SmeltingType' has a wrong offset!");
static_assert(offsetof(FItemTemplate, SortOrder) == 0x00003C, "Member 'FItemTemplate::SortOrder' has a wrong offset!");
static_assert(offsetof(FItemTemplate, ClassID) == 0x000040, "Member 'FItemTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FItemTemplate, ReqClassLevel) == 0x000044, "Member 'FItemTemplate::ReqClassLevel' has a wrong offset!");
static_assert(offsetof(FItemTemplate, Tier) == 0x000048, "Member 'FItemTemplate::Tier' has a wrong offset!");
static_assert(offsetof(FItemTemplate, Grade) == 0x00004C, "Member 'FItemTemplate::Grade' has a wrong offset!");
static_assert(offsetof(FItemTemplate, PET_Origin) == 0x000050, "Member 'FItemTemplate::PET_Origin' has a wrong offset!");
static_assert(offsetof(FItemTemplate, SellType) == 0x000054, "Member 'FItemTemplate::SellType' has a wrong offset!");
static_assert(offsetof(FItemTemplate, SellPrice) == 0x000058, "Member 'FItemTemplate::SellPrice' has a wrong offset!");
static_assert(offsetof(FItemTemplate, Stackable) == 0x00005C, "Member 'FItemTemplate::Stackable' has a wrong offset!");
static_assert(offsetof(FItemTemplate, Cooltime) == 0x000060, "Member 'FItemTemplate::Cooltime' has a wrong offset!");
static_assert(offsetof(FItemTemplate, BuffId) == 0x000068, "Member 'FItemTemplate::BuffId' has a wrong offset!");
static_assert(offsetof(FItemTemplate, ItemOptionType) == 0x000078, "Member 'FItemTemplate::ItemOptionType' has a wrong offset!");
static_assert(offsetof(FItemTemplate, SetGroupId) == 0x00007C, "Member 'FItemTemplate::SetGroupId' has a wrong offset!");
static_assert(offsetof(FItemTemplate, SmeltingMaxCount) == 0x000080, "Member 'FItemTemplate::SmeltingMaxCount' has a wrong offset!");
static_assert(offsetof(FItemTemplate, JewelUpgradeType) == 0x000084, "Member 'FItemTemplate::JewelUpgradeType' has a wrong offset!");
static_assert(offsetof(FItemTemplate, JewelUpgradeCount) == 0x000088, "Member 'FItemTemplate::JewelUpgradeCount' has a wrong offset!");
static_assert(offsetof(FItemTemplate, RandomGetInfoId) == 0x00008C, "Member 'FItemTemplate::RandomGetInfoId' has a wrong offset!");
static_assert(offsetof(FItemTemplate, GetWayId) == 0x000090, "Member 'FItemTemplate::GetWayId' has a wrong offset!");
static_assert(offsetof(FItemTemplate, OverlapEquipAble) == 0x000094, "Member 'FItemTemplate::OverlapEquipAble' has a wrong offset!");
static_assert(offsetof(FItemTemplate, UnsealingType) == 0x000098, "Member 'FItemTemplate::UnsealingType' has a wrong offset!");
static_assert(offsetof(FItemTemplate, OpenboxRewardType) == 0x00009C, "Member 'FItemTemplate::OpenboxRewardType' has a wrong offset!");
static_assert(offsetof(FItemTemplate, OpenboxRewardId) == 0x0000A0, "Member 'FItemTemplate::OpenboxRewardId' has a wrong offset!");
static_assert(offsetof(FItemTemplate, RandomGetCnt) == 0x0000A4, "Member 'FItemTemplate::RandomGetCnt' has a wrong offset!");
static_assert(offsetof(FItemTemplate, Durability) == 0x0000A8, "Member 'FItemTemplate::Durability' has a wrong offset!");
static_assert(offsetof(FItemTemplate, Durability_RepairAble) == 0x0000AC, "Member 'FItemTemplate::Durability_RepairAble' has a wrong offset!");
static_assert(offsetof(FItemTemplate, TradeType) == 0x0000B0, "Member 'FItemTemplate::TradeType' has a wrong offset!");
static_assert(offsetof(FItemTemplate, UseTimeType) == 0x0000B4, "Member 'FItemTemplate::UseTimeType' has a wrong offset!");
static_assert(offsetof(FItemTemplate, UseId) == 0x0000B8, "Member 'FItemTemplate::UseId' has a wrong offset!");
static_assert(offsetof(FItemTemplate, UseEndType_Period) == 0x0000C0, "Member 'FItemTemplate::UseEndType_Period' has a wrong offset!");
static_assert(offsetof(FItemTemplate, UseEndType_Minute) == 0x0000D0, "Member 'FItemTemplate::UseEndType_Minute' has a wrong offset!");
static_assert(offsetof(FItemTemplate, Lockable) == 0x0000E0, "Member 'FItemTemplate::Lockable' has a wrong offset!");
static_assert(offsetof(FItemTemplate, XDracoDelayMinute) == 0x0000E4, "Member 'FItemTemplate::XDracoDelayMinute' has a wrong offset!");
static_assert(offsetof(FItemTemplate, GachaTap) == 0x0000E8, "Member 'FItemTemplate::GachaTap' has a wrong offset!");
static_assert(offsetof(FItemTemplate, TranceGroup) == 0x0000EC, "Member 'FItemTemplate::TranceGroup' has a wrong offset!");
static_assert(offsetof(FItemTemplate, EquipGroup) == 0x0000F0, "Member 'FItemTemplate::EquipGroup' has a wrong offset!");
static_assert(offsetof(FItemTemplate, ItemCasting) == 0x0000F8, "Member 'FItemTemplate::ItemCasting' has a wrong offset!");
static_assert(offsetof(FItemTemplate, CollectAniType) == 0x000108, "Member 'FItemTemplate::CollectAniType' has a wrong offset!");

// ScriptStruct MirMobile.ItemMysticalPieceTranceTemplate
// 0x0048 (0x0050 - 0x0008)
struct FItemMysticalPieceTranceTemplate final : public FTableRowBase
{
public:
	int32                                         TranceID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceStep;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceType;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusValue;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue01;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue06;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue11;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue16;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue21;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue26;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue31;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue36;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue41;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue46;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveLv;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePointPerLv;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMysticalPieceTranceTemplate) == 0x000008, "Wrong alignment on FItemMysticalPieceTranceTemplate");
static_assert(sizeof(FItemMysticalPieceTranceTemplate) == 0x000050, "Wrong size on FItemMysticalPieceTranceTemplate");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, TranceID) == 0x000008, "Member 'FItemMysticalPieceTranceTemplate::TranceID' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, TranceStep) == 0x00000C, "Member 'FItemMysticalPieceTranceTemplate::TranceStep' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, TranceType) == 0x000010, "Member 'FItemMysticalPieceTranceTemplate::TranceType' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, AttributeType) == 0x000014, "Member 'FItemMysticalPieceTranceTemplate::AttributeType' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, StatusValue) == 0x000018, "Member 'FItemMysticalPieceTranceTemplate::StatusValue' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, OptionGradeValue01) == 0x00001C, "Member 'FItemMysticalPieceTranceTemplate::OptionGradeValue01' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, OptionGradeValue06) == 0x000020, "Member 'FItemMysticalPieceTranceTemplate::OptionGradeValue06' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, OptionGradeValue11) == 0x000024, "Member 'FItemMysticalPieceTranceTemplate::OptionGradeValue11' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, OptionGradeValue16) == 0x000028, "Member 'FItemMysticalPieceTranceTemplate::OptionGradeValue16' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, OptionGradeValue21) == 0x00002C, "Member 'FItemMysticalPieceTranceTemplate::OptionGradeValue21' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, OptionGradeValue26) == 0x000030, "Member 'FItemMysticalPieceTranceTemplate::OptionGradeValue26' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, OptionGradeValue31) == 0x000034, "Member 'FItemMysticalPieceTranceTemplate::OptionGradeValue31' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, OptionGradeValue36) == 0x000038, "Member 'FItemMysticalPieceTranceTemplate::OptionGradeValue36' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, OptionGradeValue41) == 0x00003C, "Member 'FItemMysticalPieceTranceTemplate::OptionGradeValue41' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, OptionGradeValue46) == 0x000040, "Member 'FItemMysticalPieceTranceTemplate::OptionGradeValue46' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, PassiveLv) == 0x000044, "Member 'FItemMysticalPieceTranceTemplate::PassiveLv' has a wrong offset!");
static_assert(offsetof(FItemMysticalPieceTranceTemplate, BattlePointPerLv) == 0x000048, "Member 'FItemMysticalPieceTranceTemplate::BattlePointPerLv' has a wrong offset!");

// ScriptStruct MirMobile.CustomizingCameraTemplate
// 0x0040 (0x0048 - 0x0008)
struct FCustomizingCameraTemplate final : public FTableRowBase
{
public:
	class FString                                 CameraName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraLocation;                                    // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CameraFov;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterYaw;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 LinkCategoryArray;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizingCameraTemplate) == 0x000008, "Wrong alignment on FCustomizingCameraTemplate");
static_assert(sizeof(FCustomizingCameraTemplate) == 0x000048, "Wrong size on FCustomizingCameraTemplate");
static_assert(offsetof(FCustomizingCameraTemplate, CameraName) == 0x000008, "Member 'FCustomizingCameraTemplate::CameraName' has a wrong offset!");
static_assert(offsetof(FCustomizingCameraTemplate, CameraLocation) == 0x000018, "Member 'FCustomizingCameraTemplate::CameraLocation' has a wrong offset!");
static_assert(offsetof(FCustomizingCameraTemplate, CameraRotation) == 0x000024, "Member 'FCustomizingCameraTemplate::CameraRotation' has a wrong offset!");
static_assert(offsetof(FCustomizingCameraTemplate, CameraFov) == 0x000030, "Member 'FCustomizingCameraTemplate::CameraFov' has a wrong offset!");
static_assert(offsetof(FCustomizingCameraTemplate, CharacterYaw) == 0x000034, "Member 'FCustomizingCameraTemplate::CharacterYaw' has a wrong offset!");
static_assert(offsetof(FCustomizingCameraTemplate, LinkCategoryArray) == 0x000038, "Member 'FCustomizingCameraTemplate::LinkCategoryArray' has a wrong offset!");

// ScriptStruct MirMobile.CustomizingCategoryTemplate
// 0x0018 (0x0020 - 0x0008)
struct FCustomizingCategoryTemplate final : public FTableRowBase
{
public:
	int32                                         CategoryID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BelongedCategory;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UncheckedIconID;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckedIconID;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameStringID;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsType;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizingCategoryTemplate) == 0x000008, "Wrong alignment on FCustomizingCategoryTemplate");
static_assert(sizeof(FCustomizingCategoryTemplate) == 0x000020, "Wrong size on FCustomizingCategoryTemplate");
static_assert(offsetof(FCustomizingCategoryTemplate, CategoryID) == 0x000008, "Member 'FCustomizingCategoryTemplate::CategoryID' has a wrong offset!");
static_assert(offsetof(FCustomizingCategoryTemplate, BelongedCategory) == 0x00000C, "Member 'FCustomizingCategoryTemplate::BelongedCategory' has a wrong offset!");
static_assert(offsetof(FCustomizingCategoryTemplate, UncheckedIconID) == 0x000010, "Member 'FCustomizingCategoryTemplate::UncheckedIconID' has a wrong offset!");
static_assert(offsetof(FCustomizingCategoryTemplate, CheckedIconID) == 0x000014, "Member 'FCustomizingCategoryTemplate::CheckedIconID' has a wrong offset!");
static_assert(offsetof(FCustomizingCategoryTemplate, NameStringID) == 0x000018, "Member 'FCustomizingCategoryTemplate::NameStringID' has a wrong offset!");
static_assert(offsetof(FCustomizingCategoryTemplate, ContentsType) == 0x00001C, "Member 'FCustomizingCategoryTemplate::ContentsType' has a wrong offset!");

// ScriptStruct MirMobile.CustomizingComponentTemplate
// 0x0048 (0x0050 - 0x0008)
struct FCustomizingComponentTemplate final : public FTableRowBase
{
public:
	int32                                         ComponentID;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BelongedCategory;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomizingComponentType                     ComponentType;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponetName;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CustomizingType;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ListIconArray;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RecordType;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddComponetID;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SliderChangesPalette;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceMarkIndex;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizingComponentTemplate) == 0x000008, "Wrong alignment on FCustomizingComponentTemplate");
static_assert(sizeof(FCustomizingComponentTemplate) == 0x000050, "Wrong size on FCustomizingComponentTemplate");
static_assert(offsetof(FCustomizingComponentTemplate, ComponentID) == 0x000008, "Member 'FCustomizingComponentTemplate::ComponentID' has a wrong offset!");
static_assert(offsetof(FCustomizingComponentTemplate, BelongedCategory) == 0x00000C, "Member 'FCustomizingComponentTemplate::BelongedCategory' has a wrong offset!");
static_assert(offsetof(FCustomizingComponentTemplate, Order) == 0x000010, "Member 'FCustomizingComponentTemplate::Order' has a wrong offset!");
static_assert(offsetof(FCustomizingComponentTemplate, ComponentType) == 0x000014, "Member 'FCustomizingComponentTemplate::ComponentType' has a wrong offset!");
static_assert(offsetof(FCustomizingComponentTemplate, ComponetName) == 0x000018, "Member 'FCustomizingComponentTemplate::ComponetName' has a wrong offset!");
static_assert(offsetof(FCustomizingComponentTemplate, CustomizingType) == 0x000020, "Member 'FCustomizingComponentTemplate::CustomizingType' has a wrong offset!");
static_assert(offsetof(FCustomizingComponentTemplate, ListIconArray) == 0x000030, "Member 'FCustomizingComponentTemplate::ListIconArray' has a wrong offset!");
static_assert(offsetof(FCustomizingComponentTemplate, RecordType) == 0x000040, "Member 'FCustomizingComponentTemplate::RecordType' has a wrong offset!");
static_assert(offsetof(FCustomizingComponentTemplate, AddComponetID) == 0x000044, "Member 'FCustomizingComponentTemplate::AddComponetID' has a wrong offset!");
static_assert(offsetof(FCustomizingComponentTemplate, SliderChangesPalette) == 0x000048, "Member 'FCustomizingComponentTemplate::SliderChangesPalette' has a wrong offset!");
static_assert(offsetof(FCustomizingComponentTemplate, FaceMarkIndex) == 0x00004C, "Member 'FCustomizingComponentTemplate::FaceMarkIndex' has a wrong offset!");

// ScriptStruct MirMobile.GuildContributeRewardTemplate
// 0x00F8 (0x0100 - 0x0008)
struct FGuildContributeRewardTemplate final : public FTableRowBase
{
public:
	int32                                         ContributeId;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContributeGroup;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardType1;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContributeRewardTypeSub1;                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardType2;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContributeRewardTypeSub2;                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardType3;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContributeRewardTypeSub3;                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardType4;                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContributeRewardTypeSub4;                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardType5;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContributeRewardTypeSub5;                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardType6;                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContributeRewardTypeSub6;                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardType7;                             // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContributeRewardTypeSub7;                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardType8;                             // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContributeRewardTypeSub8;                          // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardType9;                             // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContributeRewardTypeSub9;                          // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardType10;                            // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContributeRewardTypeSub10;                         // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildContributeRewardTemplate) == 0x000008, "Wrong alignment on FGuildContributeRewardTemplate");
static_assert(sizeof(FGuildContributeRewardTemplate) == 0x000100, "Wrong size on FGuildContributeRewardTemplate");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeId) == 0x000008, "Member 'FGuildContributeRewardTemplate::ContributeId' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeGroup) == 0x00000C, "Member 'FGuildContributeRewardTemplate::ContributeGroup' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardType1) == 0x000010, "Member 'FGuildContributeRewardTemplate::ContributeRewardType1' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardTypeSub1) == 0x000018, "Member 'FGuildContributeRewardTemplate::ContributeRewardTypeSub1' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardType2) == 0x000028, "Member 'FGuildContributeRewardTemplate::ContributeRewardType2' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardTypeSub2) == 0x000030, "Member 'FGuildContributeRewardTemplate::ContributeRewardTypeSub2' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardType3) == 0x000040, "Member 'FGuildContributeRewardTemplate::ContributeRewardType3' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardTypeSub3) == 0x000048, "Member 'FGuildContributeRewardTemplate::ContributeRewardTypeSub3' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardType4) == 0x000058, "Member 'FGuildContributeRewardTemplate::ContributeRewardType4' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardTypeSub4) == 0x000060, "Member 'FGuildContributeRewardTemplate::ContributeRewardTypeSub4' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardType5) == 0x000070, "Member 'FGuildContributeRewardTemplate::ContributeRewardType5' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardTypeSub5) == 0x000078, "Member 'FGuildContributeRewardTemplate::ContributeRewardTypeSub5' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardType6) == 0x000088, "Member 'FGuildContributeRewardTemplate::ContributeRewardType6' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardTypeSub6) == 0x000090, "Member 'FGuildContributeRewardTemplate::ContributeRewardTypeSub6' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardType7) == 0x0000A0, "Member 'FGuildContributeRewardTemplate::ContributeRewardType7' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardTypeSub7) == 0x0000A8, "Member 'FGuildContributeRewardTemplate::ContributeRewardTypeSub7' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardType8) == 0x0000B8, "Member 'FGuildContributeRewardTemplate::ContributeRewardType8' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardTypeSub8) == 0x0000C0, "Member 'FGuildContributeRewardTemplate::ContributeRewardTypeSub8' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardType9) == 0x0000D0, "Member 'FGuildContributeRewardTemplate::ContributeRewardType9' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardTypeSub9) == 0x0000D8, "Member 'FGuildContributeRewardTemplate::ContributeRewardTypeSub9' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardType10) == 0x0000E8, "Member 'FGuildContributeRewardTemplate::ContributeRewardType10' has a wrong offset!");
static_assert(offsetof(FGuildContributeRewardTemplate, ContributeRewardTypeSub10) == 0x0000F0, "Member 'FGuildContributeRewardTemplate::ContributeRewardTypeSub10' has a wrong offset!");

// ScriptStruct MirMobile.CustomizingPresetTemplate
// 0x0010 (0x0018 - 0x0008)
struct FCustomizingPresetTemplate final : public FTableRowBase
{
public:
	int32                                         PresetGroup;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainType;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeValue;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizingPresetTemplate) == 0x000008, "Wrong alignment on FCustomizingPresetTemplate");
static_assert(sizeof(FCustomizingPresetTemplate) == 0x000018, "Wrong size on FCustomizingPresetTemplate");
static_assert(offsetof(FCustomizingPresetTemplate, PresetGroup) == 0x000008, "Member 'FCustomizingPresetTemplate::PresetGroup' has a wrong offset!");
static_assert(offsetof(FCustomizingPresetTemplate, MainType) == 0x00000C, "Member 'FCustomizingPresetTemplate::MainType' has a wrong offset!");
static_assert(offsetof(FCustomizingPresetTemplate, CustomizeValue) == 0x000010, "Member 'FCustomizingPresetTemplate::CustomizeValue' has a wrong offset!");

// ScriptStruct MirMobile.CustomizingSettingTemplate
// 0x0060 (0x0068 - 0x0008)
struct FCustomizingSettingTemplate final : public FTableRowBase
{
public:
	TArray<float>                                 Stiffness;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Damping;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CameraFov;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        CameraLocation;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       CameraRotation;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                CharacterScale;                                    // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizingSettingTemplate) == 0x000008, "Wrong alignment on FCustomizingSettingTemplate");
static_assert(sizeof(FCustomizingSettingTemplate) == 0x000068, "Wrong size on FCustomizingSettingTemplate");
static_assert(offsetof(FCustomizingSettingTemplate, Stiffness) == 0x000008, "Member 'FCustomizingSettingTemplate::Stiffness' has a wrong offset!");
static_assert(offsetof(FCustomizingSettingTemplate, Damping) == 0x000018, "Member 'FCustomizingSettingTemplate::Damping' has a wrong offset!");
static_assert(offsetof(FCustomizingSettingTemplate, CameraFov) == 0x000028, "Member 'FCustomizingSettingTemplate::CameraFov' has a wrong offset!");
static_assert(offsetof(FCustomizingSettingTemplate, CameraLocation) == 0x000038, "Member 'FCustomizingSettingTemplate::CameraLocation' has a wrong offset!");
static_assert(offsetof(FCustomizingSettingTemplate, CameraRotation) == 0x000048, "Member 'FCustomizingSettingTemplate::CameraRotation' has a wrong offset!");
static_assert(offsetof(FCustomizingSettingTemplate, CharacterScale) == 0x000058, "Member 'FCustomizingSettingTemplate::CharacterScale' has a wrong offset!");

// ScriptStruct MirMobile.GachaListTemplate
// 0x0020 (0x0028 - 0x0008)
struct FGachaListTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListGroupId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGachaListTemplate) == 0x000008, "Wrong alignment on FGachaListTemplate");
static_assert(sizeof(FGachaListTemplate) == 0x000028, "Wrong size on FGachaListTemplate");
static_assert(offsetof(FGachaListTemplate, Name) == 0x000008, "Member 'FGachaListTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGachaListTemplate, ListGroupId) == 0x00000C, "Member 'FGachaListTemplate::ListGroupId' has a wrong offset!");
static_assert(offsetof(FGachaListTemplate, ItemId) == 0x000010, "Member 'FGachaListTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FGachaListTemplate, Value) == 0x000020, "Member 'FGachaListTemplate::Value' has a wrong offset!");

// ScriptStruct MirMobile.DailyWorkPlusRewardTemplate
// 0x0028 (0x0030 - 0x0008)
struct FDailyWorkPlusRewardTemplate final : public FTableRowBase
{
public:
	int32                                         PlusRewardId;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestDailyHomeworkGroupId;                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsType;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsCount;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItemId;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDailyWorkPlusRewardTemplate) == 0x000008, "Wrong alignment on FDailyWorkPlusRewardTemplate");
static_assert(sizeof(FDailyWorkPlusRewardTemplate) == 0x000030, "Wrong size on FDailyWorkPlusRewardTemplate");
static_assert(offsetof(FDailyWorkPlusRewardTemplate, PlusRewardId) == 0x000008, "Member 'FDailyWorkPlusRewardTemplate::PlusRewardId' has a wrong offset!");
static_assert(offsetof(FDailyWorkPlusRewardTemplate, QuestDailyHomeworkGroupId) == 0x00000C, "Member 'FDailyWorkPlusRewardTemplate::QuestDailyHomeworkGroupId' has a wrong offset!");
static_assert(offsetof(FDailyWorkPlusRewardTemplate, RewardGoodsType) == 0x000010, "Member 'FDailyWorkPlusRewardTemplate::RewardGoodsType' has a wrong offset!");
static_assert(offsetof(FDailyWorkPlusRewardTemplate, RewardGoodsCount) == 0x000014, "Member 'FDailyWorkPlusRewardTemplate::RewardGoodsCount' has a wrong offset!");
static_assert(offsetof(FDailyWorkPlusRewardTemplate, RewardItemId) == 0x000018, "Member 'FDailyWorkPlusRewardTemplate::RewardItemId' has a wrong offset!");
static_assert(offsetof(FDailyWorkPlusRewardTemplate, RewardItemCount) == 0x000028, "Member 'FDailyWorkPlusRewardTemplate::RewardItemCount' has a wrong offset!");

// ScriptStruct MirMobile.DailyWorkTemplate
// 0x0068 (0x0070 - 0x0008)
struct FDailyWorkTemplate final : public FTableRowBase
{
public:
	int32                                         QuestDailyHomeworkId;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestDailyHomeworkGroupId;                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestDailyHomeworkIcon;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestDailyHomeworkTitleSID;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestDailyHomeworkTextSID;                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionType;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionTarget;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter1;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter2;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentOpenPage;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGOLD;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsType;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsCount;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItem01Id;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItem01Count;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItem02Id;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItem02Count;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDailyWorkTemplate) == 0x000008, "Wrong alignment on FDailyWorkTemplate");
static_assert(sizeof(FDailyWorkTemplate) == 0x000070, "Wrong size on FDailyWorkTemplate");
static_assert(offsetof(FDailyWorkTemplate, QuestDailyHomeworkId) == 0x000008, "Member 'FDailyWorkTemplate::QuestDailyHomeworkId' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, QuestDailyHomeworkGroupId) == 0x00000C, "Member 'FDailyWorkTemplate::QuestDailyHomeworkGroupId' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, QuestDailyHomeworkIcon) == 0x000010, "Member 'FDailyWorkTemplate::QuestDailyHomeworkIcon' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, QuestDailyHomeworkTitleSID) == 0x000014, "Member 'FDailyWorkTemplate::QuestDailyHomeworkTitleSID' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, QuestDailyHomeworkTextSID) == 0x000018, "Member 'FDailyWorkTemplate::QuestDailyHomeworkTextSID' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, MissionType) == 0x00001C, "Member 'FDailyWorkTemplate::MissionType' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, MissionTarget) == 0x000020, "Member 'FDailyWorkTemplate::MissionTarget' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, Parameter1) == 0x000024, "Member 'FDailyWorkTemplate::Parameter1' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, Parameter2) == 0x000028, "Member 'FDailyWorkTemplate::Parameter2' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, ContentOpenPage) == 0x00002C, "Member 'FDailyWorkTemplate::ContentOpenPage' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, RewardGOLD) == 0x000030, "Member 'FDailyWorkTemplate::RewardGOLD' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, RewardGoodsType) == 0x000034, "Member 'FDailyWorkTemplate::RewardGoodsType' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, RewardGoodsCount) == 0x000038, "Member 'FDailyWorkTemplate::RewardGoodsCount' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, RewardItem01Id) == 0x000040, "Member 'FDailyWorkTemplate::RewardItem01Id' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, RewardItem01Count) == 0x000050, "Member 'FDailyWorkTemplate::RewardItem01Count' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, RewardItem02Id) == 0x000058, "Member 'FDailyWorkTemplate::RewardItem02Id' has a wrong offset!");
static_assert(offsetof(FDailyWorkTemplate, RewardItem02Count) == 0x000068, "Member 'FDailyWorkTemplate::RewardItem02Count' has a wrong offset!");

// ScriptStruct MirMobile.DarkAltarTemplate
// 0x0030 (0x0038 - 0x0008)
struct FDarkAltarTemplate final : public FTableRowBase
{
public:
	int32                                         Altar_Id;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stage_Id;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Monster_Id;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_BattleRunTime;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_BattleEnd_BuffId;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_Destroy_BuffId;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Defender_Dominionid;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Altar_Destroy_BuffApplyStageId;                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDarkAltarTemplate) == 0x000008, "Wrong alignment on FDarkAltarTemplate");
static_assert(sizeof(FDarkAltarTemplate) == 0x000038, "Wrong size on FDarkAltarTemplate");
static_assert(offsetof(FDarkAltarTemplate, Altar_Id) == 0x000008, "Member 'FDarkAltarTemplate::Altar_Id' has a wrong offset!");
static_assert(offsetof(FDarkAltarTemplate, Stage_Id) == 0x00000C, "Member 'FDarkAltarTemplate::Stage_Id' has a wrong offset!");
static_assert(offsetof(FDarkAltarTemplate, Monster_Id) == 0x000010, "Member 'FDarkAltarTemplate::Monster_Id' has a wrong offset!");
static_assert(offsetof(FDarkAltarTemplate, Altar_BattleRunTime) == 0x000014, "Member 'FDarkAltarTemplate::Altar_BattleRunTime' has a wrong offset!");
static_assert(offsetof(FDarkAltarTemplate, Altar_BattleEnd_BuffId) == 0x000018, "Member 'FDarkAltarTemplate::Altar_BattleEnd_BuffId' has a wrong offset!");
static_assert(offsetof(FDarkAltarTemplate, Altar_Destroy_BuffId) == 0x00001C, "Member 'FDarkAltarTemplate::Altar_Destroy_BuffId' has a wrong offset!");
static_assert(offsetof(FDarkAltarTemplate, Defender_Dominionid) == 0x000020, "Member 'FDarkAltarTemplate::Defender_Dominionid' has a wrong offset!");
static_assert(offsetof(FDarkAltarTemplate, Altar_Destroy_BuffApplyStageId) == 0x000028, "Member 'FDarkAltarTemplate::Altar_Destroy_BuffApplyStageId' has a wrong offset!");

// ScriptStruct MirMobile.DeadValleyCharacterTemplate
// 0x0130 (0x0138 - 0x0008)
struct FDeadValleyCharacterTemplate final : public FTableRowBase
{
public:
	int32                                         CharacterId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterLevel;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicalAttack;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Physicaldefense;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magicdefense;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReducePhysicalDef;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReduceMagicDef;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHP;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPRecovery;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHPPerRecovery;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMana;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegenerationMana;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMPPerRecovery;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVigor;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegenerationVigor;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRage;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRagePerRecovery;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRagePerConsume;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Accuracy;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dodge;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Critical;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvoidCritical;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalOutcome;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefCriticalOutcome;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddSmiteSkillDamage;                               // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefSmiteSkillDamage;                            // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddAtkPVPDamage;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefPVPDamage;                                   // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddAtkNormalMonDamage;                             // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefNormalMonDamage;                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddAtkBossDamage;                                  // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefDefBossDamage;                               // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddSkillDamage;                                    // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefSkillDamage;                                 // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddAtkAllDamage;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefAllDamage;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddStunPer;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefStunPer;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDeBuffPer;                                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefDeBuffPer;                                   // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddCursePer;                                       // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefCursePer;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddKnockDownPer;                                   // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefKnockDownPer;                                // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddNormalAtkDamage;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDefNormalAtkDamage;                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddSkillHPHealBooster;                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill01;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill01_Level;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill02;                                     // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill02_Level;                               // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill03;                                     // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill03_Level;                               // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill04;                                     // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill04_Level;                               // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill05;                                     // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill05_Level;                               // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill06;                                     // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill06_Level;                               // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill07;                                     // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill07_Level;                               // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill08;                                     // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill08_Level;                               // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill09;                                     // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill09_Level;                               // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill10;                                     // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill10_Level;                               // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill11;                                     // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill11_Level;                               // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill12;                                     // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill12_Level;                               // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill13;                                     // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSkill13_Level;                               // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeadValleyCharacterTemplate) == 0x000008, "Wrong alignment on FDeadValleyCharacterTemplate");
static_assert(sizeof(FDeadValleyCharacterTemplate) == 0x000138, "Wrong size on FDeadValleyCharacterTemplate");
static_assert(offsetof(FDeadValleyCharacterTemplate, CharacterId) == 0x000008, "Member 'FDeadValleyCharacterTemplate::CharacterId' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, GroupId) == 0x00000C, "Member 'FDeadValleyCharacterTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, ClassID) == 0x000010, "Member 'FDeadValleyCharacterTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, CharacterLevel) == 0x000014, "Member 'FDeadValleyCharacterTemplate::CharacterLevel' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PhysicalAttack) == 0x000018, "Member 'FDeadValleyCharacterTemplate::PhysicalAttack' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, MagicAttack) == 0x00001C, "Member 'FDeadValleyCharacterTemplate::MagicAttack' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, Physicaldefense) == 0x000020, "Member 'FDeadValleyCharacterTemplate::Physicaldefense' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, Magicdefense) == 0x000024, "Member 'FDeadValleyCharacterTemplate::Magicdefense' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, ReducePhysicalDef) == 0x000028, "Member 'FDeadValleyCharacterTemplate::ReducePhysicalDef' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, ReduceMagicDef) == 0x00002C, "Member 'FDeadValleyCharacterTemplate::ReduceMagicDef' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, MaxHP) == 0x000030, "Member 'FDeadValleyCharacterTemplate::MaxHP' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, HPRecovery) == 0x000034, "Member 'FDeadValleyCharacterTemplate::HPRecovery' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, MaxHPPerRecovery) == 0x000038, "Member 'FDeadValleyCharacterTemplate::MaxHPPerRecovery' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, MaxMana) == 0x00003C, "Member 'FDeadValleyCharacterTemplate::MaxMana' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, RegenerationMana) == 0x000040, "Member 'FDeadValleyCharacterTemplate::RegenerationMana' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, MaxMPPerRecovery) == 0x000044, "Member 'FDeadValleyCharacterTemplate::MaxMPPerRecovery' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, MaxVigor) == 0x000048, "Member 'FDeadValleyCharacterTemplate::MaxVigor' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, RegenerationVigor) == 0x00004C, "Member 'FDeadValleyCharacterTemplate::RegenerationVigor' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, MaxRage) == 0x000050, "Member 'FDeadValleyCharacterTemplate::MaxRage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, MaxRagePerRecovery) == 0x000054, "Member 'FDeadValleyCharacterTemplate::MaxRagePerRecovery' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, MaxRagePerConsume) == 0x000058, "Member 'FDeadValleyCharacterTemplate::MaxRagePerConsume' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, Accuracy) == 0x00005C, "Member 'FDeadValleyCharacterTemplate::Accuracy' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, Dodge) == 0x000060, "Member 'FDeadValleyCharacterTemplate::Dodge' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, Critical) == 0x000064, "Member 'FDeadValleyCharacterTemplate::Critical' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AvoidCritical) == 0x000068, "Member 'FDeadValleyCharacterTemplate::AvoidCritical' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, CriticalOutcome) == 0x00006C, "Member 'FDeadValleyCharacterTemplate::CriticalOutcome' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, DefCriticalOutcome) == 0x000070, "Member 'FDeadValleyCharacterTemplate::DefCriticalOutcome' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddSmiteSkillDamage) == 0x000074, "Member 'FDeadValleyCharacterTemplate::AddSmiteSkillDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefSmiteSkillDamage) == 0x000078, "Member 'FDeadValleyCharacterTemplate::AddDefSmiteSkillDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddAtkPVPDamage) == 0x00007C, "Member 'FDeadValleyCharacterTemplate::AddAtkPVPDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefPVPDamage) == 0x000080, "Member 'FDeadValleyCharacterTemplate::AddDefPVPDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddAtkNormalMonDamage) == 0x000084, "Member 'FDeadValleyCharacterTemplate::AddAtkNormalMonDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefNormalMonDamage) == 0x000088, "Member 'FDeadValleyCharacterTemplate::AddDefNormalMonDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddAtkBossDamage) == 0x00008C, "Member 'FDeadValleyCharacterTemplate::AddAtkBossDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefDefBossDamage) == 0x000090, "Member 'FDeadValleyCharacterTemplate::AddDefDefBossDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddSkillDamage) == 0x000094, "Member 'FDeadValleyCharacterTemplate::AddSkillDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefSkillDamage) == 0x000098, "Member 'FDeadValleyCharacterTemplate::AddDefSkillDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddAtkAllDamage) == 0x00009C, "Member 'FDeadValleyCharacterTemplate::AddAtkAllDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefAllDamage) == 0x0000A0, "Member 'FDeadValleyCharacterTemplate::AddDefAllDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddStunPer) == 0x0000A4, "Member 'FDeadValleyCharacterTemplate::AddStunPer' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefStunPer) == 0x0000A8, "Member 'FDeadValleyCharacterTemplate::AddDefStunPer' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDeBuffPer) == 0x0000AC, "Member 'FDeadValleyCharacterTemplate::AddDeBuffPer' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefDeBuffPer) == 0x0000B0, "Member 'FDeadValleyCharacterTemplate::AddDefDeBuffPer' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddCursePer) == 0x0000B4, "Member 'FDeadValleyCharacterTemplate::AddCursePer' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefCursePer) == 0x0000B8, "Member 'FDeadValleyCharacterTemplate::AddDefCursePer' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddKnockDownPer) == 0x0000BC, "Member 'FDeadValleyCharacterTemplate::AddKnockDownPer' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefKnockDownPer) == 0x0000C0, "Member 'FDeadValleyCharacterTemplate::AddDefKnockDownPer' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddNormalAtkDamage) == 0x0000C4, "Member 'FDeadValleyCharacterTemplate::AddNormalAtkDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddDefNormalAtkDamage) == 0x0000C8, "Member 'FDeadValleyCharacterTemplate::AddDefNormalAtkDamage' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, AddSkillHPHealBooster) == 0x0000CC, "Member 'FDeadValleyCharacterTemplate::AddSkillHPHealBooster' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill01) == 0x0000D0, "Member 'FDeadValleyCharacterTemplate::PlayerSkill01' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill01_Level) == 0x0000D4, "Member 'FDeadValleyCharacterTemplate::PlayerSkill01_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill02) == 0x0000D8, "Member 'FDeadValleyCharacterTemplate::PlayerSkill02' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill02_Level) == 0x0000DC, "Member 'FDeadValleyCharacterTemplate::PlayerSkill02_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill03) == 0x0000E0, "Member 'FDeadValleyCharacterTemplate::PlayerSkill03' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill03_Level) == 0x0000E4, "Member 'FDeadValleyCharacterTemplate::PlayerSkill03_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill04) == 0x0000E8, "Member 'FDeadValleyCharacterTemplate::PlayerSkill04' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill04_Level) == 0x0000EC, "Member 'FDeadValleyCharacterTemplate::PlayerSkill04_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill05) == 0x0000F0, "Member 'FDeadValleyCharacterTemplate::PlayerSkill05' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill05_Level) == 0x0000F4, "Member 'FDeadValleyCharacterTemplate::PlayerSkill05_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill06) == 0x0000F8, "Member 'FDeadValleyCharacterTemplate::PlayerSkill06' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill06_Level) == 0x0000FC, "Member 'FDeadValleyCharacterTemplate::PlayerSkill06_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill07) == 0x000100, "Member 'FDeadValleyCharacterTemplate::PlayerSkill07' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill07_Level) == 0x000104, "Member 'FDeadValleyCharacterTemplate::PlayerSkill07_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill08) == 0x000108, "Member 'FDeadValleyCharacterTemplate::PlayerSkill08' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill08_Level) == 0x00010C, "Member 'FDeadValleyCharacterTemplate::PlayerSkill08_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill09) == 0x000110, "Member 'FDeadValleyCharacterTemplate::PlayerSkill09' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill09_Level) == 0x000114, "Member 'FDeadValleyCharacterTemplate::PlayerSkill09_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill10) == 0x000118, "Member 'FDeadValleyCharacterTemplate::PlayerSkill10' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill10_Level) == 0x00011C, "Member 'FDeadValleyCharacterTemplate::PlayerSkill10_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill11) == 0x000120, "Member 'FDeadValleyCharacterTemplate::PlayerSkill11' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill11_Level) == 0x000124, "Member 'FDeadValleyCharacterTemplate::PlayerSkill11_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill12) == 0x000128, "Member 'FDeadValleyCharacterTemplate::PlayerSkill12' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill12_Level) == 0x00012C, "Member 'FDeadValleyCharacterTemplate::PlayerSkill12_Level' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill13) == 0x000130, "Member 'FDeadValleyCharacterTemplate::PlayerSkill13' has a wrong offset!");
static_assert(offsetof(FDeadValleyCharacterTemplate, PlayerSkill13_Level) == 0x000134, "Member 'FDeadValleyCharacterTemplate::PlayerSkill13_Level' has a wrong offset!");

// ScriptStruct MirMobile.DeadValleyEffectTemplate
// 0x0028 (0x0030 - 0x0008)
struct FDeadValleyEffectTemplate final : public FTableRowBase
{
public:
	int32                                         SettingId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Buff_TotalLevel;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Effect_Resource;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EffectSocket_Type;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeadValleyEffectTemplate) == 0x000008, "Wrong alignment on FDeadValleyEffectTemplate");
static_assert(sizeof(FDeadValleyEffectTemplate) == 0x000030, "Wrong size on FDeadValleyEffectTemplate");
static_assert(offsetof(FDeadValleyEffectTemplate, SettingId) == 0x000008, "Member 'FDeadValleyEffectTemplate::SettingId' has a wrong offset!");
static_assert(offsetof(FDeadValleyEffectTemplate, Buff_TotalLevel) == 0x00000C, "Member 'FDeadValleyEffectTemplate::Buff_TotalLevel' has a wrong offset!");
static_assert(offsetof(FDeadValleyEffectTemplate, Effect_Resource) == 0x000010, "Member 'FDeadValleyEffectTemplate::Effect_Resource' has a wrong offset!");
static_assert(offsetof(FDeadValleyEffectTemplate, EffectSocket_Type) == 0x000020, "Member 'FDeadValleyEffectTemplate::EffectSocket_Type' has a wrong offset!");

// ScriptStruct MirMobile.PlayDataCollectionTemplate
// 0x0060 (0x0068 - 0x0008)
struct FPlayDataCollectionTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectionId;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectionType;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectionName;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDataId01;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDataId02;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDataId03;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDataId04;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDataId05;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDataId06;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDataId07;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDataId08;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectItemId01;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectItemId02;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectItemId03;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectItemId04;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectItemId05;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectItemId06;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectItemId07;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectItemId08;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayDataCollectionTemplate) == 0x000008, "Wrong alignment on FPlayDataCollectionTemplate");
static_assert(sizeof(FPlayDataCollectionTemplate) == 0x000068, "Wrong size on FPlayDataCollectionTemplate");
static_assert(offsetof(FPlayDataCollectionTemplate, Name) == 0x000008, "Member 'FPlayDataCollectionTemplate::Name' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectionId) == 0x00000C, "Member 'FPlayDataCollectionTemplate::CollectionId' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectionType) == 0x000010, "Member 'FPlayDataCollectionTemplate::CollectionType' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectionName) == 0x000014, "Member 'FPlayDataCollectionTemplate::CollectionName' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, SortOrder) == 0x000018, "Member 'FPlayDataCollectionTemplate::SortOrder' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, AttributeType) == 0x00001C, "Member 'FPlayDataCollectionTemplate::AttributeType' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, AttributeValue) == 0x000020, "Member 'FPlayDataCollectionTemplate::AttributeValue' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, PlayDataId01) == 0x000024, "Member 'FPlayDataCollectionTemplate::PlayDataId01' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, PlayDataId02) == 0x000028, "Member 'FPlayDataCollectionTemplate::PlayDataId02' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, PlayDataId03) == 0x00002C, "Member 'FPlayDataCollectionTemplate::PlayDataId03' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, PlayDataId04) == 0x000030, "Member 'FPlayDataCollectionTemplate::PlayDataId04' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, PlayDataId05) == 0x000034, "Member 'FPlayDataCollectionTemplate::PlayDataId05' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, PlayDataId06) == 0x000038, "Member 'FPlayDataCollectionTemplate::PlayDataId06' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, PlayDataId07) == 0x00003C, "Member 'FPlayDataCollectionTemplate::PlayDataId07' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, PlayDataId08) == 0x000040, "Member 'FPlayDataCollectionTemplate::PlayDataId08' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectItemId01) == 0x000044, "Member 'FPlayDataCollectionTemplate::CollectItemId01' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectItemId02) == 0x000048, "Member 'FPlayDataCollectionTemplate::CollectItemId02' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectItemId03) == 0x00004C, "Member 'FPlayDataCollectionTemplate::CollectItemId03' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectItemId04) == 0x000050, "Member 'FPlayDataCollectionTemplate::CollectItemId04' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectItemId05) == 0x000054, "Member 'FPlayDataCollectionTemplate::CollectItemId05' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectItemId06) == 0x000058, "Member 'FPlayDataCollectionTemplate::CollectItemId06' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectItemId07) == 0x00005C, "Member 'FPlayDataCollectionTemplate::CollectItemId07' has a wrong offset!");
static_assert(offsetof(FPlayDataCollectionTemplate, CollectItemId08) == 0x000060, "Member 'FPlayDataCollectionTemplate::CollectItemId08' has a wrong offset!");

// ScriptStruct MirMobile.DeadValleyInfoTemplate
// 0x0078 (0x0080 - 0x0008)
struct FDeadValleyInfoTemplate final : public FTableRowBase
{
public:
	int32                                         InfoId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThumbnailId;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageExplain;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dead_Valley_SettingId;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OpenTime;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 KeepTime;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EnterIngamePerson_Value;                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnterIngameTeam_Value;                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnterIngamePerson_MinValue;                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoomLastOrderTime;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EnterTeam_ClassOrder;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EnterIngame_WaitTime;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnterIngame_TeamTime;                              // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleTime;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplayCoolTime;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_MinScore;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_TeamRankingLimit;                              // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score_GroupId;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_GroupId;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeadValleyInfoTemplate) == 0x000008, "Wrong alignment on FDeadValleyInfoTemplate");
static_assert(sizeof(FDeadValleyInfoTemplate) == 0x000080, "Wrong size on FDeadValleyInfoTemplate");
static_assert(offsetof(FDeadValleyInfoTemplate, InfoId) == 0x000008, "Member 'FDeadValleyInfoTemplate::InfoId' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, StageID) == 0x00000C, "Member 'FDeadValleyInfoTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, ThumbnailId) == 0x000010, "Member 'FDeadValleyInfoTemplate::ThumbnailId' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, StageExplain) == 0x000014, "Member 'FDeadValleyInfoTemplate::StageExplain' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, Dead_Valley_SettingId) == 0x000018, "Member 'FDeadValleyInfoTemplate::Dead_Valley_SettingId' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, OpenTime) == 0x000020, "Member 'FDeadValleyInfoTemplate::OpenTime' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, KeepTime) == 0x000030, "Member 'FDeadValleyInfoTemplate::KeepTime' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, EnterIngamePerson_Value) == 0x000040, "Member 'FDeadValleyInfoTemplate::EnterIngamePerson_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, EnterIngameTeam_Value) == 0x000044, "Member 'FDeadValleyInfoTemplate::EnterIngameTeam_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, EnterIngamePerson_MinValue) == 0x000048, "Member 'FDeadValleyInfoTemplate::EnterIngamePerson_MinValue' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, RoomLastOrderTime) == 0x00004C, "Member 'FDeadValleyInfoTemplate::RoomLastOrderTime' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, EnterTeam_ClassOrder) == 0x000050, "Member 'FDeadValleyInfoTemplate::EnterTeam_ClassOrder' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, EnterIngame_WaitTime) == 0x000060, "Member 'FDeadValleyInfoTemplate::EnterIngame_WaitTime' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, EnterIngame_TeamTime) == 0x000064, "Member 'FDeadValleyInfoTemplate::EnterIngame_TeamTime' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, BattleTime) == 0x000068, "Member 'FDeadValleyInfoTemplate::BattleTime' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, ReplayCoolTime) == 0x00006C, "Member 'FDeadValleyInfoTemplate::ReplayCoolTime' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, Reward_MinScore) == 0x000070, "Member 'FDeadValleyInfoTemplate::Reward_MinScore' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, MVP_TeamRankingLimit) == 0x000074, "Member 'FDeadValleyInfoTemplate::MVP_TeamRankingLimit' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, Score_GroupId) == 0x000078, "Member 'FDeadValleyInfoTemplate::Score_GroupId' has a wrong offset!");
static_assert(offsetof(FDeadValleyInfoTemplate, Reward_GroupId) == 0x00007C, "Member 'FDeadValleyInfoTemplate::Reward_GroupId' has a wrong offset!");

// ScriptStruct MirMobile.Scheduler
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FScheduler final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScheduler) == 0x000008, "Wrong alignment on FScheduler");
static_assert(sizeof(FScheduler) == 0x000028, "Wrong size on FScheduler");

// ScriptStruct MirMobile.PlayDataTemplate
// 0x0018 (0x0020 - 0x0008)
struct FPlayDataTemplate final : public FTableRowBase
{
public:
	int32                                         PlayDataId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDataType;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionType;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionTypeValue1;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionTypeValue2;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayDataTemplate) == 0x000008, "Wrong alignment on FPlayDataTemplate");
static_assert(sizeof(FPlayDataTemplate) == 0x000020, "Wrong size on FPlayDataTemplate");
static_assert(offsetof(FPlayDataTemplate, PlayDataId) == 0x000008, "Member 'FPlayDataTemplate::PlayDataId' has a wrong offset!");
static_assert(offsetof(FPlayDataTemplate, PlayDataType) == 0x00000C, "Member 'FPlayDataTemplate::PlayDataType' has a wrong offset!");
static_assert(offsetof(FPlayDataTemplate, ConditionType) == 0x000010, "Member 'FPlayDataTemplate::ConditionType' has a wrong offset!");
static_assert(offsetof(FPlayDataTemplate, ConditionTypeValue1) == 0x000014, "Member 'FPlayDataTemplate::ConditionTypeValue1' has a wrong offset!");
static_assert(offsetof(FPlayDataTemplate, ConditionTypeValue2) == 0x000018, "Member 'FPlayDataTemplate::ConditionTypeValue2' has a wrong offset!");

// ScriptStruct MirMobile.DeadValleyProgressTemplate
// 0x0018 (0x0020 - 0x0008)
struct FDeadValleyProgressTemplate final : public FTableRowBase
{
public:
	int32                                         InfoId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconPosType;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconPlaceTime;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenMessageString;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeadValleyProgressTemplate) == 0x000008, "Wrong alignment on FDeadValleyProgressTemplate");
static_assert(sizeof(FDeadValleyProgressTemplate) == 0x000020, "Wrong size on FDeadValleyProgressTemplate");
static_assert(offsetof(FDeadValleyProgressTemplate, InfoId) == 0x000008, "Member 'FDeadValleyProgressTemplate::InfoId' has a wrong offset!");
static_assert(offsetof(FDeadValleyProgressTemplate, IconID) == 0x00000C, "Member 'FDeadValleyProgressTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FDeadValleyProgressTemplate, IconPosType) == 0x000010, "Member 'FDeadValleyProgressTemplate::IconPosType' has a wrong offset!");
static_assert(offsetof(FDeadValleyProgressTemplate, IconPlaceTime) == 0x000014, "Member 'FDeadValleyProgressTemplate::IconPlaceTime' has a wrong offset!");
static_assert(offsetof(FDeadValleyProgressTemplate, GenMessageString) == 0x000018, "Member 'FDeadValleyProgressTemplate::GenMessageString' has a wrong offset!");

// ScriptStruct MirMobile.DeadValleyRewardTemplate
// 0x0068 (0x0070 - 0x0008)
struct FDeadValleyRewardTemplate final : public FTableRowBase
{
public:
	int32                                         RewardId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankType;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankNumber;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankEnd;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_Reward01;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_Reward01_Value;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_Reward02;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_Reward02_Value;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_Reward03;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_Reward03_Value;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_Reward04;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_Reward04_Value;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_Reward05;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVP_Reward05_Value;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking_Reward01;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking_Reward01_Value;                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking_Reward02;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking_Reward02_Value;                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking_Reward03;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking_Reward03_Value;                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking_Reward04;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking_Reward04_Value;                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking_Reward05;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking_Reward05_Value;                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeadValleyRewardTemplate) == 0x000008, "Wrong alignment on FDeadValleyRewardTemplate");
static_assert(sizeof(FDeadValleyRewardTemplate) == 0x000070, "Wrong size on FDeadValleyRewardTemplate");
static_assert(offsetof(FDeadValleyRewardTemplate, RewardId) == 0x000008, "Member 'FDeadValleyRewardTemplate::RewardId' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, GroupId) == 0x00000C, "Member 'FDeadValleyRewardTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, RankType) == 0x000010, "Member 'FDeadValleyRewardTemplate::RankType' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, RankNumber) == 0x000014, "Member 'FDeadValleyRewardTemplate::RankNumber' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, RankEnd) == 0x000018, "Member 'FDeadValleyRewardTemplate::RankEnd' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, MVP_Reward01) == 0x00001C, "Member 'FDeadValleyRewardTemplate::MVP_Reward01' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, MVP_Reward01_Value) == 0x000020, "Member 'FDeadValleyRewardTemplate::MVP_Reward01_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, MVP_Reward02) == 0x000024, "Member 'FDeadValleyRewardTemplate::MVP_Reward02' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, MVP_Reward02_Value) == 0x000028, "Member 'FDeadValleyRewardTemplate::MVP_Reward02_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, MVP_Reward03) == 0x00002C, "Member 'FDeadValleyRewardTemplate::MVP_Reward03' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, MVP_Reward03_Value) == 0x000030, "Member 'FDeadValleyRewardTemplate::MVP_Reward03_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, MVP_Reward04) == 0x000034, "Member 'FDeadValleyRewardTemplate::MVP_Reward04' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, MVP_Reward04_Value) == 0x000038, "Member 'FDeadValleyRewardTemplate::MVP_Reward04_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, MVP_Reward05) == 0x00003C, "Member 'FDeadValleyRewardTemplate::MVP_Reward05' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, MVP_Reward05_Value) == 0x000040, "Member 'FDeadValleyRewardTemplate::MVP_Reward05_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, Ranking_Reward01) == 0x000044, "Member 'FDeadValleyRewardTemplate::Ranking_Reward01' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, Ranking_Reward01_Value) == 0x000048, "Member 'FDeadValleyRewardTemplate::Ranking_Reward01_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, Ranking_Reward02) == 0x00004C, "Member 'FDeadValleyRewardTemplate::Ranking_Reward02' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, Ranking_Reward02_Value) == 0x000050, "Member 'FDeadValleyRewardTemplate::Ranking_Reward02_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, Ranking_Reward03) == 0x000054, "Member 'FDeadValleyRewardTemplate::Ranking_Reward03' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, Ranking_Reward03_Value) == 0x000058, "Member 'FDeadValleyRewardTemplate::Ranking_Reward03_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, Ranking_Reward04) == 0x00005C, "Member 'FDeadValleyRewardTemplate::Ranking_Reward04' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, Ranking_Reward04_Value) == 0x000060, "Member 'FDeadValleyRewardTemplate::Ranking_Reward04_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, Ranking_Reward05) == 0x000064, "Member 'FDeadValleyRewardTemplate::Ranking_Reward05' has a wrong offset!");
static_assert(offsetof(FDeadValleyRewardTemplate, Ranking_Reward05_Value) == 0x000068, "Member 'FDeadValleyRewardTemplate::Ranking_Reward05_Value' has a wrong offset!");

// ScriptStruct MirMobile.DeadValleyScoreTemplate
// 0x0020 (0x0028 - 0x0008)
struct FDeadValleyScoreTemplate final : public FTableRowBase
{
public:
	int32                                         ScoreId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterId;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityOrbId;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreValue;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeadValleyScoreTemplate) == 0x000008, "Wrong alignment on FDeadValleyScoreTemplate");
static_assert(sizeof(FDeadValleyScoreTemplate) == 0x000028, "Wrong size on FDeadValleyScoreTemplate");
static_assert(offsetof(FDeadValleyScoreTemplate, ScoreId) == 0x000008, "Member 'FDeadValleyScoreTemplate::ScoreId' has a wrong offset!");
static_assert(offsetof(FDeadValleyScoreTemplate, GroupId) == 0x00000C, "Member 'FDeadValleyScoreTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FDeadValleyScoreTemplate, StageID) == 0x000010, "Member 'FDeadValleyScoreTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FDeadValleyScoreTemplate, EventType) == 0x000014, "Member 'FDeadValleyScoreTemplate::EventType' has a wrong offset!");
static_assert(offsetof(FDeadValleyScoreTemplate, MonsterId) == 0x000018, "Member 'FDeadValleyScoreTemplate::MonsterId' has a wrong offset!");
static_assert(offsetof(FDeadValleyScoreTemplate, AbilityOrbId) == 0x00001C, "Member 'FDeadValleyScoreTemplate::AbilityOrbId' has a wrong offset!");
static_assert(offsetof(FDeadValleyScoreTemplate, ScoreValue) == 0x000020, "Member 'FDeadValleyScoreTemplate::ScoreValue' has a wrong offset!");

// ScriptStruct MirMobile.DeadValleySettingTemplate
// 0x0120 (0x0128 - 0x0008)
struct FDeadValleySettingTemplate final : public FTableRowBase
{
public:
	int32                                         SettingId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterStat_GroupId;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Call_DamageZoneImage1_Time;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Call_DamageZoneImage1;                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Call_DamageZoneImage2_Time;                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Call_DamageZoneImage2;                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Call_DamageZoneImage3_Time;                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Call_DamageZoneImage3;                             // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Buff_TotalLevel01;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Buff_TotalLevel01_VFX;                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Buff_TotalLevel02;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Buff_TotalLevel02_VFX;                             // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Buff_TotalLevel03;                                 // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Buff_TotalLevel03_VFX;                             // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Buff_TotalLevel04;                                 // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Buff_TotalLevel04_VFX;                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lose_BuffLevel;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lose_BuffLevel_Rate;                               // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lose_Buff_DropLimit;                               // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lose_Buff_StaticDrop;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Lose_Buff_StaticDrop_Value;                        // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionLocation_Start;                            // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PositionLocation;                                  // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Revival_RuleId;                                    // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TeamMarkBg;                                        // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TeamMarkIcon;                                      // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TeamName;                                          // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeadValleySettingTemplate) == 0x000008, "Wrong alignment on FDeadValleySettingTemplate");
static_assert(sizeof(FDeadValleySettingTemplate) == 0x000128, "Wrong size on FDeadValleySettingTemplate");
static_assert(offsetof(FDeadValleySettingTemplate, SettingId) == 0x000008, "Member 'FDeadValleySettingTemplate::SettingId' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, StageID) == 0x00000C, "Member 'FDeadValleySettingTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, CharacterStat_GroupId) == 0x000010, "Member 'FDeadValleySettingTemplate::CharacterStat_GroupId' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Call_DamageZoneImage1_Time) == 0x000014, "Member 'FDeadValleySettingTemplate::Call_DamageZoneImage1_Time' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Call_DamageZoneImage1) == 0x000018, "Member 'FDeadValleySettingTemplate::Call_DamageZoneImage1' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Call_DamageZoneImage2_Time) == 0x000028, "Member 'FDeadValleySettingTemplate::Call_DamageZoneImage2_Time' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Call_DamageZoneImage2) == 0x000030, "Member 'FDeadValleySettingTemplate::Call_DamageZoneImage2' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Call_DamageZoneImage3_Time) == 0x000040, "Member 'FDeadValleySettingTemplate::Call_DamageZoneImage3_Time' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Call_DamageZoneImage3) == 0x000048, "Member 'FDeadValleySettingTemplate::Call_DamageZoneImage3' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Buff_TotalLevel01) == 0x000058, "Member 'FDeadValleySettingTemplate::Buff_TotalLevel01' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Buff_TotalLevel01_VFX) == 0x000060, "Member 'FDeadValleySettingTemplate::Buff_TotalLevel01_VFX' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Buff_TotalLevel02) == 0x000070, "Member 'FDeadValleySettingTemplate::Buff_TotalLevel02' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Buff_TotalLevel02_VFX) == 0x000078, "Member 'FDeadValleySettingTemplate::Buff_TotalLevel02_VFX' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Buff_TotalLevel03) == 0x000088, "Member 'FDeadValleySettingTemplate::Buff_TotalLevel03' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Buff_TotalLevel03_VFX) == 0x000090, "Member 'FDeadValleySettingTemplate::Buff_TotalLevel03_VFX' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Buff_TotalLevel04) == 0x0000A0, "Member 'FDeadValleySettingTemplate::Buff_TotalLevel04' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Buff_TotalLevel04_VFX) == 0x0000A8, "Member 'FDeadValleySettingTemplate::Buff_TotalLevel04_VFX' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Lose_BuffLevel) == 0x0000B8, "Member 'FDeadValleySettingTemplate::Lose_BuffLevel' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Lose_BuffLevel_Rate) == 0x0000BC, "Member 'FDeadValleySettingTemplate::Lose_BuffLevel_Rate' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Lose_Buff_DropLimit) == 0x0000C0, "Member 'FDeadValleySettingTemplate::Lose_Buff_DropLimit' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Lose_Buff_StaticDrop) == 0x0000C8, "Member 'FDeadValleySettingTemplate::Lose_Buff_StaticDrop' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Lose_Buff_StaticDrop_Value) == 0x0000D8, "Member 'FDeadValleySettingTemplate::Lose_Buff_StaticDrop_Value' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, PositionLocation_Start) == 0x0000DC, "Member 'FDeadValleySettingTemplate::PositionLocation_Start' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, PositionLocation) == 0x0000E0, "Member 'FDeadValleySettingTemplate::PositionLocation' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, Revival_RuleId) == 0x0000F0, "Member 'FDeadValleySettingTemplate::Revival_RuleId' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, TeamMarkBg) == 0x0000F8, "Member 'FDeadValleySettingTemplate::TeamMarkBg' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, TeamMarkIcon) == 0x000108, "Member 'FDeadValleySettingTemplate::TeamMarkIcon' has a wrong offset!");
static_assert(offsetof(FDeadValleySettingTemplate, TeamName) == 0x000118, "Member 'FDeadValleySettingTemplate::TeamName' has a wrong offset!");

// ScriptStruct MirMobile.StringNPCTemplate
// 0x00C8 (0x00D0 - 0x0008)
struct FStringNPCTemplate final : public FTableRowBase
{
public:
	int32                                         StringID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextKr;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHT;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHS;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JPN;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ENG;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 THA;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IND;                                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VIE;                                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GER;                                               // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SPA;                                               // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 POR;                                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RUS;                                               // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringNPCTemplate) == 0x000008, "Wrong alignment on FStringNPCTemplate");
static_assert(sizeof(FStringNPCTemplate) == 0x0000D0, "Wrong size on FStringNPCTemplate");
static_assert(offsetof(FStringNPCTemplate, StringID) == 0x000008, "Member 'FStringNPCTemplate::StringID' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, TextKr) == 0x000010, "Member 'FStringNPCTemplate::TextKr' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, CHT) == 0x000020, "Member 'FStringNPCTemplate::CHT' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, CHS) == 0x000030, "Member 'FStringNPCTemplate::CHS' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, JPN) == 0x000040, "Member 'FStringNPCTemplate::JPN' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, ENG) == 0x000050, "Member 'FStringNPCTemplate::ENG' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, THA) == 0x000060, "Member 'FStringNPCTemplate::THA' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, IND) == 0x000070, "Member 'FStringNPCTemplate::IND' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, VIE) == 0x000080, "Member 'FStringNPCTemplate::VIE' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, GER) == 0x000090, "Member 'FStringNPCTemplate::GER' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, SPA) == 0x0000A0, "Member 'FStringNPCTemplate::SPA' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, POR) == 0x0000B0, "Member 'FStringNPCTemplate::POR' has a wrong offset!");
static_assert(offsetof(FStringNPCTemplate, RUS) == 0x0000C0, "Member 'FStringNPCTemplate::RUS' has a wrong offset!");

// ScriptStruct MirMobile.DeathPenaltyExpTemplate
// 0x0038 (0x0040 - 0x0008)
struct FDeathPenaltyExpTemplate final : public FTableRowBase
{
public:
	int32                                         DeathPenalty_ExpId;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLv;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Penalty_ExpRate;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeRecovery_Limit;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeRecovery_EXPRate;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneralRecovery_CostType;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneralRecovery_CostCnt;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneralRecovery_EXPRate;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedRecovery_CostType;                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedRecovery_CostCnt;                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdvancedRecovery_EXPRate;                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemRecovery_ItemUseId;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemRecovery_ItemCnt;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeathPenaltyExpTemplate) == 0x000008, "Wrong alignment on FDeathPenaltyExpTemplate");
static_assert(sizeof(FDeathPenaltyExpTemplate) == 0x000040, "Wrong size on FDeathPenaltyExpTemplate");
static_assert(offsetof(FDeathPenaltyExpTemplate, DeathPenalty_ExpId) == 0x000008, "Member 'FDeathPenaltyExpTemplate::DeathPenalty_ExpId' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, MaxLv) == 0x00000C, "Member 'FDeathPenaltyExpTemplate::MaxLv' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, Penalty_ExpRate) == 0x000010, "Member 'FDeathPenaltyExpTemplate::Penalty_ExpRate' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, FreeRecovery_Limit) == 0x000014, "Member 'FDeathPenaltyExpTemplate::FreeRecovery_Limit' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, FreeRecovery_EXPRate) == 0x000018, "Member 'FDeathPenaltyExpTemplate::FreeRecovery_EXPRate' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, GeneralRecovery_CostType) == 0x00001C, "Member 'FDeathPenaltyExpTemplate::GeneralRecovery_CostType' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, GeneralRecovery_CostCnt) == 0x000020, "Member 'FDeathPenaltyExpTemplate::GeneralRecovery_CostCnt' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, GeneralRecovery_EXPRate) == 0x000024, "Member 'FDeathPenaltyExpTemplate::GeneralRecovery_EXPRate' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, AdvancedRecovery_CostType) == 0x000028, "Member 'FDeathPenaltyExpTemplate::AdvancedRecovery_CostType' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, AdvancedRecovery_CostCnt) == 0x00002C, "Member 'FDeathPenaltyExpTemplate::AdvancedRecovery_CostCnt' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, AdvancedRecovery_EXPRate) == 0x000030, "Member 'FDeathPenaltyExpTemplate::AdvancedRecovery_EXPRate' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, ItemRecovery_ItemUseId) == 0x000034, "Member 'FDeathPenaltyExpTemplate::ItemRecovery_ItemUseId' has a wrong offset!");
static_assert(offsetof(FDeathPenaltyExpTemplate, ItemRecovery_ItemCnt) == 0x000038, "Member 'FDeathPenaltyExpTemplate::ItemRecovery_ItemCnt' has a wrong offset!");

// ScriptStruct MirMobile.DominionStorageHistoryTemplate
// 0x0010 (0x0018 - 0x0008)
struct FDominionStorageHistoryTemplate final : public FTableRowBase
{
public:
	int32                                         HistoryId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryGroup;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringID;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDominionStorageHistoryTemplate) == 0x000008, "Wrong alignment on FDominionStorageHistoryTemplate");
static_assert(sizeof(FDominionStorageHistoryTemplate) == 0x000018, "Wrong size on FDominionStorageHistoryTemplate");
static_assert(offsetof(FDominionStorageHistoryTemplate, HistoryId) == 0x000008, "Member 'FDominionStorageHistoryTemplate::HistoryId' has a wrong offset!");
static_assert(offsetof(FDominionStorageHistoryTemplate, HistoryGroup) == 0x00000C, "Member 'FDominionStorageHistoryTemplate::HistoryGroup' has a wrong offset!");
static_assert(offsetof(FDominionStorageHistoryTemplate, StringID) == 0x000010, "Member 'FDominionStorageHistoryTemplate::StringID' has a wrong offset!");

// ScriptStruct MirMobile.DragonGearTransferTemplate
// 0x0028 (0x0030 - 0x0008)
struct FDragonGearTransferTemplate final : public FTableRowBase
{
public:
	int32                                         Before_UseId;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         After_ItemId;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemUseId01;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemCount01;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemUseId02;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemCount02;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemUseId03;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemCount03;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCostType;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCostValue;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonGearTransferTemplate) == 0x000008, "Wrong alignment on FDragonGearTransferTemplate");
static_assert(sizeof(FDragonGearTransferTemplate) == 0x000030, "Wrong size on FDragonGearTransferTemplate");
static_assert(offsetof(FDragonGearTransferTemplate, Before_UseId) == 0x000008, "Member 'FDragonGearTransferTemplate::Before_UseId' has a wrong offset!");
static_assert(offsetof(FDragonGearTransferTemplate, After_ItemId) == 0x00000C, "Member 'FDragonGearTransferTemplate::After_ItemId' has a wrong offset!");
static_assert(offsetof(FDragonGearTransferTemplate, MaterialItemUseId01) == 0x000010, "Member 'FDragonGearTransferTemplate::MaterialItemUseId01' has a wrong offset!");
static_assert(offsetof(FDragonGearTransferTemplate, MaterialItemCount01) == 0x000014, "Member 'FDragonGearTransferTemplate::MaterialItemCount01' has a wrong offset!");
static_assert(offsetof(FDragonGearTransferTemplate, MaterialItemUseId02) == 0x000018, "Member 'FDragonGearTransferTemplate::MaterialItemUseId02' has a wrong offset!");
static_assert(offsetof(FDragonGearTransferTemplate, MaterialItemCount02) == 0x00001C, "Member 'FDragonGearTransferTemplate::MaterialItemCount02' has a wrong offset!");
static_assert(offsetof(FDragonGearTransferTemplate, MaterialItemUseId03) == 0x000020, "Member 'FDragonGearTransferTemplate::MaterialItemUseId03' has a wrong offset!");
static_assert(offsetof(FDragonGearTransferTemplate, MaterialItemCount03) == 0x000024, "Member 'FDragonGearTransferTemplate::MaterialItemCount03' has a wrong offset!");
static_assert(offsetof(FDragonGearTransferTemplate, MaterialCostType) == 0x000028, "Member 'FDragonGearTransferTemplate::MaterialCostType' has a wrong offset!");
static_assert(offsetof(FDragonGearTransferTemplate, MaterialCostValue) == 0x00002C, "Member 'FDragonGearTransferTemplate::MaterialCostValue' has a wrong offset!");

// ScriptStruct MirMobile.DropItemGroupTemplate
// 0x00D0 (0x00D8 - 0x0008)
struct FDropItemGroupTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropItemGroupId;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId01;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId02;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId03;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId04;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId05;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId06;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId07;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId08;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId09;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId10;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId11;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId12;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId13;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId14;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId15;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId16;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId17;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId18;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId19;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId20;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId21;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId22;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId23;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId24;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId25;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId26;                                          // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId27;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId28;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId29;                                          // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId30;                                          // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId31;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId32;                                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId33;                                          // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId34;                                          // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId35;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId36;                                          // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId37;                                          // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId38;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId39;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId40;                                          // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId41;                                          // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId42;                                          // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId43;                                          // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId44;                                          // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId45;                                          // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId46;                                          // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId47;                                          // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId48;                                          // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId49;                                          // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId50;                                          // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDropItemGroupTemplate) == 0x000008, "Wrong alignment on FDropItemGroupTemplate");
static_assert(sizeof(FDropItemGroupTemplate) == 0x0000D8, "Wrong size on FDropItemGroupTemplate");
static_assert(offsetof(FDropItemGroupTemplate, RowId) == 0x000008, "Member 'FDropItemGroupTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, DropItemGroupId) == 0x00000C, "Member 'FDropItemGroupTemplate::DropItemGroupId' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId01) == 0x000010, "Member 'FDropItemGroupTemplate::ItemId01' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId02) == 0x000014, "Member 'FDropItemGroupTemplate::ItemId02' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId03) == 0x000018, "Member 'FDropItemGroupTemplate::ItemId03' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId04) == 0x00001C, "Member 'FDropItemGroupTemplate::ItemId04' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId05) == 0x000020, "Member 'FDropItemGroupTemplate::ItemId05' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId06) == 0x000024, "Member 'FDropItemGroupTemplate::ItemId06' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId07) == 0x000028, "Member 'FDropItemGroupTemplate::ItemId07' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId08) == 0x00002C, "Member 'FDropItemGroupTemplate::ItemId08' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId09) == 0x000030, "Member 'FDropItemGroupTemplate::ItemId09' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId10) == 0x000034, "Member 'FDropItemGroupTemplate::ItemId10' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId11) == 0x000038, "Member 'FDropItemGroupTemplate::ItemId11' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId12) == 0x00003C, "Member 'FDropItemGroupTemplate::ItemId12' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId13) == 0x000040, "Member 'FDropItemGroupTemplate::ItemId13' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId14) == 0x000044, "Member 'FDropItemGroupTemplate::ItemId14' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId15) == 0x000048, "Member 'FDropItemGroupTemplate::ItemId15' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId16) == 0x00004C, "Member 'FDropItemGroupTemplate::ItemId16' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId17) == 0x000050, "Member 'FDropItemGroupTemplate::ItemId17' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId18) == 0x000054, "Member 'FDropItemGroupTemplate::ItemId18' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId19) == 0x000058, "Member 'FDropItemGroupTemplate::ItemId19' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId20) == 0x00005C, "Member 'FDropItemGroupTemplate::ItemId20' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId21) == 0x000060, "Member 'FDropItemGroupTemplate::ItemId21' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId22) == 0x000064, "Member 'FDropItemGroupTemplate::ItemId22' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId23) == 0x000068, "Member 'FDropItemGroupTemplate::ItemId23' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId24) == 0x00006C, "Member 'FDropItemGroupTemplate::ItemId24' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId25) == 0x000070, "Member 'FDropItemGroupTemplate::ItemId25' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId26) == 0x000074, "Member 'FDropItemGroupTemplate::ItemId26' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId27) == 0x000078, "Member 'FDropItemGroupTemplate::ItemId27' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId28) == 0x00007C, "Member 'FDropItemGroupTemplate::ItemId28' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId29) == 0x000080, "Member 'FDropItemGroupTemplate::ItemId29' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId30) == 0x000084, "Member 'FDropItemGroupTemplate::ItemId30' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId31) == 0x000088, "Member 'FDropItemGroupTemplate::ItemId31' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId32) == 0x00008C, "Member 'FDropItemGroupTemplate::ItemId32' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId33) == 0x000090, "Member 'FDropItemGroupTemplate::ItemId33' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId34) == 0x000094, "Member 'FDropItemGroupTemplate::ItemId34' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId35) == 0x000098, "Member 'FDropItemGroupTemplate::ItemId35' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId36) == 0x00009C, "Member 'FDropItemGroupTemplate::ItemId36' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId37) == 0x0000A0, "Member 'FDropItemGroupTemplate::ItemId37' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId38) == 0x0000A4, "Member 'FDropItemGroupTemplate::ItemId38' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId39) == 0x0000A8, "Member 'FDropItemGroupTemplate::ItemId39' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId40) == 0x0000AC, "Member 'FDropItemGroupTemplate::ItemId40' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId41) == 0x0000B0, "Member 'FDropItemGroupTemplate::ItemId41' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId42) == 0x0000B4, "Member 'FDropItemGroupTemplate::ItemId42' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId43) == 0x0000B8, "Member 'FDropItemGroupTemplate::ItemId43' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId44) == 0x0000BC, "Member 'FDropItemGroupTemplate::ItemId44' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId45) == 0x0000C0, "Member 'FDropItemGroupTemplate::ItemId45' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId46) == 0x0000C4, "Member 'FDropItemGroupTemplate::ItemId46' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId47) == 0x0000C8, "Member 'FDropItemGroupTemplate::ItemId47' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId48) == 0x0000CC, "Member 'FDropItemGroupTemplate::ItemId48' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId49) == 0x0000D0, "Member 'FDropItemGroupTemplate::ItemId49' has a wrong offset!");
static_assert(offsetof(FDropItemGroupTemplate, ItemId50) == 0x0000D4, "Member 'FDropItemGroupTemplate::ItemId50' has a wrong offset!");

// ScriptStruct MirMobile.MonsterRareActionTemplate
// 0x0050 (0x0058 - 0x0008)
struct FMonsterRareActionTemplate final : public FTableRowBase
{
public:
	int32                                         MonShieldType;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonShield;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoverShield;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnbeatableShield;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldBrokenBuff;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldStance;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetUpAniTime;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TurnAngleMin;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TurnAngleSpeed;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TurnAniTime;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BroadcastingSize;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SleepType;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwakeAniTime;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageLimit;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldRecoverType;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldRegeneration;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BossCondition;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsType;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMonsterRareActionTemplate) == 0x000008, "Wrong alignment on FMonsterRareActionTemplate");
static_assert(sizeof(FMonsterRareActionTemplate) == 0x000058, "Wrong size on FMonsterRareActionTemplate");
static_assert(offsetof(FMonsterRareActionTemplate, MonShieldType) == 0x000008, "Member 'FMonsterRareActionTemplate::MonShieldType' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, MonShield) == 0x00000C, "Member 'FMonsterRareActionTemplate::MonShield' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, RecoverShield) == 0x000010, "Member 'FMonsterRareActionTemplate::RecoverShield' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, UnbeatableShield) == 0x000014, "Member 'FMonsterRareActionTemplate::UnbeatableShield' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, ShieldBrokenBuff) == 0x000018, "Member 'FMonsterRareActionTemplate::ShieldBrokenBuff' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, ShieldStance) == 0x00001C, "Member 'FMonsterRareActionTemplate::ShieldStance' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, GetUpAniTime) == 0x000020, "Member 'FMonsterRareActionTemplate::GetUpAniTime' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, TurnAngleMin) == 0x000024, "Member 'FMonsterRareActionTemplate::TurnAngleMin' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, TurnAngleSpeed) == 0x000028, "Member 'FMonsterRareActionTemplate::TurnAngleSpeed' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, TurnAniTime) == 0x00002C, "Member 'FMonsterRareActionTemplate::TurnAniTime' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, BroadcastingSize) == 0x000030, "Member 'FMonsterRareActionTemplate::BroadcastingSize' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, SleepType) == 0x000034, "Member 'FMonsterRareActionTemplate::SleepType' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, AwakeAniTime) == 0x000038, "Member 'FMonsterRareActionTemplate::AwakeAniTime' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, DamageLimit) == 0x00003C, "Member 'FMonsterRareActionTemplate::DamageLimit' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, ShieldRecoverType) == 0x000040, "Member 'FMonsterRareActionTemplate::ShieldRecoverType' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, ShieldRegeneration) == 0x000044, "Member 'FMonsterRareActionTemplate::ShieldRegeneration' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, BossCondition) == 0x000048, "Member 'FMonsterRareActionTemplate::BossCondition' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, IconID) == 0x00004C, "Member 'FMonsterRareActionTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FMonsterRareActionTemplate, ContentsType) == 0x000050, "Member 'FMonsterRareActionTemplate::ContentsType' has a wrong offset!");

// ScriptStruct MirMobile.DropItemTemplate
// 0x00F8 (0x0100 - 0x0008)
struct FDropItemTemplate final : public FTableRowBase
{
public:
	int32                                         DropItemId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ARewardItem01GroupId;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ARewardItem02GroupId;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ARewardItem03GroupId;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BRewardItem01GroupId;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BRewardItem02GroupId;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BRewardItem03GroupId;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CRewardItem01GroupId;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CRewardItem02GroupId;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CRewardItem03GroupId;                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DRewardItem01GroupId;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DRewardItem02GroupId;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DRewardItem03GroupId;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ERewardItem01GroupId;                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ERewardItem02GroupId;                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ERewardItem03GroupId;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FRewardItem01GroupId;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FRewardItem02GroupId;                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FRewardItem03GroupId;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GRewardItem01GroupId;                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GRewardItem02GroupId;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GRewardItem03GroupId;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HRewardItem01GroupId;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HRewardItem02GroupId;                              // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HRewardItem03GroupId;                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IRewardItem01GroupId;                              // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IRewardItem02GroupId;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IRewardItem03GroupId;                              // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JRewardItem01GroupId;                              // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JRewardItem02GroupId;                              // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JRewardItem03GroupId;                              // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KRewardItem01GroupId;                              // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KRewardItem02GroupId;                              // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KRewardItem03GroupId;                              // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LRewardItem01GroupId;                              // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LRewardItem02GroupId;                              // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LRewardItem03GroupId;                              // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MRewardItem01GroupId;                              // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MRewardItem02GroupId;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MRewardItem03GroupId;                              // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NRewardItem01GroupId;                              // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NRewardItem02GroupId;                              // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NRewardItem03GroupId;                              // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ORewardItem01GroupId;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ORewardItem02GroupId;                              // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ORewardItem03GroupId;                              // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuckyRewardDropItemId;                             // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExcellentRewardDropRate;                           // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExcellentRewardDropItemId;                         // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreatRewardDropItemId;                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostType01;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostRate01;                                  // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostCountMax01;                              // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostType02;                                  // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostRate02;                                  // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostCountMax02;                              // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostType03;                                  // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostRate03;                                  // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostCountMax03;                              // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expensive01RewardDropItemId;                       // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expensive02RewardDropItemId;                       // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDropItemTemplate) == 0x000008, "Wrong alignment on FDropItemTemplate");
static_assert(sizeof(FDropItemTemplate) == 0x000100, "Wrong size on FDropItemTemplate");
static_assert(offsetof(FDropItemTemplate, DropItemId) == 0x000008, "Member 'FDropItemTemplate::DropItemId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ARewardItem01GroupId) == 0x00000C, "Member 'FDropItemTemplate::ARewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ARewardItem02GroupId) == 0x000010, "Member 'FDropItemTemplate::ARewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ARewardItem03GroupId) == 0x000014, "Member 'FDropItemTemplate::ARewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, BRewardItem01GroupId) == 0x000018, "Member 'FDropItemTemplate::BRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, BRewardItem02GroupId) == 0x00001C, "Member 'FDropItemTemplate::BRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, BRewardItem03GroupId) == 0x000020, "Member 'FDropItemTemplate::BRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, CRewardItem01GroupId) == 0x000024, "Member 'FDropItemTemplate::CRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, CRewardItem02GroupId) == 0x000028, "Member 'FDropItemTemplate::CRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, CRewardItem03GroupId) == 0x00002C, "Member 'FDropItemTemplate::CRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, DRewardItem01GroupId) == 0x000030, "Member 'FDropItemTemplate::DRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, DRewardItem02GroupId) == 0x000034, "Member 'FDropItemTemplate::DRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, DRewardItem03GroupId) == 0x000038, "Member 'FDropItemTemplate::DRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ERewardItem01GroupId) == 0x00003C, "Member 'FDropItemTemplate::ERewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ERewardItem02GroupId) == 0x000040, "Member 'FDropItemTemplate::ERewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ERewardItem03GroupId) == 0x000044, "Member 'FDropItemTemplate::ERewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, FRewardItem01GroupId) == 0x000048, "Member 'FDropItemTemplate::FRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, FRewardItem02GroupId) == 0x00004C, "Member 'FDropItemTemplate::FRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, FRewardItem03GroupId) == 0x000050, "Member 'FDropItemTemplate::FRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, GRewardItem01GroupId) == 0x000054, "Member 'FDropItemTemplate::GRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, GRewardItem02GroupId) == 0x000058, "Member 'FDropItemTemplate::GRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, GRewardItem03GroupId) == 0x00005C, "Member 'FDropItemTemplate::GRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, HRewardItem01GroupId) == 0x000060, "Member 'FDropItemTemplate::HRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, HRewardItem02GroupId) == 0x000064, "Member 'FDropItemTemplate::HRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, HRewardItem03GroupId) == 0x000068, "Member 'FDropItemTemplate::HRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, IRewardItem01GroupId) == 0x00006C, "Member 'FDropItemTemplate::IRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, IRewardItem02GroupId) == 0x000070, "Member 'FDropItemTemplate::IRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, IRewardItem03GroupId) == 0x000074, "Member 'FDropItemTemplate::IRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, JRewardItem01GroupId) == 0x000078, "Member 'FDropItemTemplate::JRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, JRewardItem02GroupId) == 0x00007C, "Member 'FDropItemTemplate::JRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, JRewardItem03GroupId) == 0x000080, "Member 'FDropItemTemplate::JRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, KRewardItem01GroupId) == 0x000084, "Member 'FDropItemTemplate::KRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, KRewardItem02GroupId) == 0x000088, "Member 'FDropItemTemplate::KRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, KRewardItem03GroupId) == 0x00008C, "Member 'FDropItemTemplate::KRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, LRewardItem01GroupId) == 0x000090, "Member 'FDropItemTemplate::LRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, LRewardItem02GroupId) == 0x000094, "Member 'FDropItemTemplate::LRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, LRewardItem03GroupId) == 0x000098, "Member 'FDropItemTemplate::LRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, MRewardItem01GroupId) == 0x00009C, "Member 'FDropItemTemplate::MRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, MRewardItem02GroupId) == 0x0000A0, "Member 'FDropItemTemplate::MRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, MRewardItem03GroupId) == 0x0000A4, "Member 'FDropItemTemplate::MRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, NRewardItem01GroupId) == 0x0000A8, "Member 'FDropItemTemplate::NRewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, NRewardItem02GroupId) == 0x0000AC, "Member 'FDropItemTemplate::NRewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, NRewardItem03GroupId) == 0x0000B0, "Member 'FDropItemTemplate::NRewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ORewardItem01GroupId) == 0x0000B4, "Member 'FDropItemTemplate::ORewardItem01GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ORewardItem02GroupId) == 0x0000B8, "Member 'FDropItemTemplate::ORewardItem02GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ORewardItem03GroupId) == 0x0000BC, "Member 'FDropItemTemplate::ORewardItem03GroupId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, LuckyRewardDropItemId) == 0x0000C0, "Member 'FDropItemTemplate::LuckyRewardDropItemId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ExcellentRewardDropRate) == 0x0000C4, "Member 'FDropItemTemplate::ExcellentRewardDropRate' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, ExcellentRewardDropItemId) == 0x0000C8, "Member 'FDropItemTemplate::ExcellentRewardDropItemId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, GreatRewardDropItemId) == 0x0000CC, "Member 'FDropItemTemplate::GreatRewardDropItemId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, RewardCostType01) == 0x0000D0, "Member 'FDropItemTemplate::RewardCostType01' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, RewardCostRate01) == 0x0000D4, "Member 'FDropItemTemplate::RewardCostRate01' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, RewardCostCountMax01) == 0x0000D8, "Member 'FDropItemTemplate::RewardCostCountMax01' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, RewardCostType02) == 0x0000DC, "Member 'FDropItemTemplate::RewardCostType02' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, RewardCostRate02) == 0x0000E0, "Member 'FDropItemTemplate::RewardCostRate02' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, RewardCostCountMax02) == 0x0000E4, "Member 'FDropItemTemplate::RewardCostCountMax02' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, RewardCostType03) == 0x0000E8, "Member 'FDropItemTemplate::RewardCostType03' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, RewardCostRate03) == 0x0000EC, "Member 'FDropItemTemplate::RewardCostRate03' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, RewardCostCountMax03) == 0x0000F0, "Member 'FDropItemTemplate::RewardCostCountMax03' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, Expensive01RewardDropItemId) == 0x0000F4, "Member 'FDropItemTemplate::Expensive01RewardDropItemId' has a wrong offset!");
static_assert(offsetof(FDropItemTemplate, Expensive02RewardDropItemId) == 0x0000F8, "Member 'FDropItemTemplate::Expensive02RewardDropItemId' has a wrong offset!");

// ScriptStruct MirMobile.DropRewardBoxTypeGroupTemplate
// 0x0010 (0x0018 - 0x0008)
struct FDropRewardBoxTypeGroupTemplate final : public FTableRowBase
{
public:
	int32                                         GroupTypeRewardBoxGroupID;                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Drop_Reward_ObjectGroupID_A;                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Drop_Reward_ObjectGroupID_B;                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Drop_Reward_ObjectGroupID_C;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDropRewardBoxTypeGroupTemplate) == 0x000008, "Wrong alignment on FDropRewardBoxTypeGroupTemplate");
static_assert(sizeof(FDropRewardBoxTypeGroupTemplate) == 0x000018, "Wrong size on FDropRewardBoxTypeGroupTemplate");
static_assert(offsetof(FDropRewardBoxTypeGroupTemplate, GroupTypeRewardBoxGroupID) == 0x000008, "Member 'FDropRewardBoxTypeGroupTemplate::GroupTypeRewardBoxGroupID' has a wrong offset!");
static_assert(offsetof(FDropRewardBoxTypeGroupTemplate, Drop_Reward_ObjectGroupID_A) == 0x00000C, "Member 'FDropRewardBoxTypeGroupTemplate::Drop_Reward_ObjectGroupID_A' has a wrong offset!");
static_assert(offsetof(FDropRewardBoxTypeGroupTemplate, Drop_Reward_ObjectGroupID_B) == 0x000010, "Member 'FDropRewardBoxTypeGroupTemplate::Drop_Reward_ObjectGroupID_B' has a wrong offset!");
static_assert(offsetof(FDropRewardBoxTypeGroupTemplate, Drop_Reward_ObjectGroupID_C) == 0x000014, "Member 'FDropRewardBoxTypeGroupTemplate::Drop_Reward_ObjectGroupID_C' has a wrong offset!");

// ScriptStruct MirMobile.DropRewardBoxTypePIETemplate
// 0x0008 (0x0010 - 0x0008)
struct FDropRewardBoxTypePIETemplate final : public FTableRowBase
{
public:
	int32                                         PieTypeRewardBoxGroupId;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DROP_REWARD_OBJECTGROUPID;                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDropRewardBoxTypePIETemplate) == 0x000008, "Wrong alignment on FDropRewardBoxTypePIETemplate");
static_assert(sizeof(FDropRewardBoxTypePIETemplate) == 0x000010, "Wrong size on FDropRewardBoxTypePIETemplate");
static_assert(offsetof(FDropRewardBoxTypePIETemplate, PieTypeRewardBoxGroupId) == 0x000008, "Member 'FDropRewardBoxTypePIETemplate::PieTypeRewardBoxGroupId' has a wrong offset!");
static_assert(offsetof(FDropRewardBoxTypePIETemplate, DROP_REWARD_OBJECTGROUPID) == 0x00000C, "Member 'FDropRewardBoxTypePIETemplate::DROP_REWARD_OBJECTGROUPID' has a wrong offset!");

// ScriptStruct MirMobile.RankingRewardTemplate
// 0x00A8 (0x00B0 - 0x0008)
struct FRankingRewardTemplate final : public FTableRowBase
{
public:
	int32                                         RankingRewardId;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryID;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankNumber;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankEnd;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankType;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardTitle;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardBuff1;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffDescStr1;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffValueStr1;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardBuff2;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffDescStr2;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffValueStr2;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardBuff3;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffDescStr3;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffValueStr3;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardBuff4;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffDescStr4;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffValueStr4;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardType1;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardId1;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardValue1;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardType2;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardId2;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardValue2;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardType3;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardId3;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardValue3;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardType4;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardId4;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekRewardValue4;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardType1;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardId1;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardValue1;                                 // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardType2;                                  // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardId2;                                    // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardValue2;                                 // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardType3;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardId3;                                    // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardValue3;                                 // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardType4;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardId4;                                    // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyRewardValue4;                                 // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingRewardTemplate) == 0x000008, "Wrong alignment on FRankingRewardTemplate");
static_assert(sizeof(FRankingRewardTemplate) == 0x0000B0, "Wrong size on FRankingRewardTemplate");
static_assert(offsetof(FRankingRewardTemplate, RankingRewardId) == 0x000008, "Member 'FRankingRewardTemplate::RankingRewardId' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, CategoryID) == 0x00000C, "Member 'FRankingRewardTemplate::CategoryID' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, RankNumber) == 0x000010, "Member 'FRankingRewardTemplate::RankNumber' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, RankEnd) == 0x000014, "Member 'FRankingRewardTemplate::RankEnd' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, RankType) == 0x000018, "Member 'FRankingRewardTemplate::RankType' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardTitle) == 0x00001C, "Member 'FRankingRewardTemplate::DailyRewardTitle' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardBuff1) == 0x000020, "Member 'FRankingRewardTemplate::DailyRewardBuff1' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, BuffDescStr1) == 0x000024, "Member 'FRankingRewardTemplate::BuffDescStr1' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, BuffValueStr1) == 0x000028, "Member 'FRankingRewardTemplate::BuffValueStr1' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardBuff2) == 0x00002C, "Member 'FRankingRewardTemplate::DailyRewardBuff2' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, BuffDescStr2) == 0x000030, "Member 'FRankingRewardTemplate::BuffDescStr2' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, BuffValueStr2) == 0x000034, "Member 'FRankingRewardTemplate::BuffValueStr2' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardBuff3) == 0x000038, "Member 'FRankingRewardTemplate::DailyRewardBuff3' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, BuffDescStr3) == 0x00003C, "Member 'FRankingRewardTemplate::BuffDescStr3' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, BuffValueStr3) == 0x000040, "Member 'FRankingRewardTemplate::BuffValueStr3' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardBuff4) == 0x000044, "Member 'FRankingRewardTemplate::DailyRewardBuff4' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, BuffDescStr4) == 0x000048, "Member 'FRankingRewardTemplate::BuffDescStr4' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, BuffValueStr4) == 0x00004C, "Member 'FRankingRewardTemplate::BuffValueStr4' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardType1) == 0x000050, "Member 'FRankingRewardTemplate::WeekRewardType1' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardId1) == 0x000054, "Member 'FRankingRewardTemplate::WeekRewardId1' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardValue1) == 0x000058, "Member 'FRankingRewardTemplate::WeekRewardValue1' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardType2) == 0x00005C, "Member 'FRankingRewardTemplate::WeekRewardType2' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardId2) == 0x000060, "Member 'FRankingRewardTemplate::WeekRewardId2' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardValue2) == 0x000064, "Member 'FRankingRewardTemplate::WeekRewardValue2' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardType3) == 0x000068, "Member 'FRankingRewardTemplate::WeekRewardType3' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardId3) == 0x00006C, "Member 'FRankingRewardTemplate::WeekRewardId3' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardValue3) == 0x000070, "Member 'FRankingRewardTemplate::WeekRewardValue3' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardType4) == 0x000074, "Member 'FRankingRewardTemplate::WeekRewardType4' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardId4) == 0x000078, "Member 'FRankingRewardTemplate::WeekRewardId4' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, WeekRewardValue4) == 0x00007C, "Member 'FRankingRewardTemplate::WeekRewardValue4' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardType1) == 0x000080, "Member 'FRankingRewardTemplate::DailyRewardType1' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardId1) == 0x000084, "Member 'FRankingRewardTemplate::DailyRewardId1' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardValue1) == 0x000088, "Member 'FRankingRewardTemplate::DailyRewardValue1' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardType2) == 0x00008C, "Member 'FRankingRewardTemplate::DailyRewardType2' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardId2) == 0x000090, "Member 'FRankingRewardTemplate::DailyRewardId2' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardValue2) == 0x000094, "Member 'FRankingRewardTemplate::DailyRewardValue2' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardType3) == 0x000098, "Member 'FRankingRewardTemplate::DailyRewardType3' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardId3) == 0x00009C, "Member 'FRankingRewardTemplate::DailyRewardId3' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardValue3) == 0x0000A0, "Member 'FRankingRewardTemplate::DailyRewardValue3' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardType4) == 0x0000A4, "Member 'FRankingRewardTemplate::DailyRewardType4' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardId4) == 0x0000A8, "Member 'FRankingRewardTemplate::DailyRewardId4' has a wrong offset!");
static_assert(offsetof(FRankingRewardTemplate, DailyRewardValue4) == 0x0000AC, "Member 'FRankingRewardTemplate::DailyRewardValue4' has a wrong offset!");

// ScriptStruct MirMobile.DropRewardObjectGroupTemplate
// 0x0010 (0x0018 - 0x0008)
struct FDropRewardObjectGroupTemplate final : public FTableRowBase
{
public:
	int32                                         Drop_Reward_Object_GroupID;                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectID;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Object_Drop_Chance;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDropRewardObjectGroupTemplate) == 0x000008, "Wrong alignment on FDropRewardObjectGroupTemplate");
static_assert(sizeof(FDropRewardObjectGroupTemplate) == 0x000018, "Wrong size on FDropRewardObjectGroupTemplate");
static_assert(offsetof(FDropRewardObjectGroupTemplate, Drop_Reward_Object_GroupID) == 0x000008, "Member 'FDropRewardObjectGroupTemplate::Drop_Reward_Object_GroupID' has a wrong offset!");
static_assert(offsetof(FDropRewardObjectGroupTemplate, ObjectID) == 0x00000C, "Member 'FDropRewardObjectGroupTemplate::ObjectID' has a wrong offset!");
static_assert(offsetof(FDropRewardObjectGroupTemplate, Object_Drop_Chance) == 0x000010, "Member 'FDropRewardObjectGroupTemplate::Object_Drop_Chance' has a wrong offset!");

// ScriptStruct MirMobile.MonsterPhasingTemplate
// 0x01E0 (0x01E8 - 0x0008)
struct FMonsterPhasingTemplate final : public FTableRowBase
{
public:
	int32                                         MonsterId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterResourceID;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameTitleSid;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Race;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonGrade;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonType;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MonScale;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHP;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicalAttack;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Physicaldefense;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magicdefense;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Accuracy;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dodge;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Critical;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvoidCritical;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalOutcome;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefCriticalOutcome;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonAttackDamage;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonDefense;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefSmiteSkillDamage;                               // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkdefenseDamage;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillDamage;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefSkillDamage;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AtkAllDamage;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefAllDamage;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StunPer;                                           // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefStunPer;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KnockDownPer;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefKnockDownPer;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmiteBuffPer;                                      // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefSmiteBuffPer;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeBuffPer;                                         // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefDeBuffPer;                                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CursePer;                                          // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefCursePer;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackLuck;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RunSpeed;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WalkSpeed;                                         // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackDelayMin;                                    // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackDelayMax;                                    // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombatPower;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HpStack;                                           // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MonAttack;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AttackRate_0;                                      // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AttackRate_1;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AttackRate_2;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AttackRate_3;                                      // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LongMonAttack;                                     // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LongAttackRate_0;                                  // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LongAttackRate_1;                                  // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LongAttackRate_2;                                  // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LongAttackRate_3;                                  // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TraceGap;                                          // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewRange;                                         // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackRange;                                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LongAttackRange;                                   // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseAppear;                                         // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitConGrade;                                       // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateConGrade;                                     // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveConGrade;                                      // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMONSTER_FACTION                              FactionType;                                       // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonColorGroupID;                                   // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BehaviourAiLink;                                   // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetingType;                                     // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterTargetPriority;                           // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PierceBody;                                        // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MonNormalAttack;                                   // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 MonNormalLongAttack;                               // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NormalAttackCntMin;                                // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalAttackCntMax;                                // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmiteBuffArmor;                                    // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectBuffArmor;                                   // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetValue;                                       // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MonsterFunctionData;                               // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonsterPhasingTemplate) == 0x000008, "Wrong alignment on FMonsterPhasingTemplate");
static_assert(sizeof(FMonsterPhasingTemplate) == 0x0001E8, "Wrong size on FMonsterPhasingTemplate");
static_assert(offsetof(FMonsterPhasingTemplate, MonsterId) == 0x000008, "Member 'FMonsterPhasingTemplate::MonsterId' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonsterResourceID) == 0x00000C, "Member 'FMonsterPhasingTemplate::MonsterResourceID' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, GroupId) == 0x000010, "Member 'FMonsterPhasingTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, NameSId) == 0x000014, "Member 'FMonsterPhasingTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, NameTitleSid) == 0x000018, "Member 'FMonsterPhasingTemplate::NameTitleSid' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, Race) == 0x00001C, "Member 'FMonsterPhasingTemplate::Race' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonGrade) == 0x000020, "Member 'FMonsterPhasingTemplate::MonGrade' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, Level) == 0x000024, "Member 'FMonsterPhasingTemplate::Level' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonType) == 0x000028, "Member 'FMonsterPhasingTemplate::MonType' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonScale) == 0x00002C, "Member 'FMonsterPhasingTemplate::MonScale' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MaxHP) == 0x000030, "Member 'FMonsterPhasingTemplate::MaxHP' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, PhysicalAttack) == 0x000034, "Member 'FMonsterPhasingTemplate::PhysicalAttack' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MagicAttack) == 0x000038, "Member 'FMonsterPhasingTemplate::MagicAttack' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, Physicaldefense) == 0x00003C, "Member 'FMonsterPhasingTemplate::Physicaldefense' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, Magicdefense) == 0x000040, "Member 'FMonsterPhasingTemplate::Magicdefense' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, Accuracy) == 0x000044, "Member 'FMonsterPhasingTemplate::Accuracy' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, Dodge) == 0x000048, "Member 'FMonsterPhasingTemplate::Dodge' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, Critical) == 0x00004C, "Member 'FMonsterPhasingTemplate::Critical' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, AvoidCritical) == 0x000050, "Member 'FMonsterPhasingTemplate::AvoidCritical' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, CriticalOutcome) == 0x000054, "Member 'FMonsterPhasingTemplate::CriticalOutcome' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DefCriticalOutcome) == 0x000058, "Member 'FMonsterPhasingTemplate::DefCriticalOutcome' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonAttackDamage) == 0x00005C, "Member 'FMonsterPhasingTemplate::MonAttackDamage' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonDefense) == 0x000060, "Member 'FMonsterPhasingTemplate::MonDefense' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DefSmiteSkillDamage) == 0x000064, "Member 'FMonsterPhasingTemplate::DefSmiteSkillDamage' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DarkdefenseDamage) == 0x000068, "Member 'FMonsterPhasingTemplate::DarkdefenseDamage' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, SkillDamage) == 0x00006C, "Member 'FMonsterPhasingTemplate::SkillDamage' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DefSkillDamage) == 0x000070, "Member 'FMonsterPhasingTemplate::DefSkillDamage' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, AtkAllDamage) == 0x000074, "Member 'FMonsterPhasingTemplate::AtkAllDamage' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DefAllDamage) == 0x000078, "Member 'FMonsterPhasingTemplate::DefAllDamage' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, StunPer) == 0x00007C, "Member 'FMonsterPhasingTemplate::StunPer' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DefStunPer) == 0x000080, "Member 'FMonsterPhasingTemplate::DefStunPer' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, KnockDownPer) == 0x000084, "Member 'FMonsterPhasingTemplate::KnockDownPer' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DefKnockDownPer) == 0x000088, "Member 'FMonsterPhasingTemplate::DefKnockDownPer' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, SmiteBuffPer) == 0x00008C, "Member 'FMonsterPhasingTemplate::SmiteBuffPer' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DefSmiteBuffPer) == 0x000090, "Member 'FMonsterPhasingTemplate::DefSmiteBuffPer' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DeBuffPer) == 0x000094, "Member 'FMonsterPhasingTemplate::DeBuffPer' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DefDeBuffPer) == 0x000098, "Member 'FMonsterPhasingTemplate::DefDeBuffPer' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, CursePer) == 0x00009C, "Member 'FMonsterPhasingTemplate::CursePer' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, DefCursePer) == 0x0000A0, "Member 'FMonsterPhasingTemplate::DefCursePer' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, AttackLuck) == 0x0000A4, "Member 'FMonsterPhasingTemplate::AttackLuck' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, RunSpeed) == 0x0000A8, "Member 'FMonsterPhasingTemplate::RunSpeed' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, WalkSpeed) == 0x0000AC, "Member 'FMonsterPhasingTemplate::WalkSpeed' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, AttackDelayMin) == 0x0000B0, "Member 'FMonsterPhasingTemplate::AttackDelayMin' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, AttackDelayMax) == 0x0000B4, "Member 'FMonsterPhasingTemplate::AttackDelayMax' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, CombatPower) == 0x0000B8, "Member 'FMonsterPhasingTemplate::CombatPower' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, HpStack) == 0x0000BC, "Member 'FMonsterPhasingTemplate::HpStack' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonAttack) == 0x0000C0, "Member 'FMonsterPhasingTemplate::MonAttack' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, AttackRate_0) == 0x0000D0, "Member 'FMonsterPhasingTemplate::AttackRate_0' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, AttackRate_1) == 0x0000E0, "Member 'FMonsterPhasingTemplate::AttackRate_1' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, AttackRate_2) == 0x0000F0, "Member 'FMonsterPhasingTemplate::AttackRate_2' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, AttackRate_3) == 0x000100, "Member 'FMonsterPhasingTemplate::AttackRate_3' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, LongMonAttack) == 0x000110, "Member 'FMonsterPhasingTemplate::LongMonAttack' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, LongAttackRate_0) == 0x000120, "Member 'FMonsterPhasingTemplate::LongAttackRate_0' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, LongAttackRate_1) == 0x000130, "Member 'FMonsterPhasingTemplate::LongAttackRate_1' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, LongAttackRate_2) == 0x000140, "Member 'FMonsterPhasingTemplate::LongAttackRate_2' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, LongAttackRate_3) == 0x000150, "Member 'FMonsterPhasingTemplate::LongAttackRate_3' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, TraceGap) == 0x000160, "Member 'FMonsterPhasingTemplate::TraceGap' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, ViewRange) == 0x000164, "Member 'FMonsterPhasingTemplate::ViewRange' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, AttackRange) == 0x000168, "Member 'FMonsterPhasingTemplate::AttackRange' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, LongAttackRange) == 0x00016C, "Member 'FMonsterPhasingTemplate::LongAttackRange' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, CapsuleHalfHeight) == 0x000170, "Member 'FMonsterPhasingTemplate::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, CapsuleRadius) == 0x000174, "Member 'FMonsterPhasingTemplate::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, UseAppear) == 0x000178, "Member 'FMonsterPhasingTemplate::UseAppear' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, HitConGrade) == 0x00017C, "Member 'FMonsterPhasingTemplate::HitConGrade' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, StateConGrade) == 0x000180, "Member 'FMonsterPhasingTemplate::StateConGrade' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MoveConGrade) == 0x000184, "Member 'FMonsterPhasingTemplate::MoveConGrade' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, FactionType) == 0x000188, "Member 'FMonsterPhasingTemplate::FactionType' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonColorGroupID) == 0x00018C, "Member 'FMonsterPhasingTemplate::MonColorGroupID' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, BehaviourAiLink) == 0x000190, "Member 'FMonsterPhasingTemplate::BehaviourAiLink' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, TargetingType) == 0x000194, "Member 'FMonsterPhasingTemplate::TargetingType' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, CharacterTargetPriority) == 0x000198, "Member 'FMonsterPhasingTemplate::CharacterTargetPriority' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, PierceBody) == 0x00019C, "Member 'FMonsterPhasingTemplate::PierceBody' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonNormalAttack) == 0x0001A0, "Member 'FMonsterPhasingTemplate::MonNormalAttack' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonNormalLongAttack) == 0x0001B0, "Member 'FMonsterPhasingTemplate::MonNormalLongAttack' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, NormalAttackCntMin) == 0x0001C0, "Member 'FMonsterPhasingTemplate::NormalAttackCntMin' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, NormalAttackCntMax) == 0x0001C4, "Member 'FMonsterPhasingTemplate::NormalAttackCntMax' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, SmiteBuffArmor) == 0x0001C8, "Member 'FMonsterPhasingTemplate::SmiteBuffArmor' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, EffectBuffArmor) == 0x0001CC, "Member 'FMonsterPhasingTemplate::EffectBuffArmor' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, TargetValue) == 0x0001D0, "Member 'FMonsterPhasingTemplate::TargetValue' has a wrong offset!");
static_assert(offsetof(FMonsterPhasingTemplate, MonsterFunctionData) == 0x0001D8, "Member 'FMonsterPhasingTemplate::MonsterFunctionData' has a wrong offset!");

// ScriptStruct MirMobile.ItemMagicOrbLevelTemplate
// 0x0020 (0x0028 - 0x0008)
struct FItemMagicOrbLevelTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubType;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqExp;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombatPoint;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMagicOrbLevelTemplate) == 0x000008, "Wrong alignment on FItemMagicOrbLevelTemplate");
static_assert(sizeof(FItemMagicOrbLevelTemplate) == 0x000028, "Wrong size on FItemMagicOrbLevelTemplate");
static_assert(offsetof(FItemMagicOrbLevelTemplate, Name) == 0x000008, "Member 'FItemMagicOrbLevelTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbLevelTemplate, RowId) == 0x00000C, "Member 'FItemMagicOrbLevelTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbLevelTemplate, SubType) == 0x000010, "Member 'FItemMagicOrbLevelTemplate::SubType' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbLevelTemplate, Grade) == 0x000014, "Member 'FItemMagicOrbLevelTemplate::Grade' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbLevelTemplate, Level) == 0x000018, "Member 'FItemMagicOrbLevelTemplate::Level' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbLevelTemplate, ReqExp) == 0x00001C, "Member 'FItemMagicOrbLevelTemplate::ReqExp' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbLevelTemplate, CombatPoint) == 0x000020, "Member 'FItemMagicOrbLevelTemplate::CombatPoint' has a wrong offset!");

// ScriptStruct MirMobile.GuildPositionTemplate
// 0x0018 (0x0020 - 0x0008)
struct FGuildPositionTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffId;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildPositionTemplate) == 0x000008, "Wrong alignment on FGuildPositionTemplate");
static_assert(sizeof(FGuildPositionTemplate) == 0x000020, "Wrong size on FGuildPositionTemplate");
static_assert(offsetof(FGuildPositionTemplate, Name) == 0x000008, "Member 'FGuildPositionTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildPositionTemplate, GroupId) == 0x00000C, "Member 'FGuildPositionTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FGuildPositionTemplate, Number) == 0x000010, "Member 'FGuildPositionTemplate::Number' has a wrong offset!");
static_assert(offsetof(FGuildPositionTemplate, Type) == 0x000014, "Member 'FGuildPositionTemplate::Type' has a wrong offset!");
static_assert(offsetof(FGuildPositionTemplate, BuffId) == 0x000018, "Member 'FGuildPositionTemplate::BuffId' has a wrong offset!");

// ScriptStruct MirMobile.DungeonShopTemplate
// 0x0028 (0x0030 - 0x0008)
struct FDungeonShopTemplate final : public FTableRowBase
{
public:
	int32                                         DGShopId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DGShopGroup;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DGShopGroupName;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DGShopNo;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DGShopItemId;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DGShopItemCnt;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DGShopItemBuyCostType;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DGShopItemBuyCostTypeSub;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DGShopItemBuyCostValue;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDungeonShopTemplate) == 0x000008, "Wrong alignment on FDungeonShopTemplate");
static_assert(sizeof(FDungeonShopTemplate) == 0x000030, "Wrong size on FDungeonShopTemplate");
static_assert(offsetof(FDungeonShopTemplate, DGShopId) == 0x000008, "Member 'FDungeonShopTemplate::DGShopId' has a wrong offset!");
static_assert(offsetof(FDungeonShopTemplate, DGShopGroup) == 0x00000C, "Member 'FDungeonShopTemplate::DGShopGroup' has a wrong offset!");
static_assert(offsetof(FDungeonShopTemplate, DGShopGroupName) == 0x000010, "Member 'FDungeonShopTemplate::DGShopGroupName' has a wrong offset!");
static_assert(offsetof(FDungeonShopTemplate, DGShopNo) == 0x000014, "Member 'FDungeonShopTemplate::DGShopNo' has a wrong offset!");
static_assert(offsetof(FDungeonShopTemplate, DGShopItemId) == 0x000018, "Member 'FDungeonShopTemplate::DGShopItemId' has a wrong offset!");
static_assert(offsetof(FDungeonShopTemplate, DGShopItemCnt) == 0x00001C, "Member 'FDungeonShopTemplate::DGShopItemCnt' has a wrong offset!");
static_assert(offsetof(FDungeonShopTemplate, DGShopItemBuyCostType) == 0x000020, "Member 'FDungeonShopTemplate::DGShopItemBuyCostType' has a wrong offset!");
static_assert(offsetof(FDungeonShopTemplate, DGShopItemBuyCostTypeSub) == 0x000024, "Member 'FDungeonShopTemplate::DGShopItemBuyCostTypeSub' has a wrong offset!");
static_assert(offsetof(FDungeonShopTemplate, DGShopItemBuyCostValue) == 0x000028, "Member 'FDungeonShopTemplate::DGShopItemBuyCostValue' has a wrong offset!");

// ScriptStruct MirMobile.DungeonTicketChargeTemplate
// 0x0018 (0x0020 - 0x0008)
struct FDungeonTicketChargeTemplate final : public FTableRowBase
{
public:
	int32                                         ChargeId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeGroup;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeCountMin;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostType;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostValue;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDungeonTicketChargeTemplate) == 0x000008, "Wrong alignment on FDungeonTicketChargeTemplate");
static_assert(sizeof(FDungeonTicketChargeTemplate) == 0x000020, "Wrong size on FDungeonTicketChargeTemplate");
static_assert(offsetof(FDungeonTicketChargeTemplate, ChargeId) == 0x000008, "Member 'FDungeonTicketChargeTemplate::ChargeId' has a wrong offset!");
static_assert(offsetof(FDungeonTicketChargeTemplate, ChargeGroup) == 0x00000C, "Member 'FDungeonTicketChargeTemplate::ChargeGroup' has a wrong offset!");
static_assert(offsetof(FDungeonTicketChargeTemplate, ChargeCountMin) == 0x000010, "Member 'FDungeonTicketChargeTemplate::ChargeCountMin' has a wrong offset!");
static_assert(offsetof(FDungeonTicketChargeTemplate, CostType) == 0x000014, "Member 'FDungeonTicketChargeTemplate::CostType' has a wrong offset!");
static_assert(offsetof(FDungeonTicketChargeTemplate, CostValue) == 0x000018, "Member 'FDungeonTicketChargeTemplate::CostValue' has a wrong offset!");

// ScriptStruct MirMobile.DungeonTicketTemplate
// 0x0040 (0x0048 - 0x0008)
struct FDungeonTicketTemplate final : public FTableRowBase
{
public:
	int32                                         DungeonTicketId;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconGrade;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconSmall;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetTimeHour;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetTimeMin;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultMax;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitUserMax;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitSystemMax;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeGroup;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToolTipID;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketRechargeMax;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketItemId;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketAutoChargeLimitCount;                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetType;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonTicketTemplate) == 0x000008, "Wrong alignment on FDungeonTicketTemplate");
static_assert(sizeof(FDungeonTicketTemplate) == 0x000048, "Wrong size on FDungeonTicketTemplate");
static_assert(offsetof(FDungeonTicketTemplate, DungeonTicketId) == 0x000008, "Member 'FDungeonTicketTemplate::DungeonTicketId' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, NameSId) == 0x00000C, "Member 'FDungeonTicketTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, Icon) == 0x000010, "Member 'FDungeonTicketTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, IconGrade) == 0x000014, "Member 'FDungeonTicketTemplate::IconGrade' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, IconSmall) == 0x000018, "Member 'FDungeonTicketTemplate::IconSmall' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, ResetTimeHour) == 0x00001C, "Member 'FDungeonTicketTemplate::ResetTimeHour' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, ResetTimeMin) == 0x000020, "Member 'FDungeonTicketTemplate::ResetTimeMin' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, DefaultMax) == 0x000024, "Member 'FDungeonTicketTemplate::DefaultMax' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, LimitUserMax) == 0x000028, "Member 'FDungeonTicketTemplate::LimitUserMax' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, LimitSystemMax) == 0x00002C, "Member 'FDungeonTicketTemplate::LimitSystemMax' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, ChargeGroup) == 0x000030, "Member 'FDungeonTicketTemplate::ChargeGroup' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, ToolTipID) == 0x000034, "Member 'FDungeonTicketTemplate::ToolTipID' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, TicketRechargeMax) == 0x000038, "Member 'FDungeonTicketTemplate::TicketRechargeMax' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, TicketItemId) == 0x00003C, "Member 'FDungeonTicketTemplate::TicketItemId' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, TicketAutoChargeLimitCount) == 0x000040, "Member 'FDungeonTicketTemplate::TicketAutoChargeLimitCount' has a wrong offset!");
static_assert(offsetof(FDungeonTicketTemplate, ResetType) == 0x000044, "Member 'FDungeonTicketTemplate::ResetType' has a wrong offset!");

// ScriptStruct MirMobile.EffectWidgetTemplate
// 0x0030 (0x0038 - 0x0008)
struct FEffectWidgetTemplate final : public FTableRowBase
{
public:
	int32                                         EffectId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AniName;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EWScaleX;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EWScaleY;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEffectWidgetTemplate) == 0x000008, "Wrong alignment on FEffectWidgetTemplate");
static_assert(sizeof(FEffectWidgetTemplate) == 0x000038, "Wrong size on FEffectWidgetTemplate");
static_assert(offsetof(FEffectWidgetTemplate, EffectId) == 0x000008, "Member 'FEffectWidgetTemplate::EffectId' has a wrong offset!");
static_assert(offsetof(FEffectWidgetTemplate, Filename) == 0x000010, "Member 'FEffectWidgetTemplate::Filename' has a wrong offset!");
static_assert(offsetof(FEffectWidgetTemplate, AniName) == 0x000020, "Member 'FEffectWidgetTemplate::AniName' has a wrong offset!");
static_assert(offsetof(FEffectWidgetTemplate, EWScaleX) == 0x000030, "Member 'FEffectWidgetTemplate::EWScaleX' has a wrong offset!");
static_assert(offsetof(FEffectWidgetTemplate, EWScaleY) == 0x000034, "Member 'FEffectWidgetTemplate::EWScaleY' has a wrong offset!");

// ScriptStruct MirMobile.EliteDungeonTemplate
// 0x0038 (0x0040 - 0x0008)
struct FEliteDungeonTemplate final : public FStageCommonTemplate
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EdID;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageSort;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageNameID;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageNoteID;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelValue;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrivalLocation;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageThumbnail;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventThumbnail;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BossMonsterID;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BossGenType;                                       // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CombatPowerType;                                   // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecommendedPerson;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEliteDungeonTemplate) == 0x000008, "Wrong alignment on FEliteDungeonTemplate");
static_assert(sizeof(FEliteDungeonTemplate) == 0x000040, "Wrong size on FEliteDungeonTemplate");
static_assert(offsetof(FEliteDungeonTemplate, Name) == 0x000008, "Member 'FEliteDungeonTemplate::Name' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, EdID) == 0x00000C, "Member 'FEliteDungeonTemplate::EdID' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, StageID) == 0x000010, "Member 'FEliteDungeonTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, StageSort) == 0x000014, "Member 'FEliteDungeonTemplate::StageSort' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, StageNameID) == 0x000018, "Member 'FEliteDungeonTemplate::StageNameID' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, StageNoteID) == 0x00001C, "Member 'FEliteDungeonTemplate::StageNoteID' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, LevelValue) == 0x000020, "Member 'FEliteDungeonTemplate::LevelValue' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, ArrivalLocation) == 0x000024, "Member 'FEliteDungeonTemplate::ArrivalLocation' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, StageThumbnail) == 0x000028, "Member 'FEliteDungeonTemplate::StageThumbnail' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, EventThumbnail) == 0x00002C, "Member 'FEliteDungeonTemplate::EventThumbnail' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, BossMonsterID) == 0x000030, "Member 'FEliteDungeonTemplate::BossMonsterID' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, BossGenType) == 0x000034, "Member 'FEliteDungeonTemplate::BossGenType' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, CombatPowerType) == 0x000035, "Member 'FEliteDungeonTemplate::CombatPowerType' has a wrong offset!");
static_assert(offsetof(FEliteDungeonTemplate, RecommendedPerson) == 0x000038, "Member 'FEliteDungeonTemplate::RecommendedPerson' has a wrong offset!");

// ScriptStruct MirMobile.SkillPassiveTemplate
// 0x00E0 (0x00E8 - 0x0008)
struct FSkillPassiveTemplate final : public FTableRowBase
{
public:
	int32                                         PassiveID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveMainType;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveName;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveExplain;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemOptionGrade;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveIcon;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveTranceExplain;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowUI;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveGroupID;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveMaxLv;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqClassLevel;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveType;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetType;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CastingCondition;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionValue01;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionValue02;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConditionPer;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LVConditionPer;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooltime;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LVCoolTime;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffTargetType;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillPassiveLevel;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffLink;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffLink1;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialAbilityType;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialAbilityValue01;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialAbilityValue02;                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityType_1;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbilityValue_1;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelUpAbilityValue_1;                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbilityValueEx_1;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityType_2;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbilityValue_2;                                    // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelUpAbilityValue_2;                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbilityValueEx_2;                                  // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSmite;                                           // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UIDescValue;                                       // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIDescLevelUpValue;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIDescValueEx;                                     // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIDescLevelUpValueEx;                              // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIDescAbilityTime;                                 // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIDescLevelUpTime;                                 // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIDescBuffValue;                                   // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIDescLevelUpBuffValue;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIDescConditonPer;                                 // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x28];                                      // 0x00C0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillPassiveTemplate) == 0x000008, "Wrong alignment on FSkillPassiveTemplate");
static_assert(sizeof(FSkillPassiveTemplate) == 0x0000E8, "Wrong size on FSkillPassiveTemplate");
static_assert(offsetof(FSkillPassiveTemplate, PassiveID) == 0x000008, "Member 'FSkillPassiveTemplate::PassiveID' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, PassiveMainType) == 0x00000C, "Member 'FSkillPassiveTemplate::PassiveMainType' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, PassiveName) == 0x000010, "Member 'FSkillPassiveTemplate::PassiveName' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, PassiveExplain) == 0x000014, "Member 'FSkillPassiveTemplate::PassiveExplain' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, ItemOptionGrade) == 0x000018, "Member 'FSkillPassiveTemplate::ItemOptionGrade' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, PassiveIcon) == 0x00001C, "Member 'FSkillPassiveTemplate::PassiveIcon' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, PassiveTranceExplain) == 0x000020, "Member 'FSkillPassiveTemplate::PassiveTranceExplain' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, ShowUI) == 0x000024, "Member 'FSkillPassiveTemplate::ShowUI' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, Class) == 0x000028, "Member 'FSkillPassiveTemplate::Class' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, PassiveGroupID) == 0x00002C, "Member 'FSkillPassiveTemplate::PassiveGroupID' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, PassiveMaxLv) == 0x000030, "Member 'FSkillPassiveTemplate::PassiveMaxLv' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, ReqClassLevel) == 0x000034, "Member 'FSkillPassiveTemplate::ReqClassLevel' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, PassiveType) == 0x000038, "Member 'FSkillPassiveTemplate::PassiveType' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, TargetType) == 0x00003C, "Member 'FSkillPassiveTemplate::TargetType' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, CastingCondition) == 0x000040, "Member 'FSkillPassiveTemplate::CastingCondition' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, ConditionValue01) == 0x000044, "Member 'FSkillPassiveTemplate::ConditionValue01' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, ConditionValue02) == 0x000048, "Member 'FSkillPassiveTemplate::ConditionValue02' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, ConditionPer) == 0x00004C, "Member 'FSkillPassiveTemplate::ConditionPer' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, LVConditionPer) == 0x000050, "Member 'FSkillPassiveTemplate::LVConditionPer' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, Cooltime) == 0x000054, "Member 'FSkillPassiveTemplate::Cooltime' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, LVCoolTime) == 0x000058, "Member 'FSkillPassiveTemplate::LVCoolTime' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, BuffTargetType) == 0x00005C, "Member 'FSkillPassiveTemplate::BuffTargetType' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, SkillPassiveLevel) == 0x000060, "Member 'FSkillPassiveTemplate::SkillPassiveLevel' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, BuffLink) == 0x000064, "Member 'FSkillPassiveTemplate::BuffLink' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, BuffLink1) == 0x000068, "Member 'FSkillPassiveTemplate::BuffLink1' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, SpecialAbilityType) == 0x00006C, "Member 'FSkillPassiveTemplate::SpecialAbilityType' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, SpecialAbilityValue01) == 0x000070, "Member 'FSkillPassiveTemplate::SpecialAbilityValue01' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, SpecialAbilityValue02) == 0x000074, "Member 'FSkillPassiveTemplate::SpecialAbilityValue02' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, AbilityType_1) == 0x000078, "Member 'FSkillPassiveTemplate::AbilityType_1' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, AbilityValue_1) == 0x00007C, "Member 'FSkillPassiveTemplate::AbilityValue_1' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, LevelUpAbilityValue_1) == 0x000080, "Member 'FSkillPassiveTemplate::LevelUpAbilityValue_1' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, AbilityValueEx_1) == 0x000084, "Member 'FSkillPassiveTemplate::AbilityValueEx_1' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, AbilityType_2) == 0x000088, "Member 'FSkillPassiveTemplate::AbilityType_2' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, AbilityValue_2) == 0x00008C, "Member 'FSkillPassiveTemplate::AbilityValue_2' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, LevelUpAbilityValue_2) == 0x000090, "Member 'FSkillPassiveTemplate::LevelUpAbilityValue_2' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, AbilityValueEx_2) == 0x000094, "Member 'FSkillPassiveTemplate::AbilityValueEx_2' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, IsSmite) == 0x000098, "Member 'FSkillPassiveTemplate::IsSmite' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, UIDescValue) == 0x00009C, "Member 'FSkillPassiveTemplate::UIDescValue' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, UIDescLevelUpValue) == 0x0000A0, "Member 'FSkillPassiveTemplate::UIDescLevelUpValue' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, UIDescValueEx) == 0x0000A4, "Member 'FSkillPassiveTemplate::UIDescValueEx' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, UIDescLevelUpValueEx) == 0x0000A8, "Member 'FSkillPassiveTemplate::UIDescLevelUpValueEx' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, UIDescAbilityTime) == 0x0000AC, "Member 'FSkillPassiveTemplate::UIDescAbilityTime' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, UIDescLevelUpTime) == 0x0000B0, "Member 'FSkillPassiveTemplate::UIDescLevelUpTime' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, UIDescBuffValue) == 0x0000B4, "Member 'FSkillPassiveTemplate::UIDescBuffValue' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, UIDescLevelUpBuffValue) == 0x0000B8, "Member 'FSkillPassiveTemplate::UIDescLevelUpBuffValue' has a wrong offset!");
static_assert(offsetof(FSkillPassiveTemplate, UIDescConditonPer) == 0x0000BC, "Member 'FSkillPassiveTemplate::UIDescConditonPer' has a wrong offset!");

// ScriptStruct MirMobile.GuildDominionExchangeTemplate
// 0x0020 (0x0028 - 0x0008)
struct FGuildDominionExchangeTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeDominionId;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyId_Send;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyId_Receive;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PayCommissionRate;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PayMoneyMinValue;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDominionExchangeTemplate) == 0x000008, "Wrong alignment on FGuildDominionExchangeTemplate");
static_assert(sizeof(FGuildDominionExchangeTemplate) == 0x000028, "Wrong size on FGuildDominionExchangeTemplate");
static_assert(offsetof(FGuildDominionExchangeTemplate, Name) == 0x000008, "Member 'FGuildDominionExchangeTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildDominionExchangeTemplate, ExchangeId) == 0x00000C, "Member 'FGuildDominionExchangeTemplate::ExchangeId' has a wrong offset!");
static_assert(offsetof(FGuildDominionExchangeTemplate, ExchangeDominionId) == 0x000010, "Member 'FGuildDominionExchangeTemplate::ExchangeDominionId' has a wrong offset!");
static_assert(offsetof(FGuildDominionExchangeTemplate, MoneyId_Send) == 0x000014, "Member 'FGuildDominionExchangeTemplate::MoneyId_Send' has a wrong offset!");
static_assert(offsetof(FGuildDominionExchangeTemplate, MoneyId_Receive) == 0x000018, "Member 'FGuildDominionExchangeTemplate::MoneyId_Receive' has a wrong offset!");
static_assert(offsetof(FGuildDominionExchangeTemplate, PayCommissionRate) == 0x00001C, "Member 'FGuildDominionExchangeTemplate::PayCommissionRate' has a wrong offset!");
static_assert(offsetof(FGuildDominionExchangeTemplate, PayMoneyMinValue) == 0x000020, "Member 'FGuildDominionExchangeTemplate::PayMoneyMinValue' has a wrong offset!");

// ScriptStruct MirMobile.EquipLevelOptionTemplate
// 0x0020 (0x0028 - 0x0008)
struct FEquipLevelOptionTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dragongear_Group;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Activity_MainType;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Activity_SubType;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Equip_SlotIEffect;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquipLevelOptionTemplate) == 0x000008, "Wrong alignment on FEquipLevelOptionTemplate");
static_assert(sizeof(FEquipLevelOptionTemplate) == 0x000028, "Wrong size on FEquipLevelOptionTemplate");
static_assert(offsetof(FEquipLevelOptionTemplate, RowId) == 0x000008, "Member 'FEquipLevelOptionTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FEquipLevelOptionTemplate, Class) == 0x00000C, "Member 'FEquipLevelOptionTemplate::Class' has a wrong offset!");
static_assert(offsetof(FEquipLevelOptionTemplate, Dragongear_Group) == 0x000010, "Member 'FEquipLevelOptionTemplate::Dragongear_Group' has a wrong offset!");
static_assert(offsetof(FEquipLevelOptionTemplate, Level) == 0x000014, "Member 'FEquipLevelOptionTemplate::Level' has a wrong offset!");
static_assert(offsetof(FEquipLevelOptionTemplate, Exp) == 0x000018, "Member 'FEquipLevelOptionTemplate::Exp' has a wrong offset!");
static_assert(offsetof(FEquipLevelOptionTemplate, Activity_MainType) == 0x00001C, "Member 'FEquipLevelOptionTemplate::Activity_MainType' has a wrong offset!");
static_assert(offsetof(FEquipLevelOptionTemplate, Activity_SubType) == 0x000020, "Member 'FEquipLevelOptionTemplate::Activity_SubType' has a wrong offset!");
static_assert(offsetof(FEquipLevelOptionTemplate, Equip_SlotIEffect) == 0x000024, "Member 'FEquipLevelOptionTemplate::Equip_SlotIEffect' has a wrong offset!");

// ScriptStruct MirMobile.EventContentsTemplate
// 0x0048 (0x0050 - 0x0008)
struct FEventContentsTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventGroup;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartDate;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LinkDataTableName;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LinkDataId;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventContentsTemplate) == 0x000008, "Wrong alignment on FEventContentsTemplate");
static_assert(sizeof(FEventContentsTemplate) == 0x000050, "Wrong size on FEventContentsTemplate");
static_assert(offsetof(FEventContentsTemplate, ID) == 0x000008, "Member 'FEventContentsTemplate::ID' has a wrong offset!");
static_assert(offsetof(FEventContentsTemplate, EventGroup) == 0x00000C, "Member 'FEventContentsTemplate::EventGroup' has a wrong offset!");
static_assert(offsetof(FEventContentsTemplate, EventType) == 0x000010, "Member 'FEventContentsTemplate::EventType' has a wrong offset!");
static_assert(offsetof(FEventContentsTemplate, StartDate) == 0x000018, "Member 'FEventContentsTemplate::StartDate' has a wrong offset!");
static_assert(offsetof(FEventContentsTemplate, EndDate) == 0x000028, "Member 'FEventContentsTemplate::EndDate' has a wrong offset!");
static_assert(offsetof(FEventContentsTemplate, LinkDataTableName) == 0x000038, "Member 'FEventContentsTemplate::LinkDataTableName' has a wrong offset!");
static_assert(offsetof(FEventContentsTemplate, LinkDataId) == 0x000040, "Member 'FEventContentsTemplate::LinkDataId' has a wrong offset!");

// ScriptStruct MirMobile.EventMissionPassConditionTemplate
// 0x0020 (0x0028 - 0x0008)
struct FEventMissionPassConditionTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionGroupId;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionPassProgressType;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionPassCategoryType;                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionPassSubType;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubValue1;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubValue2;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventMissionPassConditionTemplate) == 0x000008, "Wrong alignment on FEventMissionPassConditionTemplate");
static_assert(sizeof(FEventMissionPassConditionTemplate) == 0x000028, "Wrong size on FEventMissionPassConditionTemplate");
static_assert(offsetof(FEventMissionPassConditionTemplate, ID) == 0x000008, "Member 'FEventMissionPassConditionTemplate::ID' has a wrong offset!");
static_assert(offsetof(FEventMissionPassConditionTemplate, ConditionGroupId) == 0x00000C, "Member 'FEventMissionPassConditionTemplate::ConditionGroupId' has a wrong offset!");
static_assert(offsetof(FEventMissionPassConditionTemplate, MissionPassProgressType) == 0x000010, "Member 'FEventMissionPassConditionTemplate::MissionPassProgressType' has a wrong offset!");
static_assert(offsetof(FEventMissionPassConditionTemplate, MissionPassCategoryType) == 0x000014, "Member 'FEventMissionPassConditionTemplate::MissionPassCategoryType' has a wrong offset!");
static_assert(offsetof(FEventMissionPassConditionTemplate, MissionPassSubType) == 0x000018, "Member 'FEventMissionPassConditionTemplate::MissionPassSubType' has a wrong offset!");
static_assert(offsetof(FEventMissionPassConditionTemplate, SubValue1) == 0x00001C, "Member 'FEventMissionPassConditionTemplate::SubValue1' has a wrong offset!");
static_assert(offsetof(FEventMissionPassConditionTemplate, SubValue2) == 0x000020, "Member 'FEventMissionPassConditionTemplate::SubValue2' has a wrong offset!");

// ScriptStruct MirMobile.MontageTemplate
// 0x0018 (0x0020 - 0x0008)
struct FMontageTemplate final : public FTableRowBase
{
public:
	int32                                         MontageId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMontageTemplate) == 0x000008, "Wrong alignment on FMontageTemplate");
static_assert(sizeof(FMontageTemplate) == 0x000020, "Wrong size on FMontageTemplate");
static_assert(offsetof(FMontageTemplate, MontageId) == 0x000008, "Member 'FMontageTemplate::MontageId' has a wrong offset!");
static_assert(offsetof(FMontageTemplate, Filename) == 0x000010, "Member 'FMontageTemplate::Filename' has a wrong offset!");

// ScriptStruct MirMobile.EventMissionPassRewardTemplate
// 0x0048 (0x0050 - 0x0008)
struct FEventMissionPassRewardTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupName;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionGroupId;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventStep;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventStepTooltipId;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventStepFirstName;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventStepSecondName;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventStepCompleteCount;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType1;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardId1;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCount1;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType2;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardId2;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCount2;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShortCutId;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventMissionPassRewardTemplate) == 0x000008, "Wrong alignment on FEventMissionPassRewardTemplate");
static_assert(sizeof(FEventMissionPassRewardTemplate) == 0x000050, "Wrong size on FEventMissionPassRewardTemplate");
static_assert(offsetof(FEventMissionPassRewardTemplate, ID) == 0x000008, "Member 'FEventMissionPassRewardTemplate::ID' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, EventId) == 0x00000C, "Member 'FEventMissionPassRewardTemplate::EventId' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, GroupId) == 0x000010, "Member 'FEventMissionPassRewardTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, GroupName) == 0x000014, "Member 'FEventMissionPassRewardTemplate::GroupName' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, ConditionGroupId) == 0x000018, "Member 'FEventMissionPassRewardTemplate::ConditionGroupId' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, EventStep) == 0x00001C, "Member 'FEventMissionPassRewardTemplate::EventStep' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, EventStepTooltipId) == 0x000020, "Member 'FEventMissionPassRewardTemplate::EventStepTooltipId' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, EventStepFirstName) == 0x000024, "Member 'FEventMissionPassRewardTemplate::EventStepFirstName' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, EventStepSecondName) == 0x000028, "Member 'FEventMissionPassRewardTemplate::EventStepSecondName' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, EventStepCompleteCount) == 0x00002C, "Member 'FEventMissionPassRewardTemplate::EventStepCompleteCount' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, RewardType1) == 0x000030, "Member 'FEventMissionPassRewardTemplate::RewardType1' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, RewardId1) == 0x000034, "Member 'FEventMissionPassRewardTemplate::RewardId1' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, RewardCount1) == 0x000038, "Member 'FEventMissionPassRewardTemplate::RewardCount1' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, RewardType2) == 0x00003C, "Member 'FEventMissionPassRewardTemplate::RewardType2' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, RewardId2) == 0x000040, "Member 'FEventMissionPassRewardTemplate::RewardId2' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, RewardCount2) == 0x000044, "Member 'FEventMissionPassRewardTemplate::RewardCount2' has a wrong offset!");
static_assert(offsetof(FEventMissionPassRewardTemplate, ShortCutId) == 0x000048, "Member 'FEventMissionPassRewardTemplate::ShortCutId' has a wrong offset!");

// ScriptStruct MirMobile.EventPassInfoTemplate
// 0x02C0 (0x02C8 - 0x0008)
struct FEventPassInfoTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameStrId;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupType;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserEventId;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseMinLevel;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseMaxLevel;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelCondition;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventPassStart;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventPassEnd;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonBuffFist1;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonBuffFist2;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonBuffSecond1;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonBuffSecond2;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventPassDesc;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseType1;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyID1;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyValue1;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseType2;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyID2;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyValue2;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseButton1;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseButton2;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Web1;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Web2;                                              // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AosUid1;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IosUid1;                                           // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OneStoreUid1;                                      // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SamsungUid1;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamUid1;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XsollaUid1;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MycardUid1;                                        // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HydraUid1;                                         // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HuaweiUid1;                                        // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AosUidValue1;                                      // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IosUidValue1;                                      // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OneStoreValue1;                                    // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SamsungValue1;                                     // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamValue1;                                       // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XsollaValue1;                                      // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MycardValue1;                                      // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HydraValue1;                                       // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HuaweiValue1;                                      // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AosUid2;                                           // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IosUid2;                                           // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OneStoreUid2;                                      // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SamsungUid2;                                       // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamUid2;                                         // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XsollaUid2;                                        // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MycardUid2;                                        // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HydraUid2;                                         // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HuaweiUid2;                                        // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AosUidValue2;                                      // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IosUidValue2;                                      // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OneStoreValue2;                                    // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SamsungValue2;                                     // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamValue2;                                       // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XsollaValue2;                                      // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MycardValue2;                                      // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HydraValue2;                                       // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HuaweiValue2;                                      // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleText;                                         // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventPassInfoTemplate) == 0x000008, "Wrong alignment on FEventPassInfoTemplate");
static_assert(sizeof(FEventPassInfoTemplate) == 0x0002C8, "Wrong size on FEventPassInfoTemplate");
static_assert(offsetof(FEventPassInfoTemplate, ID) == 0x000008, "Member 'FEventPassInfoTemplate::ID' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, NameStrId) == 0x00000C, "Member 'FEventPassInfoTemplate::NameStrId' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, GroupType) == 0x000010, "Member 'FEventPassInfoTemplate::GroupType' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, UserEventId) == 0x000014, "Member 'FEventPassInfoTemplate::UserEventId' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, PurchaseMinLevel) == 0x000018, "Member 'FEventPassInfoTemplate::PurchaseMinLevel' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, PurchaseMaxLevel) == 0x00001C, "Member 'FEventPassInfoTemplate::PurchaseMaxLevel' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, LevelCondition) == 0x000020, "Member 'FEventPassInfoTemplate::LevelCondition' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, EventPassStart) == 0x000024, "Member 'FEventPassInfoTemplate::EventPassStart' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, EventPassEnd) == 0x000028, "Member 'FEventPassInfoTemplate::EventPassEnd' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SeasonBuffFist1) == 0x00002C, "Member 'FEventPassInfoTemplate::SeasonBuffFist1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SeasonBuffFist2) == 0x000030, "Member 'FEventPassInfoTemplate::SeasonBuffFist2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SeasonBuffSecond1) == 0x000034, "Member 'FEventPassInfoTemplate::SeasonBuffSecond1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SeasonBuffSecond2) == 0x000038, "Member 'FEventPassInfoTemplate::SeasonBuffSecond2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, EventPassDesc) == 0x00003C, "Member 'FEventPassInfoTemplate::EventPassDesc' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, PurchaseType1) == 0x000040, "Member 'FEventPassInfoTemplate::PurchaseType1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, MoneyID1) == 0x000044, "Member 'FEventPassInfoTemplate::MoneyID1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, MoneyValue1) == 0x000048, "Member 'FEventPassInfoTemplate::MoneyValue1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, PurchaseType2) == 0x00004C, "Member 'FEventPassInfoTemplate::PurchaseType2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, MoneyID2) == 0x000050, "Member 'FEventPassInfoTemplate::MoneyID2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, MoneyValue2) == 0x000054, "Member 'FEventPassInfoTemplate::MoneyValue2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, PurchaseButton1) == 0x000058, "Member 'FEventPassInfoTemplate::PurchaseButton1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, PurchaseButton2) == 0x00005C, "Member 'FEventPassInfoTemplate::PurchaseButton2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, Web1) == 0x000060, "Member 'FEventPassInfoTemplate::Web1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, Web2) == 0x000070, "Member 'FEventPassInfoTemplate::Web2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, AosUid1) == 0x000080, "Member 'FEventPassInfoTemplate::AosUid1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, IosUid1) == 0x000090, "Member 'FEventPassInfoTemplate::IosUid1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, OneStoreUid1) == 0x0000A0, "Member 'FEventPassInfoTemplate::OneStoreUid1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SamsungUid1) == 0x0000B0, "Member 'FEventPassInfoTemplate::SamsungUid1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SteamUid1) == 0x0000C0, "Member 'FEventPassInfoTemplate::SteamUid1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, XsollaUid1) == 0x0000D0, "Member 'FEventPassInfoTemplate::XsollaUid1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, MycardUid1) == 0x0000E0, "Member 'FEventPassInfoTemplate::MycardUid1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, HydraUid1) == 0x0000F0, "Member 'FEventPassInfoTemplate::HydraUid1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, HuaweiUid1) == 0x000100, "Member 'FEventPassInfoTemplate::HuaweiUid1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, AosUidValue1) == 0x000110, "Member 'FEventPassInfoTemplate::AosUidValue1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, IosUidValue1) == 0x000120, "Member 'FEventPassInfoTemplate::IosUidValue1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, OneStoreValue1) == 0x000130, "Member 'FEventPassInfoTemplate::OneStoreValue1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SamsungValue1) == 0x000140, "Member 'FEventPassInfoTemplate::SamsungValue1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SteamValue1) == 0x000150, "Member 'FEventPassInfoTemplate::SteamValue1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, XsollaValue1) == 0x000160, "Member 'FEventPassInfoTemplate::XsollaValue1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, MycardValue1) == 0x000170, "Member 'FEventPassInfoTemplate::MycardValue1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, HydraValue1) == 0x000180, "Member 'FEventPassInfoTemplate::HydraValue1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, HuaweiValue1) == 0x000190, "Member 'FEventPassInfoTemplate::HuaweiValue1' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, AosUid2) == 0x0001A0, "Member 'FEventPassInfoTemplate::AosUid2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, IosUid2) == 0x0001B0, "Member 'FEventPassInfoTemplate::IosUid2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, OneStoreUid2) == 0x0001C0, "Member 'FEventPassInfoTemplate::OneStoreUid2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SamsungUid2) == 0x0001D0, "Member 'FEventPassInfoTemplate::SamsungUid2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SteamUid2) == 0x0001E0, "Member 'FEventPassInfoTemplate::SteamUid2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, XsollaUid2) == 0x0001F0, "Member 'FEventPassInfoTemplate::XsollaUid2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, MycardUid2) == 0x000200, "Member 'FEventPassInfoTemplate::MycardUid2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, HydraUid2) == 0x000210, "Member 'FEventPassInfoTemplate::HydraUid2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, HuaweiUid2) == 0x000220, "Member 'FEventPassInfoTemplate::HuaweiUid2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, AosUidValue2) == 0x000230, "Member 'FEventPassInfoTemplate::AosUidValue2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, IosUidValue2) == 0x000240, "Member 'FEventPassInfoTemplate::IosUidValue2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, OneStoreValue2) == 0x000250, "Member 'FEventPassInfoTemplate::OneStoreValue2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SamsungValue2) == 0x000260, "Member 'FEventPassInfoTemplate::SamsungValue2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, SteamValue2) == 0x000270, "Member 'FEventPassInfoTemplate::SteamValue2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, XsollaValue2) == 0x000280, "Member 'FEventPassInfoTemplate::XsollaValue2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, MycardValue2) == 0x000290, "Member 'FEventPassInfoTemplate::MycardValue2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, HydraValue2) == 0x0002A0, "Member 'FEventPassInfoTemplate::HydraValue2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, HuaweiValue2) == 0x0002B0, "Member 'FEventPassInfoTemplate::HuaweiValue2' has a wrong offset!");
static_assert(offsetof(FEventPassInfoTemplate, TitleText) == 0x0002C0, "Member 'FEventPassInfoTemplate::TitleText' has a wrong offset!");

// ScriptStruct MirMobile.EventPassRewardTemplate
// 0x0040 (0x0048 - 0x0008)
struct FEventPassRewardTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserEventId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupType;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedPoint;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameStrId;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGroup;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCategory;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardCount;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventPassRewardTemplate) == 0x000008, "Wrong alignment on FEventPassRewardTemplate");
static_assert(sizeof(FEventPassRewardTemplate) == 0x000048, "Wrong size on FEventPassRewardTemplate");
static_assert(offsetof(FEventPassRewardTemplate, ID) == 0x000008, "Member 'FEventPassRewardTemplate::ID' has a wrong offset!");
static_assert(offsetof(FEventPassRewardTemplate, UserEventId) == 0x00000C, "Member 'FEventPassRewardTemplate::UserEventId' has a wrong offset!");
static_assert(offsetof(FEventPassRewardTemplate, GroupType) == 0x000010, "Member 'FEventPassRewardTemplate::GroupType' has a wrong offset!");
static_assert(offsetof(FEventPassRewardTemplate, NeedPoint) == 0x000014, "Member 'FEventPassRewardTemplate::NeedPoint' has a wrong offset!");
static_assert(offsetof(FEventPassRewardTemplate, Number) == 0x000018, "Member 'FEventPassRewardTemplate::Number' has a wrong offset!");
static_assert(offsetof(FEventPassRewardTemplate, NameStrId) == 0x00001C, "Member 'FEventPassRewardTemplate::NameStrId' has a wrong offset!");
static_assert(offsetof(FEventPassRewardTemplate, RewardGroup) == 0x000020, "Member 'FEventPassRewardTemplate::RewardGroup' has a wrong offset!");
static_assert(offsetof(FEventPassRewardTemplate, RewardCategory) == 0x000024, "Member 'FEventPassRewardTemplate::RewardCategory' has a wrong offset!");
static_assert(offsetof(FEventPassRewardTemplate, RewardType) == 0x000028, "Member 'FEventPassRewardTemplate::RewardType' has a wrong offset!");
static_assert(offsetof(FEventPassRewardTemplate, RewardId) == 0x000030, "Member 'FEventPassRewardTemplate::RewardId' has a wrong offset!");
static_assert(offsetof(FEventPassRewardTemplate, RewardCount) == 0x000040, "Member 'FEventPassRewardTemplate::RewardCount' has a wrong offset!");

// ScriptStruct MirMobile.GuildTournamentSkillTemplate
// 0x0030 (0x0038 - 0x0008)
struct FGuildTournamentSkillTemplate final : public FTableRowBase
{
public:
	int32                                         SkillId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skillname;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillDesc;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillEffectId;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillIcon;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillIcon_Gray;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_Type;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_CoolTime;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_NeedCost;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_BuffId;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_BuffTime;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_ViewType;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildTournamentSkillTemplate) == 0x000008, "Wrong alignment on FGuildTournamentSkillTemplate");
static_assert(sizeof(FGuildTournamentSkillTemplate) == 0x000038, "Wrong size on FGuildTournamentSkillTemplate");
static_assert(offsetof(FGuildTournamentSkillTemplate, SkillId) == 0x000008, "Member 'FGuildTournamentSkillTemplate::SkillId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, Skillname) == 0x00000C, "Member 'FGuildTournamentSkillTemplate::Skillname' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, SkillDesc) == 0x000010, "Member 'FGuildTournamentSkillTemplate::SkillDesc' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, SkillEffectId) == 0x000014, "Member 'FGuildTournamentSkillTemplate::SkillEffectId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, SkillIcon) == 0x000018, "Member 'FGuildTournamentSkillTemplate::SkillIcon' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, SkillIcon_Gray) == 0x00001C, "Member 'FGuildTournamentSkillTemplate::SkillIcon_Gray' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, Skill_Type) == 0x000020, "Member 'FGuildTournamentSkillTemplate::Skill_Type' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, Skill_CoolTime) == 0x000024, "Member 'FGuildTournamentSkillTemplate::Skill_CoolTime' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, Skill_NeedCost) == 0x000028, "Member 'FGuildTournamentSkillTemplate::Skill_NeedCost' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, Skill_BuffId) == 0x00002C, "Member 'FGuildTournamentSkillTemplate::Skill_BuffId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, Skill_BuffTime) == 0x000030, "Member 'FGuildTournamentSkillTemplate::Skill_BuffTime' has a wrong offset!");
static_assert(offsetof(FGuildTournamentSkillTemplate, Skill_ViewType) == 0x000034, "Member 'FGuildTournamentSkillTemplate::Skill_ViewType' has a wrong offset!");

// ScriptStruct MirMobile.EventTimelineTemplate
// 0x0130 (0x0138 - 0x0008)
struct FEventTimelineTemplate final : public FTableRowBase
{
public:
	int32                                         TimelineID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimelineType;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartHH;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartMI;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndHH;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndMI;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_1StartTime;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_1EndTime;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_2StartTime;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_2EndTime;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_3StartTime;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_3EndTime;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_4StartTime;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_4EndTime;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_5StartTime;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_5EndTime;                                     // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_6StartTime;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_6EndTime;                                     // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_7StartTime;                                   // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Days_7EndTime;                                     // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Iterate;                                           // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnBossStage;                                    // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnBossID;                                       // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AlarmWidget;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlarmWidget_Message1;                              // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlarmWidget_Message2;                              // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlarmWidget_Message3;                              // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventTimelineTemplate) == 0x000008, "Wrong alignment on FEventTimelineTemplate");
static_assert(sizeof(FEventTimelineTemplate) == 0x000138, "Wrong size on FEventTimelineTemplate");
static_assert(offsetof(FEventTimelineTemplate, TimelineID) == 0x000008, "Member 'FEventTimelineTemplate::TimelineID' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, TimelineType) == 0x00000C, "Member 'FEventTimelineTemplate::TimelineType' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, StartHH) == 0x000010, "Member 'FEventTimelineTemplate::StartHH' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, StartMI) == 0x000014, "Member 'FEventTimelineTemplate::StartMI' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, EndHH) == 0x000018, "Member 'FEventTimelineTemplate::EndHH' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, EndMI) == 0x00001C, "Member 'FEventTimelineTemplate::EndMI' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_1StartTime) == 0x000020, "Member 'FEventTimelineTemplate::Days_1StartTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_1EndTime) == 0x000030, "Member 'FEventTimelineTemplate::Days_1EndTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_2StartTime) == 0x000040, "Member 'FEventTimelineTemplate::Days_2StartTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_2EndTime) == 0x000050, "Member 'FEventTimelineTemplate::Days_2EndTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_3StartTime) == 0x000060, "Member 'FEventTimelineTemplate::Days_3StartTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_3EndTime) == 0x000070, "Member 'FEventTimelineTemplate::Days_3EndTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_4StartTime) == 0x000080, "Member 'FEventTimelineTemplate::Days_4StartTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_4EndTime) == 0x000090, "Member 'FEventTimelineTemplate::Days_4EndTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_5StartTime) == 0x0000A0, "Member 'FEventTimelineTemplate::Days_5StartTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_5EndTime) == 0x0000B0, "Member 'FEventTimelineTemplate::Days_5EndTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_6StartTime) == 0x0000C0, "Member 'FEventTimelineTemplate::Days_6StartTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_6EndTime) == 0x0000D0, "Member 'FEventTimelineTemplate::Days_6EndTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_7StartTime) == 0x0000E0, "Member 'FEventTimelineTemplate::Days_7StartTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Days_7EndTime) == 0x0000F0, "Member 'FEventTimelineTemplate::Days_7EndTime' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, Iterate) == 0x000100, "Member 'FEventTimelineTemplate::Iterate' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, SpawnBossStage) == 0x000110, "Member 'FEventTimelineTemplate::SpawnBossStage' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, SpawnBossID) == 0x000114, "Member 'FEventTimelineTemplate::SpawnBossID' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, AlarmWidget) == 0x000128, "Member 'FEventTimelineTemplate::AlarmWidget' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, AlarmWidget_Message1) == 0x00012C, "Member 'FEventTimelineTemplate::AlarmWidget_Message1' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, AlarmWidget_Message2) == 0x000130, "Member 'FEventTimelineTemplate::AlarmWidget_Message2' has a wrong offset!");
static_assert(offsetof(FEventTimelineTemplate, AlarmWidget_Message3) == 0x000134, "Member 'FEventTimelineTemplate::AlarmWidget_Message3' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarSiegeRewardTemplate
// 0x0030 (0x0038 - 0x0008)
struct FGuildWarSiegeRewardTemplate final : public FTableRowBase
{
public:
	int32                                         RewardId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegePointMin;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegePointMax;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardMoneyId01;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardMoneyCnt01;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardMoneyId02;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardMoneyCnt02;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemUseId01;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemCnt01;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MailPresetId;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildWarSiegeRewardTemplate) == 0x000008, "Wrong alignment on FGuildWarSiegeRewardTemplate");
static_assert(sizeof(FGuildWarSiegeRewardTemplate) == 0x000038, "Wrong size on FGuildWarSiegeRewardTemplate");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, RewardId) == 0x000008, "Member 'FGuildWarSiegeRewardTemplate::RewardId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, RewardType) == 0x00000C, "Member 'FGuildWarSiegeRewardTemplate::RewardType' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, SiegePointMin) == 0x000010, "Member 'FGuildWarSiegeRewardTemplate::SiegePointMin' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, SiegePointMax) == 0x000014, "Member 'FGuildWarSiegeRewardTemplate::SiegePointMax' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, RewardMoneyId01) == 0x000018, "Member 'FGuildWarSiegeRewardTemplate::RewardMoneyId01' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, RewardMoneyCnt01) == 0x00001C, "Member 'FGuildWarSiegeRewardTemplate::RewardMoneyCnt01' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, RewardMoneyId02) == 0x000020, "Member 'FGuildWarSiegeRewardTemplate::RewardMoneyId02' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, RewardMoneyCnt02) == 0x000024, "Member 'FGuildWarSiegeRewardTemplate::RewardMoneyCnt02' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, RewardItemUseId01) == 0x000028, "Member 'FGuildWarSiegeRewardTemplate::RewardItemUseId01' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, RewardItemCnt01) == 0x00002C, "Member 'FGuildWarSiegeRewardTemplate::RewardItemCnt01' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeRewardTemplate, MailPresetId) == 0x000030, "Member 'FGuildWarSiegeRewardTemplate::MailPresetId' has a wrong offset!");

// ScriptStruct MirMobile.ExportTest
// 0x0008 (0x0010 - 0x0008)
struct FExportTest final : public FTableRowBase
{
public:
	int32                                         NpcID;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExportTest) == 0x000008, "Wrong alignment on FExportTest");
static_assert(sizeof(FExportTest) == 0x000010, "Wrong size on FExportTest");
static_assert(offsetof(FExportTest, NpcID) == 0x000008, "Member 'FExportTest::NpcID' has a wrong offset!");

// ScriptStruct MirMobile.FameCategoryTemplate
// 0x0010 (0x0018 - 0x0008)
struct FFameCategoryTemplate final : public FTableRowBase
{
public:
	int32                                         CategoryID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryType;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryNameStrId;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryIconId;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFameCategoryTemplate) == 0x000008, "Wrong alignment on FFameCategoryTemplate");
static_assert(sizeof(FFameCategoryTemplate) == 0x000018, "Wrong size on FFameCategoryTemplate");
static_assert(offsetof(FFameCategoryTemplate, CategoryID) == 0x000008, "Member 'FFameCategoryTemplate::CategoryID' has a wrong offset!");
static_assert(offsetof(FFameCategoryTemplate, CategoryType) == 0x00000C, "Member 'FFameCategoryTemplate::CategoryType' has a wrong offset!");
static_assert(offsetof(FFameCategoryTemplate, CategoryNameStrId) == 0x000010, "Member 'FFameCategoryTemplate::CategoryNameStrId' has a wrong offset!");
static_assert(offsetof(FFameCategoryTemplate, CategoryIconId) == 0x000014, "Member 'FFameCategoryTemplate::CategoryIconId' has a wrong offset!");

// ScriptStruct MirMobile.ResourceABPTemplate
// 0x0018 (0x0020 - 0x0008)
struct FResourceABPTemplate final : public FTableRowBase
{
public:
	int32                                         AnimationId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceABPTemplate) == 0x000008, "Wrong alignment on FResourceABPTemplate");
static_assert(sizeof(FResourceABPTemplate) == 0x000020, "Wrong size on FResourceABPTemplate");
static_assert(offsetof(FResourceABPTemplate, AnimationId) == 0x000008, "Member 'FResourceABPTemplate::AnimationId' has a wrong offset!");
static_assert(offsetof(FResourceABPTemplate, Filename) == 0x000010, "Member 'FResourceABPTemplate::Filename' has a wrong offset!");

// ScriptStruct MirMobile.FameLevelTemplate
// 0x0010 (0x0018 - 0x0008)
struct FFameLevelTemplate final : public FTableRowBase
{
public:
	int32                                         FameId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqExp;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFameLevelTemplate) == 0x000008, "Wrong alignment on FFameLevelTemplate");
static_assert(sizeof(FFameLevelTemplate) == 0x000018, "Wrong size on FFameLevelTemplate");
static_assert(offsetof(FFameLevelTemplate, FameId) == 0x000008, "Member 'FFameLevelTemplate::FameId' has a wrong offset!");
static_assert(offsetof(FFameLevelTemplate, Level) == 0x00000C, "Member 'FFameLevelTemplate::Level' has a wrong offset!");
static_assert(offsetof(FFameLevelTemplate, ReqExp) == 0x000010, "Member 'FFameLevelTemplate::ReqExp' has a wrong offset!");

// ScriptStruct MirMobile.FameQuestTemplate
// 0x0010 (0x0018 - 0x0008)
struct FFameQuestTemplate final : public FTableRowBase
{
public:
	int32                                         FameQuestId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestTitle;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CatrgoryId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardScore;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFameQuestTemplate) == 0x000008, "Wrong alignment on FFameQuestTemplate");
static_assert(sizeof(FFameQuestTemplate) == 0x000018, "Wrong size on FFameQuestTemplate");
static_assert(offsetof(FFameQuestTemplate, FameQuestId) == 0x000008, "Member 'FFameQuestTemplate::FameQuestId' has a wrong offset!");
static_assert(offsetof(FFameQuestTemplate, QuestTitle) == 0x00000C, "Member 'FFameQuestTemplate::QuestTitle' has a wrong offset!");
static_assert(offsetof(FFameQuestTemplate, CatrgoryId) == 0x000010, "Member 'FFameQuestTemplate::CatrgoryId' has a wrong offset!");
static_assert(offsetof(FFameQuestTemplate, RewardScore) == 0x000014, "Member 'FFameQuestTemplate::RewardScore' has a wrong offset!");

// ScriptStruct MirMobile.NpcItemMakeListTemplate
// 0x0010 (0x0018 - 0x0008)
struct FNpcItemMakeListTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NpcItemMakeListId;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemMakeId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNpcItemMakeListTemplate) == 0x000008, "Wrong alignment on FNpcItemMakeListTemplate");
static_assert(sizeof(FNpcItemMakeListTemplate) == 0x000018, "Wrong size on FNpcItemMakeListTemplate");
static_assert(offsetof(FNpcItemMakeListTemplate, Name) == 0x000008, "Member 'FNpcItemMakeListTemplate::Name' has a wrong offset!");
static_assert(offsetof(FNpcItemMakeListTemplate, NpcItemMakeListId) == 0x00000C, "Member 'FNpcItemMakeListTemplate::NpcItemMakeListId' has a wrong offset!");
static_assert(offsetof(FNpcItemMakeListTemplate, ItemMakeId) == 0x000010, "Member 'FNpcItemMakeListTemplate::ItemMakeId' has a wrong offset!");

// ScriptStruct MirMobile.GachaGroupTemplate
// 0x0010 (0x0018 - 0x0008)
struct FGachaGroupTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListGroupId;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGachaGroupTemplate) == 0x000008, "Wrong alignment on FGachaGroupTemplate");
static_assert(sizeof(FGachaGroupTemplate) == 0x000018, "Wrong size on FGachaGroupTemplate");
static_assert(offsetof(FGachaGroupTemplate, Name) == 0x000008, "Member 'FGachaGroupTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGachaGroupTemplate, GroupId) == 0x00000C, "Member 'FGachaGroupTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FGachaGroupTemplate, ListGroupId) == 0x000010, "Member 'FGachaGroupTemplate::ListGroupId' has a wrong offset!");

// ScriptStruct MirMobile.WidgetPool
// 0x0020 (0x0020 - 0x0000)
struct FWidgetPool final
{
public:
	EWidgetID                                     M_eWidgetID;                                       // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_iWidgetLayerPriority;                            // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iInitCount;                                      // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UWidgetBase>>     M_arPool;                                          // 0x0010(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetPool) == 0x000008, "Wrong alignment on FWidgetPool");
static_assert(sizeof(FWidgetPool) == 0x000020, "Wrong size on FWidgetPool");
static_assert(offsetof(FWidgetPool, M_eWidgetID) == 0x000000, "Member 'FWidgetPool::M_eWidgetID' has a wrong offset!");
static_assert(offsetof(FWidgetPool, M_iWidgetLayerPriority) == 0x000008, "Member 'FWidgetPool::M_iWidgetLayerPriority' has a wrong offset!");
static_assert(offsetof(FWidgetPool, M_iInitCount) == 0x00000C, "Member 'FWidgetPool::M_iInitCount' has a wrong offset!");
static_assert(offsetof(FWidgetPool, M_arPool) == 0x000010, "Member 'FWidgetPool::M_arPool' has a wrong offset!");

// ScriptStruct MirMobile.StageMonGenEventTemplate
// 0x0018 (0x0020 - 0x0008)
struct FStageMonGenEventTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageMonGenEventID;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageMonGenID;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HUDIcon;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HUDTimer;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HUDIconString;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStageMonGenEventTemplate) == 0x000008, "Wrong alignment on FStageMonGenEventTemplate");
static_assert(sizeof(FStageMonGenEventTemplate) == 0x000020, "Wrong size on FStageMonGenEventTemplate");
static_assert(offsetof(FStageMonGenEventTemplate, Name) == 0x000008, "Member 'FStageMonGenEventTemplate::Name' has a wrong offset!");
static_assert(offsetof(FStageMonGenEventTemplate, StageMonGenEventID) == 0x00000C, "Member 'FStageMonGenEventTemplate::StageMonGenEventID' has a wrong offset!");
static_assert(offsetof(FStageMonGenEventTemplate, StageMonGenID) == 0x000010, "Member 'FStageMonGenEventTemplate::StageMonGenID' has a wrong offset!");
static_assert(offsetof(FStageMonGenEventTemplate, HUDIcon) == 0x000014, "Member 'FStageMonGenEventTemplate::HUDIcon' has a wrong offset!");
static_assert(offsetof(FStageMonGenEventTemplate, HUDTimer) == 0x000018, "Member 'FStageMonGenEventTemplate::HUDTimer' has a wrong offset!");
static_assert(offsetof(FStageMonGenEventTemplate, HUDIconString) == 0x00001C, "Member 'FStageMonGenEventTemplate::HUDIconString' has a wrong offset!");

// ScriptStruct MirMobile.GuildWantedTemplate
// 0x0030 (0x0038 - 0x0008)
struct FGuildWantedTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WantedGrade;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageId;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildMoneyId;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildMoneyValue;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCountLimit;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCountLimit2;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildWantedTemplate) == 0x000008, "Wrong alignment on FGuildWantedTemplate");
static_assert(sizeof(FGuildWantedTemplate) == 0x000038, "Wrong size on FGuildWantedTemplate");
static_assert(offsetof(FGuildWantedTemplate, Name) == 0x000008, "Member 'FGuildWantedTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildWantedTemplate, WantedGrade) == 0x00000C, "Member 'FGuildWantedTemplate::WantedGrade' has a wrong offset!");
static_assert(offsetof(FGuildWantedTemplate, NameId) == 0x000010, "Member 'FGuildWantedTemplate::NameId' has a wrong offset!");
static_assert(offsetof(FGuildWantedTemplate, Time) == 0x000014, "Member 'FGuildWantedTemplate::Time' has a wrong offset!");
static_assert(offsetof(FGuildWantedTemplate, ItemId) == 0x000018, "Member 'FGuildWantedTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FGuildWantedTemplate, ItemCount) == 0x00001C, "Member 'FGuildWantedTemplate::ItemCount' has a wrong offset!");
static_assert(offsetof(FGuildWantedTemplate, ImageId) == 0x000020, "Member 'FGuildWantedTemplate::ImageId' has a wrong offset!");
static_assert(offsetof(FGuildWantedTemplate, GuildMoneyId) == 0x000024, "Member 'FGuildWantedTemplate::GuildMoneyId' has a wrong offset!");
static_assert(offsetof(FGuildWantedTemplate, GuildMoneyValue) == 0x000028, "Member 'FGuildWantedTemplate::GuildMoneyValue' has a wrong offset!");
static_assert(offsetof(FGuildWantedTemplate, KillCountLimit) == 0x00002C, "Member 'FGuildWantedTemplate::KillCountLimit' has a wrong offset!");
static_assert(offsetof(FGuildWantedTemplate, KillCountLimit2) == 0x000030, "Member 'FGuildWantedTemplate::KillCountLimit2' has a wrong offset!");

// ScriptStruct MirMobile.GachaInfoTemplate
// 0x00D0 (0x00D8 - 0x0008)
struct FGachaInfoTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GachaType;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyItemId;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyItemValue;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyId;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyValue;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyItemId_Many;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyItemValue_Many;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyValue_Many;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BG_GroupId;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId_UIList;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetValue;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DayMaxValue;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MileageValue;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MileageValue_Many;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMileageValue;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMileageValue_Many;                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMileageCost;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMileageReward;                                // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventGacha_DailyCount;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionType;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BG_DirectionType;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BG_OnOff;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BG_PointResetGrade;                                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BG_PointChangeCount;                               // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BG_SummonCountMax;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BG_PointPlusCount;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BG_TitleId;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BG_NameId;                                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BG_TooltipId;                                      // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetId;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EndTime;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fixed_OnOff;                                       // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitType;                                         // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountValue;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BpType;                                            // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Description;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyItemId_100;                                     // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gacha_Stop_Item;                                   // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gacha_Stop_Grade;                                  // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventRateUP;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultGradeOnOFF;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultGradeMin;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultGradeMax;                                    // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGachaInfoTemplate) == 0x000008, "Wrong alignment on FGachaInfoTemplate");
static_assert(sizeof(FGachaInfoTemplate) == 0x0000D8, "Wrong size on FGachaInfoTemplate");
static_assert(offsetof(FGachaInfoTemplate, Name) == 0x000008, "Member 'FGachaInfoTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, ID) == 0x00000C, "Member 'FGachaInfoTemplate::ID' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, NameId) == 0x000010, "Member 'FGachaInfoTemplate::NameId' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, GachaType) == 0x000014, "Member 'FGachaInfoTemplate::GachaType' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BuyItemId) == 0x000018, "Member 'FGachaInfoTemplate::BuyItemId' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BuyItemValue) == 0x00001C, "Member 'FGachaInfoTemplate::BuyItemValue' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, MoneyId) == 0x000020, "Member 'FGachaInfoTemplate::MoneyId' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, MoneyValue) == 0x000024, "Member 'FGachaInfoTemplate::MoneyValue' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BuyItemId_Many) == 0x000028, "Member 'FGachaInfoTemplate::BuyItemId_Many' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BuyItemValue_Many) == 0x00002C, "Member 'FGachaInfoTemplate::BuyItemValue_Many' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, MoneyValue_Many) == 0x000030, "Member 'FGachaInfoTemplate::MoneyValue_Many' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, GroupId) == 0x000034, "Member 'FGachaInfoTemplate::GroupId' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BG_GroupId) == 0x000038, "Member 'FGachaInfoTemplate::BG_GroupId' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, GroupId_UIList) == 0x00003C, "Member 'FGachaInfoTemplate::GroupId_UIList' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, GetValue) == 0x000040, "Member 'FGachaInfoTemplate::GetValue' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, Count) == 0x000044, "Member 'FGachaInfoTemplate::Count' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, DayMaxValue) == 0x000048, "Member 'FGachaInfoTemplate::DayMaxValue' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, MileageValue) == 0x00004C, "Member 'FGachaInfoTemplate::MileageValue' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, MileageValue_Many) == 0x000050, "Member 'FGachaInfoTemplate::MileageValue_Many' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, EventMileageValue) == 0x000054, "Member 'FGachaInfoTemplate::EventMileageValue' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, EventMileageValue_Many) == 0x000058, "Member 'FGachaInfoTemplate::EventMileageValue_Many' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, EventMileageCost) == 0x00005C, "Member 'FGachaInfoTemplate::EventMileageCost' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, EventMileageReward) == 0x000060, "Member 'FGachaInfoTemplate::EventMileageReward' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, EventGacha_DailyCount) == 0x000064, "Member 'FGachaInfoTemplate::EventGacha_DailyCount' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, DirectionType) == 0x000068, "Member 'FGachaInfoTemplate::DirectionType' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BG_DirectionType) == 0x00006C, "Member 'FGachaInfoTemplate::BG_DirectionType' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BG_OnOff) == 0x000070, "Member 'FGachaInfoTemplate::BG_OnOff' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BG_PointResetGrade) == 0x000074, "Member 'FGachaInfoTemplate::BG_PointResetGrade' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BG_PointChangeCount) == 0x000078, "Member 'FGachaInfoTemplate::BG_PointChangeCount' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BG_SummonCountMax) == 0x00007C, "Member 'FGachaInfoTemplate::BG_SummonCountMax' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BG_PointPlusCount) == 0x000080, "Member 'FGachaInfoTemplate::BG_PointPlusCount' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BG_TitleId) == 0x000084, "Member 'FGachaInfoTemplate::BG_TitleId' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BG_NameId) == 0x000088, "Member 'FGachaInfoTemplate::BG_NameId' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BG_TooltipId) == 0x00008C, "Member 'FGachaInfoTemplate::BG_TooltipId' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, PetId) == 0x000090, "Member 'FGachaInfoTemplate::PetId' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, EndTime) == 0x000098, "Member 'FGachaInfoTemplate::EndTime' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, Fixed_OnOff) == 0x0000A8, "Member 'FGachaInfoTemplate::Fixed_OnOff' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, LimitType) == 0x0000AC, "Member 'FGachaInfoTemplate::LimitType' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, CountValue) == 0x0000B0, "Member 'FGachaInfoTemplate::CountValue' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BpType) == 0x0000B4, "Member 'FGachaInfoTemplate::BpType' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, Description) == 0x0000B8, "Member 'FGachaInfoTemplate::Description' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, BuyItemId_100) == 0x0000BC, "Member 'FGachaInfoTemplate::BuyItemId_100' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, Gacha_Stop_Item) == 0x0000C0, "Member 'FGachaInfoTemplate::Gacha_Stop_Item' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, Gacha_Stop_Grade) == 0x0000C4, "Member 'FGachaInfoTemplate::Gacha_Stop_Grade' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, EventRateUP) == 0x0000C8, "Member 'FGachaInfoTemplate::EventRateUP' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, ResultGradeOnOFF) == 0x0000CC, "Member 'FGachaInfoTemplate::ResultGradeOnOFF' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, ResultGradeMin) == 0x0000D0, "Member 'FGachaInfoTemplate::ResultGradeMin' has a wrong offset!");
static_assert(offsetof(FGachaInfoTemplate, ResultGradeMax) == 0x0000D4, "Member 'FGachaInfoTemplate::ResultGradeMax' has a wrong offset!");

// ScriptStruct MirMobile.StdTemplate
// 0x0018 (0x0020 - 0x0008)
struct FStdTemplate final : public FTableRowBase
{
public:
	int32                                         STDId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ManaCost;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendCombatpoint;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStdTemplate) == 0x000008, "Wrong alignment on FStdTemplate");
static_assert(sizeof(FStdTemplate) == 0x000020, "Wrong size on FStdTemplate");
static_assert(offsetof(FStdTemplate, STDId) == 0x000008, "Member 'FStdTemplate::STDId' has a wrong offset!");
static_assert(offsetof(FStdTemplate, Level) == 0x00000C, "Member 'FStdTemplate::Level' has a wrong offset!");
static_assert(offsetof(FStdTemplate, Class) == 0x000010, "Member 'FStdTemplate::Class' has a wrong offset!");
static_assert(offsetof(FStdTemplate, ManaCost) == 0x000014, "Member 'FStdTemplate::ManaCost' has a wrong offset!");
static_assert(offsetof(FStdTemplate, RecommendCombatpoint) == 0x000018, "Member 'FStdTemplate::RecommendCombatpoint' has a wrong offset!");

// ScriptStruct MirMobile.GameDefineOptionTemplate
// 0x0038 (0x0040 - 0x0008)
struct FGameDefineOptionTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Parameter;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OptionType;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OptionValue;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameDefineOptionTemplate) == 0x000008, "Wrong alignment on FGameDefineOptionTemplate");
static_assert(sizeof(FGameDefineOptionTemplate) == 0x000040, "Wrong size on FGameDefineOptionTemplate");
static_assert(offsetof(FGameDefineOptionTemplate, ID) == 0x000008, "Member 'FGameDefineOptionTemplate::ID' has a wrong offset!");
static_assert(offsetof(FGameDefineOptionTemplate, Parameter) == 0x000010, "Member 'FGameDefineOptionTemplate::Parameter' has a wrong offset!");
static_assert(offsetof(FGameDefineOptionTemplate, OptionType) == 0x000020, "Member 'FGameDefineOptionTemplate::OptionType' has a wrong offset!");
static_assert(offsetof(FGameDefineOptionTemplate, OptionValue) == 0x000030, "Member 'FGameDefineOptionTemplate::OptionValue' has a wrong offset!");

// ScriptStruct MirMobile.PetTemplate
// 0x00A8 (0x00B0 - 0x0008)
struct FPetTemplate final : public FTableRowBase
{
public:
	int32                                         PetId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Origin;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GachaIconId;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 GachaFixImgOffset;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PETBuffIconId;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameId;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TagNameId;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IngameMeshId;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutgameMeshId;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGameAnimResourceId;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutGameAnimResourceId;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockNeedItemUseId;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Global_Attribute1Type;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Global_Attribute1Value;                            // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Global_Attribute2Type;                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Global_Attribute2Value;                            // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId01;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId02;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId03;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId04;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId05;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId06;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SpeechTxtUi;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SpeechTxtEquip;                                    // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SpeechTxtDie;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LuxuryType;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumePartsType;                                  // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPetTemplate) == 0x000008, "Wrong alignment on FPetTemplate");
static_assert(sizeof(FPetTemplate) == 0x0000B0, "Wrong size on FPetTemplate");
static_assert(offsetof(FPetTemplate, PetId) == 0x000008, "Member 'FPetTemplate::PetId' has a wrong offset!");
static_assert(offsetof(FPetTemplate, Tier) == 0x00000C, "Member 'FPetTemplate::Tier' has a wrong offset!");
static_assert(offsetof(FPetTemplate, Origin) == 0x000010, "Member 'FPetTemplate::Origin' has a wrong offset!");
static_assert(offsetof(FPetTemplate, IconID) == 0x000014, "Member 'FPetTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FPetTemplate, GachaIconId) == 0x000018, "Member 'FPetTemplate::GachaIconId' has a wrong offset!");
static_assert(offsetof(FPetTemplate, GachaFixImgOffset) == 0x000020, "Member 'FPetTemplate::GachaFixImgOffset' has a wrong offset!");
static_assert(offsetof(FPetTemplate, PETBuffIconId) == 0x000030, "Member 'FPetTemplate::PETBuffIconId' has a wrong offset!");
static_assert(offsetof(FPetTemplate, NameId) == 0x000034, "Member 'FPetTemplate::NameId' has a wrong offset!");
static_assert(offsetof(FPetTemplate, TagNameId) == 0x000038, "Member 'FPetTemplate::TagNameId' has a wrong offset!");
static_assert(offsetof(FPetTemplate, IngameMeshId) == 0x00003C, "Member 'FPetTemplate::IngameMeshId' has a wrong offset!");
static_assert(offsetof(FPetTemplate, OutgameMeshId) == 0x000040, "Member 'FPetTemplate::OutgameMeshId' has a wrong offset!");
static_assert(offsetof(FPetTemplate, InGameAnimResourceId) == 0x000044, "Member 'FPetTemplate::InGameAnimResourceId' has a wrong offset!");
static_assert(offsetof(FPetTemplate, OutGameAnimResourceId) == 0x000048, "Member 'FPetTemplate::OutGameAnimResourceId' has a wrong offset!");
static_assert(offsetof(FPetTemplate, UnlockNeedItemUseId) == 0x00004C, "Member 'FPetTemplate::UnlockNeedItemUseId' has a wrong offset!");
static_assert(offsetof(FPetTemplate, Global_Attribute1Type) == 0x000050, "Member 'FPetTemplate::Global_Attribute1Type' has a wrong offset!");
static_assert(offsetof(FPetTemplate, Global_Attribute1Value) == 0x000054, "Member 'FPetTemplate::Global_Attribute1Value' has a wrong offset!");
static_assert(offsetof(FPetTemplate, Global_Attribute2Type) == 0x000058, "Member 'FPetTemplate::Global_Attribute2Type' has a wrong offset!");
static_assert(offsetof(FPetTemplate, Global_Attribute2Value) == 0x00005C, "Member 'FPetTemplate::Global_Attribute2Value' has a wrong offset!");
static_assert(offsetof(FPetTemplate, SkillId01) == 0x000060, "Member 'FPetTemplate::SkillId01' has a wrong offset!");
static_assert(offsetof(FPetTemplate, SkillId02) == 0x000064, "Member 'FPetTemplate::SkillId02' has a wrong offset!");
static_assert(offsetof(FPetTemplate, SkillId03) == 0x000068, "Member 'FPetTemplate::SkillId03' has a wrong offset!");
static_assert(offsetof(FPetTemplate, SkillId04) == 0x00006C, "Member 'FPetTemplate::SkillId04' has a wrong offset!");
static_assert(offsetof(FPetTemplate, SkillId05) == 0x000070, "Member 'FPetTemplate::SkillId05' has a wrong offset!");
static_assert(offsetof(FPetTemplate, SkillId06) == 0x000074, "Member 'FPetTemplate::SkillId06' has a wrong offset!");
static_assert(offsetof(FPetTemplate, SpeechTxtUi) == 0x000078, "Member 'FPetTemplate::SpeechTxtUi' has a wrong offset!");
static_assert(offsetof(FPetTemplate, SpeechTxtEquip) == 0x000088, "Member 'FPetTemplate::SpeechTxtEquip' has a wrong offset!");
static_assert(offsetof(FPetTemplate, SpeechTxtDie) == 0x000098, "Member 'FPetTemplate::SpeechTxtDie' has a wrong offset!");
static_assert(offsetof(FPetTemplate, LuxuryType) == 0x0000A8, "Member 'FPetTemplate::LuxuryType' has a wrong offset!");
static_assert(offsetof(FPetTemplate, CostumePartsType) == 0x0000AC, "Member 'FPetTemplate::CostumePartsType' has a wrong offset!");

// ScriptStruct MirMobile.GameOptionDisableKeyTemplate
// 0x0018 (0x0020 - 0x0008)
struct FGameOptionDisableKeyTemplate final : public FTableRowBase
{
public:
	int32                                         KeyId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Key;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameOptionDisableKeyTemplate) == 0x000008, "Wrong alignment on FGameOptionDisableKeyTemplate");
static_assert(sizeof(FGameOptionDisableKeyTemplate) == 0x000020, "Wrong size on FGameOptionDisableKeyTemplate");
static_assert(offsetof(FGameOptionDisableKeyTemplate, KeyId) == 0x000008, "Member 'FGameOptionDisableKeyTemplate::KeyId' has a wrong offset!");
static_assert(offsetof(FGameOptionDisableKeyTemplate, Key) == 0x000010, "Member 'FGameOptionDisableKeyTemplate::Key' has a wrong offset!");

// ScriptStruct MirMobile.GameOptionKeySettingTemplate
// 0x0058 (0x0060 - 0x0008)
struct FGameOptionKeySettingTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyType;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Defaultkey;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ActionName;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailActionGroupId;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisableKeyId;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenContentsType;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenQuestId;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 DisableStageType;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          DisableInstanceDungeon;                            // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableConquestServer;                             // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableSeverVisit;                                 // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActionNameMsg;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameOptionKeySettingTemplate) == 0x000008, "Wrong alignment on FGameOptionKeySettingTemplate");
static_assert(sizeof(FGameOptionKeySettingTemplate) == 0x000060, "Wrong size on FGameOptionKeySettingTemplate");
static_assert(offsetof(FGameOptionKeySettingTemplate, Name) == 0x000008, "Member 'FGameOptionKeySettingTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, KeyId) == 0x00000C, "Member 'FGameOptionKeySettingTemplate::KeyId' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, KeyType) == 0x000010, "Member 'FGameOptionKeySettingTemplate::KeyType' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, NameSId) == 0x000014, "Member 'FGameOptionKeySettingTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, Defaultkey) == 0x000018, "Member 'FGameOptionKeySettingTemplate::Defaultkey' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, ActionName) == 0x000028, "Member 'FGameOptionKeySettingTemplate::ActionName' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, DetailActionGroupId) == 0x000038, "Member 'FGameOptionKeySettingTemplate::DetailActionGroupId' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, DisableKeyId) == 0x00003C, "Member 'FGameOptionKeySettingTemplate::DisableKeyId' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, OpenContentsType) == 0x000040, "Member 'FGameOptionKeySettingTemplate::OpenContentsType' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, OpenQuestId) == 0x000044, "Member 'FGameOptionKeySettingTemplate::OpenQuestId' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, DisableStageType) == 0x000048, "Member 'FGameOptionKeySettingTemplate::DisableStageType' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, DisableInstanceDungeon) == 0x000058, "Member 'FGameOptionKeySettingTemplate::DisableInstanceDungeon' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, DisableConquestServer) == 0x000059, "Member 'FGameOptionKeySettingTemplate::DisableConquestServer' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, DisableSeverVisit) == 0x00005A, "Member 'FGameOptionKeySettingTemplate::DisableSeverVisit' has a wrong offset!");
static_assert(offsetof(FGameOptionKeySettingTemplate, ActionNameMsg) == 0x00005C, "Member 'FGameOptionKeySettingTemplate::ActionNameMsg' has a wrong offset!");

// ScriptStruct MirMobile.ItemOptionTemplate
// 0x00D8 (0x00E0 - 0x0008)
struct FItemOptionTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionID;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue01;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue02;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue03;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue04;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue05;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue06;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue07;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue08;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue09;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue10;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue11;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue12;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue13;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue14;                                // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue15;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue16;                                // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue17;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue18;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue19;                                // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue20;                                // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue21;                                // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue22;                                // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue23;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue24;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue25;                                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue26;                                // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue27;                                // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue28;                                // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue29;                                // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue30;                                // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue31;                                // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue32;                                // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue33;                                // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue34;                                // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue35;                                // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue36;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue37;                                // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue38;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue39;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue40;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue41;                                // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue42;                                // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue43;                                // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue44;                                // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue45;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue46;                                // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue47;                                // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue48;                                // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue49;                                // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGradeValue50;                                // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemOptionTemplate) == 0x000008, "Wrong alignment on FItemOptionTemplate");
static_assert(sizeof(FItemOptionTemplate) == 0x0000E0, "Wrong size on FItemOptionTemplate");
static_assert(offsetof(FItemOptionTemplate, Name) == 0x000008, "Member 'FItemOptionTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionID) == 0x00000C, "Member 'FItemOptionTemplate::OptionID' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, AttributeType) == 0x000010, "Member 'FItemOptionTemplate::AttributeType' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue01) == 0x000014, "Member 'FItemOptionTemplate::OptionGradeValue01' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue02) == 0x000018, "Member 'FItemOptionTemplate::OptionGradeValue02' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue03) == 0x00001C, "Member 'FItemOptionTemplate::OptionGradeValue03' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue04) == 0x000020, "Member 'FItemOptionTemplate::OptionGradeValue04' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue05) == 0x000024, "Member 'FItemOptionTemplate::OptionGradeValue05' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue06) == 0x000028, "Member 'FItemOptionTemplate::OptionGradeValue06' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue07) == 0x00002C, "Member 'FItemOptionTemplate::OptionGradeValue07' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue08) == 0x000030, "Member 'FItemOptionTemplate::OptionGradeValue08' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue09) == 0x000034, "Member 'FItemOptionTemplate::OptionGradeValue09' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue10) == 0x000038, "Member 'FItemOptionTemplate::OptionGradeValue10' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue11) == 0x00003C, "Member 'FItemOptionTemplate::OptionGradeValue11' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue12) == 0x000040, "Member 'FItemOptionTemplate::OptionGradeValue12' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue13) == 0x000044, "Member 'FItemOptionTemplate::OptionGradeValue13' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue14) == 0x000048, "Member 'FItemOptionTemplate::OptionGradeValue14' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue15) == 0x00004C, "Member 'FItemOptionTemplate::OptionGradeValue15' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue16) == 0x000050, "Member 'FItemOptionTemplate::OptionGradeValue16' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue17) == 0x000054, "Member 'FItemOptionTemplate::OptionGradeValue17' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue18) == 0x000058, "Member 'FItemOptionTemplate::OptionGradeValue18' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue19) == 0x00005C, "Member 'FItemOptionTemplate::OptionGradeValue19' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue20) == 0x000060, "Member 'FItemOptionTemplate::OptionGradeValue20' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue21) == 0x000064, "Member 'FItemOptionTemplate::OptionGradeValue21' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue22) == 0x000068, "Member 'FItemOptionTemplate::OptionGradeValue22' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue23) == 0x00006C, "Member 'FItemOptionTemplate::OptionGradeValue23' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue24) == 0x000070, "Member 'FItemOptionTemplate::OptionGradeValue24' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue25) == 0x000074, "Member 'FItemOptionTemplate::OptionGradeValue25' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue26) == 0x000078, "Member 'FItemOptionTemplate::OptionGradeValue26' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue27) == 0x00007C, "Member 'FItemOptionTemplate::OptionGradeValue27' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue28) == 0x000080, "Member 'FItemOptionTemplate::OptionGradeValue28' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue29) == 0x000084, "Member 'FItemOptionTemplate::OptionGradeValue29' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue30) == 0x000088, "Member 'FItemOptionTemplate::OptionGradeValue30' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue31) == 0x00008C, "Member 'FItemOptionTemplate::OptionGradeValue31' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue32) == 0x000090, "Member 'FItemOptionTemplate::OptionGradeValue32' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue33) == 0x000094, "Member 'FItemOptionTemplate::OptionGradeValue33' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue34) == 0x000098, "Member 'FItemOptionTemplate::OptionGradeValue34' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue35) == 0x00009C, "Member 'FItemOptionTemplate::OptionGradeValue35' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue36) == 0x0000A0, "Member 'FItemOptionTemplate::OptionGradeValue36' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue37) == 0x0000A4, "Member 'FItemOptionTemplate::OptionGradeValue37' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue38) == 0x0000A8, "Member 'FItemOptionTemplate::OptionGradeValue38' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue39) == 0x0000AC, "Member 'FItemOptionTemplate::OptionGradeValue39' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue40) == 0x0000B0, "Member 'FItemOptionTemplate::OptionGradeValue40' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue41) == 0x0000B4, "Member 'FItemOptionTemplate::OptionGradeValue41' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue42) == 0x0000B8, "Member 'FItemOptionTemplate::OptionGradeValue42' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue43) == 0x0000BC, "Member 'FItemOptionTemplate::OptionGradeValue43' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue44) == 0x0000C0, "Member 'FItemOptionTemplate::OptionGradeValue44' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue45) == 0x0000C4, "Member 'FItemOptionTemplate::OptionGradeValue45' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue46) == 0x0000C8, "Member 'FItemOptionTemplate::OptionGradeValue46' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue47) == 0x0000CC, "Member 'FItemOptionTemplate::OptionGradeValue47' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue48) == 0x0000D0, "Member 'FItemOptionTemplate::OptionGradeValue48' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue49) == 0x0000D4, "Member 'FItemOptionTemplate::OptionGradeValue49' has a wrong offset!");
static_assert(offsetof(FItemOptionTemplate, OptionGradeValue50) == 0x0000D8, "Member 'FItemOptionTemplate::OptionGradeValue50' has a wrong offset!");

// ScriptStruct MirMobile.GameOptionSettingTemplate
// 0x0038 (0x0040 - 0x0008)
struct FGameOptionSettingTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameOptionType                               GameOptionKey;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultSettingType;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSettingValueCommon;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSettingValuePCW;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSettingValuePCM;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSettingValuePCT;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSettingValuePCA;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSettingValuePCZ;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSettingValuePCD;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionStorageType;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumValue;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumValue;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameOptionSettingTemplate) == 0x000008, "Wrong alignment on FGameOptionSettingTemplate");
static_assert(sizeof(FGameOptionSettingTemplate) == 0x000040, "Wrong size on FGameOptionSettingTemplate");
static_assert(offsetof(FGameOptionSettingTemplate, Name) == 0x000008, "Member 'FGameOptionSettingTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, GameOptionKey) == 0x00000C, "Member 'FGameOptionSettingTemplate::GameOptionKey' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, DefaultSettingType) == 0x000010, "Member 'FGameOptionSettingTemplate::DefaultSettingType' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, DefaultSettingValueCommon) == 0x000014, "Member 'FGameOptionSettingTemplate::DefaultSettingValueCommon' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, DefaultSettingValuePCW) == 0x000018, "Member 'FGameOptionSettingTemplate::DefaultSettingValuePCW' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, DefaultSettingValuePCM) == 0x00001C, "Member 'FGameOptionSettingTemplate::DefaultSettingValuePCM' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, DefaultSettingValuePCT) == 0x000020, "Member 'FGameOptionSettingTemplate::DefaultSettingValuePCT' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, DefaultSettingValuePCA) == 0x000024, "Member 'FGameOptionSettingTemplate::DefaultSettingValuePCA' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, DefaultSettingValuePCZ) == 0x000028, "Member 'FGameOptionSettingTemplate::DefaultSettingValuePCZ' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, DefaultSettingValuePCD) == 0x00002C, "Member 'FGameOptionSettingTemplate::DefaultSettingValuePCD' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, OptionStorageType) == 0x000030, "Member 'FGameOptionSettingTemplate::OptionStorageType' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, MinimumValue) == 0x000034, "Member 'FGameOptionSettingTemplate::MinimumValue' has a wrong offset!");
static_assert(offsetof(FGameOptionSettingTemplate, MaximumValue) == 0x000038, "Member 'FGameOptionSettingTemplate::MaximumValue' has a wrong offset!");

// ScriptStruct MirMobile.GenDataTemplate
// 0x0028 (0x0030 - 0x0008)
struct FGenDataTemplate final : public FTableRowBase
{
public:
	int32                                         PosID;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stage;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenObjectID;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenObjectType;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenType;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupGenID;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationX;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationY;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationZ;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenDataTemplate) == 0x000008, "Wrong alignment on FGenDataTemplate");
static_assert(sizeof(FGenDataTemplate) == 0x000030, "Wrong size on FGenDataTemplate");
static_assert(offsetof(FGenDataTemplate, PosID) == 0x000008, "Member 'FGenDataTemplate::PosID' has a wrong offset!");
static_assert(offsetof(FGenDataTemplate, Stage) == 0x00000C, "Member 'FGenDataTemplate::Stage' has a wrong offset!");
static_assert(offsetof(FGenDataTemplate, GenObjectID) == 0x000010, "Member 'FGenDataTemplate::GenObjectID' has a wrong offset!");
static_assert(offsetof(FGenDataTemplate, GenObjectType) == 0x000014, "Member 'FGenDataTemplate::GenObjectType' has a wrong offset!");
static_assert(offsetof(FGenDataTemplate, GenType) == 0x000018, "Member 'FGenDataTemplate::GenType' has a wrong offset!");
static_assert(offsetof(FGenDataTemplate, GroupGenID) == 0x00001C, "Member 'FGenDataTemplate::GroupGenID' has a wrong offset!");
static_assert(offsetof(FGenDataTemplate, LocationX) == 0x000020, "Member 'FGenDataTemplate::LocationX' has a wrong offset!");
static_assert(offsetof(FGenDataTemplate, LocationY) == 0x000024, "Member 'FGenDataTemplate::LocationY' has a wrong offset!");
static_assert(offsetof(FGenDataTemplate, LocationZ) == 0x000028, "Member 'FGenDataTemplate::LocationZ' has a wrong offset!");

// ScriptStruct MirMobile.PKSystemTemplate
// 0x0020 (0x0028 - 0x0008)
struct FPKSystemTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionActionAbleTime;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WantedRegistCostId;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WantedRegistCostValue;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WantedRewardCostId;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WantedRewardCostValueMin;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WantedRewardCostValueMax;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCommission;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKSystemTemplate) == 0x000008, "Wrong alignment on FPKSystemTemplate");
static_assert(sizeof(FPKSystemTemplate) == 0x000028, "Wrong size on FPKSystemTemplate");
static_assert(offsetof(FPKSystemTemplate, RowId) == 0x000008, "Member 'FPKSystemTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FPKSystemTemplate, AdditionActionAbleTime) == 0x00000C, "Member 'FPKSystemTemplate::AdditionActionAbleTime' has a wrong offset!");
static_assert(offsetof(FPKSystemTemplate, WantedRegistCostId) == 0x000010, "Member 'FPKSystemTemplate::WantedRegistCostId' has a wrong offset!");
static_assert(offsetof(FPKSystemTemplate, WantedRegistCostValue) == 0x000014, "Member 'FPKSystemTemplate::WantedRegistCostValue' has a wrong offset!");
static_assert(offsetof(FPKSystemTemplate, WantedRewardCostId) == 0x000018, "Member 'FPKSystemTemplate::WantedRewardCostId' has a wrong offset!");
static_assert(offsetof(FPKSystemTemplate, WantedRewardCostValueMin) == 0x00001C, "Member 'FPKSystemTemplate::WantedRewardCostValueMin' has a wrong offset!");
static_assert(offsetof(FPKSystemTemplate, WantedRewardCostValueMax) == 0x000020, "Member 'FPKSystemTemplate::WantedRewardCostValueMax' has a wrong offset!");
static_assert(offsetof(FPKSystemTemplate, RewardCommission) == 0x000024, "Member 'FPKSystemTemplate::RewardCommission' has a wrong offset!");

// ScriptStruct MirMobile.GenTemplate
// 0x0000 (0x0008 - 0x0008)
struct FGenTemplate final : public FTableRowBase
{
};
static_assert(alignof(FGenTemplate) == 0x000008, "Wrong alignment on FGenTemplate");
static_assert(sizeof(FGenTemplate) == 0x000008, "Wrong size on FGenTemplate");

// ScriptStruct MirMobile.SoundTemplate
// 0x0018 (0x0020 - 0x0008)
struct FSoundTemplate final : public FTableRowBase
{
public:
	int32                                         SoundId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundType;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundTemplate) == 0x000008, "Wrong alignment on FSoundTemplate");
static_assert(sizeof(FSoundTemplate) == 0x000020, "Wrong size on FSoundTemplate");
static_assert(offsetof(FSoundTemplate, SoundId) == 0x000008, "Member 'FSoundTemplate::SoundId' has a wrong offset!");
static_assert(offsetof(FSoundTemplate, SoundType) == 0x00000C, "Member 'FSoundTemplate::SoundType' has a wrong offset!");
static_assert(offsetof(FSoundTemplate, Filename) == 0x000010, "Member 'FSoundTemplate::Filename' has a wrong offset!");

// ScriptStruct MirMobile.GlobalFontRangeTemplate
// 0x0030 (0x0038 - 0x0008)
struct FGlobalFontRangeTemplate final : public FTableRowBase
{
public:
	class FString                                 StartRange;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndRange;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlobalFontRangeTemplate) == 0x000008, "Wrong alignment on FGlobalFontRangeTemplate");
static_assert(sizeof(FGlobalFontRangeTemplate) == 0x000038, "Wrong size on FGlobalFontRangeTemplate");
static_assert(offsetof(FGlobalFontRangeTemplate, StartRange) == 0x000008, "Member 'FGlobalFontRangeTemplate::StartRange' has a wrong offset!");
static_assert(offsetof(FGlobalFontRangeTemplate, EndRange) == 0x000018, "Member 'FGlobalFontRangeTemplate::EndRange' has a wrong offset!");

// ScriptStruct MirMobile.ItemRandomGetTemplate
// 0x0038 (0x0040 - 0x0008)
struct FItemRandomGetTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomGetId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenEffect;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainType;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardProbability;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardSmelting;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemRandomGetTemplate) == 0x000008, "Wrong alignment on FItemRandomGetTemplate");
static_assert(sizeof(FItemRandomGetTemplate) == 0x000040, "Wrong size on FItemRandomGetTemplate");
static_assert(offsetof(FItemRandomGetTemplate, Name) == 0x000008, "Member 'FItemRandomGetTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemRandomGetTemplate, RandomGetId) == 0x00000C, "Member 'FItemRandomGetTemplate::RandomGetId' has a wrong offset!");
static_assert(offsetof(FItemRandomGetTemplate, OpenEffect) == 0x000010, "Member 'FItemRandomGetTemplate::OpenEffect' has a wrong offset!");
static_assert(offsetof(FItemRandomGetTemplate, ItemId) == 0x000014, "Member 'FItemRandomGetTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FItemRandomGetTemplate, MainType) == 0x000018, "Member 'FItemRandomGetTemplate::MainType' has a wrong offset!");
static_assert(offsetof(FItemRandomGetTemplate, RewardProbability) == 0x00001C, "Member 'FItemRandomGetTemplate::RewardProbability' has a wrong offset!");
static_assert(offsetof(FItemRandomGetTemplate, RewardType) == 0x000020, "Member 'FItemRandomGetTemplate::RewardType' has a wrong offset!");
static_assert(offsetof(FItemRandomGetTemplate, RewardId) == 0x000028, "Member 'FItemRandomGetTemplate::RewardId' has a wrong offset!");
static_assert(offsetof(FItemRandomGetTemplate, RewardValue) == 0x000038, "Member 'FItemRandomGetTemplate::RewardValue' has a wrong offset!");
static_assert(offsetof(FItemRandomGetTemplate, RewardSmelting) == 0x00003C, "Member 'FItemRandomGetTemplate::RewardSmelting' has a wrong offset!");

// ScriptStruct MirMobile.GlobalRegionTemplate
// 0x0038 (0x0040 - 0x0008)
struct FGlobalRegionTemplate final : public FTableRowBase
{
public:
	class FString                                 RegionKey;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionGroupKey;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WSRegionCode;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegionName;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegionGroupName;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegionUTC;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegionIcon;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegionOrder;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalRegionTemplate) == 0x000008, "Wrong alignment on FGlobalRegionTemplate");
static_assert(sizeof(FGlobalRegionTemplate) == 0x000040, "Wrong size on FGlobalRegionTemplate");
static_assert(offsetof(FGlobalRegionTemplate, RegionKey) == 0x000008, "Member 'FGlobalRegionTemplate::RegionKey' has a wrong offset!");
static_assert(offsetof(FGlobalRegionTemplate, RegionGroupKey) == 0x000018, "Member 'FGlobalRegionTemplate::RegionGroupKey' has a wrong offset!");
static_assert(offsetof(FGlobalRegionTemplate, WSRegionCode) == 0x000028, "Member 'FGlobalRegionTemplate::WSRegionCode' has a wrong offset!");
static_assert(offsetof(FGlobalRegionTemplate, RegionName) == 0x00002C, "Member 'FGlobalRegionTemplate::RegionName' has a wrong offset!");
static_assert(offsetof(FGlobalRegionTemplate, RegionGroupName) == 0x000030, "Member 'FGlobalRegionTemplate::RegionGroupName' has a wrong offset!");
static_assert(offsetof(FGlobalRegionTemplate, RegionUTC) == 0x000034, "Member 'FGlobalRegionTemplate::RegionUTC' has a wrong offset!");
static_assert(offsetof(FGlobalRegionTemplate, RegionIcon) == 0x000038, "Member 'FGlobalRegionTemplate::RegionIcon' has a wrong offset!");
static_assert(offsetof(FGlobalRegionTemplate, RegionOrder) == 0x00003C, "Member 'FGlobalRegionTemplate::RegionOrder' has a wrong offset!");

// ScriptStruct MirMobile.GreatBuildingStepTemplate
// 0x01B0 (0x01B8 - 0x0008)
struct FGreatBuildingStepTemplate final : public FTableRowBase
{
public:
	int32                                         BuildingStepId;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreatBuildingId;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingStep;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingCombat;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementIdCondition01;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementIdConditionString01;                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementIdContentsId01;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementIdCondition02;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementIdConditionString02;                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementIdContentsId02;                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementIdCondition03;                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementIdConditionString03;                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementIdContentsId03;                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ManufactureType;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ManufactureKind;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ManufactureNum;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingIdCondition01;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingIdCondition02;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingIdCondition03;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedType01;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedID01;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedUseID01;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCount01;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedType02;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedID02;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedUseID02;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCount02;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedType03;                                        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedID03;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedUseID03;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCount03;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedType04;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedID04;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedUseID04;                                       // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCount04;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpgradeTime;                                       // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildHelpTime;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectType01;                                      // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectValue01;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectNum01;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectString01;                                    // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectIcon01;                                      // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EffectType02;                                      // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EffectValue02;                                     // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectString02;                                    // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectNum02;                                       // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectIcon02;                                      // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EffectType03;                                      // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EffectValue03;                                     // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectString03;                                    // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectNum03;                                       // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectIcon03;                                      // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EffectType04;                                      // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EffectValue04;                                     // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectString04;                                    // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectNum04;                                       // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectIcon04;                                      // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGreatBuildingStepTemplate) == 0x000008, "Wrong alignment on FGreatBuildingStepTemplate");
static_assert(sizeof(FGreatBuildingStepTemplate) == 0x0001B8, "Wrong size on FGreatBuildingStepTemplate");
static_assert(offsetof(FGreatBuildingStepTemplate, BuildingStepId) == 0x000008, "Member 'FGreatBuildingStepTemplate::BuildingStepId' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, GreatBuildingId) == 0x00000C, "Member 'FGreatBuildingStepTemplate::GreatBuildingId' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, BuildingStep) == 0x000010, "Member 'FGreatBuildingStepTemplate::BuildingStep' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, BuildingCombat) == 0x000014, "Member 'FGreatBuildingStepTemplate::BuildingCombat' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, AchievementIdCondition01) == 0x000018, "Member 'FGreatBuildingStepTemplate::AchievementIdCondition01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, AchievementIdConditionString01) == 0x00001C, "Member 'FGreatBuildingStepTemplate::AchievementIdConditionString01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, AchievementIdContentsId01) == 0x000020, "Member 'FGreatBuildingStepTemplate::AchievementIdContentsId01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, AchievementIdCondition02) == 0x000024, "Member 'FGreatBuildingStepTemplate::AchievementIdCondition02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, AchievementIdConditionString02) == 0x000028, "Member 'FGreatBuildingStepTemplate::AchievementIdConditionString02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, AchievementIdContentsId02) == 0x00002C, "Member 'FGreatBuildingStepTemplate::AchievementIdContentsId02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, AchievementIdCondition03) == 0x000030, "Member 'FGreatBuildingStepTemplate::AchievementIdCondition03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, AchievementIdConditionString03) == 0x000034, "Member 'FGreatBuildingStepTemplate::AchievementIdConditionString03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, AchievementIdContentsId03) == 0x000038, "Member 'FGreatBuildingStepTemplate::AchievementIdContentsId03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, ManufactureType) == 0x00003C, "Member 'FGreatBuildingStepTemplate::ManufactureType' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, ManufactureKind) == 0x000040, "Member 'FGreatBuildingStepTemplate::ManufactureKind' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, ManufactureNum) == 0x000044, "Member 'FGreatBuildingStepTemplate::ManufactureNum' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, BuildingIdCondition01) == 0x000048, "Member 'FGreatBuildingStepTemplate::BuildingIdCondition01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, BuildingIdCondition02) == 0x00004C, "Member 'FGreatBuildingStepTemplate::BuildingIdCondition02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, BuildingIdCondition03) == 0x000050, "Member 'FGreatBuildingStepTemplate::BuildingIdCondition03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedType01) == 0x000054, "Member 'FGreatBuildingStepTemplate::NeedType01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedID01) == 0x000058, "Member 'FGreatBuildingStepTemplate::NeedID01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedUseID01) == 0x00005C, "Member 'FGreatBuildingStepTemplate::NeedUseID01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedCount01) == 0x000060, "Member 'FGreatBuildingStepTemplate::NeedCount01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedType02) == 0x000064, "Member 'FGreatBuildingStepTemplate::NeedType02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedID02) == 0x000068, "Member 'FGreatBuildingStepTemplate::NeedID02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedUseID02) == 0x00006C, "Member 'FGreatBuildingStepTemplate::NeedUseID02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedCount02) == 0x000070, "Member 'FGreatBuildingStepTemplate::NeedCount02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedType03) == 0x000074, "Member 'FGreatBuildingStepTemplate::NeedType03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedID03) == 0x000078, "Member 'FGreatBuildingStepTemplate::NeedID03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedUseID03) == 0x00007C, "Member 'FGreatBuildingStepTemplate::NeedUseID03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedCount03) == 0x000080, "Member 'FGreatBuildingStepTemplate::NeedCount03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedType04) == 0x000084, "Member 'FGreatBuildingStepTemplate::NeedType04' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedID04) == 0x000088, "Member 'FGreatBuildingStepTemplate::NeedID04' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedUseID04) == 0x00008C, "Member 'FGreatBuildingStepTemplate::NeedUseID04' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, NeedCount04) == 0x000090, "Member 'FGreatBuildingStepTemplate::NeedCount04' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, UpgradeTime) == 0x000094, "Member 'FGreatBuildingStepTemplate::UpgradeTime' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, GuildHelpTime) == 0x000098, "Member 'FGreatBuildingStepTemplate::GuildHelpTime' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectType01) == 0x00009C, "Member 'FGreatBuildingStepTemplate::EffectType01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectValue01) == 0x0000A0, "Member 'FGreatBuildingStepTemplate::EffectValue01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectNum01) == 0x0000B0, "Member 'FGreatBuildingStepTemplate::EffectNum01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectString01) == 0x0000C0, "Member 'FGreatBuildingStepTemplate::EffectString01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectIcon01) == 0x0000D0, "Member 'FGreatBuildingStepTemplate::EffectIcon01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectType02) == 0x0000E0, "Member 'FGreatBuildingStepTemplate::EffectType02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectValue02) == 0x0000E8, "Member 'FGreatBuildingStepTemplate::EffectValue02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectString02) == 0x0000F8, "Member 'FGreatBuildingStepTemplate::EffectString02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectNum02) == 0x000108, "Member 'FGreatBuildingStepTemplate::EffectNum02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectIcon02) == 0x000118, "Member 'FGreatBuildingStepTemplate::EffectIcon02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectType03) == 0x000128, "Member 'FGreatBuildingStepTemplate::EffectType03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectValue03) == 0x000130, "Member 'FGreatBuildingStepTemplate::EffectValue03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectString03) == 0x000140, "Member 'FGreatBuildingStepTemplate::EffectString03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectNum03) == 0x000150, "Member 'FGreatBuildingStepTemplate::EffectNum03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectIcon03) == 0x000160, "Member 'FGreatBuildingStepTemplate::EffectIcon03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectType04) == 0x000170, "Member 'FGreatBuildingStepTemplate::EffectType04' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectValue04) == 0x000178, "Member 'FGreatBuildingStepTemplate::EffectValue04' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectString04) == 0x000188, "Member 'FGreatBuildingStepTemplate::EffectString04' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectNum04) == 0x000198, "Member 'FGreatBuildingStepTemplate::EffectNum04' has a wrong offset!");
static_assert(offsetof(FGreatBuildingStepTemplate, EffectIcon04) == 0x0001A8, "Member 'FGreatBuildingStepTemplate::EffectIcon04' has a wrong offset!");

// ScriptStruct MirMobile.SceneCaptureTemplate
// 0x0048 (0x0050 - 0x0008)
struct FSceneCaptureTemplate final : public FTableRowBase
{
public:
	EClassType                                    ClassType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContentsSceneType                            SceneType;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraLocation_01;                                 // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraPitch_01;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraFOV_01;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraLocation_02;                                 // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraPitch_02;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraFOV_02;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraLocation_03;                                 // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraPitch_03;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraFOV_03;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimInstanceID;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSceneCaptureTemplate) == 0x000008, "Wrong alignment on FSceneCaptureTemplate");
static_assert(sizeof(FSceneCaptureTemplate) == 0x000050, "Wrong size on FSceneCaptureTemplate");
static_assert(offsetof(FSceneCaptureTemplate, ClassType) == 0x000008, "Member 'FSceneCaptureTemplate::ClassType' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, SceneType) == 0x000009, "Member 'FSceneCaptureTemplate::SceneType' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, CameraLocation_01) == 0x00000C, "Member 'FSceneCaptureTemplate::CameraLocation_01' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, CameraPitch_01) == 0x000018, "Member 'FSceneCaptureTemplate::CameraPitch_01' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, CameraFOV_01) == 0x00001C, "Member 'FSceneCaptureTemplate::CameraFOV_01' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, CameraLocation_02) == 0x000020, "Member 'FSceneCaptureTemplate::CameraLocation_02' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, CameraPitch_02) == 0x00002C, "Member 'FSceneCaptureTemplate::CameraPitch_02' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, CameraFOV_02) == 0x000030, "Member 'FSceneCaptureTemplate::CameraFOV_02' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, CameraLocation_03) == 0x000034, "Member 'FSceneCaptureTemplate::CameraLocation_03' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, CameraPitch_03) == 0x000040, "Member 'FSceneCaptureTemplate::CameraPitch_03' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, CameraFOV_03) == 0x000044, "Member 'FSceneCaptureTemplate::CameraFOV_03' has a wrong offset!");
static_assert(offsetof(FSceneCaptureTemplate, AnimInstanceID) == 0x000048, "Member 'FSceneCaptureTemplate::AnimInstanceID' has a wrong offset!");

// ScriptStruct MirMobile.GreatBuildingTemplate
// 0x0050 (0x0058 - 0x0008)
struct FGreatBuildingTemplate final : public FTableRowBase
{
public:
	int32                                         GreatBuildingId;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingMaxStep;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingIcon;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingName;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionType01;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionValue01;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionNum01;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionText01;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionContentsId01;                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionType02;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionValue02;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionNum02;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionText02;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionContentsId02;                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionType03;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionValue03;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionNum03;                                // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionText03;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionContentsId03;                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGreatBuildingTemplate) == 0x000008, "Wrong alignment on FGreatBuildingTemplate");
static_assert(sizeof(FGreatBuildingTemplate) == 0x000058, "Wrong size on FGreatBuildingTemplate");
static_assert(offsetof(FGreatBuildingTemplate, GreatBuildingId) == 0x000008, "Member 'FGreatBuildingTemplate::GreatBuildingId' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, BuildingMaxStep) == 0x00000C, "Member 'FGreatBuildingTemplate::BuildingMaxStep' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, BuildingIcon) == 0x000010, "Member 'FGreatBuildingTemplate::BuildingIcon' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, BuildingName) == 0x000014, "Member 'FGreatBuildingTemplate::BuildingName' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionType01) == 0x000018, "Member 'FGreatBuildingTemplate::OpenConditionType01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionValue01) == 0x00001C, "Member 'FGreatBuildingTemplate::OpenConditionValue01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionNum01) == 0x000020, "Member 'FGreatBuildingTemplate::OpenConditionNum01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionText01) == 0x000024, "Member 'FGreatBuildingTemplate::OpenConditionText01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionContentsId01) == 0x000028, "Member 'FGreatBuildingTemplate::OpenConditionContentsId01' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionType02) == 0x00002C, "Member 'FGreatBuildingTemplate::OpenConditionType02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionValue02) == 0x000030, "Member 'FGreatBuildingTemplate::OpenConditionValue02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionNum02) == 0x000034, "Member 'FGreatBuildingTemplate::OpenConditionNum02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionText02) == 0x000038, "Member 'FGreatBuildingTemplate::OpenConditionText02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionContentsId02) == 0x00003C, "Member 'FGreatBuildingTemplate::OpenConditionContentsId02' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionType03) == 0x000040, "Member 'FGreatBuildingTemplate::OpenConditionType03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionValue03) == 0x000044, "Member 'FGreatBuildingTemplate::OpenConditionValue03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionNum03) == 0x000048, "Member 'FGreatBuildingTemplate::OpenConditionNum03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionText03) == 0x00004C, "Member 'FGreatBuildingTemplate::OpenConditionText03' has a wrong offset!");
static_assert(offsetof(FGreatBuildingTemplate, OpenConditionContentsId03) == 0x000050, "Member 'FGreatBuildingTemplate::OpenConditionContentsId03' has a wrong offset!");

// ScriptStruct MirMobile.GuideEffectTemplate
// 0x0070 (0x0078 - 0x0008)
struct FGuideEffectTemplate final : public FTableRowBase
{
public:
	int32                                         GuideEffectID;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuideEffectType;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 GuideColor1;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 GuideColor2;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 GuideColor3;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Ally_GuideColor1;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Ally_GuideColor2;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Ally_GuideColor3;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaterialPath;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuideEffectTemplate) == 0x000008, "Wrong alignment on FGuideEffectTemplate");
static_assert(sizeof(FGuideEffectTemplate) == 0x000078, "Wrong size on FGuideEffectTemplate");
static_assert(offsetof(FGuideEffectTemplate, GuideEffectID) == 0x000008, "Member 'FGuideEffectTemplate::GuideEffectID' has a wrong offset!");
static_assert(offsetof(FGuideEffectTemplate, GuideEffectType) == 0x00000C, "Member 'FGuideEffectTemplate::GuideEffectType' has a wrong offset!");
static_assert(offsetof(FGuideEffectTemplate, GuideColor1) == 0x000010, "Member 'FGuideEffectTemplate::GuideColor1' has a wrong offset!");
static_assert(offsetof(FGuideEffectTemplate, GuideColor2) == 0x000020, "Member 'FGuideEffectTemplate::GuideColor2' has a wrong offset!");
static_assert(offsetof(FGuideEffectTemplate, GuideColor3) == 0x000030, "Member 'FGuideEffectTemplate::GuideColor3' has a wrong offset!");
static_assert(offsetof(FGuideEffectTemplate, Ally_GuideColor1) == 0x000040, "Member 'FGuideEffectTemplate::Ally_GuideColor1' has a wrong offset!");
static_assert(offsetof(FGuideEffectTemplate, Ally_GuideColor2) == 0x000050, "Member 'FGuideEffectTemplate::Ally_GuideColor2' has a wrong offset!");
static_assert(offsetof(FGuideEffectTemplate, Ally_GuideColor3) == 0x000060, "Member 'FGuideEffectTemplate::Ally_GuideColor3' has a wrong offset!");
static_assert(offsetof(FGuideEffectTemplate, MaterialPath) == 0x000070, "Member 'FGuideEffectTemplate::MaterialPath' has a wrong offset!");

// ScriptStruct MirMobile.GuideLinkTemplate
// 0x0028 (0x0030 - 0x0008)
struct FGuideLinkTemplate final : public FTableRowBase
{
public:
	int32                                         GuideLinkID;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url_Kr;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url_Cn;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuideLinkTemplate) == 0x000008, "Wrong alignment on FGuideLinkTemplate");
static_assert(sizeof(FGuideLinkTemplate) == 0x000030, "Wrong size on FGuideLinkTemplate");
static_assert(offsetof(FGuideLinkTemplate, GuideLinkID) == 0x000008, "Member 'FGuideLinkTemplate::GuideLinkID' has a wrong offset!");
static_assert(offsetof(FGuideLinkTemplate, ContentsId) == 0x00000C, "Member 'FGuideLinkTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FGuideLinkTemplate, Url_Kr) == 0x000010, "Member 'FGuideLinkTemplate::Url_Kr' has a wrong offset!");
static_assert(offsetof(FGuideLinkTemplate, Url_Cn) == 0x000020, "Member 'FGuideLinkTemplate::Url_Cn' has a wrong offset!");

// ScriptStruct MirMobile.UIShopTapTemplate
// 0x0040 (0x0048 - 0x0008)
struct FUIShopTapTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldType;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TapType;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HigherTapId;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TapName;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderNum;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewType;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TagIconType;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TapOnOff;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RateAddress;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GachaInfoId;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmptyNotice;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIShopTapTemplate) == 0x000008, "Wrong alignment on FUIShopTapTemplate");
static_assert(sizeof(FUIShopTapTemplate) == 0x000048, "Wrong size on FUIShopTapTemplate");
static_assert(offsetof(FUIShopTapTemplate, RowId) == 0x000008, "Member 'FUIShopTapTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, TabId) == 0x00000C, "Member 'FUIShopTapTemplate::TabId' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, WorldType) == 0x000010, "Member 'FUIShopTapTemplate::WorldType' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, TapType) == 0x000014, "Member 'FUIShopTapTemplate::TapType' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, HigherTapId) == 0x000018, "Member 'FUIShopTapTemplate::HigherTapId' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, TapName) == 0x00001C, "Member 'FUIShopTapTemplate::TapName' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, OrderNum) == 0x000020, "Member 'FUIShopTapTemplate::OrderNum' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, ViewType) == 0x000024, "Member 'FUIShopTapTemplate::ViewType' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, TagIconType) == 0x000028, "Member 'FUIShopTapTemplate::TagIconType' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, TapOnOff) == 0x00002C, "Member 'FUIShopTapTemplate::TapOnOff' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, RateAddress) == 0x000030, "Member 'FUIShopTapTemplate::RateAddress' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, GachaInfoId) == 0x000040, "Member 'FUIShopTapTemplate::GachaInfoId' has a wrong offset!");
static_assert(offsetof(FUIShopTapTemplate, EmptyNotice) == 0x000044, "Member 'FUIShopTapTemplate::EmptyNotice' has a wrong offset!");

// ScriptStruct MirMobile.UIShopIAPInfoTemplate
// 0x0048 (0x0050 - 0x0008)
struct FUIShopIAPInfoTemplate final : public FTableRowBase
{
public:
	int32                                         IapId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IapType;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameStrId;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PayType;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MailType;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MailPresetId;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiPayment;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StoreType;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProductId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductValue;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IapGoodsViewType;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IapIconId;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarketDataOnOff;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIShopIAPInfoTemplate) == 0x000008, "Wrong alignment on FUIShopIAPInfoTemplate");
static_assert(sizeof(FUIShopIAPInfoTemplate) == 0x000050, "Wrong size on FUIShopIAPInfoTemplate");
static_assert(offsetof(FUIShopIAPInfoTemplate, IapId) == 0x000008, "Member 'FUIShopIAPInfoTemplate::IapId' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, IapType) == 0x00000C, "Member 'FUIShopIAPInfoTemplate::IapType' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, GoodsID) == 0x000010, "Member 'FUIShopIAPInfoTemplate::GoodsID' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, NameStrId) == 0x000014, "Member 'FUIShopIAPInfoTemplate::NameStrId' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, PayType) == 0x000018, "Member 'FUIShopIAPInfoTemplate::PayType' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, MailType) == 0x00001C, "Member 'FUIShopIAPInfoTemplate::MailType' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, MailPresetId) == 0x000020, "Member 'FUIShopIAPInfoTemplate::MailPresetId' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, MultiPayment) == 0x000024, "Member 'FUIShopIAPInfoTemplate::MultiPayment' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, StoreType) == 0x000028, "Member 'FUIShopIAPInfoTemplate::StoreType' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, ProductId) == 0x000030, "Member 'FUIShopIAPInfoTemplate::ProductId' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, ProductValue) == 0x000040, "Member 'FUIShopIAPInfoTemplate::ProductValue' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, IapGoodsViewType) == 0x000044, "Member 'FUIShopIAPInfoTemplate::IapGoodsViewType' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, IapIconId) == 0x000048, "Member 'FUIShopIAPInfoTemplate::IapIconId' has a wrong offset!");
static_assert(offsetof(FUIShopIAPInfoTemplate, MarketDataOnOff) == 0x00004C, "Member 'FUIShopIAPInfoTemplate::MarketDataOnOff' has a wrong offset!");

// ScriptStruct MirMobile.GuideStartTemplate
// 0x0018 (0x0020 - 0x0008)
struct FGuideStartTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuideId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuideContensId;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestId;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterLv;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuideStartTemplate) == 0x000008, "Wrong alignment on FGuideStartTemplate");
static_assert(sizeof(FGuideStartTemplate) == 0x000020, "Wrong size on FGuideStartTemplate");
static_assert(offsetof(FGuideStartTemplate, Name) == 0x000008, "Member 'FGuideStartTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuideStartTemplate, GuideId) == 0x00000C, "Member 'FGuideStartTemplate::GuideId' has a wrong offset!");
static_assert(offsetof(FGuideStartTemplate, GuideContensId) == 0x000010, "Member 'FGuideStartTemplate::GuideContensId' has a wrong offset!");
static_assert(offsetof(FGuideStartTemplate, QuestId) == 0x000014, "Member 'FGuideStartTemplate::QuestId' has a wrong offset!");
static_assert(offsetof(FGuideStartTemplate, CharacterLv) == 0x000018, "Member 'FGuideStartTemplate::CharacterLv' has a wrong offset!");

// ScriptStruct MirMobile.GuildAuthorityTemplate
// 0x0020 (0x0028 - 0x0008)
struct FGuildAuthorityTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuthorityId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameStrId;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Can_Member;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Can_Inventory;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Can_Diplomacy;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Can_War;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildAuthorityTemplate) == 0x000008, "Wrong alignment on FGuildAuthorityTemplate");
static_assert(sizeof(FGuildAuthorityTemplate) == 0x000028, "Wrong size on FGuildAuthorityTemplate");
static_assert(offsetof(FGuildAuthorityTemplate, Name) == 0x000008, "Member 'FGuildAuthorityTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildAuthorityTemplate, AuthorityId) == 0x00000C, "Member 'FGuildAuthorityTemplate::AuthorityId' has a wrong offset!");
static_assert(offsetof(FGuildAuthorityTemplate, NameStrId) == 0x000010, "Member 'FGuildAuthorityTemplate::NameStrId' has a wrong offset!");
static_assert(offsetof(FGuildAuthorityTemplate, Can_Member) == 0x000014, "Member 'FGuildAuthorityTemplate::Can_Member' has a wrong offset!");
static_assert(offsetof(FGuildAuthorityTemplate, Can_Inventory) == 0x000018, "Member 'FGuildAuthorityTemplate::Can_Inventory' has a wrong offset!");
static_assert(offsetof(FGuildAuthorityTemplate, Can_Diplomacy) == 0x00001C, "Member 'FGuildAuthorityTemplate::Can_Diplomacy' has a wrong offset!");
static_assert(offsetof(FGuildAuthorityTemplate, Can_War) == 0x000020, "Member 'FGuildAuthorityTemplate::Can_War' has a wrong offset!");

// ScriptStruct MirMobile.SchedulerCycleTemplate
// 0x0010 (0x0018 - 0x0008)
struct FSchedulerCycleTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScheduleType;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScheduleHour;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSchedulerCycleTemplate) == 0x000008, "Wrong alignment on FSchedulerCycleTemplate");
static_assert(sizeof(FSchedulerCycleTemplate) == 0x000018, "Wrong size on FSchedulerCycleTemplate");
static_assert(offsetof(FSchedulerCycleTemplate, ID) == 0x000008, "Member 'FSchedulerCycleTemplate::ID' has a wrong offset!");
static_assert(offsetof(FSchedulerCycleTemplate, ScheduleType) == 0x00000C, "Member 'FSchedulerCycleTemplate::ScheduleType' has a wrong offset!");
static_assert(offsetof(FSchedulerCycleTemplate, ScheduleHour) == 0x000010, "Member 'FSchedulerCycleTemplate::ScheduleHour' has a wrong offset!");

// ScriptStruct MirMobile.GuildCoopMissionTemplate
// 0x0078 (0x0080 - 0x0008)
struct FGuildCoopMissionTemplate final : public FTableRowBase
{
public:
	int32                                         GuildCoopMissionId;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCoopMissionGroupId;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mission_Difficulty;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionIcon;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionTitle;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionObjective;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestMissionType                             MissionType;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionTarget;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter1;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter2;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsOpenPage;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionStageId;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PcTargetSearchDist;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoordinateRange;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MissionCoordinate;                                 // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoBattleType;                                    // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestHelperType                              HelperType;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringMESSAGE;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRewardType1;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRewardId1;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRewardCount1;                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRewardType2;                                // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRewardId2;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRewardCount2;                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRewardType3;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRewardId3;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRewardCount3;                               // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildCoopMissionTemplate) == 0x000008, "Wrong alignment on FGuildCoopMissionTemplate");
static_assert(sizeof(FGuildCoopMissionTemplate) == 0x000080, "Wrong size on FGuildCoopMissionTemplate");
static_assert(offsetof(FGuildCoopMissionTemplate, GuildCoopMissionId) == 0x000008, "Member 'FGuildCoopMissionTemplate::GuildCoopMissionId' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, GuildCoopMissionGroupId) == 0x00000C, "Member 'FGuildCoopMissionTemplate::GuildCoopMissionGroupId' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, Mission_Difficulty) == 0x000010, "Member 'FGuildCoopMissionTemplate::Mission_Difficulty' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionIcon) == 0x000014, "Member 'FGuildCoopMissionTemplate::MissionIcon' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionTitle) == 0x000018, "Member 'FGuildCoopMissionTemplate::MissionTitle' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionObjective) == 0x00001C, "Member 'FGuildCoopMissionTemplate::MissionObjective' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionType) == 0x000020, "Member 'FGuildCoopMissionTemplate::MissionType' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionTarget) == 0x000024, "Member 'FGuildCoopMissionTemplate::MissionTarget' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, Parameter1) == 0x000028, "Member 'FGuildCoopMissionTemplate::Parameter1' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, Parameter2) == 0x00002C, "Member 'FGuildCoopMissionTemplate::Parameter2' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, ContentsOpenPage) == 0x000030, "Member 'FGuildCoopMissionTemplate::ContentsOpenPage' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionStageId) == 0x000034, "Member 'FGuildCoopMissionTemplate::MissionStageId' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, PcTargetSearchDist) == 0x000038, "Member 'FGuildCoopMissionTemplate::PcTargetSearchDist' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, CoordinateRange) == 0x00003C, "Member 'FGuildCoopMissionTemplate::CoordinateRange' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionCoordinate) == 0x000040, "Member 'FGuildCoopMissionTemplate::MissionCoordinate' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, AutoBattleType) == 0x00004C, "Member 'FGuildCoopMissionTemplate::AutoBattleType' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, HelperType) == 0x000050, "Member 'FGuildCoopMissionTemplate::HelperType' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, StringMESSAGE) == 0x000054, "Member 'FGuildCoopMissionTemplate::StringMESSAGE' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionRewardType1) == 0x000058, "Member 'FGuildCoopMissionTemplate::MissionRewardType1' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionRewardId1) == 0x00005C, "Member 'FGuildCoopMissionTemplate::MissionRewardId1' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionRewardCount1) == 0x000060, "Member 'FGuildCoopMissionTemplate::MissionRewardCount1' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionRewardType2) == 0x000064, "Member 'FGuildCoopMissionTemplate::MissionRewardType2' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionRewardId2) == 0x000068, "Member 'FGuildCoopMissionTemplate::MissionRewardId2' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionRewardCount2) == 0x00006C, "Member 'FGuildCoopMissionTemplate::MissionRewardCount2' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionRewardType3) == 0x000070, "Member 'FGuildCoopMissionTemplate::MissionRewardType3' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionRewardId3) == 0x000074, "Member 'FGuildCoopMissionTemplate::MissionRewardId3' has a wrong offset!");
static_assert(offsetof(FGuildCoopMissionTemplate, MissionRewardCount3) == 0x000078, "Member 'FGuildCoopMissionTemplate::MissionRewardCount3' has a wrong offset!");

// ScriptStruct MirMobile.GhostTrailData
// 0x0018 (0x0018 - 0x0000)
struct FGhostTrailData final
{
public:
	class FName                                   ComponentTag;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fSpawnDelay;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fLifeTime;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      M_pMaterial;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGhostTrailData) == 0x000008, "Wrong alignment on FGhostTrailData");
static_assert(sizeof(FGhostTrailData) == 0x000018, "Wrong size on FGhostTrailData");
static_assert(offsetof(FGhostTrailData, ComponentTag) == 0x000000, "Member 'FGhostTrailData::ComponentTag' has a wrong offset!");
static_assert(offsetof(FGhostTrailData, M_fSpawnDelay) == 0x000008, "Member 'FGhostTrailData::M_fSpawnDelay' has a wrong offset!");
static_assert(offsetof(FGhostTrailData, M_fLifeTime) == 0x00000C, "Member 'FGhostTrailData::M_fLifeTime' has a wrong offset!");
static_assert(offsetof(FGhostTrailData, M_pMaterial) == 0x000010, "Member 'FGhostTrailData::M_pMaterial' has a wrong offset!");

// ScriptStruct MirMobile.GuildDevLevelTemplate
// 0x00A0 (0x00A8 - 0x0008)
struct FGuildDevLevelTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevId;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpExp;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonationMoneyId;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonationMoneyValue;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonationMoneyId_Sub;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonationMoneyValue_Sub;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_DevExp;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_MoneyId1;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_MoneyIdValue1;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_MoneyId2;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_MoneyIdValue2;                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_GuildExp;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1_Kind;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1_Type;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1_Value;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1_NameStrId;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2_Kind;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2_Type;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2_Value;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2_NameStrId;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMoneyId1;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMoneyValue1;                                // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMoneyId2;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMoneyValue2;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMoneyId3;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMoneyValue3;                                // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMoneyId4;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMoneyValue4;                                // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpTime;                                       // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpSuccessRate;                                // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpFailExpDown_Min;                            // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpFailExpDown_Max;                            // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevPoint;                                          // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSkillPoint;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_SkillPoint;                                 // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivateTimeMinute;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDevLevelTemplate) == 0x000008, "Wrong alignment on FGuildDevLevelTemplate");
static_assert(sizeof(FGuildDevLevelTemplate) == 0x0000A8, "Wrong size on FGuildDevLevelTemplate");
static_assert(offsetof(FGuildDevLevelTemplate, Name) == 0x000008, "Member 'FGuildDevLevelTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, RowId) == 0x00000C, "Member 'FGuildDevLevelTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, DevId) == 0x000010, "Member 'FGuildDevLevelTemplate::DevId' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Level) == 0x000014, "Member 'FGuildDevLevelTemplate::Level' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpExp) == 0x000018, "Member 'FGuildDevLevelTemplate::LevelUpExp' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, DonationMoneyId) == 0x00001C, "Member 'FGuildDevLevelTemplate::DonationMoneyId' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, DonationMoneyValue) == 0x000020, "Member 'FGuildDevLevelTemplate::DonationMoneyValue' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, DonationMoneyId_Sub) == 0x000024, "Member 'FGuildDevLevelTemplate::DonationMoneyId_Sub' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, DonationMoneyValue_Sub) == 0x000028, "Member 'FGuildDevLevelTemplate::DonationMoneyValue_Sub' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Reward_DevExp) == 0x00002C, "Member 'FGuildDevLevelTemplate::Reward_DevExp' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Reward_MoneyId1) == 0x000030, "Member 'FGuildDevLevelTemplate::Reward_MoneyId1' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Reward_MoneyIdValue1) == 0x000034, "Member 'FGuildDevLevelTemplate::Reward_MoneyIdValue1' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Reward_MoneyId2) == 0x000038, "Member 'FGuildDevLevelTemplate::Reward_MoneyId2' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Reward_MoneyIdValue2) == 0x00003C, "Member 'FGuildDevLevelTemplate::Reward_MoneyIdValue2' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Reward_GuildExp) == 0x000040, "Member 'FGuildDevLevelTemplate::Reward_GuildExp' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Attribute1_Kind) == 0x000044, "Member 'FGuildDevLevelTemplate::Attribute1_Kind' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Attribute1_Type) == 0x000048, "Member 'FGuildDevLevelTemplate::Attribute1_Type' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Attribute1_Value) == 0x00004C, "Member 'FGuildDevLevelTemplate::Attribute1_Value' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Attribute1_NameStrId) == 0x000050, "Member 'FGuildDevLevelTemplate::Attribute1_NameStrId' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Attribute2_Kind) == 0x000054, "Member 'FGuildDevLevelTemplate::Attribute2_Kind' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Attribute2_Type) == 0x000058, "Member 'FGuildDevLevelTemplate::Attribute2_Type' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Attribute2_Value) == 0x00005C, "Member 'FGuildDevLevelTemplate::Attribute2_Value' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Attribute2_NameStrId) == 0x000060, "Member 'FGuildDevLevelTemplate::Attribute2_NameStrId' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpMoneyId1) == 0x000064, "Member 'FGuildDevLevelTemplate::LevelUpMoneyId1' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpMoneyValue1) == 0x000068, "Member 'FGuildDevLevelTemplate::LevelUpMoneyValue1' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpMoneyId2) == 0x00006C, "Member 'FGuildDevLevelTemplate::LevelUpMoneyId2' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpMoneyValue2) == 0x000070, "Member 'FGuildDevLevelTemplate::LevelUpMoneyValue2' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpMoneyId3) == 0x000074, "Member 'FGuildDevLevelTemplate::LevelUpMoneyId3' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpMoneyValue3) == 0x000078, "Member 'FGuildDevLevelTemplate::LevelUpMoneyValue3' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpMoneyId4) == 0x00007C, "Member 'FGuildDevLevelTemplate::LevelUpMoneyId4' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpMoneyValue4) == 0x000080, "Member 'FGuildDevLevelTemplate::LevelUpMoneyValue4' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpTime) == 0x000084, "Member 'FGuildDevLevelTemplate::LevelUpTime' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpSuccessRate) == 0x000088, "Member 'FGuildDevLevelTemplate::LevelUpSuccessRate' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpFailExpDown_Min) == 0x00008C, "Member 'FGuildDevLevelTemplate::LevelUpFailExpDown_Min' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, LevelUpFailExpDown_Max) == 0x000090, "Member 'FGuildDevLevelTemplate::LevelUpFailExpDown_Max' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, DevPoint) == 0x000094, "Member 'FGuildDevLevelTemplate::DevPoint' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, MaxSkillPoint) == 0x000098, "Member 'FGuildDevLevelTemplate::MaxSkillPoint' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, Reward_SkillPoint) == 0x00009C, "Member 'FGuildDevLevelTemplate::Reward_SkillPoint' has a wrong offset!");
static_assert(offsetof(FGuildDevLevelTemplate, ActivateTimeMinute) == 0x0000A0, "Member 'FGuildDevLevelTemplate::ActivateTimeMinute' has a wrong offset!");

// ScriptStruct MirMobile.GuildDevUITemplate
// 0x0048 (0x0050 - 0x0008)
struct FGuildDevUITemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListX;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevId;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevType;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevNameStrId;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevExpStrId;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevIconId;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 NextDevId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DevBoardId;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationDevId;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialTextStrId;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDevUITemplate) == 0x000008, "Wrong alignment on FGuildDevUITemplate");
static_assert(sizeof(FGuildDevUITemplate) == 0x000050, "Wrong size on FGuildDevUITemplate");
static_assert(offsetof(FGuildDevUITemplate, Name) == 0x000008, "Member 'FGuildDevUITemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, RowId) == 0x00000C, "Member 'FGuildDevUITemplate::RowId' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, ListId) == 0x000010, "Member 'FGuildDevUITemplate::ListId' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, ListX) == 0x000014, "Member 'FGuildDevUITemplate::ListX' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, DevId) == 0x000018, "Member 'FGuildDevUITemplate::DevId' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, DevType) == 0x00001C, "Member 'FGuildDevUITemplate::DevType' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, DevNameStrId) == 0x000020, "Member 'FGuildDevUITemplate::DevNameStrId' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, DevExpStrId) == 0x000024, "Member 'FGuildDevUITemplate::DevExpStrId' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, DevIconId) == 0x000028, "Member 'FGuildDevUITemplate::DevIconId' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, NextDevId) == 0x000030, "Member 'FGuildDevUITemplate::NextDevId' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, DevBoardId) == 0x000040, "Member 'FGuildDevUITemplate::DevBoardId' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, RelationDevId) == 0x000044, "Member 'FGuildDevUITemplate::RelationDevId' has a wrong offset!");
static_assert(offsetof(FGuildDevUITemplate, SpecialTextStrId) == 0x000048, "Member 'FGuildDevUITemplate::SpecialTextStrId' has a wrong offset!");

// ScriptStruct MirMobile.GhostTrailParticleData
// 0x0020 (0x0020 - 0x0000)
struct FGhostTrailParticleData final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLocation;                                    // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGhostTrailParticleData) == 0x000008, "Wrong alignment on FGhostTrailParticleData");
static_assert(sizeof(FGhostTrailParticleData) == 0x000020, "Wrong size on FGhostTrailParticleData");
static_assert(offsetof(FGhostTrailParticleData, BoneName) == 0x000000, "Member 'FGhostTrailParticleData::BoneName' has a wrong offset!");
static_assert(offsetof(FGhostTrailParticleData, EmitterTemplate) == 0x000008, "Member 'FGhostTrailParticleData::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(FGhostTrailParticleData, OffsetLocation) == 0x000010, "Member 'FGhostTrailParticleData::OffsetLocation' has a wrong offset!");

// ScriptStruct MirMobile.TutorialTemplate
// 0x0058 (0x0060 - 0x0008)
struct FTutorialTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TutorialGroupId;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartSelectAble;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PauseAble;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetIndex;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BgAble;                                            // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETutorialUIGuideType                          UiGuide;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIGuideType                                  UIGuideType;                                       // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UiGuideStringId;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialGuidStrPosType                       UiGuideStringSide;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NpcGuide;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NpcGuideStringId;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundGuideId;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialStepEndType                          StepEndType;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepEndValue;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDelaySec;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationYaw;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TutorialProgressData;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialTemplate) == 0x000008, "Wrong alignment on FTutorialTemplate");
static_assert(sizeof(FTutorialTemplate) == 0x000060, "Wrong size on FTutorialTemplate");
static_assert(offsetof(FTutorialTemplate, RowId) == 0x000008, "Member 'FTutorialTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, TutorialGroupId) == 0x00000C, "Member 'FTutorialTemplate::TutorialGroupId' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, StartSelectAble) == 0x000010, "Member 'FTutorialTemplate::StartSelectAble' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, PauseAble) == 0x000011, "Member 'FTutorialTemplate::PauseAble' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, TargetIndex) == 0x000014, "Member 'FTutorialTemplate::TargetIndex' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, BgAble) == 0x00001C, "Member 'FTutorialTemplate::BgAble' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, UiGuide) == 0x000020, "Member 'FTutorialTemplate::UiGuide' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, UIGuideType) == 0x000024, "Member 'FTutorialTemplate::UIGuideType' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, UiGuideStringId) == 0x000028, "Member 'FTutorialTemplate::UiGuideStringId' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, UiGuideStringSide) == 0x00002C, "Member 'FTutorialTemplate::UiGuideStringSide' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, NpcGuide) == 0x000030, "Member 'FTutorialTemplate::NpcGuide' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, NpcGuideStringId) == 0x000034, "Member 'FTutorialTemplate::NpcGuideStringId' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, SoundGuideId) == 0x000038, "Member 'FTutorialTemplate::SoundGuideId' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, StepEndType) == 0x00003C, "Member 'FTutorialTemplate::StepEndType' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, StepEndValue) == 0x000040, "Member 'FTutorialTemplate::StepEndValue' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, StartDelaySec) == 0x000044, "Member 'FTutorialTemplate::StartDelaySec' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, RotationYaw) == 0x000048, "Member 'FTutorialTemplate::RotationYaw' has a wrong offset!");
static_assert(offsetof(FTutorialTemplate, TutorialProgressData) == 0x000050, "Member 'FTutorialTemplate::TutorialProgressData' has a wrong offset!");

// ScriptStruct MirMobile.SmallDialog
// 0x0008 (0x0008 - 0x0000)
struct FSmallDialog final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         STDId;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmallDialog) == 0x000004, "Wrong alignment on FSmallDialog");
static_assert(sizeof(FSmallDialog) == 0x000008, "Wrong size on FSmallDialog");
static_assert(offsetof(FSmallDialog, Count) == 0x000000, "Member 'FSmallDialog::Count' has a wrong offset!");
static_assert(offsetof(FSmallDialog, STDId) == 0x000004, "Member 'FSmallDialog::STDId' has a wrong offset!");

// ScriptStruct MirMobile.QuestTemplate
// 0x0118 (0x0120 - 0x0008)
struct FQuestTemplate final : public FTableRowBase
{
public:
	int32                                         QuestId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestLevel;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepNo;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartScript;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndScript;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestMissionType                             MissionType;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestHelperType                              HelperType;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoBattleType;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PcTargetSearchDist;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoordinateRange;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestTitleSID;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestMissionSID;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionTarget;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter1;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter2;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter3;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter4;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParameterClass;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CountIndication;                                   // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MissionStageId;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ViaCoordinate;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                MissionCoordinate;                                 // 0x0090(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PhaseExitCoordinate;                               // 0x009C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuestTrackerType;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundId;                                           // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundRange;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId;                                          // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardEXP;                                         // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGOLD;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostId;                                      // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostCount;                                   // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItem01Id;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItem01Count;                                 // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItem02Id;                                    // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItem02Count;                                 // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSmallDialog>                   CountSmallTalk;                                    // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TutorialGroupId;                                   // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentOpenPage;                                   // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringMESSAGE;                                     // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestTemplate) == 0x000008, "Wrong alignment on FQuestTemplate");
static_assert(sizeof(FQuestTemplate) == 0x000120, "Wrong size on FQuestTemplate");
static_assert(offsetof(FQuestTemplate, QuestId) == 0x000008, "Member 'FQuestTemplate::QuestId' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, QuestLevel) == 0x00000C, "Member 'FQuestTemplate::QuestLevel' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, StepNo) == 0x000010, "Member 'FQuestTemplate::StepNo' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, StartScript) == 0x000018, "Member 'FQuestTemplate::StartScript' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, EndScript) == 0x000028, "Member 'FQuestTemplate::EndScript' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, MissionType) == 0x000038, "Member 'FQuestTemplate::MissionType' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, HelperType) == 0x00003C, "Member 'FQuestTemplate::HelperType' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, AutoBattleType) == 0x000040, "Member 'FQuestTemplate::AutoBattleType' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, PcTargetSearchDist) == 0x000044, "Member 'FQuestTemplate::PcTargetSearchDist' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, CoordinateRange) == 0x000048, "Member 'FQuestTemplate::CoordinateRange' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, QuestTitleSID) == 0x00004C, "Member 'FQuestTemplate::QuestTitleSID' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, QuestMissionSID) == 0x000050, "Member 'FQuestTemplate::QuestMissionSID' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, MissionTarget) == 0x000054, "Member 'FQuestTemplate::MissionTarget' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, Parameter1) == 0x000058, "Member 'FQuestTemplate::Parameter1' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, Parameter2) == 0x00005C, "Member 'FQuestTemplate::Parameter2' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, Parameter3) == 0x000060, "Member 'FQuestTemplate::Parameter3' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, Parameter4) == 0x000064, "Member 'FQuestTemplate::Parameter4' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, ParameterClass) == 0x000068, "Member 'FQuestTemplate::ParameterClass' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, CountIndication) == 0x000078, "Member 'FQuestTemplate::CountIndication' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, MissionStageId) == 0x00007C, "Member 'FQuestTemplate::MissionStageId' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, ViaCoordinate) == 0x000080, "Member 'FQuestTemplate::ViaCoordinate' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, MissionCoordinate) == 0x000090, "Member 'FQuestTemplate::MissionCoordinate' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, PhaseExitCoordinate) == 0x00009C, "Member 'FQuestTemplate::PhaseExitCoordinate' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, QuestTrackerType) == 0x0000A8, "Member 'FQuestTemplate::QuestTrackerType' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, SoundId) == 0x0000AC, "Member 'FQuestTemplate::SoundId' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, SoundRange) == 0x0000B0, "Member 'FQuestTemplate::SoundRange' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, EffectId) == 0x0000B4, "Member 'FQuestTemplate::EffectId' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, IconID) == 0x0000B8, "Member 'FQuestTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, RewardEXP) == 0x0000BC, "Member 'FQuestTemplate::RewardEXP' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, RewardGOLD) == 0x0000C0, "Member 'FQuestTemplate::RewardGOLD' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, RewardCostId) == 0x0000C4, "Member 'FQuestTemplate::RewardCostId' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, RewardCostCount) == 0x0000C8, "Member 'FQuestTemplate::RewardCostCount' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, RewardItem01Id) == 0x0000D0, "Member 'FQuestTemplate::RewardItem01Id' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, RewardItem01Count) == 0x0000E0, "Member 'FQuestTemplate::RewardItem01Count' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, RewardItem02Id) == 0x0000E8, "Member 'FQuestTemplate::RewardItem02Id' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, RewardItem02Count) == 0x0000F8, "Member 'FQuestTemplate::RewardItem02Count' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, CountSmallTalk) == 0x000100, "Member 'FQuestTemplate::CountSmallTalk' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, TutorialGroupId) == 0x000110, "Member 'FQuestTemplate::TutorialGroupId' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, ContentOpenPage) == 0x000114, "Member 'FQuestTemplate::ContentOpenPage' has a wrong offset!");
static_assert(offsetof(FQuestTemplate, StringMESSAGE) == 0x000118, "Member 'FQuestTemplate::StringMESSAGE' has a wrong offset!");

// ScriptStruct MirMobile.GuildDevUnLockTemplate
// 0x0038 (0x0040 - 0x0008)
struct FGuildDevUnLockTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DevLevel;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockGuildLevel;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockGuildExpeditionId;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unlock1_DevId;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unlock1_DevLevel;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unlock2_DevId;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unlock2_DevLevel;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unlock3_DevId;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unlock3_DevLevel;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unlock4_DevId;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unlock4_DevLevel;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDevUnLockTemplate) == 0x000008, "Wrong alignment on FGuildDevUnLockTemplate");
static_assert(sizeof(FGuildDevUnLockTemplate) == 0x000040, "Wrong size on FGuildDevUnLockTemplate");
static_assert(offsetof(FGuildDevUnLockTemplate, Name) == 0x000008, "Member 'FGuildDevUnLockTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, DevId) == 0x00000C, "Member 'FGuildDevUnLockTemplate::DevId' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, DevLevel) == 0x000010, "Member 'FGuildDevUnLockTemplate::DevLevel' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, UnlockGuildLevel) == 0x000014, "Member 'FGuildDevUnLockTemplate::UnlockGuildLevel' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, UnlockGuildExpeditionId) == 0x000018, "Member 'FGuildDevUnLockTemplate::UnlockGuildExpeditionId' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, Unlock1_DevId) == 0x00001C, "Member 'FGuildDevUnLockTemplate::Unlock1_DevId' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, Unlock1_DevLevel) == 0x000020, "Member 'FGuildDevUnLockTemplate::Unlock1_DevLevel' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, Unlock2_DevId) == 0x000024, "Member 'FGuildDevUnLockTemplate::Unlock2_DevId' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, Unlock2_DevLevel) == 0x000028, "Member 'FGuildDevUnLockTemplate::Unlock2_DevLevel' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, Unlock3_DevId) == 0x00002C, "Member 'FGuildDevUnLockTemplate::Unlock3_DevId' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, Unlock3_DevLevel) == 0x000030, "Member 'FGuildDevUnLockTemplate::Unlock3_DevLevel' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, Unlock4_DevId) == 0x000034, "Member 'FGuildDevUnLockTemplate::Unlock4_DevId' has a wrong offset!");
static_assert(offsetof(FGuildDevUnLockTemplate, Unlock4_DevLevel) == 0x000038, "Member 'FGuildDevUnLockTemplate::Unlock4_DevLevel' has a wrong offset!");

// ScriptStruct MirMobile.PKModeTemplate
// 0x0060 (0x0068 - 0x0008)
struct FPKModeTemplate final : public FTableRowBase
{
public:
	int32                                         PkType;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PkMode;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PkModeName;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PkModeDesc;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PkModeIcon;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HudSelectAble;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackExceptingGuild;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackNotServerVister;                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackServerVisterSame;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackServerVisterNotSame;                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackGradeType01;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackGradeType02;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackGradeType03;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackGradeType04;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackGradeType05;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackParty;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackGuild;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackAllyGuild;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackEnemyGuild;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackFriend;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackPink;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackEnemyFaction;                                // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackPvP;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PkModeColor;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKModeTemplate) == 0x000008, "Wrong alignment on FPKModeTemplate");
static_assert(sizeof(FPKModeTemplate) == 0x000068, "Wrong size on FPKModeTemplate");
static_assert(offsetof(FPKModeTemplate, PkType) == 0x000008, "Member 'FPKModeTemplate::PkType' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, PkMode) == 0x00000C, "Member 'FPKModeTemplate::PkMode' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, PkModeName) == 0x000010, "Member 'FPKModeTemplate::PkModeName' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, PkModeDesc) == 0x000014, "Member 'FPKModeTemplate::PkModeDesc' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, PkModeIcon) == 0x000018, "Member 'FPKModeTemplate::PkModeIcon' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, HudSelectAble) == 0x00001C, "Member 'FPKModeTemplate::HudSelectAble' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackExceptingGuild) == 0x000020, "Member 'FPKModeTemplate::AttackExceptingGuild' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackNotServerVister) == 0x000024, "Member 'FPKModeTemplate::AttackNotServerVister' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackServerVisterSame) == 0x000028, "Member 'FPKModeTemplate::AttackServerVisterSame' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackServerVisterNotSame) == 0x00002C, "Member 'FPKModeTemplate::AttackServerVisterNotSame' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackGradeType01) == 0x000030, "Member 'FPKModeTemplate::AttackGradeType01' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackGradeType02) == 0x000034, "Member 'FPKModeTemplate::AttackGradeType02' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackGradeType03) == 0x000038, "Member 'FPKModeTemplate::AttackGradeType03' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackGradeType04) == 0x00003C, "Member 'FPKModeTemplate::AttackGradeType04' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackGradeType05) == 0x000040, "Member 'FPKModeTemplate::AttackGradeType05' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackParty) == 0x000044, "Member 'FPKModeTemplate::AttackParty' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackGuild) == 0x000048, "Member 'FPKModeTemplate::AttackGuild' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackAllyGuild) == 0x00004C, "Member 'FPKModeTemplate::AttackAllyGuild' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackEnemyGuild) == 0x000050, "Member 'FPKModeTemplate::AttackEnemyGuild' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackFriend) == 0x000054, "Member 'FPKModeTemplate::AttackFriend' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackPink) == 0x000058, "Member 'FPKModeTemplate::AttackPink' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackEnemyFaction) == 0x00005C, "Member 'FPKModeTemplate::AttackEnemyFaction' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, AttackPvP) == 0x000060, "Member 'FPKModeTemplate::AttackPvP' has a wrong offset!");
static_assert(offsetof(FPKModeTemplate, PkModeColor) == 0x000064, "Member 'FPKModeTemplate::PkModeColor' has a wrong offset!");

// ScriptStruct MirMobile.ItemRandomGetInfoTemplate
// 0x0030 (0x0038 - 0x0008)
struct FItemRandomGetInfoTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomGetInfoId;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProbabilityRange1;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringId1;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProbabilityRange2;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringId2;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProbabilityRange3;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringId3;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProbabilityRange4;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringId4;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProbabilityRange5;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringId5;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemRandomGetInfoTemplate) == 0x000008, "Wrong alignment on FItemRandomGetInfoTemplate");
static_assert(sizeof(FItemRandomGetInfoTemplate) == 0x000038, "Wrong size on FItemRandomGetInfoTemplate");
static_assert(offsetof(FItemRandomGetInfoTemplate, Name) == 0x000008, "Member 'FItemRandomGetInfoTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, RandomGetInfoId) == 0x00000C, "Member 'FItemRandomGetInfoTemplate::RandomGetInfoId' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, ProbabilityRange1) == 0x000010, "Member 'FItemRandomGetInfoTemplate::ProbabilityRange1' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, StringId1) == 0x000014, "Member 'FItemRandomGetInfoTemplate::StringId1' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, ProbabilityRange2) == 0x000018, "Member 'FItemRandomGetInfoTemplate::ProbabilityRange2' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, StringId2) == 0x00001C, "Member 'FItemRandomGetInfoTemplate::StringId2' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, ProbabilityRange3) == 0x000020, "Member 'FItemRandomGetInfoTemplate::ProbabilityRange3' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, StringId3) == 0x000024, "Member 'FItemRandomGetInfoTemplate::StringId3' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, ProbabilityRange4) == 0x000028, "Member 'FItemRandomGetInfoTemplate::ProbabilityRange4' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, StringId4) == 0x00002C, "Member 'FItemRandomGetInfoTemplate::StringId4' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, ProbabilityRange5) == 0x000030, "Member 'FItemRandomGetInfoTemplate::ProbabilityRange5' has a wrong offset!");
static_assert(offsetof(FItemRandomGetInfoTemplate, StringId5) == 0x000034, "Member 'FItemRandomGetInfoTemplate::StringId5' has a wrong offset!");

// ScriptStruct MirMobile.GuildDominionPkGradeTemplate
// 0x0028 (0x0030 - 0x0008)
struct FGuildDominionPkGradeTemplate final : public FTableRowBase
{
public:
	int32                                         DominionPKId;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPkNameId;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPkIconId;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPKRewardType;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPKRewardTypeSub;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPKRewardValue;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPKDurationTime;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPKTargetDebuff;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPKCostType;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPKCostValue;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildDominionPkGradeTemplate) == 0x000008, "Wrong alignment on FGuildDominionPkGradeTemplate");
static_assert(sizeof(FGuildDominionPkGradeTemplate) == 0x000030, "Wrong size on FGuildDominionPkGradeTemplate");
static_assert(offsetof(FGuildDominionPkGradeTemplate, DominionPKId) == 0x000008, "Member 'FGuildDominionPkGradeTemplate::DominionPKId' has a wrong offset!");
static_assert(offsetof(FGuildDominionPkGradeTemplate, DominionPkNameId) == 0x00000C, "Member 'FGuildDominionPkGradeTemplate::DominionPkNameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionPkGradeTemplate, DominionPkIconId) == 0x000010, "Member 'FGuildDominionPkGradeTemplate::DominionPkIconId' has a wrong offset!");
static_assert(offsetof(FGuildDominionPkGradeTemplate, DominionPKRewardType) == 0x000014, "Member 'FGuildDominionPkGradeTemplate::DominionPKRewardType' has a wrong offset!");
static_assert(offsetof(FGuildDominionPkGradeTemplate, DominionPKRewardTypeSub) == 0x000018, "Member 'FGuildDominionPkGradeTemplate::DominionPKRewardTypeSub' has a wrong offset!");
static_assert(offsetof(FGuildDominionPkGradeTemplate, DominionPKRewardValue) == 0x00001C, "Member 'FGuildDominionPkGradeTemplate::DominionPKRewardValue' has a wrong offset!");
static_assert(offsetof(FGuildDominionPkGradeTemplate, DominionPKDurationTime) == 0x000020, "Member 'FGuildDominionPkGradeTemplate::DominionPKDurationTime' has a wrong offset!");
static_assert(offsetof(FGuildDominionPkGradeTemplate, DominionPKTargetDebuff) == 0x000024, "Member 'FGuildDominionPkGradeTemplate::DominionPKTargetDebuff' has a wrong offset!");
static_assert(offsetof(FGuildDominionPkGradeTemplate, DominionPKCostType) == 0x000028, "Member 'FGuildDominionPkGradeTemplate::DominionPKCostType' has a wrong offset!");
static_assert(offsetof(FGuildDominionPkGradeTemplate, DominionPKCostValue) == 0x00002C, "Member 'FGuildDominionPkGradeTemplate::DominionPKCostValue' has a wrong offset!");

// ScriptStruct MirMobile.PageTutorialStep
// 0x0030 (0x0030 - 0x0000)
struct FPageTutorialStep final
{
public:
	int32                                         TitleStringID;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TutorialDescription;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPaperSprite>            TutorialImageID;                                   // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPageTutorialStep) == 0x000008, "Wrong alignment on FPageTutorialStep");
static_assert(sizeof(FPageTutorialStep) == 0x000030, "Wrong size on FPageTutorialStep");
static_assert(offsetof(FPageTutorialStep, TitleStringID) == 0x000000, "Member 'FPageTutorialStep::TitleStringID' has a wrong offset!");
static_assert(offsetof(FPageTutorialStep, TutorialDescription) == 0x000004, "Member 'FPageTutorialStep::TutorialDescription' has a wrong offset!");
static_assert(offsetof(FPageTutorialStep, TutorialImageID) == 0x000008, "Member 'FPageTutorialStep::TutorialImageID' has a wrong offset!");

// ScriptStruct MirMobile.PageTutorialGroup
// 0x0018 (0x0018 - 0x0000)
struct FPageTutorialGroup final
{
public:
	int32                                         GroupId;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipEnable;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPageTutorialStep>              PageTutorialStepArray;                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPageTutorialGroup) == 0x000008, "Wrong alignment on FPageTutorialGroup");
static_assert(sizeof(FPageTutorialGroup) == 0x000018, "Wrong size on FPageTutorialGroup");
static_assert(offsetof(FPageTutorialGroup, GroupId) == 0x000000, "Member 'FPageTutorialGroup::GroupId' has a wrong offset!");
static_assert(offsetof(FPageTutorialGroup, bSkipEnable) == 0x000004, "Member 'FPageTutorialGroup::bSkipEnable' has a wrong offset!");
static_assert(offsetof(FPageTutorialGroup, PageTutorialStepArray) == 0x000008, "Member 'FPageTutorialGroup::PageTutorialStepArray' has a wrong offset!");

// ScriptStruct MirMobile.StatusInfoTemplate
// 0x0028 (0x0030 - 0x0008)
struct FStatusInfoTemplate final : public FTableRowBase
{
public:
	int32                                         StatusInfoId;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoOrder;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoString;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoExpString;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 InfoValueAdd;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContentsId;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoIconId;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatusInfoTemplate) == 0x000008, "Wrong alignment on FStatusInfoTemplate");
static_assert(sizeof(FStatusInfoTemplate) == 0x000030, "Wrong size on FStatusInfoTemplate");
static_assert(offsetof(FStatusInfoTemplate, StatusInfoId) == 0x000008, "Member 'FStatusInfoTemplate::StatusInfoId' has a wrong offset!");
static_assert(offsetof(FStatusInfoTemplate, InfoOrder) == 0x00000C, "Member 'FStatusInfoTemplate::InfoOrder' has a wrong offset!");
static_assert(offsetof(FStatusInfoTemplate, InfoString) == 0x000010, "Member 'FStatusInfoTemplate::InfoString' has a wrong offset!");
static_assert(offsetof(FStatusInfoTemplate, InfoExpString) == 0x000014, "Member 'FStatusInfoTemplate::InfoExpString' has a wrong offset!");
static_assert(offsetof(FStatusInfoTemplate, InfoValueAdd) == 0x000018, "Member 'FStatusInfoTemplate::InfoValueAdd' has a wrong offset!");
static_assert(offsetof(FStatusInfoTemplate, ContentsId) == 0x000028, "Member 'FStatusInfoTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FStatusInfoTemplate, InfoIconId) == 0x00002C, "Member 'FStatusInfoTemplate::InfoIconId' has a wrong offset!");

// ScriptStruct MirMobile.GuildDominionPrizeTemplate
// 0x0028 (0x0030 - 0x0008)
struct FGuildDominionPrizeTemplate final : public FTableRowBase
{
public:
	int32                                         DominionPrizeId;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPrizeType;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPrizeGrade;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPrizeNameId;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPrizeIconId;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPrizeLimit;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPrizeCostType;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPrizeCostValue;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionPrizeItemId;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildDominionPrizeTemplate) == 0x000008, "Wrong alignment on FGuildDominionPrizeTemplate");
static_assert(sizeof(FGuildDominionPrizeTemplate) == 0x000030, "Wrong size on FGuildDominionPrizeTemplate");
static_assert(offsetof(FGuildDominionPrizeTemplate, DominionPrizeId) == 0x000008, "Member 'FGuildDominionPrizeTemplate::DominionPrizeId' has a wrong offset!");
static_assert(offsetof(FGuildDominionPrizeTemplate, DominionPrizeType) == 0x00000C, "Member 'FGuildDominionPrizeTemplate::DominionPrizeType' has a wrong offset!");
static_assert(offsetof(FGuildDominionPrizeTemplate, DominionPrizeGrade) == 0x000010, "Member 'FGuildDominionPrizeTemplate::DominionPrizeGrade' has a wrong offset!");
static_assert(offsetof(FGuildDominionPrizeTemplate, DominionPrizeNameId) == 0x000014, "Member 'FGuildDominionPrizeTemplate::DominionPrizeNameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionPrizeTemplate, DominionPrizeIconId) == 0x000018, "Member 'FGuildDominionPrizeTemplate::DominionPrizeIconId' has a wrong offset!");
static_assert(offsetof(FGuildDominionPrizeTemplate, DominionPrizeLimit) == 0x00001C, "Member 'FGuildDominionPrizeTemplate::DominionPrizeLimit' has a wrong offset!");
static_assert(offsetof(FGuildDominionPrizeTemplate, DominionPrizeCostType) == 0x000020, "Member 'FGuildDominionPrizeTemplate::DominionPrizeCostType' has a wrong offset!");
static_assert(offsetof(FGuildDominionPrizeTemplate, DominionPrizeCostValue) == 0x000024, "Member 'FGuildDominionPrizeTemplate::DominionPrizeCostValue' has a wrong offset!");
static_assert(offsetof(FGuildDominionPrizeTemplate, DominionPrizeItemId) == 0x000028, "Member 'FGuildDominionPrizeTemplate::DominionPrizeItemId' has a wrong offset!");

// ScriptStruct MirMobile.HolyStuffTemplate
// 0x0030 (0x0038 - 0x0008)
struct FHolyStuffTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuffId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseGroupId;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NameSID;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_DesSID;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_ConditionOpenLevel;                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_Object;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_ABP;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_Img;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_Icon;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHolyStuffTemplate) == 0x000008, "Wrong alignment on FHolyStuffTemplate");
static_assert(sizeof(FHolyStuffTemplate) == 0x000038, "Wrong size on FHolyStuffTemplate");
static_assert(offsetof(FHolyStuffTemplate, Name) == 0x000008, "Member 'FHolyStuffTemplate::Name' has a wrong offset!");
static_assert(offsetof(FHolyStuffTemplate, HolyStuffId) == 0x00000C, "Member 'FHolyStuffTemplate::HolyStuffId' has a wrong offset!");
static_assert(offsetof(FHolyStuffTemplate, PhaseGroupId) == 0x000010, "Member 'FHolyStuffTemplate::PhaseGroupId' has a wrong offset!");
static_assert(offsetof(FHolyStuffTemplate, ClassID) == 0x000014, "Member 'FHolyStuffTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FHolyStuffTemplate, HolyStuff_NameSID) == 0x000018, "Member 'FHolyStuffTemplate::HolyStuff_NameSID' has a wrong offset!");
static_assert(offsetof(FHolyStuffTemplate, HolyStuff_DesSID) == 0x00001C, "Member 'FHolyStuffTemplate::HolyStuff_DesSID' has a wrong offset!");
static_assert(offsetof(FHolyStuffTemplate, HolyStuff_ConditionOpenLevel) == 0x000020, "Member 'FHolyStuffTemplate::HolyStuff_ConditionOpenLevel' has a wrong offset!");
static_assert(offsetof(FHolyStuffTemplate, HolyStuff_Object) == 0x000024, "Member 'FHolyStuffTemplate::HolyStuff_Object' has a wrong offset!");
static_assert(offsetof(FHolyStuffTemplate, HolyStuff_ABP) == 0x000028, "Member 'FHolyStuffTemplate::HolyStuff_ABP' has a wrong offset!");
static_assert(offsetof(FHolyStuffTemplate, HolyStuff_Img) == 0x00002C, "Member 'FHolyStuffTemplate::HolyStuff_Img' has a wrong offset!");
static_assert(offsetof(FHolyStuffTemplate, HolyStuff_Icon) == 0x000030, "Member 'FHolyStuffTemplate::HolyStuff_Icon' has a wrong offset!");

// ScriptStruct MirMobile.GuildDominionTemplate
// 0x0068 (0x0070 - 0x0008)
struct FGuildDominionTemplate final : public FTableRowBase
{
public:
	int32                                         DominionId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NameId;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageId;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleNameId;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleIconId;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleMedalIconId;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberGrade1_NameId;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberGrade2_NameId;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberGrade3_NameId;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberGrade4_NameId;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberGrade5_NameId;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberGrade6_NameId;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsOccupiable;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderNo;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionGoldTaxRate;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionDefaultTaxRate;                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionCastleTaxRate;                             // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkAltarId;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkAltarDefaultTaxRate;                           // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkAltarCastleTaxRate;                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionOccupationId;                              // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShow;                                            // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GuildShopUnlockIconId;                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildDominionTemplate) == 0x000008, "Wrong alignment on FGuildDominionTemplate");
static_assert(sizeof(FGuildDominionTemplate) == 0x000070, "Wrong size on FGuildDominionTemplate");
static_assert(offsetof(FGuildDominionTemplate, DominionId) == 0x000008, "Member 'FGuildDominionTemplate::DominionId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, Type) == 0x00000C, "Member 'FGuildDominionTemplate::Type' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, Grade) == 0x000010, "Member 'FGuildDominionTemplate::Grade' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, NameId) == 0x000018, "Member 'FGuildDominionTemplate::NameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, ImageId) == 0x00001C, "Member 'FGuildDominionTemplate::ImageId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, TitleNameId) == 0x000020, "Member 'FGuildDominionTemplate::TitleNameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, TitleIconId) == 0x000024, "Member 'FGuildDominionTemplate::TitleIconId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, TitleMedalIconId) == 0x000028, "Member 'FGuildDominionTemplate::TitleMedalIconId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, MemberGrade1_NameId) == 0x00002C, "Member 'FGuildDominionTemplate::MemberGrade1_NameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, MemberGrade2_NameId) == 0x000030, "Member 'FGuildDominionTemplate::MemberGrade2_NameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, MemberGrade3_NameId) == 0x000034, "Member 'FGuildDominionTemplate::MemberGrade3_NameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, MemberGrade4_NameId) == 0x000038, "Member 'FGuildDominionTemplate::MemberGrade4_NameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, MemberGrade5_NameId) == 0x00003C, "Member 'FGuildDominionTemplate::MemberGrade5_NameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, MemberGrade6_NameId) == 0x000040, "Member 'FGuildDominionTemplate::MemberGrade6_NameId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, IsOccupiable) == 0x000044, "Member 'FGuildDominionTemplate::IsOccupiable' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, OrderNo) == 0x000048, "Member 'FGuildDominionTemplate::OrderNo' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, DominionGoldTaxRate) == 0x00004C, "Member 'FGuildDominionTemplate::DominionGoldTaxRate' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, DominionDefaultTaxRate) == 0x000050, "Member 'FGuildDominionTemplate::DominionDefaultTaxRate' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, DominionCastleTaxRate) == 0x000054, "Member 'FGuildDominionTemplate::DominionCastleTaxRate' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, DarkAltarId) == 0x000058, "Member 'FGuildDominionTemplate::DarkAltarId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, DarkAltarDefaultTaxRate) == 0x00005C, "Member 'FGuildDominionTemplate::DarkAltarDefaultTaxRate' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, DarkAltarCastleTaxRate) == 0x000060, "Member 'FGuildDominionTemplate::DarkAltarCastleTaxRate' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, DominionOccupationId) == 0x000064, "Member 'FGuildDominionTemplate::DominionOccupationId' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, IsShow) == 0x000068, "Member 'FGuildDominionTemplate::IsShow' has a wrong offset!");
static_assert(offsetof(FGuildDominionTemplate, GuildShopUnlockIconId) == 0x00006C, "Member 'FGuildDominionTemplate::GuildShopUnlockIconId' has a wrong offset!");

// ScriptStruct MirMobile.GuildDonationTemplate
// 0x0000 (0x0008 - 0x0008)
struct FGuildDonationTemplate final : public FTableRowBase
{
};
static_assert(alignof(FGuildDonationTemplate) == 0x000008, "Wrong alignment on FGuildDonationTemplate");
static_assert(sizeof(FGuildDonationTemplate) == 0x000008, "Wrong size on FGuildDonationTemplate");

// ScriptStruct MirMobile.PawnMovementComponentPostPhysicsTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FPawnMovementComponentPostPhysicsTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPawnMovementComponentPostPhysicsTickFunction) == 0x000008, "Wrong alignment on FPawnMovementComponentPostPhysicsTickFunction");
static_assert(sizeof(FPawnMovementComponentPostPhysicsTickFunction) == 0x000030, "Wrong size on FPawnMovementComponentPostPhysicsTickFunction");

// ScriptStruct MirMobile.GuildExpeditionTemplate
// 0x0178 (0x0210 - 0x0098)
struct FGuildExpeditionTemplate final : public FRewardCommonTemplate
{
public:
	int32                                         ExpdId;                                            // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpdNameId;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShow;                                            // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpdType;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpdUnlockDevId;                                   // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpdUnlockDevLevel;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpdBackground;                                    // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainBackGroundImg;                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCombatPoint;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCNum;                                             // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MonsterId;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarpLocation;                                      // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpireTime;                                        // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardType1;                             // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardTypeSub1;                          // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardValue1;                            // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardType2;                             // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardTypeSub2;                          // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardValue2;                            // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardType3;                             // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardTypeSub3;                          // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardValue3;                            // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildMemberClearGiftId;                            // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContributeGroup;                                   // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PortraitID;                                        // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ClassItemview01;                                   // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemview02;                                   // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemview03;                                   // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemview04;                                   // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemview05;                                   // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemview06;                                   // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Stage_Story;                                       // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ContentsOpen;                                      // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContentsInterval;                                  // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsCreateDay;                                 // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsCreateTime;                                // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsCreateDuration;                            // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostType1;                                      // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostTypeSub1;                                   // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostValue1;                                     // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostType2;                                      // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostTypeSub2;                                   // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostValue2;                                     // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostType3;                                      // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostTypeSub3;                                   // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostValue3;                                     // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostTypeAdd;                                    // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostTypeSubAdd;                                 // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenCostValueAdd;                                   // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContributeRewardCnt;                               // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddContributeRewardCnt;                            // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLevel;                                          // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MonThumbnail;                                      // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         GuildChallangeReward01;                            // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildChallangeReward02;                            // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildChallangeReward03;                            // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildChallangeReward04;                            // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildChallangeReward05;                            // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x14];                                     // 0x01FC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildExpeditionTemplate) == 0x000008, "Wrong alignment on FGuildExpeditionTemplate");
static_assert(sizeof(FGuildExpeditionTemplate) == 0x000210, "Wrong size on FGuildExpeditionTemplate");
static_assert(offsetof(FGuildExpeditionTemplate, ExpdId) == 0x000098, "Member 'FGuildExpeditionTemplate::ExpdId' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ExpdNameId) == 0x00009C, "Member 'FGuildExpeditionTemplate::ExpdNameId' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, IsShow) == 0x0000A0, "Member 'FGuildExpeditionTemplate::IsShow' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ExpdType) == 0x0000A4, "Member 'FGuildExpeditionTemplate::ExpdType' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ExpdUnlockDevId) == 0x0000A8, "Member 'FGuildExpeditionTemplate::ExpdUnlockDevId' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ExpdUnlockDevLevel) == 0x0000AC, "Member 'FGuildExpeditionTemplate::ExpdUnlockDevLevel' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ExpdBackground) == 0x0000B0, "Member 'FGuildExpeditionTemplate::ExpdBackground' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, MainBackGroundImg) == 0x0000B4, "Member 'FGuildExpeditionTemplate::MainBackGroundImg' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ReqCombatPoint) == 0x0000B8, "Member 'FGuildExpeditionTemplate::ReqCombatPoint' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, PCNum) == 0x0000BC, "Member 'FGuildExpeditionTemplate::PCNum' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, MonsterId) == 0x0000C0, "Member 'FGuildExpeditionTemplate::MonsterId' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, StageID) == 0x0000D0, "Member 'FGuildExpeditionTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, WarpLocation) == 0x0000D4, "Member 'FGuildExpeditionTemplate::WarpLocation' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ExpireTime) == 0x0000D8, "Member 'FGuildExpeditionTemplate::ExpireTime' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildClearRewardType1) == 0x0000DC, "Member 'FGuildExpeditionTemplate::GuildClearRewardType1' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildClearRewardTypeSub1) == 0x0000E0, "Member 'FGuildExpeditionTemplate::GuildClearRewardTypeSub1' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildClearRewardValue1) == 0x0000E4, "Member 'FGuildExpeditionTemplate::GuildClearRewardValue1' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildClearRewardType2) == 0x0000E8, "Member 'FGuildExpeditionTemplate::GuildClearRewardType2' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildClearRewardTypeSub2) == 0x0000EC, "Member 'FGuildExpeditionTemplate::GuildClearRewardTypeSub2' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildClearRewardValue2) == 0x0000F0, "Member 'FGuildExpeditionTemplate::GuildClearRewardValue2' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildClearRewardType3) == 0x0000F4, "Member 'FGuildExpeditionTemplate::GuildClearRewardType3' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildClearRewardTypeSub3) == 0x0000F8, "Member 'FGuildExpeditionTemplate::GuildClearRewardTypeSub3' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildClearRewardValue3) == 0x0000FC, "Member 'FGuildExpeditionTemplate::GuildClearRewardValue3' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildMemberClearGiftId) == 0x000100, "Member 'FGuildExpeditionTemplate::GuildMemberClearGiftId' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ContributeGroup) == 0x000104, "Member 'FGuildExpeditionTemplate::ContributeGroup' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, PortraitID) == 0x000108, "Member 'FGuildExpeditionTemplate::PortraitID' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ClassItemview01) == 0x000110, "Member 'FGuildExpeditionTemplate::ClassItemview01' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ClassItemview02) == 0x000120, "Member 'FGuildExpeditionTemplate::ClassItemview02' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ClassItemview03) == 0x000130, "Member 'FGuildExpeditionTemplate::ClassItemview03' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ClassItemview04) == 0x000140, "Member 'FGuildExpeditionTemplate::ClassItemview04' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ClassItemview05) == 0x000150, "Member 'FGuildExpeditionTemplate::ClassItemview05' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ClassItemview06) == 0x000160, "Member 'FGuildExpeditionTemplate::ClassItemview06' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, Stage_Story) == 0x000170, "Member 'FGuildExpeditionTemplate::Stage_Story' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ContentsOpen) == 0x000178, "Member 'FGuildExpeditionTemplate::ContentsOpen' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ContentsInterval) == 0x000188, "Member 'FGuildExpeditionTemplate::ContentsInterval' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ContentsCreateDay) == 0x00018C, "Member 'FGuildExpeditionTemplate::ContentsCreateDay' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ContentsCreateTime) == 0x000190, "Member 'FGuildExpeditionTemplate::ContentsCreateTime' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ContentsCreateDuration) == 0x000194, "Member 'FGuildExpeditionTemplate::ContentsCreateDuration' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostType1) == 0x000198, "Member 'FGuildExpeditionTemplate::GenCostType1' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostTypeSub1) == 0x00019C, "Member 'FGuildExpeditionTemplate::GenCostTypeSub1' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostValue1) == 0x0001A0, "Member 'FGuildExpeditionTemplate::GenCostValue1' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostType2) == 0x0001A4, "Member 'FGuildExpeditionTemplate::GenCostType2' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostTypeSub2) == 0x0001A8, "Member 'FGuildExpeditionTemplate::GenCostTypeSub2' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostValue2) == 0x0001AC, "Member 'FGuildExpeditionTemplate::GenCostValue2' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostType3) == 0x0001B0, "Member 'FGuildExpeditionTemplate::GenCostType3' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostTypeSub3) == 0x0001B4, "Member 'FGuildExpeditionTemplate::GenCostTypeSub3' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostValue3) == 0x0001B8, "Member 'FGuildExpeditionTemplate::GenCostValue3' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostTypeAdd) == 0x0001BC, "Member 'FGuildExpeditionTemplate::GenCostTypeAdd' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostTypeSubAdd) == 0x0001C0, "Member 'FGuildExpeditionTemplate::GenCostTypeSubAdd' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GenCostValueAdd) == 0x0001C4, "Member 'FGuildExpeditionTemplate::GenCostValueAdd' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, ContributeRewardCnt) == 0x0001C8, "Member 'FGuildExpeditionTemplate::ContributeRewardCnt' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, AddContributeRewardCnt) == 0x0001CC, "Member 'FGuildExpeditionTemplate::AddContributeRewardCnt' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, MinLevel) == 0x0001D0, "Member 'FGuildExpeditionTemplate::MinLevel' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, MaxLevel) == 0x0001D4, "Member 'FGuildExpeditionTemplate::MaxLevel' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, MonThumbnail) == 0x0001D8, "Member 'FGuildExpeditionTemplate::MonThumbnail' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildChallangeReward01) == 0x0001E8, "Member 'FGuildExpeditionTemplate::GuildChallangeReward01' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildChallangeReward02) == 0x0001EC, "Member 'FGuildExpeditionTemplate::GuildChallangeReward02' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildChallangeReward03) == 0x0001F0, "Member 'FGuildExpeditionTemplate::GuildChallangeReward03' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildChallangeReward04) == 0x0001F4, "Member 'FGuildExpeditionTemplate::GuildChallangeReward04' has a wrong offset!");
static_assert(offsetof(FGuildExpeditionTemplate, GuildChallangeReward05) == 0x0001F8, "Member 'FGuildExpeditionTemplate::GuildChallangeReward05' has a wrong offset!");

// ScriptStruct MirMobile.RankingCategoryTemplate
// 0x0018 (0x0020 - 0x0008)
struct FRankingCategoryTemplate final : public FTableRowBase
{
public:
	int32                                         CategoryID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HigherCategoryId;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryNameStrId;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryPointStrId;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryIconId;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankingCategoryTemplate) == 0x000008, "Wrong alignment on FRankingCategoryTemplate");
static_assert(sizeof(FRankingCategoryTemplate) == 0x000020, "Wrong size on FRankingCategoryTemplate");
static_assert(offsetof(FRankingCategoryTemplate, CategoryID) == 0x000008, "Member 'FRankingCategoryTemplate::CategoryID' has a wrong offset!");
static_assert(offsetof(FRankingCategoryTemplate, HigherCategoryId) == 0x00000C, "Member 'FRankingCategoryTemplate::HigherCategoryId' has a wrong offset!");
static_assert(offsetof(FRankingCategoryTemplate, CategoryNameStrId) == 0x000010, "Member 'FRankingCategoryTemplate::CategoryNameStrId' has a wrong offset!");
static_assert(offsetof(FRankingCategoryTemplate, CategoryPointStrId) == 0x000014, "Member 'FRankingCategoryTemplate::CategoryPointStrId' has a wrong offset!");
static_assert(offsetof(FRankingCategoryTemplate, CategoryIconId) == 0x000018, "Member 'FRankingCategoryTemplate::CategoryIconId' has a wrong offset!");

// ScriptStruct MirMobile.ItemAttributeTemplate
// 0x0060 (0x0068 - 0x0008)
struct FItemAttributeTemplate final : public FTableRowBase
{
public:
	int32                                         ItemId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1Type;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1Value;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2Type;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2Value;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute3Type;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute3Value;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute4Type;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute4Value;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute5Type;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute5Value;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute6Type;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute6Value;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute7Type;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute7Value;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId01;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId02;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId03;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomOptionCountMax;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StampOptionGroupId;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomOptionGroupId;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSpecialOptionCountMax;                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialRandomOptionGroupId;                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefineGroup;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemAttributeTemplate) == 0x000008, "Wrong alignment on FItemAttributeTemplate");
static_assert(sizeof(FItemAttributeTemplate) == 0x000068, "Wrong size on FItemAttributeTemplate");
static_assert(offsetof(FItemAttributeTemplate, ItemId) == 0x000008, "Member 'FItemAttributeTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute1Type) == 0x00000C, "Member 'FItemAttributeTemplate::Attribute1Type' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute1Value) == 0x000010, "Member 'FItemAttributeTemplate::Attribute1Value' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute2Type) == 0x000014, "Member 'FItemAttributeTemplate::Attribute2Type' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute2Value) == 0x000018, "Member 'FItemAttributeTemplate::Attribute2Value' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute3Type) == 0x00001C, "Member 'FItemAttributeTemplate::Attribute3Type' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute3Value) == 0x000020, "Member 'FItemAttributeTemplate::Attribute3Value' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute4Type) == 0x000024, "Member 'FItemAttributeTemplate::Attribute4Type' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute4Value) == 0x000028, "Member 'FItemAttributeTemplate::Attribute4Value' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute5Type) == 0x00002C, "Member 'FItemAttributeTemplate::Attribute5Type' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute5Value) == 0x000030, "Member 'FItemAttributeTemplate::Attribute5Value' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute6Type) == 0x000034, "Member 'FItemAttributeTemplate::Attribute6Type' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute6Value) == 0x000038, "Member 'FItemAttributeTemplate::Attribute6Value' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute7Type) == 0x00003C, "Member 'FItemAttributeTemplate::Attribute7Type' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, Attribute7Value) == 0x000040, "Member 'FItemAttributeTemplate::Attribute7Value' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, PassiveId01) == 0x000044, "Member 'FItemAttributeTemplate::PassiveId01' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, PassiveId02) == 0x000048, "Member 'FItemAttributeTemplate::PassiveId02' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, PassiveId03) == 0x00004C, "Member 'FItemAttributeTemplate::PassiveId03' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, RandomOptionCountMax) == 0x000050, "Member 'FItemAttributeTemplate::RandomOptionCountMax' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, StampOptionGroupId) == 0x000054, "Member 'FItemAttributeTemplate::StampOptionGroupId' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, RandomOptionGroupId) == 0x000058, "Member 'FItemAttributeTemplate::RandomOptionGroupId' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, RandomSpecialOptionCountMax) == 0x00005C, "Member 'FItemAttributeTemplate::RandomSpecialOptionCountMax' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, SpecialRandomOptionGroupId) == 0x000060, "Member 'FItemAttributeTemplate::SpecialRandomOptionGroupId' has a wrong offset!");
static_assert(offsetof(FItemAttributeTemplate, RefineGroup) == 0x000064, "Member 'FItemAttributeTemplate::RefineGroup' has a wrong offset!");

// ScriptStruct MirMobile.GuildFameCategoryTemplate
// 0x0018 (0x0020 - 0x0008)
struct FGuildFameCategoryTemplate final : public FTableRowBase
{
public:
	int32                                         CategoryID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryType;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighCategoryId;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryNameStrId;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryIconId;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildFameCategoryTemplate) == 0x000008, "Wrong alignment on FGuildFameCategoryTemplate");
static_assert(sizeof(FGuildFameCategoryTemplate) == 0x000020, "Wrong size on FGuildFameCategoryTemplate");
static_assert(offsetof(FGuildFameCategoryTemplate, CategoryID) == 0x000008, "Member 'FGuildFameCategoryTemplate::CategoryID' has a wrong offset!");
static_assert(offsetof(FGuildFameCategoryTemplate, CategoryType) == 0x00000C, "Member 'FGuildFameCategoryTemplate::CategoryType' has a wrong offset!");
static_assert(offsetof(FGuildFameCategoryTemplate, HighCategoryId) == 0x000010, "Member 'FGuildFameCategoryTemplate::HighCategoryId' has a wrong offset!");
static_assert(offsetof(FGuildFameCategoryTemplate, CategoryNameStrId) == 0x000014, "Member 'FGuildFameCategoryTemplate::CategoryNameStrId' has a wrong offset!");
static_assert(offsetof(FGuildFameCategoryTemplate, CategoryIconId) == 0x000018, "Member 'FGuildFameCategoryTemplate::CategoryIconId' has a wrong offset!");

// ScriptStruct MirMobile.GuildGiftLevelTemplate
// 0x0018 (0x0020 - 0x0008)
struct FGuildGiftLevelTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftLevel;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqExptoNextLevel;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqOpenKeyNum;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildGiftId;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildGiftLevelTemplate) == 0x000008, "Wrong alignment on FGuildGiftLevelTemplate");
static_assert(sizeof(FGuildGiftLevelTemplate) == 0x000020, "Wrong size on FGuildGiftLevelTemplate");
static_assert(offsetof(FGuildGiftLevelTemplate, Name) == 0x000008, "Member 'FGuildGiftLevelTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildGiftLevelTemplate, GiftLevel) == 0x00000C, "Member 'FGuildGiftLevelTemplate::GiftLevel' has a wrong offset!");
static_assert(offsetof(FGuildGiftLevelTemplate, ReqExptoNextLevel) == 0x000010, "Member 'FGuildGiftLevelTemplate::ReqExptoNextLevel' has a wrong offset!");
static_assert(offsetof(FGuildGiftLevelTemplate, ReqOpenKeyNum) == 0x000014, "Member 'FGuildGiftLevelTemplate::ReqOpenKeyNum' has a wrong offset!");
static_assert(offsetof(FGuildGiftLevelTemplate, GuildGiftId) == 0x000018, "Member 'FGuildGiftLevelTemplate::GuildGiftId' has a wrong offset!");

// ScriptStruct MirMobile.GuildGiftTemplate
// 0x00C8 (0x00D0 - 0x0008)
struct FGuildGiftTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTabNo;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftName;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftIcon;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconGrade;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftExp;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftGoldenKey;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftSelectCnt;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType1;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub1;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType2;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub2;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType3;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub3;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType4;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub4;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType5;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub5;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType6;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub6;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType7;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub7;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType8;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub8;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType9;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub9;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType10;                                        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub10;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType11;                                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub11;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType12;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub12;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType13;                                        // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub13;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType14;                                        // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub14;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType15;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub15;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType16;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub16;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType17;                                        // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub17;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType18;                                        // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub18;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType19;                                        // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub19;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftType20;                                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiftTypeSub20;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildGiftTemplate) == 0x000008, "Wrong alignment on FGuildGiftTemplate");
static_assert(sizeof(FGuildGiftTemplate) == 0x0000D0, "Wrong size on FGuildGiftTemplate");
static_assert(offsetof(FGuildGiftTemplate, Name) == 0x000008, "Member 'FGuildGiftTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftId) == 0x00000C, "Member 'FGuildGiftTemplate::GiftId' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTabNo) == 0x000010, "Member 'FGuildGiftTemplate::GiftTabNo' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftName) == 0x000014, "Member 'FGuildGiftTemplate::GiftName' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftIcon) == 0x000018, "Member 'FGuildGiftTemplate::GiftIcon' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, IconGrade) == 0x00001C, "Member 'FGuildGiftTemplate::IconGrade' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftExp) == 0x000020, "Member 'FGuildGiftTemplate::GiftExp' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftGoldenKey) == 0x000024, "Member 'FGuildGiftTemplate::GiftGoldenKey' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftSelectCnt) == 0x000028, "Member 'FGuildGiftTemplate::GiftSelectCnt' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType1) == 0x00002C, "Member 'FGuildGiftTemplate::GiftType1' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub1) == 0x000030, "Member 'FGuildGiftTemplate::GiftTypeSub1' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType2) == 0x000034, "Member 'FGuildGiftTemplate::GiftType2' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub2) == 0x000038, "Member 'FGuildGiftTemplate::GiftTypeSub2' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType3) == 0x00003C, "Member 'FGuildGiftTemplate::GiftType3' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub3) == 0x000040, "Member 'FGuildGiftTemplate::GiftTypeSub3' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType4) == 0x000044, "Member 'FGuildGiftTemplate::GiftType4' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub4) == 0x000048, "Member 'FGuildGiftTemplate::GiftTypeSub4' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType5) == 0x00004C, "Member 'FGuildGiftTemplate::GiftType5' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub5) == 0x000050, "Member 'FGuildGiftTemplate::GiftTypeSub5' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType6) == 0x000054, "Member 'FGuildGiftTemplate::GiftType6' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub6) == 0x000058, "Member 'FGuildGiftTemplate::GiftTypeSub6' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType7) == 0x00005C, "Member 'FGuildGiftTemplate::GiftType7' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub7) == 0x000060, "Member 'FGuildGiftTemplate::GiftTypeSub7' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType8) == 0x000064, "Member 'FGuildGiftTemplate::GiftType8' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub8) == 0x000068, "Member 'FGuildGiftTemplate::GiftTypeSub8' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType9) == 0x00006C, "Member 'FGuildGiftTemplate::GiftType9' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub9) == 0x000070, "Member 'FGuildGiftTemplate::GiftTypeSub9' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType10) == 0x000074, "Member 'FGuildGiftTemplate::GiftType10' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub10) == 0x000078, "Member 'FGuildGiftTemplate::GiftTypeSub10' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType11) == 0x00007C, "Member 'FGuildGiftTemplate::GiftType11' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub11) == 0x000080, "Member 'FGuildGiftTemplate::GiftTypeSub11' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType12) == 0x000084, "Member 'FGuildGiftTemplate::GiftType12' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub12) == 0x000088, "Member 'FGuildGiftTemplate::GiftTypeSub12' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType13) == 0x00008C, "Member 'FGuildGiftTemplate::GiftType13' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub13) == 0x000090, "Member 'FGuildGiftTemplate::GiftTypeSub13' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType14) == 0x000094, "Member 'FGuildGiftTemplate::GiftType14' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub14) == 0x000098, "Member 'FGuildGiftTemplate::GiftTypeSub14' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType15) == 0x00009C, "Member 'FGuildGiftTemplate::GiftType15' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub15) == 0x0000A0, "Member 'FGuildGiftTemplate::GiftTypeSub15' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType16) == 0x0000A4, "Member 'FGuildGiftTemplate::GiftType16' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub16) == 0x0000A8, "Member 'FGuildGiftTemplate::GiftTypeSub16' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType17) == 0x0000AC, "Member 'FGuildGiftTemplate::GiftType17' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub17) == 0x0000B0, "Member 'FGuildGiftTemplate::GiftTypeSub17' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType18) == 0x0000B4, "Member 'FGuildGiftTemplate::GiftType18' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub18) == 0x0000B8, "Member 'FGuildGiftTemplate::GiftTypeSub18' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType19) == 0x0000BC, "Member 'FGuildGiftTemplate::GiftType19' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub19) == 0x0000C0, "Member 'FGuildGiftTemplate::GiftTypeSub19' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftType20) == 0x0000C4, "Member 'FGuildGiftTemplate::GiftType20' has a wrong offset!");
static_assert(offsetof(FGuildGiftTemplate, GiftTypeSub20) == 0x0000C8, "Member 'FGuildGiftTemplate::GiftTypeSub20' has a wrong offset!");

// ScriptStruct MirMobile.NpcItemCraftTemplate
// 0x0070 (0x0078 - 0x0008)
struct FNpcItemCraftTemplate final : public FTableRowBase
{
public:
	int32                                         CraftId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetWayType;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostType01;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostCount01;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostType02;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostCount02;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialType01;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialId01;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCount01;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialName01;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialGrade01;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialType02;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialId02;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCount02;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialName02;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialGrade02;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialType03;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialId03;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCount03;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialName03;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialGrade03;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialType04;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialId04;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCount04;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialName04;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialGrade04;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcItemCraftTemplate) == 0x000008, "Wrong alignment on FNpcItemCraftTemplate");
static_assert(sizeof(FNpcItemCraftTemplate) == 0x000078, "Wrong size on FNpcItemCraftTemplate");
static_assert(offsetof(FNpcItemCraftTemplate, CraftId) == 0x000008, "Member 'FNpcItemCraftTemplate::CraftId' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, ItemId) == 0x00000C, "Member 'FNpcItemCraftTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, ItemCount) == 0x000010, "Member 'FNpcItemCraftTemplate::ItemCount' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, GetWayType) == 0x000014, "Member 'FNpcItemCraftTemplate::GetWayType' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, NeedCostType01) == 0x000018, "Member 'FNpcItemCraftTemplate::NeedCostType01' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, NeedCostCount01) == 0x00001C, "Member 'FNpcItemCraftTemplate::NeedCostCount01' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, NeedCostType02) == 0x000020, "Member 'FNpcItemCraftTemplate::NeedCostType02' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, NeedCostCount02) == 0x000024, "Member 'FNpcItemCraftTemplate::NeedCostCount02' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialType01) == 0x000028, "Member 'FNpcItemCraftTemplate::MaterialType01' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialId01) == 0x00002C, "Member 'FNpcItemCraftTemplate::MaterialId01' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialCount01) == 0x000030, "Member 'FNpcItemCraftTemplate::MaterialCount01' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialName01) == 0x000034, "Member 'FNpcItemCraftTemplate::MaterialName01' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialGrade01) == 0x000038, "Member 'FNpcItemCraftTemplate::MaterialGrade01' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialType02) == 0x00003C, "Member 'FNpcItemCraftTemplate::MaterialType02' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialId02) == 0x000040, "Member 'FNpcItemCraftTemplate::MaterialId02' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialCount02) == 0x000044, "Member 'FNpcItemCraftTemplate::MaterialCount02' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialName02) == 0x000048, "Member 'FNpcItemCraftTemplate::MaterialName02' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialGrade02) == 0x00004C, "Member 'FNpcItemCraftTemplate::MaterialGrade02' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialType03) == 0x000050, "Member 'FNpcItemCraftTemplate::MaterialType03' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialId03) == 0x000054, "Member 'FNpcItemCraftTemplate::MaterialId03' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialCount03) == 0x000058, "Member 'FNpcItemCraftTemplate::MaterialCount03' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialName03) == 0x00005C, "Member 'FNpcItemCraftTemplate::MaterialName03' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialGrade03) == 0x000060, "Member 'FNpcItemCraftTemplate::MaterialGrade03' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialType04) == 0x000064, "Member 'FNpcItemCraftTemplate::MaterialType04' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialId04) == 0x000068, "Member 'FNpcItemCraftTemplate::MaterialId04' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialCount04) == 0x00006C, "Member 'FNpcItemCraftTemplate::MaterialCount04' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialName04) == 0x000070, "Member 'FNpcItemCraftTemplate::MaterialName04' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftTemplate, MaterialGrade04) == 0x000074, "Member 'FNpcItemCraftTemplate::MaterialGrade04' has a wrong offset!");

// ScriptStruct MirMobile.GuildHistoryTemplate
// 0x0010 (0x0018 - 0x0008)
struct FGuildHistoryTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryId;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryGroup;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringID;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildHistoryTemplate) == 0x000008, "Wrong alignment on FGuildHistoryTemplate");
static_assert(sizeof(FGuildHistoryTemplate) == 0x000018, "Wrong size on FGuildHistoryTemplate");
static_assert(offsetof(FGuildHistoryTemplate, Name) == 0x000008, "Member 'FGuildHistoryTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildHistoryTemplate, HistoryId) == 0x00000C, "Member 'FGuildHistoryTemplate::HistoryId' has a wrong offset!");
static_assert(offsetof(FGuildHistoryTemplate, HistoryGroup) == 0x000010, "Member 'FGuildHistoryTemplate::HistoryGroup' has a wrong offset!");
static_assert(offsetof(FGuildHistoryTemplate, StringID) == 0x000014, "Member 'FGuildHistoryTemplate::StringID' has a wrong offset!");

// ScriptStruct MirMobile.GuildInfoTemplate
// 0x0108 (0x0110 - 0x0008)
struct FGuildInfoTemplate final : public FTableRowBase
{
public:
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildJoinLevel;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildJoinMaxLevel;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildJoinCombatPoint;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildJoinMaxCombatPoint;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCreationLevel;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCreationCostType;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCreationCostCount;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCreationMembers;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildAllianceCount;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEnemyCount;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildHostilityDeclareGuildMoneyId;                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildHostilityDeclareGuildMoneyValue;              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildHostilityDeclareTimeHour;                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildIdentityChangeCostType;                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildIdentityChangeCostCount;                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildNameChangeCostType;                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildNameChangeCostCount;                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildContributionIconId;                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildExpIconId;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildDevExpIconId;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildLevleIconId;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Support_Point_Max;                           // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildNpcShopSellMoneyMinValue;                     // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildNpcShopSellMoneyMaxValue;                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildNpcShopBuyMoneyMinValue;                      // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildNpcShopBuyMoneyMaxValue;                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildNpcShopReopenRate;                            // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildNpcShopSaveMoneyId;                           // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildNpcShopCommissionRate;                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEntrustSalesDefaultCount;                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildAllianceUnLockDevId;                          // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildAllianceUnLockDevLevel;                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildHostilityDeclareUnLockDevId;                  // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildHostilityDeclareUnLockDevLevel;               // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildWantedUnLockDevId;                            // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildWantedUnLockDevLevel;                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GUILD_WAR_GuildChangeTime_BuffID;                  // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Guild_Donation_DefaultTimeLimit;                   // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sanctum_NeedGuildDevId;                            // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sanctum_Install_ProtectBuffid;                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExceptAttack_Guild_MaxCount;                       // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildDiplomacyRefreshCooldown;                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GUILD_SHOP_USE_GRADE;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCoopMission_DevId;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCoopMission_DevLevel;                         // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCoopMission_DefaultTimeLimit;                 // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCoopMission_MissionAcceptLimitCount;          // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCoopMission_DailyMissionCompleteLimitCount;   // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCoopPointNameSid;                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildCoopPointIcon;                                // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_AttackAlarmTimer_Sec;                        // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_NeedGuildDevId;                              // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_Install_Grade;                               // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_LifeTimeBuffId;                              // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_RewardBuffDelay_Sec;                         // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_Install_ProtectBuffDelay_Sec;                // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_Install_ProtectBuffId;                       // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_Install_ProtectBuffTime_Sec;                 // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_Install_NoneProtectTime_Sec;                 // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_ServiceSeal_BuffId;                          // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_Attack_MailId;                               // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_Install_MailId;                              // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_Destroyed_MailId;                            // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_TimeOut_MailId;                              // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildInfoTemplate) == 0x000008, "Wrong alignment on FGuildInfoTemplate");
static_assert(sizeof(FGuildInfoTemplate) == 0x000110, "Wrong size on FGuildInfoTemplate");
static_assert(offsetof(FGuildInfoTemplate, Index) == 0x000008, "Member 'FGuildInfoTemplate::Index' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildJoinLevel) == 0x00000C, "Member 'FGuildInfoTemplate::GuildJoinLevel' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildJoinMaxLevel) == 0x000010, "Member 'FGuildInfoTemplate::GuildJoinMaxLevel' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildJoinCombatPoint) == 0x000014, "Member 'FGuildInfoTemplate::GuildJoinCombatPoint' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildJoinMaxCombatPoint) == 0x000018, "Member 'FGuildInfoTemplate::GuildJoinMaxCombatPoint' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCreationLevel) == 0x00001C, "Member 'FGuildInfoTemplate::GuildCreationLevel' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCreationCostType) == 0x000020, "Member 'FGuildInfoTemplate::GuildCreationCostType' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCreationCostCount) == 0x000024, "Member 'FGuildInfoTemplate::GuildCreationCostCount' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCreationMembers) == 0x000028, "Member 'FGuildInfoTemplate::GuildCreationMembers' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildAllianceCount) == 0x00002C, "Member 'FGuildInfoTemplate::GuildAllianceCount' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildEnemyCount) == 0x000030, "Member 'FGuildInfoTemplate::GuildEnemyCount' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildHostilityDeclareGuildMoneyId) == 0x000034, "Member 'FGuildInfoTemplate::GuildHostilityDeclareGuildMoneyId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildHostilityDeclareGuildMoneyValue) == 0x000038, "Member 'FGuildInfoTemplate::GuildHostilityDeclareGuildMoneyValue' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildHostilityDeclareTimeHour) == 0x00003C, "Member 'FGuildInfoTemplate::GuildHostilityDeclareTimeHour' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildIdentityChangeCostType) == 0x000040, "Member 'FGuildInfoTemplate::GuildIdentityChangeCostType' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildIdentityChangeCostCount) == 0x000044, "Member 'FGuildInfoTemplate::GuildIdentityChangeCostCount' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildNameChangeCostType) == 0x000048, "Member 'FGuildInfoTemplate::GuildNameChangeCostType' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildNameChangeCostCount) == 0x00004C, "Member 'FGuildInfoTemplate::GuildNameChangeCostCount' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildContributionIconId) == 0x000050, "Member 'FGuildInfoTemplate::GuildContributionIconId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildExpIconId) == 0x000054, "Member 'FGuildInfoTemplate::GuildExpIconId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildDevExpIconId) == 0x000058, "Member 'FGuildInfoTemplate::GuildDevExpIconId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildLevleIconId) == 0x00005C, "Member 'FGuildInfoTemplate::GuildLevleIconId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Guild_Support_Point_Max) == 0x000060, "Member 'FGuildInfoTemplate::Guild_Support_Point_Max' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildNpcShopSellMoneyMinValue) == 0x000064, "Member 'FGuildInfoTemplate::GuildNpcShopSellMoneyMinValue' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildNpcShopSellMoneyMaxValue) == 0x000068, "Member 'FGuildInfoTemplate::GuildNpcShopSellMoneyMaxValue' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildNpcShopBuyMoneyMinValue) == 0x00006C, "Member 'FGuildInfoTemplate::GuildNpcShopBuyMoneyMinValue' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildNpcShopBuyMoneyMaxValue) == 0x000070, "Member 'FGuildInfoTemplate::GuildNpcShopBuyMoneyMaxValue' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildNpcShopReopenRate) == 0x000074, "Member 'FGuildInfoTemplate::GuildNpcShopReopenRate' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildNpcShopSaveMoneyId) == 0x000078, "Member 'FGuildInfoTemplate::GuildNpcShopSaveMoneyId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildNpcShopCommissionRate) == 0x00007C, "Member 'FGuildInfoTemplate::GuildNpcShopCommissionRate' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildEntrustSalesDefaultCount) == 0x000080, "Member 'FGuildInfoTemplate::GuildEntrustSalesDefaultCount' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildAllianceUnLockDevId) == 0x000084, "Member 'FGuildInfoTemplate::GuildAllianceUnLockDevId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildAllianceUnLockDevLevel) == 0x000088, "Member 'FGuildInfoTemplate::GuildAllianceUnLockDevLevel' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildHostilityDeclareUnLockDevId) == 0x00008C, "Member 'FGuildInfoTemplate::GuildHostilityDeclareUnLockDevId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildHostilityDeclareUnLockDevLevel) == 0x000090, "Member 'FGuildInfoTemplate::GuildHostilityDeclareUnLockDevLevel' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildWantedUnLockDevId) == 0x000094, "Member 'FGuildInfoTemplate::GuildWantedUnLockDevId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildWantedUnLockDevLevel) == 0x000098, "Member 'FGuildInfoTemplate::GuildWantedUnLockDevLevel' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GUILD_WAR_GuildChangeTime_BuffID) == 0x00009C, "Member 'FGuildInfoTemplate::GUILD_WAR_GuildChangeTime_BuffID' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Guild_Donation_DefaultTimeLimit) == 0x0000A0, "Member 'FGuildInfoTemplate::Guild_Donation_DefaultTimeLimit' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Sanctum_NeedGuildDevId) == 0x0000A4, "Member 'FGuildInfoTemplate::Sanctum_NeedGuildDevId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Sanctum_Install_ProtectBuffid) == 0x0000A8, "Member 'FGuildInfoTemplate::Sanctum_Install_ProtectBuffid' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, ExceptAttack_Guild_MaxCount) == 0x0000AC, "Member 'FGuildInfoTemplate::ExceptAttack_Guild_MaxCount' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildDiplomacyRefreshCooldown) == 0x0000B0, "Member 'FGuildInfoTemplate::GuildDiplomacyRefreshCooldown' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GUILD_SHOP_USE_GRADE) == 0x0000B4, "Member 'FGuildInfoTemplate::GUILD_SHOP_USE_GRADE' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCoopMission_DevId) == 0x0000B8, "Member 'FGuildInfoTemplate::GuildCoopMission_DevId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCoopMission_DevLevel) == 0x0000BC, "Member 'FGuildInfoTemplate::GuildCoopMission_DevLevel' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCoopMission_DefaultTimeLimit) == 0x0000C0, "Member 'FGuildInfoTemplate::GuildCoopMission_DefaultTimeLimit' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCoopMission_MissionAcceptLimitCount) == 0x0000C4, "Member 'FGuildInfoTemplate::GuildCoopMission_MissionAcceptLimitCount' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCoopMission_DailyMissionCompleteLimitCount) == 0x0000C8, "Member 'FGuildInfoTemplate::GuildCoopMission_DailyMissionCompleteLimitCount' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCoopPointNameSid) == 0x0000CC, "Member 'FGuildInfoTemplate::GuildCoopPointNameSid' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, GuildCoopPointIcon) == 0x0000D0, "Member 'FGuildInfoTemplate::GuildCoopPointIcon' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_AttackAlarmTimer_Sec) == 0x0000D4, "Member 'FGuildInfoTemplate::Altar_AttackAlarmTimer_Sec' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_NeedGuildDevId) == 0x0000D8, "Member 'FGuildInfoTemplate::Altar_NeedGuildDevId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_Install_Grade) == 0x0000DC, "Member 'FGuildInfoTemplate::Altar_Install_Grade' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_LifeTimeBuffId) == 0x0000E0, "Member 'FGuildInfoTemplate::Altar_LifeTimeBuffId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_RewardBuffDelay_Sec) == 0x0000E4, "Member 'FGuildInfoTemplate::Altar_RewardBuffDelay_Sec' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_Install_ProtectBuffDelay_Sec) == 0x0000E8, "Member 'FGuildInfoTemplate::Altar_Install_ProtectBuffDelay_Sec' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_Install_ProtectBuffId) == 0x0000EC, "Member 'FGuildInfoTemplate::Altar_Install_ProtectBuffId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_Install_ProtectBuffTime_Sec) == 0x0000F0, "Member 'FGuildInfoTemplate::Altar_Install_ProtectBuffTime_Sec' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_Install_NoneProtectTime_Sec) == 0x0000F4, "Member 'FGuildInfoTemplate::Altar_Install_NoneProtectTime_Sec' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_ServiceSeal_BuffId) == 0x0000F8, "Member 'FGuildInfoTemplate::Altar_ServiceSeal_BuffId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_Attack_MailId) == 0x0000FC, "Member 'FGuildInfoTemplate::Altar_Attack_MailId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_Install_MailId) == 0x000100, "Member 'FGuildInfoTemplate::Altar_Install_MailId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_Destroyed_MailId) == 0x000104, "Member 'FGuildInfoTemplate::Altar_Destroyed_MailId' has a wrong offset!");
static_assert(offsetof(FGuildInfoTemplate, Altar_TimeOut_MailId) == 0x000108, "Member 'FGuildInfoTemplate::Altar_TimeOut_MailId' has a wrong offset!");

// ScriptStruct MirMobile.GuildLevelTemplate
// 0x0010 (0x0018 - 0x0008)
struct FGuildLevelTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqExp;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildLevelTemplate) == 0x000008, "Wrong alignment on FGuildLevelTemplate");
static_assert(sizeof(FGuildLevelTemplate) == 0x000018, "Wrong size on FGuildLevelTemplate");
static_assert(offsetof(FGuildLevelTemplate, Name) == 0x000008, "Member 'FGuildLevelTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildLevelTemplate, Level) == 0x00000C, "Member 'FGuildLevelTemplate::Level' has a wrong offset!");
static_assert(offsetof(FGuildLevelTemplate, ReqExp) == 0x000010, "Member 'FGuildLevelTemplate::ReqExp' has a wrong offset!");

// ScriptStruct MirMobile.GuildMarkTemplate
// 0x0010 (0x0018 - 0x0008)
struct FGuildMarkTemplate final : public FTableRowBase
{
public:
	int32                                         MarkId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarkType;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourceId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildMarkTemplate) == 0x000008, "Wrong alignment on FGuildMarkTemplate");
static_assert(sizeof(FGuildMarkTemplate) == 0x000018, "Wrong size on FGuildMarkTemplate");
static_assert(offsetof(FGuildMarkTemplate, MarkId) == 0x000008, "Member 'FGuildMarkTemplate::MarkId' has a wrong offset!");
static_assert(offsetof(FGuildMarkTemplate, MarkType) == 0x00000C, "Member 'FGuildMarkTemplate::MarkType' has a wrong offset!");
static_assert(offsetof(FGuildMarkTemplate, ResourceId) == 0x000010, "Member 'FGuildMarkTemplate::ResourceId' has a wrong offset!");

// ScriptStruct MirMobile.GuildMoneyExchangeTemplate
// 0x0048 (0x0050 - 0x0008)
struct FGuildMoneyExchangeTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeType;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyId_Send;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyId_Receive;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeRate;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeStringId;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PayCommissionRate;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnLockDevId;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonationReward_MoneyId;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonationReward_MoneyRate;                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonationReward_GuildExpRate;                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonationMoneyMinValue;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PayMoneyMinValue;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeMoneyMinValue;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonationMoneyLimit;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DonationLevelLimit;                                // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildMoneyExchangeTemplate) == 0x000008, "Wrong alignment on FGuildMoneyExchangeTemplate");
static_assert(sizeof(FGuildMoneyExchangeTemplate) == 0x000050, "Wrong size on FGuildMoneyExchangeTemplate");
static_assert(offsetof(FGuildMoneyExchangeTemplate, Name) == 0x000008, "Member 'FGuildMoneyExchangeTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, ExchangeId) == 0x00000C, "Member 'FGuildMoneyExchangeTemplate::ExchangeId' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, ExchangeType) == 0x000010, "Member 'FGuildMoneyExchangeTemplate::ExchangeType' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, MoneyId_Send) == 0x000014, "Member 'FGuildMoneyExchangeTemplate::MoneyId_Send' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, MoneyId_Receive) == 0x000018, "Member 'FGuildMoneyExchangeTemplate::MoneyId_Receive' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, ExchangeRate) == 0x00001C, "Member 'FGuildMoneyExchangeTemplate::ExchangeRate' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, ExchangeStringId) == 0x000020, "Member 'FGuildMoneyExchangeTemplate::ExchangeStringId' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, PayCommissionRate) == 0x000024, "Member 'FGuildMoneyExchangeTemplate::PayCommissionRate' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, UnLockDevId) == 0x000028, "Member 'FGuildMoneyExchangeTemplate::UnLockDevId' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, DonationReward_MoneyId) == 0x00002C, "Member 'FGuildMoneyExchangeTemplate::DonationReward_MoneyId' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, DonationReward_MoneyRate) == 0x000030, "Member 'FGuildMoneyExchangeTemplate::DonationReward_MoneyRate' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, DonationReward_GuildExpRate) == 0x000034, "Member 'FGuildMoneyExchangeTemplate::DonationReward_GuildExpRate' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, DonationMoneyMinValue) == 0x000038, "Member 'FGuildMoneyExchangeTemplate::DonationMoneyMinValue' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, PayMoneyMinValue) == 0x00003C, "Member 'FGuildMoneyExchangeTemplate::PayMoneyMinValue' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, ChangeMoneyMinValue) == 0x000040, "Member 'FGuildMoneyExchangeTemplate::ChangeMoneyMinValue' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, DonationMoneyLimit) == 0x000044, "Member 'FGuildMoneyExchangeTemplate::DonationMoneyLimit' has a wrong offset!");
static_assert(offsetof(FGuildMoneyExchangeTemplate, DonationLevelLimit) == 0x000048, "Member 'FGuildMoneyExchangeTemplate::DonationLevelLimit' has a wrong offset!");

// ScriptStruct MirMobile.GuildSanctumTemplate
// 0x0010 (0x0018 - 0x0008)
struct FGuildSanctumTemplate final : public FTableRowBase
{
public:
	int32                                         GuildSanctumId;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Shrine_ObjectId;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sanctum_Monsterid;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnDominionCheck;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildSanctumTemplate) == 0x000008, "Wrong alignment on FGuildSanctumTemplate");
static_assert(sizeof(FGuildSanctumTemplate) == 0x000018, "Wrong size on FGuildSanctumTemplate");
static_assert(offsetof(FGuildSanctumTemplate, GuildSanctumId) == 0x000008, "Member 'FGuildSanctumTemplate::GuildSanctumId' has a wrong offset!");
static_assert(offsetof(FGuildSanctumTemplate, Shrine_ObjectId) == 0x00000C, "Member 'FGuildSanctumTemplate::Shrine_ObjectId' has a wrong offset!");
static_assert(offsetof(FGuildSanctumTemplate, Sanctum_Monsterid) == 0x000010, "Member 'FGuildSanctumTemplate::Sanctum_Monsterid' has a wrong offset!");
static_assert(offsetof(FGuildSanctumTemplate, OwnDominionCheck) == 0x000014, "Member 'FGuildSanctumTemplate::OwnDominionCheck' has a wrong offset!");

// ScriptStruct MirMobile.PetDeckTemplate
// 0x0010 (0x0018 - 0x0008)
struct FPetDeckTemplate final : public FTableRowBase
{
public:
	int32                                         DeckSlotNum;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionType;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionValue;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPetDeckTemplate) == 0x000008, "Wrong alignment on FPetDeckTemplate");
static_assert(sizeof(FPetDeckTemplate) == 0x000018, "Wrong size on FPetDeckTemplate");
static_assert(offsetof(FPetDeckTemplate, DeckSlotNum) == 0x000008, "Member 'FPetDeckTemplate::DeckSlotNum' has a wrong offset!");
static_assert(offsetof(FPetDeckTemplate, OpenConditionType) == 0x00000C, "Member 'FPetDeckTemplate::OpenConditionType' has a wrong offset!");
static_assert(offsetof(FPetDeckTemplate, OpenConditionValue) == 0x000010, "Member 'FPetDeckTemplate::OpenConditionValue' has a wrong offset!");

// ScriptStruct MirMobile.GuildShopTemplate
// 0x0058 (0x0060 - 0x0008)
struct FGuildShopTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopGroup;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopGroupName;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 GuildShopItemUnLockDominionId;                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         GuildShopItemUnLockDevId;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopItemUnLockDevLevel;                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopItemId;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopItemCnt;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopItemRegCostType;                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopItemRegCostTypeSub;                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopItemRegCostValue;                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopItemBuyCostType;                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopItemBuyCostTypeSub;                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildShopItemBuyCostValue;                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyLimitType;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyLimitCount;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyLimitResetId;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildShopTemplate) == 0x000008, "Wrong alignment on FGuildShopTemplate");
static_assert(sizeof(FGuildShopTemplate) == 0x000060, "Wrong size on FGuildShopTemplate");
static_assert(offsetof(FGuildShopTemplate, Name) == 0x000008, "Member 'FGuildShopTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopId) == 0x00000C, "Member 'FGuildShopTemplate::GuildShopId' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopGroup) == 0x000010, "Member 'FGuildShopTemplate::GuildShopGroup' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, ShopGroupName) == 0x000014, "Member 'FGuildShopTemplate::ShopGroupName' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemUnLockDominionId) == 0x000018, "Member 'FGuildShopTemplate::GuildShopItemUnLockDominionId' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemUnLockDevId) == 0x000028, "Member 'FGuildShopTemplate::GuildShopItemUnLockDevId' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemUnLockDevLevel) == 0x00002C, "Member 'FGuildShopTemplate::GuildShopItemUnLockDevLevel' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemId) == 0x000030, "Member 'FGuildShopTemplate::GuildShopItemId' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemCnt) == 0x000034, "Member 'FGuildShopTemplate::GuildShopItemCnt' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemRegCostType) == 0x000038, "Member 'FGuildShopTemplate::GuildShopItemRegCostType' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemRegCostTypeSub) == 0x00003C, "Member 'FGuildShopTemplate::GuildShopItemRegCostTypeSub' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemRegCostValue) == 0x000040, "Member 'FGuildShopTemplate::GuildShopItemRegCostValue' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemBuyCostType) == 0x000044, "Member 'FGuildShopTemplate::GuildShopItemBuyCostType' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemBuyCostTypeSub) == 0x000048, "Member 'FGuildShopTemplate::GuildShopItemBuyCostTypeSub' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, GuildShopItemBuyCostValue) == 0x00004C, "Member 'FGuildShopTemplate::GuildShopItemBuyCostValue' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, BuyLimitType) == 0x000050, "Member 'FGuildShopTemplate::BuyLimitType' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, BuyLimitCount) == 0x000054, "Member 'FGuildShopTemplate::BuyLimitCount' has a wrong offset!");
static_assert(offsetof(FGuildShopTemplate, BuyLimitResetId) == 0x000058, "Member 'FGuildShopTemplate::BuyLimitResetId' has a wrong offset!");

// ScriptStruct MirMobile.MoviePlayTemplate
// 0x0028 (0x0030 - 0x0008)
struct FMoviePlayTemplate final : public FTableRowBase
{
public:
	int32                                         MoviePlayId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkipDelay;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MoviePath;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubtitlePath;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoviePlayTemplate) == 0x000008, "Wrong alignment on FMoviePlayTemplate");
static_assert(sizeof(FMoviePlayTemplate) == 0x000030, "Wrong size on FMoviePlayTemplate");
static_assert(offsetof(FMoviePlayTemplate, MoviePlayId) == 0x000008, "Member 'FMoviePlayTemplate::MoviePlayId' has a wrong offset!");
static_assert(offsetof(FMoviePlayTemplate, SkipDelay) == 0x00000C, "Member 'FMoviePlayTemplate::SkipDelay' has a wrong offset!");
static_assert(offsetof(FMoviePlayTemplate, MoviePath) == 0x000010, "Member 'FMoviePlayTemplate::MoviePath' has a wrong offset!");
static_assert(offsetof(FMoviePlayTemplate, SubtitlePath) == 0x000020, "Member 'FMoviePlayTemplate::SubtitlePath' has a wrong offset!");

// ScriptStruct MirMobile.GuildStatusTemplate
// 0x0010 (0x0018 - 0x0008)
struct FGuildStatusTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringID;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueFormat;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildStatusTemplate) == 0x000008, "Wrong alignment on FGuildStatusTemplate");
static_assert(sizeof(FGuildStatusTemplate) == 0x000018, "Wrong size on FGuildStatusTemplate");
static_assert(offsetof(FGuildStatusTemplate, Name) == 0x000008, "Member 'FGuildStatusTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildStatusTemplate, StatusId) == 0x00000C, "Member 'FGuildStatusTemplate::StatusId' has a wrong offset!");
static_assert(offsetof(FGuildStatusTemplate, StringID) == 0x000010, "Member 'FGuildStatusTemplate::StringID' has a wrong offset!");
static_assert(offsetof(FGuildStatusTemplate, ValueFormat) == 0x000014, "Member 'FGuildStatusTemplate::ValueFormat' has a wrong offset!");

// ScriptStruct MirMobile.MultiLanguageTemplate
// 0x0070 (0x0078 - 0x0008)
struct FMultiLanguageTemplate final : public FTableRowBase
{
public:
	int32                                         RawId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsShow;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ISO639Code;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LanguageName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LanguageSelectTitle;                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LagnuageSelectDesc;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LagnuageSelectAccept;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LagnuageSelectCancel;                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Languageicon;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiLanguageTemplate) == 0x000008, "Wrong alignment on FMultiLanguageTemplate");
static_assert(sizeof(FMultiLanguageTemplate) == 0x000078, "Wrong size on FMultiLanguageTemplate");
static_assert(offsetof(FMultiLanguageTemplate, RawId) == 0x000008, "Member 'FMultiLanguageTemplate::RawId' has a wrong offset!");
static_assert(offsetof(FMultiLanguageTemplate, IsShow) == 0x00000C, "Member 'FMultiLanguageTemplate::IsShow' has a wrong offset!");
static_assert(offsetof(FMultiLanguageTemplate, ISO639Code) == 0x000010, "Member 'FMultiLanguageTemplate::ISO639Code' has a wrong offset!");
static_assert(offsetof(FMultiLanguageTemplate, LanguageName) == 0x000020, "Member 'FMultiLanguageTemplate::LanguageName' has a wrong offset!");
static_assert(offsetof(FMultiLanguageTemplate, LanguageSelectTitle) == 0x000030, "Member 'FMultiLanguageTemplate::LanguageSelectTitle' has a wrong offset!");
static_assert(offsetof(FMultiLanguageTemplate, LagnuageSelectDesc) == 0x000040, "Member 'FMultiLanguageTemplate::LagnuageSelectDesc' has a wrong offset!");
static_assert(offsetof(FMultiLanguageTemplate, LagnuageSelectAccept) == 0x000050, "Member 'FMultiLanguageTemplate::LagnuageSelectAccept' has a wrong offset!");
static_assert(offsetof(FMultiLanguageTemplate, LagnuageSelectCancel) == 0x000060, "Member 'FMultiLanguageTemplate::LagnuageSelectCancel' has a wrong offset!");
static_assert(offsetof(FMultiLanguageTemplate, Languageicon) == 0x000070, "Member 'FMultiLanguageTemplate::Languageicon' has a wrong offset!");

// ScriptStruct MirMobile.GuildTournamentInfoTemplate
// 0x00A8 (0x00B0 - 0x0008)
struct FGuildTournamentInfoTemplate final : public FTableRowBase
{
public:
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Contents_OpenDate;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Contents_StartWeek;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Contents_StartWeekInterval;                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestStartDay;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequestStartTime;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestRunTimeMinute;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestValueGuildDevId;                            // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestValueGuildDevLevel;                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEntryNumber_Min;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchOpenDay;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchOpenTime;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGuildEntranceCount;                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndAutoOutTimeSecond;                              // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CalledGameTimeSecond;                              // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CalledGameScore;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CalledGameScoreDifference;                         // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TacticPointRestore;                                // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TacticPoint_Siege;                                 // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TacticPoint_SiegeKeep;                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TacticPoint_BuffMonster;                           // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TacticPoint_Guardian;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TacticPoint_Death;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TacticPoint_Object;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTacticPoint;                                    // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildTournamentInfoTemplate) == 0x000008, "Wrong alignment on FGuildTournamentInfoTemplate");
static_assert(sizeof(FGuildTournamentInfoTemplate) == 0x0000B0, "Wrong size on FGuildTournamentInfoTemplate");
static_assert(offsetof(FGuildTournamentInfoTemplate, Index) == 0x000008, "Member 'FGuildTournamentInfoTemplate::Index' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, Contents_OpenDate) == 0x000010, "Member 'FGuildTournamentInfoTemplate::Contents_OpenDate' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, Contents_StartWeek) == 0x000020, "Member 'FGuildTournamentInfoTemplate::Contents_StartWeek' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, Contents_StartWeekInterval) == 0x000030, "Member 'FGuildTournamentInfoTemplate::Contents_StartWeekInterval' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, NameSId) == 0x000034, "Member 'FGuildTournamentInfoTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, RequestStartDay) == 0x000038, "Member 'FGuildTournamentInfoTemplate::RequestStartDay' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, RequestStartTime) == 0x000040, "Member 'FGuildTournamentInfoTemplate::RequestStartTime' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, RequestRunTimeMinute) == 0x000050, "Member 'FGuildTournamentInfoTemplate::RequestRunTimeMinute' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, RequestValueGuildDevId) == 0x000054, "Member 'FGuildTournamentInfoTemplate::RequestValueGuildDevId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, RequestValueGuildDevLevel) == 0x000058, "Member 'FGuildTournamentInfoTemplate::RequestValueGuildDevLevel' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, GuildEntryNumber_Min) == 0x00005C, "Member 'FGuildTournamentInfoTemplate::GuildEntryNumber_Min' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, MatchOpenDay) == 0x000060, "Member 'FGuildTournamentInfoTemplate::MatchOpenDay' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, MatchOpenTime) == 0x000068, "Member 'FGuildTournamentInfoTemplate::MatchOpenTime' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, MaxGuildEntranceCount) == 0x000078, "Member 'FGuildTournamentInfoTemplate::MaxGuildEntranceCount' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, StageID) == 0x00007C, "Member 'FGuildTournamentInfoTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, EndAutoOutTimeSecond) == 0x000080, "Member 'FGuildTournamentInfoTemplate::EndAutoOutTimeSecond' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, CalledGameTimeSecond) == 0x000084, "Member 'FGuildTournamentInfoTemplate::CalledGameTimeSecond' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, CalledGameScore) == 0x000088, "Member 'FGuildTournamentInfoTemplate::CalledGameScore' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, CalledGameScoreDifference) == 0x00008C, "Member 'FGuildTournamentInfoTemplate::CalledGameScoreDifference' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, TacticPointRestore) == 0x000090, "Member 'FGuildTournamentInfoTemplate::TacticPointRestore' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, TacticPoint_Siege) == 0x000094, "Member 'FGuildTournamentInfoTemplate::TacticPoint_Siege' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, TacticPoint_SiegeKeep) == 0x000098, "Member 'FGuildTournamentInfoTemplate::TacticPoint_SiegeKeep' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, TacticPoint_BuffMonster) == 0x00009C, "Member 'FGuildTournamentInfoTemplate::TacticPoint_BuffMonster' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, TacticPoint_Guardian) == 0x0000A0, "Member 'FGuildTournamentInfoTemplate::TacticPoint_Guardian' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, TacticPoint_Death) == 0x0000A4, "Member 'FGuildTournamentInfoTemplate::TacticPoint_Death' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, TacticPoint_Object) == 0x0000A8, "Member 'FGuildTournamentInfoTemplate::TacticPoint_Object' has a wrong offset!");
static_assert(offsetof(FGuildTournamentInfoTemplate, MaxTacticPoint) == 0x0000AC, "Member 'FGuildTournamentInfoTemplate::MaxTacticPoint' has a wrong offset!");

// ScriptStruct MirMobile.GuildTournamentMonsterTemplate
// 0x0040 (0x0048 - 0x0008)
struct FGuildTournamentMonsterTemplate final : public FTableRowBase
{
public:
	int32                                         MonsterId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterType;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenGroup;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IconID;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DeleteAlarmTimeSecond;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MonsterLocation;                                   // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenTimeSecond;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegenTimeSecond;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeleteTimeSecond;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildTournamentMonsterTemplate) == 0x000008, "Wrong alignment on FGuildTournamentMonsterTemplate");
static_assert(sizeof(FGuildTournamentMonsterTemplate) == 0x000048, "Wrong size on FGuildTournamentMonsterTemplate");
static_assert(offsetof(FGuildTournamentMonsterTemplate, MonsterId) == 0x000008, "Member 'FGuildTournamentMonsterTemplate::MonsterId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentMonsterTemplate, MonsterType) == 0x00000C, "Member 'FGuildTournamentMonsterTemplate::MonsterType' has a wrong offset!");
static_assert(offsetof(FGuildTournamentMonsterTemplate, GenGroup) == 0x000010, "Member 'FGuildTournamentMonsterTemplate::GenGroup' has a wrong offset!");
static_assert(offsetof(FGuildTournamentMonsterTemplate, IconID) == 0x000018, "Member 'FGuildTournamentMonsterTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FGuildTournamentMonsterTemplate, DeleteAlarmTimeSecond) == 0x000028, "Member 'FGuildTournamentMonsterTemplate::DeleteAlarmTimeSecond' has a wrong offset!");
static_assert(offsetof(FGuildTournamentMonsterTemplate, MonsterLocation) == 0x00002C, "Member 'FGuildTournamentMonsterTemplate::MonsterLocation' has a wrong offset!");
static_assert(offsetof(FGuildTournamentMonsterTemplate, OpenTimeSecond) == 0x000038, "Member 'FGuildTournamentMonsterTemplate::OpenTimeSecond' has a wrong offset!");
static_assert(offsetof(FGuildTournamentMonsterTemplate, RegenTimeSecond) == 0x00003C, "Member 'FGuildTournamentMonsterTemplate::RegenTimeSecond' has a wrong offset!");
static_assert(offsetof(FGuildTournamentMonsterTemplate, DeleteTimeSecond) == 0x000040, "Member 'FGuildTournamentMonsterTemplate::DeleteTimeSecond' has a wrong offset!");

// ScriptStruct MirMobile.GuildTournamentRewardTemplate
// 0x0040 (0x0048 - 0x0008)
struct FGuildTournamentRewardTemplate final : public FTableRowBase
{
public:
	int32                                         RewardId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardKind;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardDesc;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGroup;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TournamentPointMin;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TournamentPointMax;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType01;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardId01;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCount01;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType02;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardId02;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCount02;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType03;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardId03;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCount03;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MailPresetId;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildTournamentRewardTemplate) == 0x000008, "Wrong alignment on FGuildTournamentRewardTemplate");
static_assert(sizeof(FGuildTournamentRewardTemplate) == 0x000048, "Wrong size on FGuildTournamentRewardTemplate");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardId) == 0x000008, "Member 'FGuildTournamentRewardTemplate::RewardId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardKind) == 0x00000C, "Member 'FGuildTournamentRewardTemplate::RewardKind' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardDesc) == 0x000010, "Member 'FGuildTournamentRewardTemplate::RewardDesc' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardGroup) == 0x000014, "Member 'FGuildTournamentRewardTemplate::RewardGroup' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, TournamentPointMin) == 0x000018, "Member 'FGuildTournamentRewardTemplate::TournamentPointMin' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, TournamentPointMax) == 0x00001C, "Member 'FGuildTournamentRewardTemplate::TournamentPointMax' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardType01) == 0x000020, "Member 'FGuildTournamentRewardTemplate::RewardType01' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardId01) == 0x000024, "Member 'FGuildTournamentRewardTemplate::RewardId01' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardCount01) == 0x000028, "Member 'FGuildTournamentRewardTemplate::RewardCount01' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardType02) == 0x00002C, "Member 'FGuildTournamentRewardTemplate::RewardType02' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardId02) == 0x000030, "Member 'FGuildTournamentRewardTemplate::RewardId02' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardCount02) == 0x000034, "Member 'FGuildTournamentRewardTemplate::RewardCount02' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardType03) == 0x000038, "Member 'FGuildTournamentRewardTemplate::RewardType03' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardId03) == 0x00003C, "Member 'FGuildTournamentRewardTemplate::RewardId03' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, RewardCount03) == 0x000040, "Member 'FGuildTournamentRewardTemplate::RewardCount03' has a wrong offset!");
static_assert(offsetof(FGuildTournamentRewardTemplate, MailPresetId) == 0x000044, "Member 'FGuildTournamentRewardTemplate::MailPresetId' has a wrong offset!");

// ScriptStruct MirMobile.GuildTournamentTeamTemplate
// 0x0018 (0x0020 - 0x0008)
struct FGuildTournamentTeamTemplate final : public FTableRowBase
{
public:
	int32                                         TeamId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildTournamentTeamTemplate) == 0x000008, "Wrong alignment on FGuildTournamentTeamTemplate");
static_assert(sizeof(FGuildTournamentTeamTemplate) == 0x000020, "Wrong size on FGuildTournamentTeamTemplate");
static_assert(offsetof(FGuildTournamentTeamTemplate, TeamId) == 0x000008, "Member 'FGuildTournamentTeamTemplate::TeamId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTeamTemplate, Location) == 0x00000C, "Member 'FGuildTournamentTeamTemplate::Location' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTeamTemplate, IconID) == 0x000018, "Member 'FGuildTournamentTeamTemplate::IconID' has a wrong offset!");

// ScriptStruct MirMobile.WeaponMaterialData
// 0x0018 (0x0018 - 0x0000)
struct FWeaponMaterialData final
{
public:
	EWeaponMaterialParameterType                  M_eParameterType;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   M_strName;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveBase*                             M_pCurve;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponMaterialData) == 0x000008, "Wrong alignment on FWeaponMaterialData");
static_assert(sizeof(FWeaponMaterialData) == 0x000018, "Wrong size on FWeaponMaterialData");
static_assert(offsetof(FWeaponMaterialData, M_eParameterType) == 0x000000, "Member 'FWeaponMaterialData::M_eParameterType' has a wrong offset!");
static_assert(offsetof(FWeaponMaterialData, M_strName) == 0x000004, "Member 'FWeaponMaterialData::M_strName' has a wrong offset!");
static_assert(offsetof(FWeaponMaterialData, M_pCurve) == 0x000010, "Member 'FWeaponMaterialData::M_pCurve' has a wrong offset!");

// ScriptStruct MirMobile.NicknameTemplate
// 0x0048 (0x0050 - 0x0008)
struct FNicknameTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NameA;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameB;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameA_W;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameB_W;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNicknameTemplate) == 0x000008, "Wrong alignment on FNicknameTemplate");
static_assert(sizeof(FNicknameTemplate) == 0x000050, "Wrong size on FNicknameTemplate");
static_assert(offsetof(FNicknameTemplate, ID) == 0x000008, "Member 'FNicknameTemplate::ID' has a wrong offset!");
static_assert(offsetof(FNicknameTemplate, NameA) == 0x000010, "Member 'FNicknameTemplate::NameA' has a wrong offset!");
static_assert(offsetof(FNicknameTemplate, NameB) == 0x000020, "Member 'FNicknameTemplate::NameB' has a wrong offset!");
static_assert(offsetof(FNicknameTemplate, NameA_W) == 0x000030, "Member 'FNicknameTemplate::NameA_W' has a wrong offset!");
static_assert(offsetof(FNicknameTemplate, NameB_W) == 0x000040, "Member 'FNicknameTemplate::NameB_W' has a wrong offset!");

// ScriptStruct MirMobile.GuildTournamentTerritoryTemplate
// 0x00B8 (0x00C0 - 0x0008)
struct FGuildTournamentTerritoryTemplate final : public FTableRowBase
{
public:
	int32                                         TerritoryId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TerritoryType;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TerritoryNameSID;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TerritoryMonsterId;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildTerritoryMonsterId_01;                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildTerritoryMonsterId_02;                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TerritoryObjectId;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildTerritoryObjectId_01;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildTerritoryObjectId_02;                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TerritoryEffectId;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Add_TerritoryEffectId;                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Add_TerritoryEffectId_Our;                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Add_TerritoryEffectId_Enemy;                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Add_TerritoryEffect_Location;                      // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TerritoryIconId;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                TerritoryLocation;                                 // 0x0090(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Territory_MaxPoint;                                // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Territory_AddPoint;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Territory_FallPoint;                               // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TerritoryEffect_High;                              // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Territory_UIHeight;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TerritoryHudIcon;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TerritoryNamePosition;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillEffectScale;                                  // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildTournamentTerritoryTemplate) == 0x000008, "Wrong alignment on FGuildTournamentTerritoryTemplate");
static_assert(sizeof(FGuildTournamentTerritoryTemplate) == 0x0000C0, "Wrong size on FGuildTournamentTerritoryTemplate");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryId) == 0x000008, "Member 'FGuildTournamentTerritoryTemplate::TerritoryId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryType) == 0x00000C, "Member 'FGuildTournamentTerritoryTemplate::TerritoryType' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryNameSID) == 0x000010, "Member 'FGuildTournamentTerritoryTemplate::TerritoryNameSID' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryMonsterId) == 0x000014, "Member 'FGuildTournamentTerritoryTemplate::TerritoryMonsterId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, GuildTerritoryMonsterId_01) == 0x000018, "Member 'FGuildTournamentTerritoryTemplate::GuildTerritoryMonsterId_01' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, GuildTerritoryMonsterId_02) == 0x00001C, "Member 'FGuildTournamentTerritoryTemplate::GuildTerritoryMonsterId_02' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryObjectId) == 0x000020, "Member 'FGuildTournamentTerritoryTemplate::TerritoryObjectId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, GuildTerritoryObjectId_01) == 0x000024, "Member 'FGuildTournamentTerritoryTemplate::GuildTerritoryObjectId_01' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, GuildTerritoryObjectId_02) == 0x000028, "Member 'FGuildTournamentTerritoryTemplate::GuildTerritoryObjectId_02' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryEffectId) == 0x000030, "Member 'FGuildTournamentTerritoryTemplate::TerritoryEffectId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, Add_TerritoryEffectId) == 0x000040, "Member 'FGuildTournamentTerritoryTemplate::Add_TerritoryEffectId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, Add_TerritoryEffectId_Our) == 0x000050, "Member 'FGuildTournamentTerritoryTemplate::Add_TerritoryEffectId_Our' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, Add_TerritoryEffectId_Enemy) == 0x000060, "Member 'FGuildTournamentTerritoryTemplate::Add_TerritoryEffectId_Enemy' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, Add_TerritoryEffect_Location) == 0x000070, "Member 'FGuildTournamentTerritoryTemplate::Add_TerritoryEffect_Location' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryIconId) == 0x000080, "Member 'FGuildTournamentTerritoryTemplate::TerritoryIconId' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryLocation) == 0x000090, "Member 'FGuildTournamentTerritoryTemplate::TerritoryLocation' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, Territory_MaxPoint) == 0x00009C, "Member 'FGuildTournamentTerritoryTemplate::Territory_MaxPoint' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, Territory_AddPoint) == 0x0000A0, "Member 'FGuildTournamentTerritoryTemplate::Territory_AddPoint' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, Territory_FallPoint) == 0x0000A4, "Member 'FGuildTournamentTerritoryTemplate::Territory_FallPoint' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryEffect_High) == 0x0000A8, "Member 'FGuildTournamentTerritoryTemplate::TerritoryEffect_High' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, Territory_UIHeight) == 0x0000AC, "Member 'FGuildTournamentTerritoryTemplate::Territory_UIHeight' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryHudIcon) == 0x0000B0, "Member 'FGuildTournamentTerritoryTemplate::TerritoryHudIcon' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, TerritoryNamePosition) == 0x0000B4, "Member 'FGuildTournamentTerritoryTemplate::TerritoryNamePosition' has a wrong offset!");
static_assert(offsetof(FGuildTournamentTerritoryTemplate, SkillEffectScale) == 0x0000B8, "Member 'FGuildTournamentTerritoryTemplate::SkillEffectScale' has a wrong offset!");

// ScriptStruct MirMobile.RevivalTemplate
// 0x0048 (0x0050 - 0x0008)
struct FRevivalTemplate final : public FTableRowBase
{
public:
	int32                                         RevivalId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RevivalType;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AutoRevivalDelayTime;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarpId01;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarpId02;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarpId03;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarpId04;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarpId05;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyWarpRadius;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyDelayTime;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyResetTime;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyMaxDelayIncreaseCount;                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SafetyIncreaseDelayValue;                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildWarRevivalId;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRevivalTemplate) == 0x000008, "Wrong alignment on FRevivalTemplate");
static_assert(sizeof(FRevivalTemplate) == 0x000050, "Wrong size on FRevivalTemplate");
static_assert(offsetof(FRevivalTemplate, RevivalId) == 0x000008, "Member 'FRevivalTemplate::RevivalId' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, StageID) == 0x00000C, "Member 'FRevivalTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, RevivalType) == 0x000010, "Member 'FRevivalTemplate::RevivalType' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, AutoRevivalDelayTime) == 0x000020, "Member 'FRevivalTemplate::AutoRevivalDelayTime' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, SafetyWarpId01) == 0x000024, "Member 'FRevivalTemplate::SafetyWarpId01' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, SafetyWarpId02) == 0x000028, "Member 'FRevivalTemplate::SafetyWarpId02' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, SafetyWarpId03) == 0x00002C, "Member 'FRevivalTemplate::SafetyWarpId03' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, SafetyWarpId04) == 0x000030, "Member 'FRevivalTemplate::SafetyWarpId04' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, SafetyWarpId05) == 0x000034, "Member 'FRevivalTemplate::SafetyWarpId05' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, SafetyWarpRadius) == 0x000038, "Member 'FRevivalTemplate::SafetyWarpRadius' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, SafetyDelayTime) == 0x00003C, "Member 'FRevivalTemplate::SafetyDelayTime' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, SafetyResetTime) == 0x000040, "Member 'FRevivalTemplate::SafetyResetTime' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, SafetyMaxDelayIncreaseCount) == 0x000044, "Member 'FRevivalTemplate::SafetyMaxDelayIncreaseCount' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, SafetyIncreaseDelayValue) == 0x000048, "Member 'FRevivalTemplate::SafetyIncreaseDelayValue' has a wrong offset!");
static_assert(offsetof(FRevivalTemplate, GuildWarRevivalId) == 0x00004C, "Member 'FRevivalTemplate::GuildWarRevivalId' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarAltarTemplate
// 0x0030 (0x0038 - 0x0008)
struct FGuildWarAltarTemplate final : public FTableRowBase
{
public:
	int32                                         GuildAltarId;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageGroupName;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageName;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_ObjectId;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_ObjectPosId;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_MonsterId;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altar_MonsterPosId;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardBuffGroup;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardBuffPriority;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGuildBuffId;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardServerBuffId;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildWarAltarTemplate) == 0x000008, "Wrong alignment on FGuildWarAltarTemplate");
static_assert(sizeof(FGuildWarAltarTemplate) == 0x000038, "Wrong size on FGuildWarAltarTemplate");
static_assert(offsetof(FGuildWarAltarTemplate, GuildAltarId) == 0x000008, "Member 'FGuildWarAltarTemplate::GuildAltarId' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, StageID) == 0x00000C, "Member 'FGuildWarAltarTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, StageGroupName) == 0x000010, "Member 'FGuildWarAltarTemplate::StageGroupName' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, StageName) == 0x000014, "Member 'FGuildWarAltarTemplate::StageName' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, Altar_ObjectId) == 0x000018, "Member 'FGuildWarAltarTemplate::Altar_ObjectId' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, Altar_ObjectPosId) == 0x00001C, "Member 'FGuildWarAltarTemplate::Altar_ObjectPosId' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, Altar_MonsterId) == 0x000020, "Member 'FGuildWarAltarTemplate::Altar_MonsterId' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, Altar_MonsterPosId) == 0x000024, "Member 'FGuildWarAltarTemplate::Altar_MonsterPosId' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, RewardBuffGroup) == 0x000028, "Member 'FGuildWarAltarTemplate::RewardBuffGroup' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, RewardBuffPriority) == 0x00002C, "Member 'FGuildWarAltarTemplate::RewardBuffPriority' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, RewardGuildBuffId) == 0x000030, "Member 'FGuildWarAltarTemplate::RewardGuildBuffId' has a wrong offset!");
static_assert(offsetof(FGuildWarAltarTemplate, RewardServerBuffId) == 0x000034, "Member 'FGuildWarAltarTemplate::RewardServerBuffId' has a wrong offset!");

// ScriptStruct MirMobile.StatusLimitTemplate
// 0x0010 (0x0018 - 0x0008)
struct FStatusLimitTemplate final : public FTableRowBase
{
public:
	int32                                         StatusId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitMIN;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitMAX;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatusLimitTemplate) == 0x000008, "Wrong alignment on FStatusLimitTemplate");
static_assert(sizeof(FStatusLimitTemplate) == 0x000018, "Wrong size on FStatusLimitTemplate");
static_assert(offsetof(FStatusLimitTemplate, StatusId) == 0x000008, "Member 'FStatusLimitTemplate::StatusId' has a wrong offset!");
static_assert(offsetof(FStatusLimitTemplate, LimitMIN) == 0x00000C, "Member 'FStatusLimitTemplate::LimitMIN' has a wrong offset!");
static_assert(offsetof(FStatusLimitTemplate, LimitMAX) == 0x000010, "Member 'FStatusLimitTemplate::LimitMAX' has a wrong offset!");

// ScriptStruct MirMobile.HEAVEN_TRAININGTemplate
// 0x0098 (0x00A0 - 0x0008)
struct FHEAVEN_TRAININGTemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTrainingGroupId;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NameSId;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_DesSId;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_ConditionOpen;                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Img;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Img_CriticalFail;                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabOffID;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabOnID;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon01_Off;                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon01_On;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon02_Off;                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon02_On;                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon03_Off;                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon03_On;                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon04_Off;                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon04_On;                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon05_Off;                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon05_On;                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon06_Off;                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon06_On;                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon07_Off;                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon07_On;                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon08_Off;                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon08_On;                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Icon_Symbol;                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectIdCount01;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId01;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectIdCount02;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId02;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectIdCount03;                                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId03;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectIdCount04;                                   // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId04;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectIdCount05;                                   // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId05;                                        // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHEAVEN_TRAININGTemplate) == 0x000008, "Wrong alignment on FHEAVEN_TRAININGTemplate");
static_assert(sizeof(FHEAVEN_TRAININGTemplate) == 0x0000A0, "Wrong size on FHEAVEN_TRAININGTemplate");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, UniqueId) == 0x000008, "Member 'FHEAVEN_TRAININGTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTrainingGroupId) == 0x00000C, "Member 'FHEAVEN_TRAININGTemplate::HeavenTrainingGroupId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, ClassID) == 0x000010, "Member 'FHEAVEN_TRAININGTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_NameSId) == 0x000014, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_NameSId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_DesSId) == 0x000018, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_DesSId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_ConditionOpen) == 0x00001C, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_ConditionOpen' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Img) == 0x000020, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Img' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Img_CriticalFail) == 0x000024, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Img_CriticalFail' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, TabOffID) == 0x000028, "Member 'FHEAVEN_TRAININGTemplate::TabOffID' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, TabOnID) == 0x00002C, "Member 'FHEAVEN_TRAININGTemplate::TabOnID' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon01_Off) == 0x000030, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon01_Off' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon01_On) == 0x000034, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon01_On' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon02_Off) == 0x000038, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon02_Off' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon02_On) == 0x00003C, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon02_On' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon03_Off) == 0x000040, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon03_Off' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon03_On) == 0x000044, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon03_On' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon04_Off) == 0x000048, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon04_Off' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon04_On) == 0x00004C, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon04_On' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon05_Off) == 0x000050, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon05_Off' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon05_On) == 0x000054, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon05_On' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon06_Off) == 0x000058, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon06_Off' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon06_On) == 0x00005C, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon06_On' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon07_Off) == 0x000060, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon07_Off' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon07_On) == 0x000064, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon07_On' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon08_Off) == 0x000068, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon08_Off' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon08_On) == 0x00006C, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon08_On' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, HeavenTraining_Icon_Symbol) == 0x000070, "Member 'FHEAVEN_TRAININGTemplate::HeavenTraining_Icon_Symbol' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, EffectIdCount01) == 0x000074, "Member 'FHEAVEN_TRAININGTemplate::EffectIdCount01' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, EffectId01) == 0x000078, "Member 'FHEAVEN_TRAININGTemplate::EffectId01' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, EffectIdCount02) == 0x00007C, "Member 'FHEAVEN_TRAININGTemplate::EffectIdCount02' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, EffectId02) == 0x000080, "Member 'FHEAVEN_TRAININGTemplate::EffectId02' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, EffectIdCount03) == 0x000084, "Member 'FHEAVEN_TRAININGTemplate::EffectIdCount03' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, EffectId03) == 0x000088, "Member 'FHEAVEN_TRAININGTemplate::EffectId03' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, EffectIdCount04) == 0x00008C, "Member 'FHEAVEN_TRAININGTemplate::EffectIdCount04' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, EffectId04) == 0x000090, "Member 'FHEAVEN_TRAININGTemplate::EffectId04' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, EffectIdCount05) == 0x000094, "Member 'FHEAVEN_TRAININGTemplate::EffectIdCount05' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAININGTemplate, EffectId05) == 0x000098, "Member 'FHEAVEN_TRAININGTemplate::EffectId05' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarCostumeTemplate
// 0x0038 (0x0040 - 0x0008)
struct FGuildWarCostumeTemplate final : public FTableRowBase
{
public:
	int32                                         GuildWarCostumeId;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildWarCostumeGroupId;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourceMesh01Id;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourceMesh02Id;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingChannel01;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingChannel02;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingColor01Id_Camp01;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingColor02Id_Camp01;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingColor01Id_Camp02;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingColor02Id_Camp02;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingColor01Id_Camp03;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingColor02Id_Camp03;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingColor01Id_Camp04;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DyeingColor02Id_Camp04;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildWarCostumeTemplate) == 0x000008, "Wrong alignment on FGuildWarCostumeTemplate");
static_assert(sizeof(FGuildWarCostumeTemplate) == 0x000040, "Wrong size on FGuildWarCostumeTemplate");
static_assert(offsetof(FGuildWarCostumeTemplate, GuildWarCostumeId) == 0x000008, "Member 'FGuildWarCostumeTemplate::GuildWarCostumeId' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, GuildWarCostumeGroupId) == 0x00000C, "Member 'FGuildWarCostumeTemplate::GuildWarCostumeGroupId' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, ResourceMesh01Id) == 0x000010, "Member 'FGuildWarCostumeTemplate::ResourceMesh01Id' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, ResourceMesh02Id) == 0x000014, "Member 'FGuildWarCostumeTemplate::ResourceMesh02Id' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, DyeingChannel01) == 0x000018, "Member 'FGuildWarCostumeTemplate::DyeingChannel01' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, DyeingChannel02) == 0x00001C, "Member 'FGuildWarCostumeTemplate::DyeingChannel02' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, DyeingColor01Id_Camp01) == 0x000020, "Member 'FGuildWarCostumeTemplate::DyeingColor01Id_Camp01' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, DyeingColor02Id_Camp01) == 0x000024, "Member 'FGuildWarCostumeTemplate::DyeingColor02Id_Camp01' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, DyeingColor01Id_Camp02) == 0x000028, "Member 'FGuildWarCostumeTemplate::DyeingColor01Id_Camp02' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, DyeingColor02Id_Camp02) == 0x00002C, "Member 'FGuildWarCostumeTemplate::DyeingColor02Id_Camp02' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, DyeingColor01Id_Camp03) == 0x000030, "Member 'FGuildWarCostumeTemplate::DyeingColor01Id_Camp03' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, DyeingColor02Id_Camp03) == 0x000034, "Member 'FGuildWarCostumeTemplate::DyeingColor02Id_Camp03' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, DyeingColor01Id_Camp04) == 0x000038, "Member 'FGuildWarCostumeTemplate::DyeingColor01Id_Camp04' has a wrong offset!");
static_assert(offsetof(FGuildWarCostumeTemplate, DyeingColor02Id_Camp04) == 0x00003C, "Member 'FGuildWarCostumeTemplate::DyeingColor02Id_Camp04' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarMonsterTemplate
// 0x0058 (0x0060 - 0x0008)
struct FGuildWarMonsterTemplate final : public FTableRowBase
{
public:
	int32                                         MonsterId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildWarMonsterKind                          MonsterKind;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnerShip;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetBuffPerOwner_SearchRange;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetBuffPerOwner_BuffId;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponImgId;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponNoteSId;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponGuildDevId;                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponReqMoneyId01;                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponReqMoneyCnt01;                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponReqMoneyId02;                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponReqMoneyCnt02;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponReqMoneyId03;                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponReqMoneyCnt03;                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponReqMoneyId04;                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeWeaponReqMoneyCnt04;                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductionEffectType;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductionTime;                                    // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReproductionCoolTime;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenTime_Minute;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProtectionBuffId;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildWarMonsterTemplate) == 0x000008, "Wrong alignment on FGuildWarMonsterTemplate");
static_assert(sizeof(FGuildWarMonsterTemplate) == 0x000060, "Wrong size on FGuildWarMonsterTemplate");
static_assert(offsetof(FGuildWarMonsterTemplate, MonsterId) == 0x000008, "Member 'FGuildWarMonsterTemplate::MonsterId' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, MonsterKind) == 0x00000C, "Member 'FGuildWarMonsterTemplate::MonsterKind' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, OwnerShip) == 0x000010, "Member 'FGuildWarMonsterTemplate::OwnerShip' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, GetBuffPerOwner_SearchRange) == 0x000014, "Member 'FGuildWarMonsterTemplate::GetBuffPerOwner_SearchRange' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, GetBuffPerOwner_BuffId) == 0x000018, "Member 'FGuildWarMonsterTemplate::GetBuffPerOwner_BuffId' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponImgId) == 0x00001C, "Member 'FGuildWarMonsterTemplate::SiegeWeaponImgId' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponNoteSId) == 0x000020, "Member 'FGuildWarMonsterTemplate::SiegeWeaponNoteSId' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponGuildDevId) == 0x000024, "Member 'FGuildWarMonsterTemplate::SiegeWeaponGuildDevId' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponReqMoneyId01) == 0x000028, "Member 'FGuildWarMonsterTemplate::SiegeWeaponReqMoneyId01' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponReqMoneyCnt01) == 0x00002C, "Member 'FGuildWarMonsterTemplate::SiegeWeaponReqMoneyCnt01' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponReqMoneyId02) == 0x000030, "Member 'FGuildWarMonsterTemplate::SiegeWeaponReqMoneyId02' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponReqMoneyCnt02) == 0x000034, "Member 'FGuildWarMonsterTemplate::SiegeWeaponReqMoneyCnt02' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponReqMoneyId03) == 0x000038, "Member 'FGuildWarMonsterTemplate::SiegeWeaponReqMoneyId03' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponReqMoneyCnt03) == 0x00003C, "Member 'FGuildWarMonsterTemplate::SiegeWeaponReqMoneyCnt03' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponReqMoneyId04) == 0x000040, "Member 'FGuildWarMonsterTemplate::SiegeWeaponReqMoneyId04' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, SiegeWeaponReqMoneyCnt04) == 0x000044, "Member 'FGuildWarMonsterTemplate::SiegeWeaponReqMoneyCnt04' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, ProductionEffectType) == 0x000048, "Member 'FGuildWarMonsterTemplate::ProductionEffectType' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, ProductionTime) == 0x00004C, "Member 'FGuildWarMonsterTemplate::ProductionTime' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, ReproductionCoolTime) == 0x000050, "Member 'FGuildWarMonsterTemplate::ReproductionCoolTime' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, OpenTime_Minute) == 0x000054, "Member 'FGuildWarMonsterTemplate::OpenTime_Minute' has a wrong offset!");
static_assert(offsetof(FGuildWarMonsterTemplate, ProtectionBuffId) == 0x000058, "Member 'FGuildWarMonsterTemplate::ProtectionBuffId' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarObjectTemplate
// 0x0028 (0x0030 - 0x0008)
struct FGuildWarObjectTemplate final : public FTableRowBase
{
public:
	int32                                         ObjectID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildWarObjectKind                           ObjectKind;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildWarObjectOwnerShip                      OwnerShip;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeZone_MaxPoint;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeZone_AddPoint;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeZone_FallPoint;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeZone_LockTimeSec;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeZoneUIHeight;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Plunder_DarkSteelRewardValue;                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildWarObjectTemplate) == 0x000008, "Wrong alignment on FGuildWarObjectTemplate");
static_assert(sizeof(FGuildWarObjectTemplate) == 0x000030, "Wrong size on FGuildWarObjectTemplate");
static_assert(offsetof(FGuildWarObjectTemplate, ObjectID) == 0x000008, "Member 'FGuildWarObjectTemplate::ObjectID' has a wrong offset!");
static_assert(offsetof(FGuildWarObjectTemplate, ObjectKind) == 0x00000C, "Member 'FGuildWarObjectTemplate::ObjectKind' has a wrong offset!");
static_assert(offsetof(FGuildWarObjectTemplate, OwnerShip) == 0x000010, "Member 'FGuildWarObjectTemplate::OwnerShip' has a wrong offset!");
static_assert(offsetof(FGuildWarObjectTemplate, SiegeZone_MaxPoint) == 0x000014, "Member 'FGuildWarObjectTemplate::SiegeZone_MaxPoint' has a wrong offset!");
static_assert(offsetof(FGuildWarObjectTemplate, SiegeZone_AddPoint) == 0x000018, "Member 'FGuildWarObjectTemplate::SiegeZone_AddPoint' has a wrong offset!");
static_assert(offsetof(FGuildWarObjectTemplate, SiegeZone_FallPoint) == 0x00001C, "Member 'FGuildWarObjectTemplate::SiegeZone_FallPoint' has a wrong offset!");
static_assert(offsetof(FGuildWarObjectTemplate, SiegeZone_LockTimeSec) == 0x000020, "Member 'FGuildWarObjectTemplate::SiegeZone_LockTimeSec' has a wrong offset!");
static_assert(offsetof(FGuildWarObjectTemplate, SiegeZoneUIHeight) == 0x000024, "Member 'FGuildWarObjectTemplate::SiegeZoneUIHeight' has a wrong offset!");
static_assert(offsetof(FGuildWarObjectTemplate, Plunder_DarkSteelRewardValue) == 0x000028, "Member 'FGuildWarObjectTemplate::Plunder_DarkSteelRewardValue' has a wrong offset!");

// ScriptStruct MirMobile.ObjectTemplate
// 0x00C0 (0x00C8 - 0x0008)
struct FObjectTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectID;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGatherObjectType                             ObjectType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObject_GatherType                            ObjectGatherType;                                  // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GetWayType;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceId;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObjectScale;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectNameSid;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ObjectNameOnOff;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectActivateType>                   CollectActivationType;                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CollectActivationValue;                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AlwaysVisible;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlwaysVisibleOff;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectQualificationType;                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectQualificationValue;                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectMethod;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractionRange;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressRangeInteraction;                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressRange;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CastingTime;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CastingDesc;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectAniType;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectScale;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectLoopFxId;                                    // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectGenFxId;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ABPLink;                                           // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectDisappearTime;                               // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropItemId;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterId;                                         // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonGenType;                                        // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectIcon;                                       // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IconCoordinate;                                    // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BroadcastingSize;                                  // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBossDropRewardBox;                               // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObjectRadius;                                      // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectActivationString;                           // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffId;                                            // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffOverlap;                                       // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectTemplate) == 0x000008, "Wrong alignment on FObjectTemplate");
static_assert(sizeof(FObjectTemplate) == 0x0000C8, "Wrong size on FObjectTemplate");
static_assert(offsetof(FObjectTemplate, Name) == 0x000008, "Member 'FObjectTemplate::Name' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ObjectID) == 0x00000C, "Member 'FObjectTemplate::ObjectID' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ObjectType) == 0x000010, "Member 'FObjectTemplate::ObjectType' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ObjectGatherType) == 0x000011, "Member 'FObjectTemplate::ObjectGatherType' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, GetWayType) == 0x000014, "Member 'FObjectTemplate::GetWayType' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ResourceId) == 0x000018, "Member 'FObjectTemplate::ResourceId' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ObjectScale) == 0x000020, "Member 'FObjectTemplate::ObjectScale' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ObjectNameSid) == 0x000024, "Member 'FObjectTemplate::ObjectNameSid' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ObjectNameOnOff) == 0x000028, "Member 'FObjectTemplate::ObjectNameOnOff' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, CollectActivationType) == 0x000030, "Member 'FObjectTemplate::CollectActivationType' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, CollectActivationValue) == 0x000040, "Member 'FObjectTemplate::CollectActivationValue' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, AlwaysVisible) == 0x000050, "Member 'FObjectTemplate::AlwaysVisible' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, AlwaysVisibleOff) == 0x000054, "Member 'FObjectTemplate::AlwaysVisibleOff' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, CollectQualificationType) == 0x000058, "Member 'FObjectTemplate::CollectQualificationType' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, CollectQualificationValue) == 0x00005C, "Member 'FObjectTemplate::CollectQualificationValue' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, CollectMethod) == 0x000060, "Member 'FObjectTemplate::CollectMethod' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, InteractionRange) == 0x000064, "Member 'FObjectTemplate::InteractionRange' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ProgressRangeInteraction) == 0x000068, "Member 'FObjectTemplate::ProgressRangeInteraction' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ProgressRange) == 0x00006C, "Member 'FObjectTemplate::ProgressRange' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, CastingTime) == 0x000070, "Member 'FObjectTemplate::CastingTime' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, CastingDesc) == 0x000074, "Member 'FObjectTemplate::CastingDesc' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, CollectAniType) == 0x000078, "Member 'FObjectTemplate::CollectAniType' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, EffectScale) == 0x00007C, "Member 'FObjectTemplate::EffectScale' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ObjectLoopFxId) == 0x000080, "Member 'FObjectTemplate::ObjectLoopFxId' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ObjectGenFxId) == 0x000084, "Member 'FObjectTemplate::ObjectGenFxId' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ABPLink) == 0x000088, "Member 'FObjectTemplate::ABPLink' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ObjectDisappearTime) == 0x00008C, "Member 'FObjectTemplate::ObjectDisappearTime' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, DropItemId) == 0x000090, "Member 'FObjectTemplate::DropItemId' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, MonsterId) == 0x000094, "Member 'FObjectTemplate::MonsterId' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, MonGenType) == 0x000098, "Member 'FObjectTemplate::MonGenType' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, CollectIcon) == 0x00009C, "Member 'FObjectTemplate::CollectIcon' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, IconCoordinate) == 0x0000A0, "Member 'FObjectTemplate::IconCoordinate' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, BroadcastingSize) == 0x0000AC, "Member 'FObjectTemplate::BroadcastingSize' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, IsBossDropRewardBox) == 0x0000B0, "Member 'FObjectTemplate::IsBossDropRewardBox' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, ObjectRadius) == 0x0000B4, "Member 'FObjectTemplate::ObjectRadius' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, CollectActivationString) == 0x0000B8, "Member 'FObjectTemplate::CollectActivationString' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, BuffId) == 0x0000BC, "Member 'FObjectTemplate::BuffId' has a wrong offset!");
static_assert(offsetof(FObjectTemplate, BuffOverlap) == 0x0000C0, "Member 'FObjectTemplate::BuffOverlap' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarPlunderRewardTemplate
// 0x0050 (0x0058 - 0x0008)
struct FGuildWarPlunderRewardTemplate final : public FTableRowBase
{
public:
	int32                                         Plunder_Rewardid;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaxMoneyMaxCnt;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectId01;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectCnt01;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectId02;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectCnt02;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectId03;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectCnt03;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectId04;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectCnt04;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectId05;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectCnt05;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildWarPlunderRewardTemplate) == 0x000008, "Wrong alignment on FGuildWarPlunderRewardTemplate");
static_assert(sizeof(FGuildWarPlunderRewardTemplate) == 0x000058, "Wrong size on FGuildWarPlunderRewardTemplate");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, Plunder_Rewardid) == 0x000008, "Member 'FGuildWarPlunderRewardTemplate::Plunder_Rewardid' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, TaxMoneyMaxCnt) == 0x00000C, "Member 'FGuildWarPlunderRewardTemplate::TaxMoneyMaxCnt' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, RewardObjectId01) == 0x000010, "Member 'FGuildWarPlunderRewardTemplate::RewardObjectId01' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, RewardObjectCnt01) == 0x000014, "Member 'FGuildWarPlunderRewardTemplate::RewardObjectCnt01' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, RewardObjectId02) == 0x000018, "Member 'FGuildWarPlunderRewardTemplate::RewardObjectId02' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, RewardObjectCnt02) == 0x00001C, "Member 'FGuildWarPlunderRewardTemplate::RewardObjectCnt02' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, RewardObjectId03) == 0x000020, "Member 'FGuildWarPlunderRewardTemplate::RewardObjectId03' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, RewardObjectCnt03) == 0x000024, "Member 'FGuildWarPlunderRewardTemplate::RewardObjectCnt03' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, RewardObjectId04) == 0x000028, "Member 'FGuildWarPlunderRewardTemplate::RewardObjectId04' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, RewardObjectCnt04) == 0x00002C, "Member 'FGuildWarPlunderRewardTemplate::RewardObjectCnt04' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, RewardObjectId05) == 0x000030, "Member 'FGuildWarPlunderRewardTemplate::RewardObjectId05' has a wrong offset!");
static_assert(offsetof(FGuildWarPlunderRewardTemplate, RewardObjectCnt05) == 0x000034, "Member 'FGuildWarPlunderRewardTemplate::RewardObjectCnt05' has a wrong offset!");

// ScriptStruct MirMobile.PatchFileInfo
// 0x0068 (0x0068 - 0x0000)
struct FPatchFileInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Step;                                              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Size;                                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedDecompress;                                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DecompressSize;                                    // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Crc;                                               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         DownloadTargetSize;                                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CurrentDownloadSize;                               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatchFileInfo) == 0x000008, "Wrong alignment on FPatchFileInfo");
static_assert(sizeof(FPatchFileInfo) == 0x000068, "Wrong size on FPatchFileInfo");
static_assert(offsetof(FPatchFileInfo, Name) == 0x000000, "Member 'FPatchFileInfo::Name' has a wrong offset!");
static_assert(offsetof(FPatchFileInfo, Version) == 0x000010, "Member 'FPatchFileInfo::Version' has a wrong offset!");
static_assert(offsetof(FPatchFileInfo, Step) == 0x000020, "Member 'FPatchFileInfo::Step' has a wrong offset!");
static_assert(offsetof(FPatchFileInfo, Size) == 0x000028, "Member 'FPatchFileInfo::Size' has a wrong offset!");
static_assert(offsetof(FPatchFileInfo, NeedDecompress) == 0x000038, "Member 'FPatchFileInfo::NeedDecompress' has a wrong offset!");
static_assert(offsetof(FPatchFileInfo, DecompressSize) == 0x000040, "Member 'FPatchFileInfo::DecompressSize' has a wrong offset!");
static_assert(offsetof(FPatchFileInfo, Crc) == 0x000050, "Member 'FPatchFileInfo::Crc' has a wrong offset!");
static_assert(offsetof(FPatchFileInfo, DownloadTargetSize) == 0x000058, "Member 'FPatchFileInfo::DownloadTargetSize' has a wrong offset!");
static_assert(offsetof(FPatchFileInfo, CurrentDownloadSize) == 0x000060, "Member 'FPatchFileInfo::CurrentDownloadSize' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarSabukRewardTemplate
// 0x0020 (0x0028 - 0x0008)
struct FGuildWarSabukRewardTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardMoneyId01;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardMoneyCnt01;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardMoneyId02;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardMoneyCnt02;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemUseId01;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemCnt01;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildWarSabukRewardTemplate) == 0x000008, "Wrong alignment on FGuildWarSabukRewardTemplate");
static_assert(sizeof(FGuildWarSabukRewardTemplate) == 0x000028, "Wrong size on FGuildWarSabukRewardTemplate");
static_assert(offsetof(FGuildWarSabukRewardTemplate, Name) == 0x000008, "Member 'FGuildWarSabukRewardTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRewardTemplate, RewardId) == 0x00000C, "Member 'FGuildWarSabukRewardTemplate::RewardId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRewardTemplate, RewardMoneyId01) == 0x000010, "Member 'FGuildWarSabukRewardTemplate::RewardMoneyId01' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRewardTemplate, RewardMoneyCnt01) == 0x000014, "Member 'FGuildWarSabukRewardTemplate::RewardMoneyCnt01' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRewardTemplate, RewardMoneyId02) == 0x000018, "Member 'FGuildWarSabukRewardTemplate::RewardMoneyId02' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRewardTemplate, RewardMoneyCnt02) == 0x00001C, "Member 'FGuildWarSabukRewardTemplate::RewardMoneyCnt02' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRewardTemplate, RewardItemUseId01) == 0x000020, "Member 'FGuildWarSabukRewardTemplate::RewardItemUseId01' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRewardTemplate, RewardItemCnt01) == 0x000024, "Member 'FGuildWarSabukRewardTemplate::RewardItemCnt01' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarSabukRoundTemplate
// 0x0120 (0x0128 - 0x0008)
struct FGuildWarSabukRoundTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SabukRoundId;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Round;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureMonsterId;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CaptureIconId;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutPostMonsterId;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutPostObjectId;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutPostIconId;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp01_StageId;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp01_FlagIconId;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp01_OutPostMonsterId;                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp01_OutPostObjectId;                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp01_OutPostIconId;                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                R3Camp01_Location;                                 // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp02_StageId;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp02_FlagIconId;                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp02_OutPostMonsterId;                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp02_OutPostObjectId;                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp02_OutPostIconId;                            // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                R3Camp02_Location;                                 // 0x0070(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp03_StageId;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp03_FlagIconId;                               // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp03_OutPostMonsterId;                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp03_OutPostObjectId;                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp03_OutPostIconId;                            // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                R3Camp03_Location;                                 // 0x0090(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp04_StageId;                                  // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp04_FlagIconId;                               // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp04_OutPostMonsterId;                         // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp04_OutPostObjectId;                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3Camp04_OutPostIconId;                            // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                R3Camp04_Location;                                 // 0x00B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 GuardianMonsterId;                                 // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         GuardianMonsterIconId;                             // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardianGenPos01;                                  // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardianGenPos02;                                  // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardianGenPos03;                                  // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardianGenPos04;                                  // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GuardianLocation01_Location;                       // 0x00E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GuardianLocation02_Location;                       // 0x00F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GuardianLocation03_Location;                       // 0x00FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GuardianLocation04_Location;                       // 0x0108(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 VictoryMoviePlayId;                                // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildWarSabukRoundTemplate) == 0x000008, "Wrong alignment on FGuildWarSabukRoundTemplate");
static_assert(sizeof(FGuildWarSabukRoundTemplate) == 0x000128, "Wrong size on FGuildWarSabukRoundTemplate");
static_assert(offsetof(FGuildWarSabukRoundTemplate, Name) == 0x000008, "Member 'FGuildWarSabukRoundTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, SabukRoundId) == 0x00000C, "Member 'FGuildWarSabukRoundTemplate::SabukRoundId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, Round) == 0x000010, "Member 'FGuildWarSabukRoundTemplate::Round' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, StageID) == 0x000014, "Member 'FGuildWarSabukRoundTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, CaptureMonsterId) == 0x000018, "Member 'FGuildWarSabukRoundTemplate::CaptureMonsterId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, CaptureIconId) == 0x000020, "Member 'FGuildWarSabukRoundTemplate::CaptureIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, OutPostMonsterId) == 0x000030, "Member 'FGuildWarSabukRoundTemplate::OutPostMonsterId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, OutPostObjectId) == 0x000034, "Member 'FGuildWarSabukRoundTemplate::OutPostObjectId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, OutPostIconId) == 0x000038, "Member 'FGuildWarSabukRoundTemplate::OutPostIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp01_StageId) == 0x00003C, "Member 'FGuildWarSabukRoundTemplate::R3Camp01_StageId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp01_FlagIconId) == 0x000040, "Member 'FGuildWarSabukRoundTemplate::R3Camp01_FlagIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp01_OutPostMonsterId) == 0x000044, "Member 'FGuildWarSabukRoundTemplate::R3Camp01_OutPostMonsterId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp01_OutPostObjectId) == 0x000048, "Member 'FGuildWarSabukRoundTemplate::R3Camp01_OutPostObjectId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp01_OutPostIconId) == 0x00004C, "Member 'FGuildWarSabukRoundTemplate::R3Camp01_OutPostIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp01_Location) == 0x000050, "Member 'FGuildWarSabukRoundTemplate::R3Camp01_Location' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp02_StageId) == 0x00005C, "Member 'FGuildWarSabukRoundTemplate::R3Camp02_StageId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp02_FlagIconId) == 0x000060, "Member 'FGuildWarSabukRoundTemplate::R3Camp02_FlagIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp02_OutPostMonsterId) == 0x000064, "Member 'FGuildWarSabukRoundTemplate::R3Camp02_OutPostMonsterId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp02_OutPostObjectId) == 0x000068, "Member 'FGuildWarSabukRoundTemplate::R3Camp02_OutPostObjectId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp02_OutPostIconId) == 0x00006C, "Member 'FGuildWarSabukRoundTemplate::R3Camp02_OutPostIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp02_Location) == 0x000070, "Member 'FGuildWarSabukRoundTemplate::R3Camp02_Location' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp03_StageId) == 0x00007C, "Member 'FGuildWarSabukRoundTemplate::R3Camp03_StageId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp03_FlagIconId) == 0x000080, "Member 'FGuildWarSabukRoundTemplate::R3Camp03_FlagIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp03_OutPostMonsterId) == 0x000084, "Member 'FGuildWarSabukRoundTemplate::R3Camp03_OutPostMonsterId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp03_OutPostObjectId) == 0x000088, "Member 'FGuildWarSabukRoundTemplate::R3Camp03_OutPostObjectId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp03_OutPostIconId) == 0x00008C, "Member 'FGuildWarSabukRoundTemplate::R3Camp03_OutPostIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp03_Location) == 0x000090, "Member 'FGuildWarSabukRoundTemplate::R3Camp03_Location' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp04_StageId) == 0x00009C, "Member 'FGuildWarSabukRoundTemplate::R3Camp04_StageId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp04_FlagIconId) == 0x0000A0, "Member 'FGuildWarSabukRoundTemplate::R3Camp04_FlagIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp04_OutPostMonsterId) == 0x0000A4, "Member 'FGuildWarSabukRoundTemplate::R3Camp04_OutPostMonsterId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp04_OutPostObjectId) == 0x0000A8, "Member 'FGuildWarSabukRoundTemplate::R3Camp04_OutPostObjectId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp04_OutPostIconId) == 0x0000AC, "Member 'FGuildWarSabukRoundTemplate::R3Camp04_OutPostIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, R3Camp04_Location) == 0x0000B0, "Member 'FGuildWarSabukRoundTemplate::R3Camp04_Location' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, GuardianMonsterId) == 0x0000C0, "Member 'FGuildWarSabukRoundTemplate::GuardianMonsterId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, GuardianMonsterIconId) == 0x0000D0, "Member 'FGuildWarSabukRoundTemplate::GuardianMonsterIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, GuardianGenPos01) == 0x0000D4, "Member 'FGuildWarSabukRoundTemplate::GuardianGenPos01' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, GuardianGenPos02) == 0x0000D8, "Member 'FGuildWarSabukRoundTemplate::GuardianGenPos02' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, GuardianGenPos03) == 0x0000DC, "Member 'FGuildWarSabukRoundTemplate::GuardianGenPos03' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, GuardianGenPos04) == 0x0000E0, "Member 'FGuildWarSabukRoundTemplate::GuardianGenPos04' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, GuardianLocation01_Location) == 0x0000E4, "Member 'FGuildWarSabukRoundTemplate::GuardianLocation01_Location' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, GuardianLocation02_Location) == 0x0000F0, "Member 'FGuildWarSabukRoundTemplate::GuardianLocation02_Location' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, GuardianLocation03_Location) == 0x0000FC, "Member 'FGuildWarSabukRoundTemplate::GuardianLocation03_Location' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, GuardianLocation04_Location) == 0x000108, "Member 'FGuildWarSabukRoundTemplate::GuardianLocation04_Location' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukRoundTemplate, VictoryMoviePlayId) == 0x000118, "Member 'FGuildWarSabukRoundTemplate::VictoryMoviePlayId' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarSabukTemplate
// 0x00B0 (0x00B8 - 0x0008)
struct FGuildWarSabukTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapImgIconId;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureBanishTimeSec;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffMonster_OpenTimeSec;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffMonster_RegenTimeSec;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointsPerPlayerKill;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarEndAutoOutTimeSec;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R1_NeedDomonionId;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R1_NameSid;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R1_MapImgIconId;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R1_RunTimeMinute;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R1_WinRewardId;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R1_MVPRewardId;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R1_WinRewardGuildMoneyId01;                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R1_WinRewardGuildMoneyCnt01;                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 R2_NeedOwnStageId;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         R2_NameSid;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R2_MapImgIconId;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R2_RunTimeMinute;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R2_WinRewardId;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R2_MVPRewardId;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R2_WinRewardGuildMoneyId01;                        // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R2_WinRewardGuildMoneyCnt01;                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 R3_NeedOwnStageId;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         R3_NameSid;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3_MapImgIconId;                                   // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3_RunTimeMinute;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3_ExtensionTimeMinute;                            // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3_CinematicDialogueId;                            // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3_WinRewardId;                                    // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3_MVPRewardId;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3_LoseRewardId;                                   // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3_WinRewardGuildMoneyId01;                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3_WinRewardGuildMoneyCnt01;                       // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R3_WinRewardDominionId;                            // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildWarSabukTemplate) == 0x000008, "Wrong alignment on FGuildWarSabukTemplate");
static_assert(sizeof(FGuildWarSabukTemplate) == 0x0000B8, "Wrong size on FGuildWarSabukTemplate");
static_assert(offsetof(FGuildWarSabukTemplate, Name) == 0x000008, "Member 'FGuildWarSabukTemplate::Name' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, NameSId) == 0x00000C, "Member 'FGuildWarSabukTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, MapImgIconId) == 0x000010, "Member 'FGuildWarSabukTemplate::MapImgIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, CaptureBanishTimeSec) == 0x000014, "Member 'FGuildWarSabukTemplate::CaptureBanishTimeSec' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, BuffMonster_OpenTimeSec) == 0x000018, "Member 'FGuildWarSabukTemplate::BuffMonster_OpenTimeSec' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, BuffMonster_RegenTimeSec) == 0x00001C, "Member 'FGuildWarSabukTemplate::BuffMonster_RegenTimeSec' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, PointsPerPlayerKill) == 0x000020, "Member 'FGuildWarSabukTemplate::PointsPerPlayerKill' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, WarEndAutoOutTimeSec) == 0x000024, "Member 'FGuildWarSabukTemplate::WarEndAutoOutTimeSec' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R1_NeedDomonionId) == 0x000028, "Member 'FGuildWarSabukTemplate::R1_NeedDomonionId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R1_NameSid) == 0x00002C, "Member 'FGuildWarSabukTemplate::R1_NameSid' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R1_MapImgIconId) == 0x000030, "Member 'FGuildWarSabukTemplate::R1_MapImgIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R1_RunTimeMinute) == 0x000034, "Member 'FGuildWarSabukTemplate::R1_RunTimeMinute' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R1_WinRewardId) == 0x000038, "Member 'FGuildWarSabukTemplate::R1_WinRewardId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R1_MVPRewardId) == 0x00003C, "Member 'FGuildWarSabukTemplate::R1_MVPRewardId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R1_WinRewardGuildMoneyId01) == 0x000040, "Member 'FGuildWarSabukTemplate::R1_WinRewardGuildMoneyId01' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R1_WinRewardGuildMoneyCnt01) == 0x000044, "Member 'FGuildWarSabukTemplate::R1_WinRewardGuildMoneyCnt01' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R2_NeedOwnStageId) == 0x000048, "Member 'FGuildWarSabukTemplate::R2_NeedOwnStageId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R2_NameSid) == 0x000058, "Member 'FGuildWarSabukTemplate::R2_NameSid' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R2_MapImgIconId) == 0x00005C, "Member 'FGuildWarSabukTemplate::R2_MapImgIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R2_RunTimeMinute) == 0x000060, "Member 'FGuildWarSabukTemplate::R2_RunTimeMinute' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R2_WinRewardId) == 0x000064, "Member 'FGuildWarSabukTemplate::R2_WinRewardId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R2_MVPRewardId) == 0x000068, "Member 'FGuildWarSabukTemplate::R2_MVPRewardId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R2_WinRewardGuildMoneyId01) == 0x00006C, "Member 'FGuildWarSabukTemplate::R2_WinRewardGuildMoneyId01' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R2_WinRewardGuildMoneyCnt01) == 0x000070, "Member 'FGuildWarSabukTemplate::R2_WinRewardGuildMoneyCnt01' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_NeedOwnStageId) == 0x000078, "Member 'FGuildWarSabukTemplate::R3_NeedOwnStageId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_NameSid) == 0x000088, "Member 'FGuildWarSabukTemplate::R3_NameSid' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_MapImgIconId) == 0x00008C, "Member 'FGuildWarSabukTemplate::R3_MapImgIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_RunTimeMinute) == 0x000090, "Member 'FGuildWarSabukTemplate::R3_RunTimeMinute' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_ExtensionTimeMinute) == 0x000094, "Member 'FGuildWarSabukTemplate::R3_ExtensionTimeMinute' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_CinematicDialogueId) == 0x000098, "Member 'FGuildWarSabukTemplate::R3_CinematicDialogueId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_WinRewardId) == 0x00009C, "Member 'FGuildWarSabukTemplate::R3_WinRewardId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_MVPRewardId) == 0x0000A0, "Member 'FGuildWarSabukTemplate::R3_MVPRewardId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_LoseRewardId) == 0x0000A4, "Member 'FGuildWarSabukTemplate::R3_LoseRewardId' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_WinRewardGuildMoneyId01) == 0x0000A8, "Member 'FGuildWarSabukTemplate::R3_WinRewardGuildMoneyId01' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_WinRewardGuildMoneyCnt01) == 0x0000AC, "Member 'FGuildWarSabukTemplate::R3_WinRewardGuildMoneyCnt01' has a wrong offset!");
static_assert(offsetof(FGuildWarSabukTemplate, R3_WinRewardDominionId) == 0x0000B0, "Member 'FGuildWarSabukTemplate::R3_WinRewardDominionId' has a wrong offset!");

// ScriptStruct MirMobile.GuildWarSiegeTemplate
// 0x0180 (0x0188 - 0x0008)
struct FGuildWarSiegeTemplate final : public FTableRowBase
{
public:
	int32                                         SiegeId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Siege_StageId;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SiegeOpenDate;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AuctionMoneyId;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuctionMoneyValueMin;                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuctionIncreaseRate;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuctionGuildDevLevel;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CastleGateIconId;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CastleGateBGIconId;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CastleGateId;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CastleGate_DieIconLocation;                        // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GateLeverIconId;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GateLeverBGIconId;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GateLeverId01;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GateLeverId01_DieIconLocation;                     // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GateLeverId02;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GateLeverId02_DieIconLocation;                     // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GateLeverId03;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GateLeverId03_DieIconLocation;                     // 0x007C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GateLeverId04;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GateLeverId04_DieIconLocation;                     // 0x008C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureIconId;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureId_SiegeWin;                                // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RevivalFlagIconID;                                 // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RevivalFlagBGIconId;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RevivalFlag_Defence;                               // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevivalFlag_Offence;                               // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevivalFlag01;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevivalFlag02;                                     // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeTowerIdIconID;                                // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeTowerIdBGIconId;                              // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeTowerId01;                                    // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeTowerId02;                                    // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeTowerId03;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeTowerId04;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CatapultIconId;                                    // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CatapultBGIconId;                                  // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CatapultId01;                                      // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CatapultId02;                                      // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CatapultId03;                                      // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CatapultId04;                                      // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SiegeTowerId01_EffectLocation;                     // 0x0100(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SiegeTowerId01_EffectRotationYaw;                  // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SiegeTowerId02_EffectLocation;                     // 0x0110(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SiegeTowerId02_EffectRotationYaw;                  // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SiegeTowerId03_EffectLocation;                     // 0x0120(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SiegeTowerId03_EffectRotationYaw;                  // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SiegeTowerId04_EffectLocation;                     // 0x0130(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SiegeTowerId04_EffectRotationYaw;                  // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Catapultid01_EffectLocation;                       // 0x0140(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CatapultId01_EffectRotationYaw;                    // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Catapultid02_EffectLocation;                       // 0x0150(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CatapultId02_EffectRotationYaw;                    // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Catapultid03_EffectLocation;                       // 0x0160(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CatapultId03_EffectRotationYaw;                    // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Catapultid04_EffectLocation;                       // 0x0170(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CatapultId04_EffectRotationYaw;                    // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_DominionId;                                 // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuildWarSiegeTemplate) == 0x000008, "Wrong alignment on FGuildWarSiegeTemplate");
static_assert(sizeof(FGuildWarSiegeTemplate) == 0x000188, "Wrong size on FGuildWarSiegeTemplate");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeId) == 0x000008, "Member 'FGuildWarSiegeTemplate::SiegeId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, Siege_StageId) == 0x00000C, "Member 'FGuildWarSiegeTemplate::Siege_StageId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, NameSId) == 0x000010, "Member 'FGuildWarSiegeTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeOpenDate) == 0x000018, "Member 'FGuildWarSiegeTemplate::SiegeOpenDate' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, AuctionMoneyId) == 0x000028, "Member 'FGuildWarSiegeTemplate::AuctionMoneyId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, AuctionMoneyValueMin) == 0x00002C, "Member 'FGuildWarSiegeTemplate::AuctionMoneyValueMin' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, AuctionIncreaseRate) == 0x000030, "Member 'FGuildWarSiegeTemplate::AuctionIncreaseRate' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, AuctionGuildDevLevel) == 0x000034, "Member 'FGuildWarSiegeTemplate::AuctionGuildDevLevel' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CastleGateIconId) == 0x000038, "Member 'FGuildWarSiegeTemplate::CastleGateIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CastleGateBGIconId) == 0x00003C, "Member 'FGuildWarSiegeTemplate::CastleGateBGIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CastleGateId) == 0x000040, "Member 'FGuildWarSiegeTemplate::CastleGateId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CastleGate_DieIconLocation) == 0x000044, "Member 'FGuildWarSiegeTemplate::CastleGate_DieIconLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, GateLeverIconId) == 0x000050, "Member 'FGuildWarSiegeTemplate::GateLeverIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, GateLeverBGIconId) == 0x000054, "Member 'FGuildWarSiegeTemplate::GateLeverBGIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, GateLeverId01) == 0x000058, "Member 'FGuildWarSiegeTemplate::GateLeverId01' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, GateLeverId01_DieIconLocation) == 0x00005C, "Member 'FGuildWarSiegeTemplate::GateLeverId01_DieIconLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, GateLeverId02) == 0x000068, "Member 'FGuildWarSiegeTemplate::GateLeverId02' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, GateLeverId02_DieIconLocation) == 0x00006C, "Member 'FGuildWarSiegeTemplate::GateLeverId02_DieIconLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, GateLeverId03) == 0x000078, "Member 'FGuildWarSiegeTemplate::GateLeverId03' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, GateLeverId03_DieIconLocation) == 0x00007C, "Member 'FGuildWarSiegeTemplate::GateLeverId03_DieIconLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, GateLeverId04) == 0x000088, "Member 'FGuildWarSiegeTemplate::GateLeverId04' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, GateLeverId04_DieIconLocation) == 0x00008C, "Member 'FGuildWarSiegeTemplate::GateLeverId04_DieIconLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CaptureIconId) == 0x000098, "Member 'FGuildWarSiegeTemplate::CaptureIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CaptureId_SiegeWin) == 0x00009C, "Member 'FGuildWarSiegeTemplate::CaptureId_SiegeWin' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, RevivalFlagIconID) == 0x0000A0, "Member 'FGuildWarSiegeTemplate::RevivalFlagIconID' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, RevivalFlagBGIconId) == 0x0000B0, "Member 'FGuildWarSiegeTemplate::RevivalFlagBGIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, RevivalFlag_Defence) == 0x0000C0, "Member 'FGuildWarSiegeTemplate::RevivalFlag_Defence' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, RevivalFlag_Offence) == 0x0000C4, "Member 'FGuildWarSiegeTemplate::RevivalFlag_Offence' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, RevivalFlag01) == 0x0000C8, "Member 'FGuildWarSiegeTemplate::RevivalFlag01' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, RevivalFlag02) == 0x0000CC, "Member 'FGuildWarSiegeTemplate::RevivalFlag02' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerIdIconID) == 0x0000D0, "Member 'FGuildWarSiegeTemplate::SiegeTowerIdIconID' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerIdBGIconId) == 0x0000D4, "Member 'FGuildWarSiegeTemplate::SiegeTowerIdBGIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId01) == 0x0000D8, "Member 'FGuildWarSiegeTemplate::SiegeTowerId01' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId02) == 0x0000DC, "Member 'FGuildWarSiegeTemplate::SiegeTowerId02' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId03) == 0x0000E0, "Member 'FGuildWarSiegeTemplate::SiegeTowerId03' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId04) == 0x0000E4, "Member 'FGuildWarSiegeTemplate::SiegeTowerId04' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CatapultIconId) == 0x0000E8, "Member 'FGuildWarSiegeTemplate::CatapultIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CatapultBGIconId) == 0x0000EC, "Member 'FGuildWarSiegeTemplate::CatapultBGIconId' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CatapultId01) == 0x0000F0, "Member 'FGuildWarSiegeTemplate::CatapultId01' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CatapultId02) == 0x0000F4, "Member 'FGuildWarSiegeTemplate::CatapultId02' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CatapultId03) == 0x0000F8, "Member 'FGuildWarSiegeTemplate::CatapultId03' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CatapultId04) == 0x0000FC, "Member 'FGuildWarSiegeTemplate::CatapultId04' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId01_EffectLocation) == 0x000100, "Member 'FGuildWarSiegeTemplate::SiegeTowerId01_EffectLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId01_EffectRotationYaw) == 0x00010C, "Member 'FGuildWarSiegeTemplate::SiegeTowerId01_EffectRotationYaw' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId02_EffectLocation) == 0x000110, "Member 'FGuildWarSiegeTemplate::SiegeTowerId02_EffectLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId02_EffectRotationYaw) == 0x00011C, "Member 'FGuildWarSiegeTemplate::SiegeTowerId02_EffectRotationYaw' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId03_EffectLocation) == 0x000120, "Member 'FGuildWarSiegeTemplate::SiegeTowerId03_EffectLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId03_EffectRotationYaw) == 0x00012C, "Member 'FGuildWarSiegeTemplate::SiegeTowerId03_EffectRotationYaw' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId04_EffectLocation) == 0x000130, "Member 'FGuildWarSiegeTemplate::SiegeTowerId04_EffectLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, SiegeTowerId04_EffectRotationYaw) == 0x00013C, "Member 'FGuildWarSiegeTemplate::SiegeTowerId04_EffectRotationYaw' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, Catapultid01_EffectLocation) == 0x000140, "Member 'FGuildWarSiegeTemplate::Catapultid01_EffectLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CatapultId01_EffectRotationYaw) == 0x00014C, "Member 'FGuildWarSiegeTemplate::CatapultId01_EffectRotationYaw' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, Catapultid02_EffectLocation) == 0x000150, "Member 'FGuildWarSiegeTemplate::Catapultid02_EffectLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CatapultId02_EffectRotationYaw) == 0x00015C, "Member 'FGuildWarSiegeTemplate::CatapultId02_EffectRotationYaw' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, Catapultid03_EffectLocation) == 0x000160, "Member 'FGuildWarSiegeTemplate::Catapultid03_EffectLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CatapultId03_EffectRotationYaw) == 0x00016C, "Member 'FGuildWarSiegeTemplate::CatapultId03_EffectRotationYaw' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, Catapultid04_EffectLocation) == 0x000170, "Member 'FGuildWarSiegeTemplate::Catapultid04_EffectLocation' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, CatapultId04_EffectRotationYaw) == 0x00017C, "Member 'FGuildWarSiegeTemplate::CatapultId04_EffectRotationYaw' has a wrong offset!");
static_assert(offsetof(FGuildWarSiegeTemplate, Reward_DominionId) == 0x000180, "Member 'FGuildWarSiegeTemplate::Reward_DominionId' has a wrong offset!");

// ScriptStruct MirMobile.HEAVEN_TRAINING_GRADETemplate
// 0x0068 (0x0070 - 0x0008)
struct FHEAVEN_TRAINING_GRADETemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTrainingGroupId;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_Grade;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedCostId;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedCostCount;                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedUse01Id;                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedItem01Count;                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedUse02Id;                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedItem02Count;                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedUse03Id;                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedItem03Count;                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedUse04Id;                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedItem04Count;                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_UpgradeTimeSec;                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_GuildHelpTimeSec;                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_RandomOptionAdd;                    // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_RandomOptionCountMax;               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_RandomOptionGroupId;                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_ChangeNeedCost01Id;                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_ChangeNeedCost01Count;              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_ChangeNeedCost02Id;                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_ChangeNeedCost02Count;              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_ChangeNeedItemUseId;                // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_ChangeNeedItemCount;                // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeavenTraining_NeedLevel;                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHEAVEN_TRAINING_GRADETemplate) == 0x000008, "Wrong alignment on FHEAVEN_TRAINING_GRADETemplate");
static_assert(sizeof(FHEAVEN_TRAINING_GRADETemplate) == 0x000070, "Wrong size on FHEAVEN_TRAINING_GRADETemplate");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, UniqueId) == 0x000008, "Member 'FHEAVEN_TRAINING_GRADETemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTrainingGroupId) == 0x00000C, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTrainingGroupId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_Grade) == 0x000010, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_Grade' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedCostId) == 0x000014, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedCostId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedCostCount) == 0x000018, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedCostCount' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedUse01Id) == 0x00001C, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedUse01Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedItem01Count) == 0x000020, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedItem01Count' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedUse02Id) == 0x000024, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedUse02Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedItem02Count) == 0x000028, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedItem02Count' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedUse03Id) == 0x00002C, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedUse03Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedItem03Count) == 0x000030, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedItem03Count' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedUse04Id) == 0x000034, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedUse04Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedItem04Count) == 0x000038, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedItem04Count' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_UpgradeTimeSec) == 0x00003C, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_UpgradeTimeSec' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_GuildHelpTimeSec) == 0x000040, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_GuildHelpTimeSec' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_RandomOptionAdd) == 0x000044, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_RandomOptionAdd' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_RandomOptionCountMax) == 0x000048, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_RandomOptionCountMax' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_RandomOptionGroupId) == 0x00004C, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_RandomOptionGroupId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_ChangeNeedCost01Id) == 0x000050, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_ChangeNeedCost01Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_ChangeNeedCost01Count) == 0x000054, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_ChangeNeedCost01Count' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_ChangeNeedCost02Id) == 0x000058, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_ChangeNeedCost02Id' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_ChangeNeedCost02Count) == 0x00005C, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_ChangeNeedCost02Count' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_ChangeNeedItemUseId) == 0x000060, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_ChangeNeedItemUseId' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_ChangeNeedItemCount) == 0x000064, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_ChangeNeedItemCount' has a wrong offset!");
static_assert(offsetof(FHEAVEN_TRAINING_GRADETemplate, HeavenTraining_NeedLevel) == 0x000068, "Member 'FHEAVEN_TRAINING_GRADETemplate::HeavenTraining_NeedLevel' has a wrong offset!");

// ScriptStruct MirMobile.HiddenPathTemplate
// 0x0010 (0x0018 - 0x0008)
struct FHiddenPathTemplate final : public FTableRowBase
{
public:
	int32                                         Portal1_ID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Portal2_ID;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaName1_ID;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HiddenPathType;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHiddenPathTemplate) == 0x000008, "Wrong alignment on FHiddenPathTemplate");
static_assert(sizeof(FHiddenPathTemplate) == 0x000018, "Wrong size on FHiddenPathTemplate");
static_assert(offsetof(FHiddenPathTemplate, Portal1_ID) == 0x000008, "Member 'FHiddenPathTemplate::Portal1_ID' has a wrong offset!");
static_assert(offsetof(FHiddenPathTemplate, Portal2_ID) == 0x00000C, "Member 'FHiddenPathTemplate::Portal2_ID' has a wrong offset!");
static_assert(offsetof(FHiddenPathTemplate, AreaName1_ID) == 0x000010, "Member 'FHiddenPathTemplate::AreaName1_ID' has a wrong offset!");
static_assert(offsetof(FHiddenPathTemplate, HiddenPathType) == 0x000014, "Member 'FHiddenPathTemplate::HiddenPathType' has a wrong offset!");

// ScriptStruct MirMobile.HolyStuffGradeTemplate
// 0x0068 (0x0070 - 0x0008)
struct FHolyStuffGradeTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuffId;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_Grade;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status01_Id;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status01_Value;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status02_Id;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status02_Value;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status03_Id;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status03_Value;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status04_Id;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status04_Value;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_Level;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_CombatPower;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedLevel;                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedCostId;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedCostCount;                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedUse01Id;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedItem01Count;                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedUse02Id;                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedItem02Count;                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedUse03Id;                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedItem03Count;                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedUse04Id;                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedItem04Count;                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHolyStuffGradeTemplate) == 0x000008, "Wrong alignment on FHolyStuffGradeTemplate");
static_assert(sizeof(FHolyStuffGradeTemplate) == 0x000070, "Wrong size on FHolyStuffGradeTemplate");
static_assert(offsetof(FHolyStuffGradeTemplate, Name) == 0x000008, "Member 'FHolyStuffGradeTemplate::Name' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, UniqueId) == 0x00000C, "Member 'FHolyStuffGradeTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuffId) == 0x000010, "Member 'FHolyStuffGradeTemplate::HolyStuffId' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_Grade) == 0x000014, "Member 'FHolyStuffGradeTemplate::HolyStuff_Grade' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, Status01_Id) == 0x000018, "Member 'FHolyStuffGradeTemplate::Status01_Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, Status01_Value) == 0x00001C, "Member 'FHolyStuffGradeTemplate::Status01_Value' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, Status02_Id) == 0x000020, "Member 'FHolyStuffGradeTemplate::Status02_Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, Status02_Value) == 0x000024, "Member 'FHolyStuffGradeTemplate::Status02_Value' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, Status03_Id) == 0x000028, "Member 'FHolyStuffGradeTemplate::Status03_Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, Status03_Value) == 0x00002C, "Member 'FHolyStuffGradeTemplate::Status03_Value' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, Status04_Id) == 0x000030, "Member 'FHolyStuffGradeTemplate::Status04_Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, Status04_Value) == 0x000034, "Member 'FHolyStuffGradeTemplate::Status04_Value' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, SkillId) == 0x000038, "Member 'FHolyStuffGradeTemplate::SkillId' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, Skill_Level) == 0x00003C, "Member 'FHolyStuffGradeTemplate::Skill_Level' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, Skill_CombatPower) == 0x000040, "Member 'FHolyStuffGradeTemplate::Skill_CombatPower' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedLevel) == 0x000044, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedLevel' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedCostId) == 0x000048, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedCostId' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedCostCount) == 0x00004C, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedCostCount' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedUse01Id) == 0x000050, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedUse01Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedItem01Count) == 0x000054, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedItem01Count' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedUse02Id) == 0x000058, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedUse02Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedItem02Count) == 0x00005C, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedItem02Count' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedUse03Id) == 0x000060, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedUse03Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedItem03Count) == 0x000064, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedItem03Count' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedUse04Id) == 0x000068, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedUse04Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffGradeTemplate, HolyStuff_NeedItem04Count) == 0x00006C, "Member 'FHolyStuffGradeTemplate::HolyStuff_NeedItem04Count' has a wrong offset!");

// ScriptStruct MirMobile.HolyStuffLevelTemplate
// 0x0070 (0x0078 - 0x0008)
struct FHolyStuffLevelTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuffId;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_Grade;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_Level;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status_MaxLevel;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status01_Id;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status01_Value;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status02_Id;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status02_Value;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status03_Id;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status03_Value;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status04_Id;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status04_Value;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedCostId;                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedCostCount;                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedUse01Id;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedItem01Count;                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedUse02Id;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedItem02Count;                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedUse03Id;                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedItem03Count;                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedUse04Id;                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_NeedItem04Count;                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_Success;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyStuff_Fail;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultSlot_Bg_Grade;                               // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHolyStuffLevelTemplate) == 0x000008, "Wrong alignment on FHolyStuffLevelTemplate");
static_assert(sizeof(FHolyStuffLevelTemplate) == 0x000078, "Wrong size on FHolyStuffLevelTemplate");
static_assert(offsetof(FHolyStuffLevelTemplate, Name) == 0x000008, "Member 'FHolyStuffLevelTemplate::Name' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, UniqueId) == 0x00000C, "Member 'FHolyStuffLevelTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuffId) == 0x000010, "Member 'FHolyStuffLevelTemplate::HolyStuffId' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_Grade) == 0x000014, "Member 'FHolyStuffLevelTemplate::HolyStuff_Grade' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_Level) == 0x000018, "Member 'FHolyStuffLevelTemplate::HolyStuff_Level' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, Status_MaxLevel) == 0x00001C, "Member 'FHolyStuffLevelTemplate::Status_MaxLevel' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, Status01_Id) == 0x000020, "Member 'FHolyStuffLevelTemplate::Status01_Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, Status01_Value) == 0x000024, "Member 'FHolyStuffLevelTemplate::Status01_Value' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, Status02_Id) == 0x000028, "Member 'FHolyStuffLevelTemplate::Status02_Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, Status02_Value) == 0x00002C, "Member 'FHolyStuffLevelTemplate::Status02_Value' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, Status03_Id) == 0x000030, "Member 'FHolyStuffLevelTemplate::Status03_Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, Status03_Value) == 0x000034, "Member 'FHolyStuffLevelTemplate::Status03_Value' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, Status04_Id) == 0x000038, "Member 'FHolyStuffLevelTemplate::Status04_Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, Status04_Value) == 0x00003C, "Member 'FHolyStuffLevelTemplate::Status04_Value' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_NeedCostId) == 0x000040, "Member 'FHolyStuffLevelTemplate::HolyStuff_NeedCostId' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_NeedCostCount) == 0x000044, "Member 'FHolyStuffLevelTemplate::HolyStuff_NeedCostCount' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_NeedUse01Id) == 0x000048, "Member 'FHolyStuffLevelTemplate::HolyStuff_NeedUse01Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_NeedItem01Count) == 0x00004C, "Member 'FHolyStuffLevelTemplate::HolyStuff_NeedItem01Count' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_NeedUse02Id) == 0x000050, "Member 'FHolyStuffLevelTemplate::HolyStuff_NeedUse02Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_NeedItem02Count) == 0x000054, "Member 'FHolyStuffLevelTemplate::HolyStuff_NeedItem02Count' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_NeedUse03Id) == 0x000058, "Member 'FHolyStuffLevelTemplate::HolyStuff_NeedUse03Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_NeedItem03Count) == 0x00005C, "Member 'FHolyStuffLevelTemplate::HolyStuff_NeedItem03Count' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_NeedUse04Id) == 0x000060, "Member 'FHolyStuffLevelTemplate::HolyStuff_NeedUse04Id' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_NeedItem04Count) == 0x000064, "Member 'FHolyStuffLevelTemplate::HolyStuff_NeedItem04Count' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_Success) == 0x000068, "Member 'FHolyStuffLevelTemplate::HolyStuff_Success' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, HolyStuff_Fail) == 0x00006C, "Member 'FHolyStuffLevelTemplate::HolyStuff_Fail' has a wrong offset!");
static_assert(offsetof(FHolyStuffLevelTemplate, ResultSlot_Bg_Grade) == 0x000070, "Member 'FHolyStuffLevelTemplate::ResultSlot_Bg_Grade' has a wrong offset!");

// ScriptStruct MirMobile.IconTemplate
// 0x0020 (0x0028 - 0x0008)
struct FIconTemplate final : public FTableRowBase
{
public:
	int32                                         IconID;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMultiLanguage;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIconTemplate) == 0x000008, "Wrong alignment on FIconTemplate");
static_assert(sizeof(FIconTemplate) == 0x000028, "Wrong size on FIconTemplate");
static_assert(offsetof(FIconTemplate, IconID) == 0x000008, "Member 'FIconTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FIconTemplate, Path) == 0x000010, "Member 'FIconTemplate::Path' has a wrong offset!");
static_assert(offsetof(FIconTemplate, IsMultiLanguage) == 0x000020, "Member 'FIconTemplate::IsMultiLanguage' has a wrong offset!");

// ScriptStruct MirMobile.StatusCalculateTemplate
// 0x0048 (0x0050 - 0x0008)
struct FStatusCalculateTemplate final : public FTableRowBase
{
public:
	int32                                         StatusId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatusCode;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CalculateType;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColletStatus1;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColletStatus2;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitValue1;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value1;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitValue2;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value2;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitValue3;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value3;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitValue4;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value4;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatusCalculateTemplate) == 0x000008, "Wrong alignment on FStatusCalculateTemplate");
static_assert(sizeof(FStatusCalculateTemplate) == 0x000050, "Wrong size on FStatusCalculateTemplate");
static_assert(offsetof(FStatusCalculateTemplate, StatusId) == 0x000008, "Member 'FStatusCalculateTemplate::StatusId' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, StatusCode) == 0x000010, "Member 'FStatusCalculateTemplate::StatusCode' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, CalculateType) == 0x000020, "Member 'FStatusCalculateTemplate::CalculateType' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, ColletStatus1) == 0x000024, "Member 'FStatusCalculateTemplate::ColletStatus1' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, ColletStatus2) == 0x000028, "Member 'FStatusCalculateTemplate::ColletStatus2' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, LimitValue1) == 0x00002C, "Member 'FStatusCalculateTemplate::LimitValue1' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, Value1) == 0x000030, "Member 'FStatusCalculateTemplate::Value1' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, LimitValue2) == 0x000034, "Member 'FStatusCalculateTemplate::LimitValue2' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, Value2) == 0x000038, "Member 'FStatusCalculateTemplate::Value2' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, LimitValue3) == 0x00003C, "Member 'FStatusCalculateTemplate::LimitValue3' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, Value3) == 0x000040, "Member 'FStatusCalculateTemplate::Value3' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, LimitValue4) == 0x000044, "Member 'FStatusCalculateTemplate::LimitValue4' has a wrong offset!");
static_assert(offsetof(FStatusCalculateTemplate, Value4) == 0x000048, "Member 'FStatusCalculateTemplate::Value4' has a wrong offset!");

// ScriptStruct MirMobile.QuestCombatDeviationTemplate
// 0x0018 (0x0020 - 0x0008)
struct FQuestCombatDeviationTemplate final : public FTableRowBase
{
public:
	int32                                         DeviationId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMin;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighDeviation1;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighDeviation2;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowDeviation1;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestCombatDeviationTemplate) == 0x000008, "Wrong alignment on FQuestCombatDeviationTemplate");
static_assert(sizeof(FQuestCombatDeviationTemplate) == 0x000020, "Wrong size on FQuestCombatDeviationTemplate");
static_assert(offsetof(FQuestCombatDeviationTemplate, DeviationId) == 0x000008, "Member 'FQuestCombatDeviationTemplate::DeviationId' has a wrong offset!");
static_assert(offsetof(FQuestCombatDeviationTemplate, LevelMin) == 0x00000C, "Member 'FQuestCombatDeviationTemplate::LevelMin' has a wrong offset!");
static_assert(offsetof(FQuestCombatDeviationTemplate, LevelMax) == 0x000010, "Member 'FQuestCombatDeviationTemplate::LevelMax' has a wrong offset!");
static_assert(offsetof(FQuestCombatDeviationTemplate, HighDeviation1) == 0x000014, "Member 'FQuestCombatDeviationTemplate::HighDeviation1' has a wrong offset!");
static_assert(offsetof(FQuestCombatDeviationTemplate, HighDeviation2) == 0x000018, "Member 'FQuestCombatDeviationTemplate::HighDeviation2' has a wrong offset!");
static_assert(offsetof(FQuestCombatDeviationTemplate, LowDeviation1) == 0x00001C, "Member 'FQuestCombatDeviationTemplate::LowDeviation1' has a wrong offset!");

// ScriptStruct MirMobile.ItemExtendTemplate
// 0x0030 (0x0038 - 0x0008)
struct FItemExtendTemplate final : public FTableRowBase
{
public:
	int32                                         ItemId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRandomOptionRatio01;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRandomOptionRatio02;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePoint;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuxuryType;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuxuryID;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayObjectId;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayIconId;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WonderBuffId;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuxurySubID;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AncientTreasureStep;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemExtendTemplate) == 0x000008, "Wrong alignment on FItemExtendTemplate");
static_assert(sizeof(FItemExtendTemplate) == 0x000038, "Wrong size on FItemExtendTemplate");
static_assert(offsetof(FItemExtendTemplate, ItemId) == 0x000008, "Member 'FItemExtendTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FItemExtendTemplate, AddRandomOptionRatio01) == 0x00000C, "Member 'FItemExtendTemplate::AddRandomOptionRatio01' has a wrong offset!");
static_assert(offsetof(FItemExtendTemplate, AddRandomOptionRatio02) == 0x000010, "Member 'FItemExtendTemplate::AddRandomOptionRatio02' has a wrong offset!");
static_assert(offsetof(FItemExtendTemplate, BattlePoint) == 0x000014, "Member 'FItemExtendTemplate::BattlePoint' has a wrong offset!");
static_assert(offsetof(FItemExtendTemplate, LuxuryType) == 0x000018, "Member 'FItemExtendTemplate::LuxuryType' has a wrong offset!");
static_assert(offsetof(FItemExtendTemplate, LuxuryID) == 0x00001C, "Member 'FItemExtendTemplate::LuxuryID' has a wrong offset!");
static_assert(offsetof(FItemExtendTemplate, DisplayObjectId) == 0x000020, "Member 'FItemExtendTemplate::DisplayObjectId' has a wrong offset!");
static_assert(offsetof(FItemExtendTemplate, DisplayIconId) == 0x000024, "Member 'FItemExtendTemplate::DisplayIconId' has a wrong offset!");
static_assert(offsetof(FItemExtendTemplate, WonderBuffId) == 0x000028, "Member 'FItemExtendTemplate::WonderBuffId' has a wrong offset!");
static_assert(offsetof(FItemExtendTemplate, LuxurySubID) == 0x00002C, "Member 'FItemExtendTemplate::LuxurySubID' has a wrong offset!");
static_assert(offsetof(FItemExtendTemplate, AncientTreasureStep) == 0x000030, "Member 'FItemExtendTemplate::AncientTreasureStep' has a wrong offset!");

// ScriptStruct MirMobile.InstanceDungeonInfoTemplate
// 0x00D8 (0x0170 - 0x0098)
struct FInstanceDungeonInfoTemplate final : public FRewardCommonTemplate
{
public:
	int32                                         DungeonId;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stage_Id;                                          // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShow;                                            // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TitleSId;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DungeonKind;                                       // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MemberKind;                                        // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedPerson;                                 // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OccupationID;                                      // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionReqCombatPoint;                           // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartLevel;                                        // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost01Id;                                      // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost01Count;                                   // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterType;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterTypeSub;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterCount;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedCombatPoint;                            // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageThumbnail;                                    // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterThumnail;                                   // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainBackGroundImg;                                 // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelofdifficultyGroup;                            // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Levelofdifficulty;                                 // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stage_Story;                                       // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 DungeonSchedule;                                   // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DropID01;                                          // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropID02;                                          // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropID03;                                          // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropID04;                                          // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropID05;                                          // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropID06;                                          // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropID07;                                          // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropID08;                                          // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildContributionReward;                           // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildMemberClearGiftId;                            // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PortraitID;                                        // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardType1;                             // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardTypeSub1;                          // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardValue1;                            // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardType2;                             // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardTypeSub2;                          // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardValue2;                            // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardType3;                             // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardTypeSub3;                          // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildClearRewardValue3;                            // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x20];                                     // 0x0150(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInstanceDungeonInfoTemplate) == 0x000008, "Wrong alignment on FInstanceDungeonInfoTemplate");
static_assert(sizeof(FInstanceDungeonInfoTemplate) == 0x000170, "Wrong size on FInstanceDungeonInfoTemplate");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DungeonId) == 0x000098, "Member 'FInstanceDungeonInfoTemplate::DungeonId' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, Stage_Id) == 0x00009C, "Member 'FInstanceDungeonInfoTemplate::Stage_Id' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, IsShow) == 0x0000A0, "Member 'FInstanceDungeonInfoTemplate::IsShow' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, TitleSId) == 0x0000A4, "Member 'FInstanceDungeonInfoTemplate::TitleSId' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DungeonKind) == 0x0000A8, "Member 'FInstanceDungeonInfoTemplate::DungeonKind' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, MemberKind) == 0x0000AC, "Member 'FInstanceDungeonInfoTemplate::MemberKind' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, RecommendedPerson) == 0x0000B0, "Member 'FInstanceDungeonInfoTemplate::RecommendedPerson' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, OccupationID) == 0x0000B4, "Member 'FInstanceDungeonInfoTemplate::OccupationID' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, ConditionReqCombatPoint) == 0x0000B8, "Member 'FInstanceDungeonInfoTemplate::ConditionReqCombatPoint' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, StartLevel) == 0x0000BC, "Member 'FInstanceDungeonInfoTemplate::StartLevel' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, NeedCost01Id) == 0x0000C0, "Member 'FInstanceDungeonInfoTemplate::NeedCost01Id' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, NeedCost01Count) == 0x0000C4, "Member 'FInstanceDungeonInfoTemplate::NeedCost01Count' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, NeedEnterType) == 0x0000C8, "Member 'FInstanceDungeonInfoTemplate::NeedEnterType' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, NeedEnterTypeSub) == 0x0000CC, "Member 'FInstanceDungeonInfoTemplate::NeedEnterTypeSub' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, NeedEnterCount) == 0x0000D0, "Member 'FInstanceDungeonInfoTemplate::NeedEnterCount' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, RecommendedCombatPoint) == 0x0000D4, "Member 'FInstanceDungeonInfoTemplate::RecommendedCombatPoint' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, StageThumbnail) == 0x0000D8, "Member 'FInstanceDungeonInfoTemplate::StageThumbnail' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, MonsterThumnail) == 0x0000DC, "Member 'FInstanceDungeonInfoTemplate::MonsterThumnail' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, MainBackGroundImg) == 0x0000E0, "Member 'FInstanceDungeonInfoTemplate::MainBackGroundImg' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, LevelofdifficultyGroup) == 0x0000E4, "Member 'FInstanceDungeonInfoTemplate::LevelofdifficultyGroup' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, Levelofdifficulty) == 0x0000E8, "Member 'FInstanceDungeonInfoTemplate::Levelofdifficulty' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, Stage_Story) == 0x0000EC, "Member 'FInstanceDungeonInfoTemplate::Stage_Story' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DungeonSchedule) == 0x0000F0, "Member 'FInstanceDungeonInfoTemplate::DungeonSchedule' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DropID01) == 0x000100, "Member 'FInstanceDungeonInfoTemplate::DropID01' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DropID02) == 0x000104, "Member 'FInstanceDungeonInfoTemplate::DropID02' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DropID03) == 0x000108, "Member 'FInstanceDungeonInfoTemplate::DropID03' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DropID04) == 0x00010C, "Member 'FInstanceDungeonInfoTemplate::DropID04' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DropID05) == 0x000110, "Member 'FInstanceDungeonInfoTemplate::DropID05' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DropID06) == 0x000114, "Member 'FInstanceDungeonInfoTemplate::DropID06' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DropID07) == 0x000118, "Member 'FInstanceDungeonInfoTemplate::DropID07' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, DropID08) == 0x00011C, "Member 'FInstanceDungeonInfoTemplate::DropID08' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildContributionReward) == 0x000120, "Member 'FInstanceDungeonInfoTemplate::GuildContributionReward' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildMemberClearGiftId) == 0x000124, "Member 'FInstanceDungeonInfoTemplate::GuildMemberClearGiftId' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, PortraitID) == 0x000128, "Member 'FInstanceDungeonInfoTemplate::PortraitID' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildClearRewardType1) == 0x00012C, "Member 'FInstanceDungeonInfoTemplate::GuildClearRewardType1' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildClearRewardTypeSub1) == 0x000130, "Member 'FInstanceDungeonInfoTemplate::GuildClearRewardTypeSub1' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildClearRewardValue1) == 0x000134, "Member 'FInstanceDungeonInfoTemplate::GuildClearRewardValue1' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildClearRewardType2) == 0x000138, "Member 'FInstanceDungeonInfoTemplate::GuildClearRewardType2' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildClearRewardTypeSub2) == 0x00013C, "Member 'FInstanceDungeonInfoTemplate::GuildClearRewardTypeSub2' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildClearRewardValue2) == 0x000140, "Member 'FInstanceDungeonInfoTemplate::GuildClearRewardValue2' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildClearRewardType3) == 0x000144, "Member 'FInstanceDungeonInfoTemplate::GuildClearRewardType3' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildClearRewardTypeSub3) == 0x000148, "Member 'FInstanceDungeonInfoTemplate::GuildClearRewardTypeSub3' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonInfoTemplate, GuildClearRewardValue3) == 0x00014C, "Member 'FInstanceDungeonInfoTemplate::GuildClearRewardValue3' has a wrong offset!");

// ScriptStruct MirMobile.SmallTalkDialogueTemplate
// 0x0198 (0x01A0 - 0x0008)
struct FSmallTalkDialogueTemplate final : public FTableRowBase
{
public:
	int32                                         SmalltTalkDialogueId;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NpcID;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextDialogueID;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_CHT;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_CHS;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_JPN;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_ENG;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_THA;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_IND;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_VIE;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_GER;                                 // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_SPA;                                 // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_POR;                                 // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Male_RUS;                                 // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female;                                   // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_CHT;                               // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_CHS;                               // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_JPN;                               // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_ENG;                               // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_THA;                               // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_IND;                               // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_VIE;                               // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_GER;                               // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_SPA;                               // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_POR;                               // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dialogue_Female_RUS;                               // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sound_Male;                                        // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sound_Female;                                      // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmallTalkDialogueTemplate) == 0x000008, "Wrong alignment on FSmallTalkDialogueTemplate");
static_assert(sizeof(FSmallTalkDialogueTemplate) == 0x0001A0, "Wrong size on FSmallTalkDialogueTemplate");
static_assert(offsetof(FSmallTalkDialogueTemplate, SmalltTalkDialogueId) == 0x000008, "Member 'FSmallTalkDialogueTemplate::SmalltTalkDialogueId' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, NpcID) == 0x00000C, "Member 'FSmallTalkDialogueTemplate::NpcID' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, NextDialogueID) == 0x000010, "Member 'FSmallTalkDialogueTemplate::NextDialogueID' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, PlayTime) == 0x000014, "Member 'FSmallTalkDialogueTemplate::PlayTime' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male) == 0x000018, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_CHT) == 0x000028, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_CHT' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_CHS) == 0x000038, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_CHS' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_JPN) == 0x000048, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_JPN' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_ENG) == 0x000058, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_ENG' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_THA) == 0x000068, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_THA' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_IND) == 0x000078, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_IND' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_VIE) == 0x000088, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_VIE' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_GER) == 0x000098, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_GER' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_SPA) == 0x0000A8, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_SPA' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_POR) == 0x0000B8, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_POR' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Male_RUS) == 0x0000C8, "Member 'FSmallTalkDialogueTemplate::Dialogue_Male_RUS' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female) == 0x0000D8, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_CHT) == 0x0000E8, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_CHT' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_CHS) == 0x0000F8, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_CHS' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_JPN) == 0x000108, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_JPN' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_ENG) == 0x000118, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_ENG' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_THA) == 0x000128, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_THA' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_IND) == 0x000138, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_IND' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_VIE) == 0x000148, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_VIE' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_GER) == 0x000158, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_GER' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_SPA) == 0x000168, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_SPA' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_POR) == 0x000178, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_POR' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Dialogue_Female_RUS) == 0x000188, "Member 'FSmallTalkDialogueTemplate::Dialogue_Female_RUS' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Sound_Male) == 0x000198, "Member 'FSmallTalkDialogueTemplate::Sound_Male' has a wrong offset!");
static_assert(offsetof(FSmallTalkDialogueTemplate, Sound_Female) == 0x00019C, "Member 'FSmallTalkDialogueTemplate::Sound_Female' has a wrong offset!");

// ScriptStruct MirMobile.InstanceDungeonSettingTemplate
// 0x0050 (0x0058 - 0x0008)
struct FInstanceDungeonSettingTemplate final : public FTableRowBase
{
public:
	int32                                         StageID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer1StringTemplateID;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer1Time;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer1UIshow;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer1UIshowTime;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer2StringTemplateID;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer2Time;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer2UIshow;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer2UIshowTime;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer3StringTemplateID;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer3Time;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer3UIshow;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer3UIshowTime;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer4StringTemplateID;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer4Time;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer4UIshow;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timer4UIshowTime;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BossAppearCutsceneID;                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BossKillCutsceneID;                                // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInstanceDungeonSettingTemplate) == 0x000008, "Wrong alignment on FInstanceDungeonSettingTemplate");
static_assert(sizeof(FInstanceDungeonSettingTemplate) == 0x000058, "Wrong size on FInstanceDungeonSettingTemplate");
static_assert(offsetof(FInstanceDungeonSettingTemplate, StageID) == 0x000008, "Member 'FInstanceDungeonSettingTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer1StringTemplateID) == 0x00000C, "Member 'FInstanceDungeonSettingTemplate::Timer1StringTemplateID' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer1Time) == 0x000010, "Member 'FInstanceDungeonSettingTemplate::Timer1Time' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer1UIshow) == 0x000014, "Member 'FInstanceDungeonSettingTemplate::Timer1UIshow' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer1UIshowTime) == 0x000018, "Member 'FInstanceDungeonSettingTemplate::Timer1UIshowTime' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer2StringTemplateID) == 0x00001C, "Member 'FInstanceDungeonSettingTemplate::Timer2StringTemplateID' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer2Time) == 0x000020, "Member 'FInstanceDungeonSettingTemplate::Timer2Time' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer2UIshow) == 0x000024, "Member 'FInstanceDungeonSettingTemplate::Timer2UIshow' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer2UIshowTime) == 0x000028, "Member 'FInstanceDungeonSettingTemplate::Timer2UIshowTime' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer3StringTemplateID) == 0x00002C, "Member 'FInstanceDungeonSettingTemplate::Timer3StringTemplateID' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer3Time) == 0x000030, "Member 'FInstanceDungeonSettingTemplate::Timer3Time' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer3UIshow) == 0x000034, "Member 'FInstanceDungeonSettingTemplate::Timer3UIshow' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer3UIshowTime) == 0x000038, "Member 'FInstanceDungeonSettingTemplate::Timer3UIshowTime' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer4StringTemplateID) == 0x00003C, "Member 'FInstanceDungeonSettingTemplate::Timer4StringTemplateID' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer4Time) == 0x000040, "Member 'FInstanceDungeonSettingTemplate::Timer4Time' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer4UIshow) == 0x000044, "Member 'FInstanceDungeonSettingTemplate::Timer4UIshow' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, Timer4UIshowTime) == 0x000048, "Member 'FInstanceDungeonSettingTemplate::Timer4UIshowTime' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, BossAppearCutsceneID) == 0x00004C, "Member 'FInstanceDungeonSettingTemplate::BossAppearCutsceneID' has a wrong offset!");
static_assert(offsetof(FInstanceDungeonSettingTemplate, BossKillCutsceneID) == 0x000050, "Member 'FInstanceDungeonSettingTemplate::BossKillCutsceneID' has a wrong offset!");

// ScriptStruct MirMobile.PorgressColor
// 0x0030 (0x0030 - 0x0000)
struct FPorgressColor final
{
public:
	struct FLinearColor                           BackGround;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Contents;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Tail;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPorgressColor) == 0x000004, "Wrong alignment on FPorgressColor");
static_assert(sizeof(FPorgressColor) == 0x000030, "Wrong size on FPorgressColor");
static_assert(offsetof(FPorgressColor, BackGround) == 0x000000, "Member 'FPorgressColor::BackGround' has a wrong offset!");
static_assert(offsetof(FPorgressColor, Contents) == 0x000010, "Member 'FPorgressColor::Contents' has a wrong offset!");
static_assert(offsetof(FPorgressColor, Tail) == 0x000020, "Member 'FPorgressColor::Tail' has a wrong offset!");

// ScriptStruct MirMobile.SpawnObjectDataTemplate
// 0x0030 (0x0038 - 0x0008)
struct FSpawnObjectDataTemplate final : public FTableRowBase
{
public:
	int32                                         TargetID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Location;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WarpCoordinate;                                    // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnObjectDataTemplate) == 0x000008, "Wrong alignment on FSpawnObjectDataTemplate");
static_assert(sizeof(FSpawnObjectDataTemplate) == 0x000038, "Wrong size on FSpawnObjectDataTemplate");
static_assert(offsetof(FSpawnObjectDataTemplate, TargetID) == 0x000008, "Member 'FSpawnObjectDataTemplate::TargetID' has a wrong offset!");
static_assert(offsetof(FSpawnObjectDataTemplate, Location) == 0x000010, "Member 'FSpawnObjectDataTemplate::Location' has a wrong offset!");
static_assert(offsetof(FSpawnObjectDataTemplate, Rotation) == 0x000020, "Member 'FSpawnObjectDataTemplate::Rotation' has a wrong offset!");
static_assert(offsetof(FSpawnObjectDataTemplate, WarpCoordinate) == 0x000024, "Member 'FSpawnObjectDataTemplate::WarpCoordinate' has a wrong offset!");

// ScriptStruct MirMobile.InventoryExtendItemTemplate
// 0x0018 (0x0020 - 0x0008)
struct FInventoryExtendItemTemplate final : public FTableRowBase
{
public:
	int32                                         ExtendId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InventoryType;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtendItemUseId;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtendValue;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtendSlotCost;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryExtendItemTemplate) == 0x000008, "Wrong alignment on FInventoryExtendItemTemplate");
static_assert(sizeof(FInventoryExtendItemTemplate) == 0x000020, "Wrong size on FInventoryExtendItemTemplate");
static_assert(offsetof(FInventoryExtendItemTemplate, ExtendId) == 0x000008, "Member 'FInventoryExtendItemTemplate::ExtendId' has a wrong offset!");
static_assert(offsetof(FInventoryExtendItemTemplate, InventoryType) == 0x00000C, "Member 'FInventoryExtendItemTemplate::InventoryType' has a wrong offset!");
static_assert(offsetof(FInventoryExtendItemTemplate, ExtendItemUseId) == 0x000010, "Member 'FInventoryExtendItemTemplate::ExtendItemUseId' has a wrong offset!");
static_assert(offsetof(FInventoryExtendItemTemplate, ExtendValue) == 0x000014, "Member 'FInventoryExtendItemTemplate::ExtendValue' has a wrong offset!");
static_assert(offsetof(FInventoryExtendItemTemplate, ExtendSlotCost) == 0x000018, "Member 'FInventoryExtendItemTemplate::ExtendSlotCost' has a wrong offset!");

// ScriptStruct MirMobile.InventoryExtendTemplate
// 0x0018 (0x0020 - 0x0008)
struct FInventoryExtendTemplate final : public FTableRowBase
{
public:
	int32                                         InventoryMaxCount;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InventoryOpenCount;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtendValueType;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtendValue;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InventoryType;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryExtendTemplate) == 0x000008, "Wrong alignment on FInventoryExtendTemplate");
static_assert(sizeof(FInventoryExtendTemplate) == 0x000020, "Wrong size on FInventoryExtendTemplate");
static_assert(offsetof(FInventoryExtendTemplate, InventoryMaxCount) == 0x000008, "Member 'FInventoryExtendTemplate::InventoryMaxCount' has a wrong offset!");
static_assert(offsetof(FInventoryExtendTemplate, InventoryOpenCount) == 0x00000C, "Member 'FInventoryExtendTemplate::InventoryOpenCount' has a wrong offset!");
static_assert(offsetof(FInventoryExtendTemplate, ExtendValueType) == 0x000010, "Member 'FInventoryExtendTemplate::ExtendValueType' has a wrong offset!");
static_assert(offsetof(FInventoryExtendTemplate, ExtendValue) == 0x000014, "Member 'FInventoryExtendTemplate::ExtendValue' has a wrong offset!");
static_assert(offsetof(FInventoryExtendTemplate, InventoryType) == 0x000018, "Member 'FInventoryExtendTemplate::InventoryType' has a wrong offset!");

// ScriptStruct MirMobile.TouchInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FTouchInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTouchInfo) == 0x000004, "Wrong alignment on FTouchInfo");
static_assert(sizeof(FTouchInfo) == 0x000020, "Wrong size on FTouchInfo");

// ScriptStruct MirMobile.InventoryExtendValueTemplate
// 0x0010 (0x0018 - 0x0008)
struct FInventoryExtendValueTemplate final : public FTableRowBase
{
public:
	int32                                         SectionCountMax;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtendValue;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InventoryType;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryExtendValueTemplate) == 0x000008, "Wrong alignment on FInventoryExtendValueTemplate");
static_assert(sizeof(FInventoryExtendValueTemplate) == 0x000018, "Wrong size on FInventoryExtendValueTemplate");
static_assert(offsetof(FInventoryExtendValueTemplate, SectionCountMax) == 0x000008, "Member 'FInventoryExtendValueTemplate::SectionCountMax' has a wrong offset!");
static_assert(offsetof(FInventoryExtendValueTemplate, ExtendValue) == 0x00000C, "Member 'FInventoryExtendValueTemplate::ExtendValue' has a wrong offset!");
static_assert(offsetof(FInventoryExtendValueTemplate, InventoryType) == 0x000010, "Member 'FInventoryExtendValueTemplate::InventoryType' has a wrong offset!");

// ScriptStruct MirMobile.TotalMenuFrameTemplate
// 0x0028 (0x0030 - 0x0008)
struct FTotalMenuFrameTemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabHorizon;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCGroupListID;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabVertical;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabName;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemMainType;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemSubType;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemTier;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vertical_ItemGrade;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTotalMenuFrameTemplate) == 0x000008, "Wrong alignment on FTotalMenuFrameTemplate");
static_assert(sizeof(FTotalMenuFrameTemplate) == 0x000030, "Wrong size on FTotalMenuFrameTemplate");
static_assert(offsetof(FTotalMenuFrameTemplate, UniqueId) == 0x000008, "Member 'FTotalMenuFrameTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FTotalMenuFrameTemplate, ContentsId) == 0x00000C, "Member 'FTotalMenuFrameTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FTotalMenuFrameTemplate, TabHorizon) == 0x000010, "Member 'FTotalMenuFrameTemplate::TabHorizon' has a wrong offset!");
static_assert(offsetof(FTotalMenuFrameTemplate, NPCGroupListID) == 0x000014, "Member 'FTotalMenuFrameTemplate::NPCGroupListID' has a wrong offset!");
static_assert(offsetof(FTotalMenuFrameTemplate, TabVertical) == 0x000018, "Member 'FTotalMenuFrameTemplate::TabVertical' has a wrong offset!");
static_assert(offsetof(FTotalMenuFrameTemplate, TabName) == 0x00001C, "Member 'FTotalMenuFrameTemplate::TabName' has a wrong offset!");
static_assert(offsetof(FTotalMenuFrameTemplate, ItemMainType) == 0x000020, "Member 'FTotalMenuFrameTemplate::ItemMainType' has a wrong offset!");
static_assert(offsetof(FTotalMenuFrameTemplate, ItemSubType) == 0x000024, "Member 'FTotalMenuFrameTemplate::ItemSubType' has a wrong offset!");
static_assert(offsetof(FTotalMenuFrameTemplate, ItemTier) == 0x000028, "Member 'FTotalMenuFrameTemplate::ItemTier' has a wrong offset!");
static_assert(offsetof(FTotalMenuFrameTemplate, Vertical_ItemGrade) == 0x00002C, "Member 'FTotalMenuFrameTemplate::Vertical_ItemGrade' has a wrong offset!");

// ScriptStruct MirMobile.InvenItemType
// 0x0018 (0x0018 - 0x0000)
struct FInvenItemType final
{
public:
	int32                                         MainType;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SubType;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInvenItemType) == 0x000008, "Wrong alignment on FInvenItemType");
static_assert(sizeof(FInvenItemType) == 0x000018, "Wrong size on FInvenItemType");
static_assert(offsetof(FInvenItemType, MainType) == 0x000000, "Member 'FInvenItemType::MainType' has a wrong offset!");
static_assert(offsetof(FInvenItemType, SubType) == 0x000008, "Member 'FInvenItemType::SubType' has a wrong offset!");

// ScriptStruct MirMobile.InventoryTemplate
// 0x0020 (0x0028 - 0x0008)
struct FInventoryTemplate final : public FTableRowBase
{
public:
	int32                                         InventoryID;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabNameStringID;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabSymbol;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabSymbolSelected;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInvenItemType>                 ItemType;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryTemplate) == 0x000008, "Wrong alignment on FInventoryTemplate");
static_assert(sizeof(FInventoryTemplate) == 0x000028, "Wrong size on FInventoryTemplate");
static_assert(offsetof(FInventoryTemplate, InventoryID) == 0x000008, "Member 'FInventoryTemplate::InventoryID' has a wrong offset!");
static_assert(offsetof(FInventoryTemplate, TabNameStringID) == 0x00000C, "Member 'FInventoryTemplate::TabNameStringID' has a wrong offset!");
static_assert(offsetof(FInventoryTemplate, TabSymbol) == 0x000010, "Member 'FInventoryTemplate::TabSymbol' has a wrong offset!");
static_assert(offsetof(FInventoryTemplate, TabSymbolSelected) == 0x000014, "Member 'FInventoryTemplate::TabSymbolSelected' has a wrong offset!");
static_assert(offsetof(FInventoryTemplate, ItemType) == 0x000018, "Member 'FInventoryTemplate::ItemType' has a wrong offset!");

// ScriptStruct MirMobile.LabyrinthTemplate
// 0x0030 (0x0038 - 0x0008)
struct FLabyrinthTemplate final : public FStageCommonTemplate
{
public:
	int32                                         LabyrinthId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelValue;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PortalId;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageThumbnail;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageBoss;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageBossThumbnail;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageDesc;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectWarpType;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrivalLocation;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedPerson;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLabyrinthTemplate) == 0x000008, "Wrong alignment on FLabyrinthTemplate");
static_assert(sizeof(FLabyrinthTemplate) == 0x000038, "Wrong size on FLabyrinthTemplate");
static_assert(offsetof(FLabyrinthTemplate, LabyrinthId) == 0x000008, "Member 'FLabyrinthTemplate::LabyrinthId' has a wrong offset!");
static_assert(offsetof(FLabyrinthTemplate, StageID) == 0x00000C, "Member 'FLabyrinthTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FLabyrinthTemplate, LevelValue) == 0x000010, "Member 'FLabyrinthTemplate::LevelValue' has a wrong offset!");
static_assert(offsetof(FLabyrinthTemplate, PortalId) == 0x000014, "Member 'FLabyrinthTemplate::PortalId' has a wrong offset!");
static_assert(offsetof(FLabyrinthTemplate, StageThumbnail) == 0x000018, "Member 'FLabyrinthTemplate::StageThumbnail' has a wrong offset!");
static_assert(offsetof(FLabyrinthTemplate, StageBoss) == 0x00001C, "Member 'FLabyrinthTemplate::StageBoss' has a wrong offset!");
static_assert(offsetof(FLabyrinthTemplate, StageBossThumbnail) == 0x000020, "Member 'FLabyrinthTemplate::StageBossThumbnail' has a wrong offset!");
static_assert(offsetof(FLabyrinthTemplate, StageDesc) == 0x000024, "Member 'FLabyrinthTemplate::StageDesc' has a wrong offset!");
static_assert(offsetof(FLabyrinthTemplate, DirectWarpType) == 0x000028, "Member 'FLabyrinthTemplate::DirectWarpType' has a wrong offset!");
static_assert(offsetof(FLabyrinthTemplate, ArrivalLocation) == 0x00002C, "Member 'FLabyrinthTemplate::ArrivalLocation' has a wrong offset!");
static_assert(offsetof(FLabyrinthTemplate, RecommendedPerson) == 0x000030, "Member 'FLabyrinthTemplate::RecommendedPerson' has a wrong offset!");

// ScriptStruct MirMobile.ItemBlessIncreaseRateTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemBlessIncreaseRateTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipSlotNumber;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlessGrade;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IncreaseRate;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameStrId;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemBlessIncreaseRateTemplate) == 0x000008, "Wrong alignment on FItemBlessIncreaseRateTemplate");
static_assert(sizeof(FItemBlessIncreaseRateTemplate) == 0x000020, "Wrong size on FItemBlessIncreaseRateTemplate");
static_assert(offsetof(FItemBlessIncreaseRateTemplate, Name) == 0x000008, "Member 'FItemBlessIncreaseRateTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemBlessIncreaseRateTemplate, RowId) == 0x00000C, "Member 'FItemBlessIncreaseRateTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FItemBlessIncreaseRateTemplate, EquipSlotNumber) == 0x000010, "Member 'FItemBlessIncreaseRateTemplate::EquipSlotNumber' has a wrong offset!");
static_assert(offsetof(FItemBlessIncreaseRateTemplate, BlessGrade) == 0x000014, "Member 'FItemBlessIncreaseRateTemplate::BlessGrade' has a wrong offset!");
static_assert(offsetof(FItemBlessIncreaseRateTemplate, IncreaseRate) == 0x000018, "Member 'FItemBlessIncreaseRateTemplate::IncreaseRate' has a wrong offset!");
static_assert(offsetof(FItemBlessIncreaseRateTemplate, NameStrId) == 0x00001C, "Member 'FItemBlessIncreaseRateTemplate::NameStrId' has a wrong offset!");

// ScriptStruct MirMobile.ItemCollectionTemplate
// 0x00A0 (0x00A8 - 0x0008)
struct FItemCollectionTemplate final : public FTableRowBase
{
public:
	int32                                         CollectionId;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseGroupId;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountType;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopMenuGroup;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopMenuString;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListGroup;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListGroupString;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PeriodType;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartDate;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleString;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListSort;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectAttributeType;                               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectAttributeValue;                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectString;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectGroup;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectGroupString;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseId01;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smelting01;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseId02;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smelting02;                                        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseId03;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smelting03;                                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseId04;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smelting04;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseId05;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smelting05;                                        // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseId06;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smelting06;                                        // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseId07;                                       // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smelting07;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseId08;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Smelting08;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCollectionTemplate) == 0x000008, "Wrong alignment on FItemCollectionTemplate");
static_assert(sizeof(FItemCollectionTemplate) == 0x0000A8, "Wrong size on FItemCollectionTemplate");
static_assert(offsetof(FItemCollectionTemplate, CollectionId) == 0x000008, "Member 'FItemCollectionTemplate::CollectionId' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, PhaseGroupId) == 0x00000C, "Member 'FItemCollectionTemplate::PhaseGroupId' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, AccountType) == 0x000010, "Member 'FItemCollectionTemplate::AccountType' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, TopMenuGroup) == 0x000014, "Member 'FItemCollectionTemplate::TopMenuGroup' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, TopMenuString) == 0x000018, "Member 'FItemCollectionTemplate::TopMenuString' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ListGroup) == 0x00001C, "Member 'FItemCollectionTemplate::ListGroup' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ListGroupString) == 0x000020, "Member 'FItemCollectionTemplate::ListGroupString' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, PeriodType) == 0x000024, "Member 'FItemCollectionTemplate::PeriodType' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, StartDate) == 0x000028, "Member 'FItemCollectionTemplate::StartDate' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, EndDate) == 0x000038, "Member 'FItemCollectionTemplate::EndDate' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, TitleString) == 0x000048, "Member 'FItemCollectionTemplate::TitleString' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ListSort) == 0x00004C, "Member 'FItemCollectionTemplate::ListSort' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, EffectAttributeType) == 0x000050, "Member 'FItemCollectionTemplate::EffectAttributeType' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, EffectAttributeValue) == 0x000054, "Member 'FItemCollectionTemplate::EffectAttributeValue' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, EffectString) == 0x000058, "Member 'FItemCollectionTemplate::EffectString' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, EffectGroup) == 0x00005C, "Member 'FItemCollectionTemplate::EffectGroup' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, EffectGroupString) == 0x000060, "Member 'FItemCollectionTemplate::EffectGroupString' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ClassID) == 0x000064, "Member 'FItemCollectionTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ItemUseId01) == 0x000068, "Member 'FItemCollectionTemplate::ItemUseId01' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, Smelting01) == 0x00006C, "Member 'FItemCollectionTemplate::Smelting01' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ItemUseId02) == 0x000070, "Member 'FItemCollectionTemplate::ItemUseId02' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, Smelting02) == 0x000074, "Member 'FItemCollectionTemplate::Smelting02' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ItemUseId03) == 0x000078, "Member 'FItemCollectionTemplate::ItemUseId03' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, Smelting03) == 0x00007C, "Member 'FItemCollectionTemplate::Smelting03' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ItemUseId04) == 0x000080, "Member 'FItemCollectionTemplate::ItemUseId04' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, Smelting04) == 0x000084, "Member 'FItemCollectionTemplate::Smelting04' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ItemUseId05) == 0x000088, "Member 'FItemCollectionTemplate::ItemUseId05' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, Smelting05) == 0x00008C, "Member 'FItemCollectionTemplate::Smelting05' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ItemUseId06) == 0x000090, "Member 'FItemCollectionTemplate::ItemUseId06' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, Smelting06) == 0x000094, "Member 'FItemCollectionTemplate::Smelting06' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ItemUseId07) == 0x000098, "Member 'FItemCollectionTemplate::ItemUseId07' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, Smelting07) == 0x00009C, "Member 'FItemCollectionTemplate::Smelting07' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, ItemUseId08) == 0x0000A0, "Member 'FItemCollectionTemplate::ItemUseId08' has a wrong offset!");
static_assert(offsetof(FItemCollectionTemplate, Smelting08) == 0x0000A4, "Member 'FItemCollectionTemplate::Smelting08' has a wrong offset!");

// ScriptStruct MirMobile.ItemDisplayTemplate
// 0x0010 (0x0018 - 0x0008)
struct FItemDisplayTemplate final : public FTableRowBase
{
public:
	int32                                         StageID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageMaxDisplay;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterMaxDisplay;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayTime;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDisplayTemplate) == 0x000008, "Wrong alignment on FItemDisplayTemplate");
static_assert(sizeof(FItemDisplayTemplate) == 0x000018, "Wrong size on FItemDisplayTemplate");
static_assert(offsetof(FItemDisplayTemplate, StageID) == 0x000008, "Member 'FItemDisplayTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FItemDisplayTemplate, StageMaxDisplay) == 0x00000C, "Member 'FItemDisplayTemplate::StageMaxDisplay' has a wrong offset!");
static_assert(offsetof(FItemDisplayTemplate, CharacterMaxDisplay) == 0x000010, "Member 'FItemDisplayTemplate::CharacterMaxDisplay' has a wrong offset!");
static_assert(offsetof(FItemDisplayTemplate, DisplayTime) == 0x000014, "Member 'FItemDisplayTemplate::DisplayTime' has a wrong offset!");

// ScriptStruct MirMobile.MoneyGetWayTemplate
// 0x0020 (0x0028 - 0x0008)
struct FMoneyGetWayTemplate final : public FTableRowBase
{
public:
	int32                                         MoneyGetWayId;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetMoneyId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetType;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GetValue3;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoneyGetWayTemplate) == 0x000008, "Wrong alignment on FMoneyGetWayTemplate");
static_assert(sizeof(FMoneyGetWayTemplate) == 0x000028, "Wrong size on FMoneyGetWayTemplate");
static_assert(offsetof(FMoneyGetWayTemplate, MoneyGetWayId) == 0x000008, "Member 'FMoneyGetWayTemplate::MoneyGetWayId' has a wrong offset!");
static_assert(offsetof(FMoneyGetWayTemplate, GetMoneyId) == 0x00000C, "Member 'FMoneyGetWayTemplate::GetMoneyId' has a wrong offset!");
static_assert(offsetof(FMoneyGetWayTemplate, GetType) == 0x000010, "Member 'FMoneyGetWayTemplate::GetType' has a wrong offset!");
static_assert(offsetof(FMoneyGetWayTemplate, GetValue3) == 0x000018, "Member 'FMoneyGetWayTemplate::GetValue3' has a wrong offset!");

// ScriptStruct MirMobile.ItemDurabilityBrokenlvTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemDurabilityBrokenlvTemplate final : public FTableRowBase
{
public:
	int32                                         BrokenID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BrokenLV;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurabilityMinRate;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_StatusPanaltyRate;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HUD_Alarm;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Color_index;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDurabilityBrokenlvTemplate) == 0x000008, "Wrong alignment on FItemDurabilityBrokenlvTemplate");
static_assert(sizeof(FItemDurabilityBrokenlvTemplate) == 0x000020, "Wrong size on FItemDurabilityBrokenlvTemplate");
static_assert(offsetof(FItemDurabilityBrokenlvTemplate, BrokenID) == 0x000008, "Member 'FItemDurabilityBrokenlvTemplate::BrokenID' has a wrong offset!");
static_assert(offsetof(FItemDurabilityBrokenlvTemplate, BrokenLV) == 0x00000C, "Member 'FItemDurabilityBrokenlvTemplate::BrokenLV' has a wrong offset!");
static_assert(offsetof(FItemDurabilityBrokenlvTemplate, DurabilityMinRate) == 0x000010, "Member 'FItemDurabilityBrokenlvTemplate::DurabilityMinRate' has a wrong offset!");
static_assert(offsetof(FItemDurabilityBrokenlvTemplate, Item_StatusPanaltyRate) == 0x000014, "Member 'FItemDurabilityBrokenlvTemplate::Item_StatusPanaltyRate' has a wrong offset!");
static_assert(offsetof(FItemDurabilityBrokenlvTemplate, HUD_Alarm) == 0x000018, "Member 'FItemDurabilityBrokenlvTemplate::HUD_Alarm' has a wrong offset!");
static_assert(offsetof(FItemDurabilityBrokenlvTemplate, Color_index) == 0x00001C, "Member 'FItemDurabilityBrokenlvTemplate::Color_index' has a wrong offset!");

// ScriptStruct MirMobile.PreloadData
// 0x0018 (0x0018 - 0x0000)
struct FPreloadData final
{
public:
	bool                                          bMaintenance;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintenanceInLevel;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResourcePath;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPreloadData) == 0x000008, "Wrong alignment on FPreloadData");
static_assert(sizeof(FPreloadData) == 0x000018, "Wrong size on FPreloadData");
static_assert(offsetof(FPreloadData, bMaintenance) == 0x000000, "Member 'FPreloadData::bMaintenance' has a wrong offset!");
static_assert(offsetof(FPreloadData, bMaintenanceInLevel) == 0x000001, "Member 'FPreloadData::bMaintenanceInLevel' has a wrong offset!");
static_assert(offsetof(FPreloadData, ResourcePath) == 0x000008, "Member 'FPreloadData::ResourcePath' has a wrong offset!");

// ScriptStruct MirMobile.ItemDurabilityRepairCostTemplate
// 0x0020 (0x0028 - 0x0008)
struct FItemDurabilityRepairCostTemplate final : public FTableRowBase
{
public:
	int32                                         RepairCostID;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostId01;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostCount01;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostId02;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostCount02;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqItemId01;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqItemCount01;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemDurabilityRepairCostTemplate) == 0x000008, "Wrong alignment on FItemDurabilityRepairCostTemplate");
static_assert(sizeof(FItemDurabilityRepairCostTemplate) == 0x000028, "Wrong size on FItemDurabilityRepairCostTemplate");
static_assert(offsetof(FItemDurabilityRepairCostTemplate, RepairCostID) == 0x000008, "Member 'FItemDurabilityRepairCostTemplate::RepairCostID' has a wrong offset!");
static_assert(offsetof(FItemDurabilityRepairCostTemplate, ReqCostId01) == 0x00000C, "Member 'FItemDurabilityRepairCostTemplate::ReqCostId01' has a wrong offset!");
static_assert(offsetof(FItemDurabilityRepairCostTemplate, ReqCostCount01) == 0x000010, "Member 'FItemDurabilityRepairCostTemplate::ReqCostCount01' has a wrong offset!");
static_assert(offsetof(FItemDurabilityRepairCostTemplate, ReqCostId02) == 0x000014, "Member 'FItemDurabilityRepairCostTemplate::ReqCostId02' has a wrong offset!");
static_assert(offsetof(FItemDurabilityRepairCostTemplate, ReqCostCount02) == 0x000018, "Member 'FItemDurabilityRepairCostTemplate::ReqCostCount02' has a wrong offset!");
static_assert(offsetof(FItemDurabilityRepairCostTemplate, ReqItemId01) == 0x00001C, "Member 'FItemDurabilityRepairCostTemplate::ReqItemId01' has a wrong offset!");
static_assert(offsetof(FItemDurabilityRepairCostTemplate, ReqItemCount01) == 0x000020, "Member 'FItemDurabilityRepairCostTemplate::ReqItemCount01' has a wrong offset!");

// ScriptStruct MirMobile.ItemEquipRefineAttributeTemplate
// 0x0028 (0x0030 - 0x0008)
struct FItemEquipRefineAttributeTemplate final : public FTableRowBase
{
public:
	int32                                         RefineId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefineGroup;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefineStep;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1Value;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2Value;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute3Value;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute4Value;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute5Value;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute6Value;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemEquipRefineAttributeTemplate) == 0x000008, "Wrong alignment on FItemEquipRefineAttributeTemplate");
static_assert(sizeof(FItemEquipRefineAttributeTemplate) == 0x000030, "Wrong size on FItemEquipRefineAttributeTemplate");
static_assert(offsetof(FItemEquipRefineAttributeTemplate, RefineId) == 0x000008, "Member 'FItemEquipRefineAttributeTemplate::RefineId' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineAttributeTemplate, RefineGroup) == 0x00000C, "Member 'FItemEquipRefineAttributeTemplate::RefineGroup' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineAttributeTemplate, RefineStep) == 0x000010, "Member 'FItemEquipRefineAttributeTemplate::RefineStep' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineAttributeTemplate, Attribute1Value) == 0x000014, "Member 'FItemEquipRefineAttributeTemplate::Attribute1Value' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineAttributeTemplate, Attribute2Value) == 0x000018, "Member 'FItemEquipRefineAttributeTemplate::Attribute2Value' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineAttributeTemplate, Attribute3Value) == 0x00001C, "Member 'FItemEquipRefineAttributeTemplate::Attribute3Value' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineAttributeTemplate, Attribute4Value) == 0x000020, "Member 'FItemEquipRefineAttributeTemplate::Attribute4Value' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineAttributeTemplate, Attribute5Value) == 0x000024, "Member 'FItemEquipRefineAttributeTemplate::Attribute5Value' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineAttributeTemplate, Attribute6Value) == 0x000028, "Member 'FItemEquipRefineAttributeTemplate::Attribute6Value' has a wrong offset!");

// ScriptStruct MirMobile.ItemEquipRefineTemplate
// 0x0040 (0x0048 - 0x0008)
struct FItemEquipRefineTemplate final : public FTableRowBase
{
public:
	int32                                         RefineId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefineGroup;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefineStep;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessRate;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostType1;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostValue1;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostType2;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCostValue2;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqMaterialItemUseId1;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqMaterialValue1;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqMaterialItemUseId2;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqMaterialValue2;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqMaterialItemUseId3;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqMaterialValue3;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqMaterialItemUseId4;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqMaterialValue4;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemEquipRefineTemplate) == 0x000008, "Wrong alignment on FItemEquipRefineTemplate");
static_assert(sizeof(FItemEquipRefineTemplate) == 0x000048, "Wrong size on FItemEquipRefineTemplate");
static_assert(offsetof(FItemEquipRefineTemplate, RefineId) == 0x000008, "Member 'FItemEquipRefineTemplate::RefineId' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, RefineGroup) == 0x00000C, "Member 'FItemEquipRefineTemplate::RefineGroup' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, RefineStep) == 0x000010, "Member 'FItemEquipRefineTemplate::RefineStep' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, SuccessRate) == 0x000014, "Member 'FItemEquipRefineTemplate::SuccessRate' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqCostType1) == 0x000018, "Member 'FItemEquipRefineTemplate::ReqCostType1' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqCostValue1) == 0x00001C, "Member 'FItemEquipRefineTemplate::ReqCostValue1' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqCostType2) == 0x000020, "Member 'FItemEquipRefineTemplate::ReqCostType2' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqCostValue2) == 0x000024, "Member 'FItemEquipRefineTemplate::ReqCostValue2' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqMaterialItemUseId1) == 0x000028, "Member 'FItemEquipRefineTemplate::ReqMaterialItemUseId1' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqMaterialValue1) == 0x00002C, "Member 'FItemEquipRefineTemplate::ReqMaterialValue1' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqMaterialItemUseId2) == 0x000030, "Member 'FItemEquipRefineTemplate::ReqMaterialItemUseId2' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqMaterialValue2) == 0x000034, "Member 'FItemEquipRefineTemplate::ReqMaterialValue2' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqMaterialItemUseId3) == 0x000038, "Member 'FItemEquipRefineTemplate::ReqMaterialItemUseId3' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqMaterialValue3) == 0x00003C, "Member 'FItemEquipRefineTemplate::ReqMaterialValue3' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqMaterialItemUseId4) == 0x000040, "Member 'FItemEquipRefineTemplate::ReqMaterialItemUseId4' has a wrong offset!");
static_assert(offsetof(FItemEquipRefineTemplate, ReqMaterialValue4) == 0x000044, "Member 'FItemEquipRefineTemplate::ReqMaterialValue4' has a wrong offset!");

// ScriptStruct MirMobile.ItemGetWayListTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemGetWayListTemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGetWayIdType                             IdType;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 LinkGetWayInfoList;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemGetWayListTemplate) == 0x000008, "Wrong alignment on FItemGetWayListTemplate");
static_assert(sizeof(FItemGetWayListTemplate) == 0x000020, "Wrong size on FItemGetWayListTemplate");
static_assert(offsetof(FItemGetWayListTemplate, UniqueId) == 0x000008, "Member 'FItemGetWayListTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FItemGetWayListTemplate, IdType) == 0x00000C, "Member 'FItemGetWayListTemplate::IdType' has a wrong offset!");
static_assert(offsetof(FItemGetWayListTemplate, LinkGetWayInfoList) == 0x000010, "Member 'FItemGetWayListTemplate::LinkGetWayInfoList' has a wrong offset!");

// ScriptStruct MirMobile.ItemInfoSummaryTemplate
// 0x0040 (0x0048 - 0x0008)
struct FItemInfoSummaryTemplate final : public FTableRowBase
{
public:
	int32                                         ItemInfoSummaryID;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UMGFilePath;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentsSlotName;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSlotName;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotButton;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemInfoSummaryTemplate) == 0x000008, "Wrong alignment on FItemInfoSummaryTemplate");
static_assert(sizeof(FItemInfoSummaryTemplate) == 0x000048, "Wrong size on FItemInfoSummaryTemplate");
static_assert(offsetof(FItemInfoSummaryTemplate, ItemInfoSummaryID) == 0x000008, "Member 'FItemInfoSummaryTemplate::ItemInfoSummaryID' has a wrong offset!");
static_assert(offsetof(FItemInfoSummaryTemplate, ContentsId) == 0x00000C, "Member 'FItemInfoSummaryTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FItemInfoSummaryTemplate, UMGFilePath) == 0x000010, "Member 'FItemInfoSummaryTemplate::UMGFilePath' has a wrong offset!");
static_assert(offsetof(FItemInfoSummaryTemplate, ParentsSlotName) == 0x000020, "Member 'FItemInfoSummaryTemplate::ParentsSlotName' has a wrong offset!");
static_assert(offsetof(FItemInfoSummaryTemplate, ItemSlotName) == 0x000030, "Member 'FItemInfoSummaryTemplate::ItemSlotName' has a wrong offset!");
static_assert(offsetof(FItemInfoSummaryTemplate, SlotButton) == 0x000040, "Member 'FItemInfoSummaryTemplate::SlotButton' has a wrong offset!");

// ScriptStruct MirMobile.ParticleSystemComponentInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FParticleSystemComponentInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParticleSystemComponentInfo) == 0x000004, "Wrong alignment on FParticleSystemComponentInfo");
static_assert(sizeof(FParticleSystemComponentInfo) == 0x00000C, "Wrong size on FParticleSystemComponentInfo");

// ScriptStruct MirMobile.ItemMagicOrbDefineTemplate
// 0x0058 (0x0060 - 0x0008)
struct FItemMagicOrbDefineTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicOrbLevel;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot01OpenLv;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot02OpenLv;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot03OpenLv;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot04OpenLv;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot05OpenLv;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot06OpenLv;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowCostType;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowMaterialStackMax;                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowMaterialSlotCount;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowExpRatio_MagicOrb;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrowEffectTime_Normal;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrowEffectTime_Success;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrowEffectTime_GreatSuccess;                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionChange_Auto_OptionGrade01;                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionChange_Auto_OptionGrade02;                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionChange_Auto_OptionCount01;                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionChange_Auto_OptionCount02;                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionChange_Auto_MaxRepeatCount;                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionChange_HighGradeNotice;                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMagicOrbDefineTemplate) == 0x000008, "Wrong alignment on FItemMagicOrbDefineTemplate");
static_assert(sizeof(FItemMagicOrbDefineTemplate) == 0x000060, "Wrong size on FItemMagicOrbDefineTemplate");
static_assert(offsetof(FItemMagicOrbDefineTemplate, RowId) == 0x000008, "Member 'FItemMagicOrbDefineTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, MagicOrbLevel) == 0x00000C, "Member 'FItemMagicOrbDefineTemplate::MagicOrbLevel' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, Slot01OpenLv) == 0x000010, "Member 'FItemMagicOrbDefineTemplate::Slot01OpenLv' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, Slot02OpenLv) == 0x000014, "Member 'FItemMagicOrbDefineTemplate::Slot02OpenLv' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, Slot03OpenLv) == 0x000018, "Member 'FItemMagicOrbDefineTemplate::Slot03OpenLv' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, Slot04OpenLv) == 0x00001C, "Member 'FItemMagicOrbDefineTemplate::Slot04OpenLv' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, Slot05OpenLv) == 0x000020, "Member 'FItemMagicOrbDefineTemplate::Slot05OpenLv' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, Slot06OpenLv) == 0x000024, "Member 'FItemMagicOrbDefineTemplate::Slot06OpenLv' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, GrowCostType) == 0x000028, "Member 'FItemMagicOrbDefineTemplate::GrowCostType' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, GrowMaterialStackMax) == 0x00002C, "Member 'FItemMagicOrbDefineTemplate::GrowMaterialStackMax' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, GrowMaterialSlotCount) == 0x000030, "Member 'FItemMagicOrbDefineTemplate::GrowMaterialSlotCount' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, GrowExpRatio_MagicOrb) == 0x000034, "Member 'FItemMagicOrbDefineTemplate::GrowExpRatio_MagicOrb' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, GrowEffectTime_Normal) == 0x000038, "Member 'FItemMagicOrbDefineTemplate::GrowEffectTime_Normal' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, GrowEffectTime_Success) == 0x00003C, "Member 'FItemMagicOrbDefineTemplate::GrowEffectTime_Success' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, GrowEffectTime_GreatSuccess) == 0x000040, "Member 'FItemMagicOrbDefineTemplate::GrowEffectTime_GreatSuccess' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, OptionChange_Auto_OptionGrade01) == 0x000044, "Member 'FItemMagicOrbDefineTemplate::OptionChange_Auto_OptionGrade01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, OptionChange_Auto_OptionGrade02) == 0x000048, "Member 'FItemMagicOrbDefineTemplate::OptionChange_Auto_OptionGrade02' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, OptionChange_Auto_OptionCount01) == 0x00004C, "Member 'FItemMagicOrbDefineTemplate::OptionChange_Auto_OptionCount01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, OptionChange_Auto_OptionCount02) == 0x000050, "Member 'FItemMagicOrbDefineTemplate::OptionChange_Auto_OptionCount02' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, OptionChange_Auto_MaxRepeatCount) == 0x000054, "Member 'FItemMagicOrbDefineTemplate::OptionChange_Auto_MaxRepeatCount' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbDefineTemplate, OptionChange_HighGradeNotice) == 0x000058, "Member 'FItemMagicOrbDefineTemplate::OptionChange_HighGradeNotice' has a wrong offset!");

// ScriptStruct MirMobile.TimeTicketTemplate
// 0x0028 (0x0030 - 0x0008)
struct FTimeTicketTemplate final : public FTableRowBase
{
public:
	int32                                         TimeTicketId;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconSmall;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeTime;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeCount;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitType;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         LimitUserMax;                                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeTicketTemplate) == 0x000008, "Wrong alignment on FTimeTicketTemplate");
static_assert(sizeof(FTimeTicketTemplate) == 0x000030, "Wrong size on FTimeTicketTemplate");
static_assert(offsetof(FTimeTicketTemplate, TimeTicketId) == 0x000008, "Member 'FTimeTicketTemplate::TimeTicketId' has a wrong offset!");
static_assert(offsetof(FTimeTicketTemplate, NameSId) == 0x00000C, "Member 'FTimeTicketTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FTimeTicketTemplate, Icon) == 0x000010, "Member 'FTimeTicketTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FTimeTicketTemplate, IconSmall) == 0x000014, "Member 'FTimeTicketTemplate::IconSmall' has a wrong offset!");
static_assert(offsetof(FTimeTicketTemplate, ChargeTime) == 0x000018, "Member 'FTimeTicketTemplate::ChargeTime' has a wrong offset!");
static_assert(offsetof(FTimeTicketTemplate, ChargeCount) == 0x00001C, "Member 'FTimeTicketTemplate::ChargeCount' has a wrong offset!");
static_assert(offsetof(FTimeTicketTemplate, LimitType) == 0x000020, "Member 'FTimeTicketTemplate::LimitType' has a wrong offset!");
static_assert(offsetof(FTimeTicketTemplate, LimitUserMax) == 0x000028, "Member 'FTimeTicketTemplate::LimitUserMax' has a wrong offset!");

// ScriptStruct MirMobile.ItemMagicOrbGrowTemplate
// 0x0028 (0x0030 - 0x0008)
struct FItemMagicOrbGrowTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowExp;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowCostType;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowCostCount;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsExpMat;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowExpRatio_Normal;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowExpRatio_Success;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowExpRatio_GreatSuccess;                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMagicOrbGrowTemplate) == 0x000008, "Wrong alignment on FItemMagicOrbGrowTemplate");
static_assert(sizeof(FItemMagicOrbGrowTemplate) == 0x000030, "Wrong size on FItemMagicOrbGrowTemplate");
static_assert(offsetof(FItemMagicOrbGrowTemplate, Name) == 0x000008, "Member 'FItemMagicOrbGrowTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbGrowTemplate, ItemId) == 0x00000C, "Member 'FItemMagicOrbGrowTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbGrowTemplate, GrowExp) == 0x000010, "Member 'FItemMagicOrbGrowTemplate::GrowExp' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbGrowTemplate, GrowCostType) == 0x000014, "Member 'FItemMagicOrbGrowTemplate::GrowCostType' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbGrowTemplate, GrowCostCount) == 0x000018, "Member 'FItemMagicOrbGrowTemplate::GrowCostCount' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbGrowTemplate, IsExpMat) == 0x00001C, "Member 'FItemMagicOrbGrowTemplate::IsExpMat' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbGrowTemplate, GrowExpRatio_Normal) == 0x000020, "Member 'FItemMagicOrbGrowTemplate::GrowExpRatio_Normal' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbGrowTemplate, GrowExpRatio_Success) == 0x000024, "Member 'FItemMagicOrbGrowTemplate::GrowExpRatio_Success' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbGrowTemplate, GrowExpRatio_GreatSuccess) == 0x000028, "Member 'FItemMagicOrbGrowTemplate::GrowExpRatio_GreatSuccess' has a wrong offset!");

// ScriptStruct MirMobile.UserEventPaintingTemplate
// 0x0050 (0x0058 - 0x0008)
struct FUserEventPaintingTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaintingId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PaintingCollectionIconId;                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PaintingCollectionItemId;                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PaintingCollectionItemValue;                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         FirstRewardItemId;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstRewardItemValue;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepeatRewardItemId;                                // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepeatRewardItemValue;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaintingExchangeGuildPoint;                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserEventPaintingTemplate) == 0x000008, "Wrong alignment on FUserEventPaintingTemplate");
static_assert(sizeof(FUserEventPaintingTemplate) == 0x000058, "Wrong size on FUserEventPaintingTemplate");
static_assert(offsetof(FUserEventPaintingTemplate, Name) == 0x000008, "Member 'FUserEventPaintingTemplate::Name' has a wrong offset!");
static_assert(offsetof(FUserEventPaintingTemplate, PaintingId) == 0x00000C, "Member 'FUserEventPaintingTemplate::PaintingId' has a wrong offset!");
static_assert(offsetof(FUserEventPaintingTemplate, PaintingCollectionIconId) == 0x000010, "Member 'FUserEventPaintingTemplate::PaintingCollectionIconId' has a wrong offset!");
static_assert(offsetof(FUserEventPaintingTemplate, PaintingCollectionItemId) == 0x000020, "Member 'FUserEventPaintingTemplate::PaintingCollectionItemId' has a wrong offset!");
static_assert(offsetof(FUserEventPaintingTemplate, PaintingCollectionItemValue) == 0x000030, "Member 'FUserEventPaintingTemplate::PaintingCollectionItemValue' has a wrong offset!");
static_assert(offsetof(FUserEventPaintingTemplate, FirstRewardItemId) == 0x000040, "Member 'FUserEventPaintingTemplate::FirstRewardItemId' has a wrong offset!");
static_assert(offsetof(FUserEventPaintingTemplate, FirstRewardItemValue) == 0x000044, "Member 'FUserEventPaintingTemplate::FirstRewardItemValue' has a wrong offset!");
static_assert(offsetof(FUserEventPaintingTemplate, RepeatRewardItemId) == 0x000048, "Member 'FUserEventPaintingTemplate::RepeatRewardItemId' has a wrong offset!");
static_assert(offsetof(FUserEventPaintingTemplate, RepeatRewardItemValue) == 0x00004C, "Member 'FUserEventPaintingTemplate::RepeatRewardItemValue' has a wrong offset!");
static_assert(offsetof(FUserEventPaintingTemplate, PaintingExchangeGuildPoint) == 0x000050, "Member 'FUserEventPaintingTemplate::PaintingExchangeGuildPoint' has a wrong offset!");

// ScriptStruct MirMobile.ItemMagicOrbOptionGroupTemplate
// 0x0020 (0x0028 - 0x0008)
struct FItemMagicOrbOptionGroupTemplate final : public FTableRowBase
{
public:
	int32                                         OptionGroup;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeTypeRate;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Option_C;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Option_B;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Option_A;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Option_S;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMagicOrbOptionGroupTemplate) == 0x000008, "Wrong alignment on FItemMagicOrbOptionGroupTemplate");
static_assert(sizeof(FItemMagicOrbOptionGroupTemplate) == 0x000028, "Wrong size on FItemMagicOrbOptionGroupTemplate");
static_assert(offsetof(FItemMagicOrbOptionGroupTemplate, OptionGroup) == 0x000008, "Member 'FItemMagicOrbOptionGroupTemplate::OptionGroup' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionGroupTemplate, AttributeType) == 0x00000C, "Member 'FItemMagicOrbOptionGroupTemplate::AttributeType' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionGroupTemplate, AttributeTypeRate) == 0x000010, "Member 'FItemMagicOrbOptionGroupTemplate::AttributeTypeRate' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionGroupTemplate, Option_C) == 0x000014, "Member 'FItemMagicOrbOptionGroupTemplate::Option_C' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionGroupTemplate, Option_B) == 0x000018, "Member 'FItemMagicOrbOptionGroupTemplate::Option_B' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionGroupTemplate, Option_A) == 0x00001C, "Member 'FItemMagicOrbOptionGroupTemplate::Option_A' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionGroupTemplate, Option_S) == 0x000020, "Member 'FItemMagicOrbOptionGroupTemplate::Option_S' has a wrong offset!");

// ScriptStruct MirMobile.ItemMagicOrbOptionTemplate
// 0x0050 (0x0058 - 0x0008)
struct FItemMagicOrbOptionTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicOrbOptionId;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionGrade;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue01;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue02;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue03;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue04;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue05;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue06;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue07;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue08;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue09;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue10;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue11;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue12;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue13;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue14;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue15;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMagicOrbOptionTemplate) == 0x000008, "Wrong alignment on FItemMagicOrbOptionTemplate");
static_assert(sizeof(FItemMagicOrbOptionTemplate) == 0x000058, "Wrong size on FItemMagicOrbOptionTemplate");
static_assert(offsetof(FItemMagicOrbOptionTemplate, Name) == 0x000008, "Member 'FItemMagicOrbOptionTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, MagicOrbOptionId) == 0x00000C, "Member 'FItemMagicOrbOptionTemplate::MagicOrbOptionId' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionGrade) == 0x000010, "Member 'FItemMagicOrbOptionTemplate::OptionGrade' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, AttributeType) == 0x000014, "Member 'FItemMagicOrbOptionTemplate::AttributeType' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue01) == 0x000018, "Member 'FItemMagicOrbOptionTemplate::OptionValue01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue02) == 0x00001C, "Member 'FItemMagicOrbOptionTemplate::OptionValue02' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue03) == 0x000020, "Member 'FItemMagicOrbOptionTemplate::OptionValue03' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue04) == 0x000024, "Member 'FItemMagicOrbOptionTemplate::OptionValue04' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue05) == 0x000028, "Member 'FItemMagicOrbOptionTemplate::OptionValue05' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue06) == 0x00002C, "Member 'FItemMagicOrbOptionTemplate::OptionValue06' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue07) == 0x000030, "Member 'FItemMagicOrbOptionTemplate::OptionValue07' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue08) == 0x000034, "Member 'FItemMagicOrbOptionTemplate::OptionValue08' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue09) == 0x000038, "Member 'FItemMagicOrbOptionTemplate::OptionValue09' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue10) == 0x00003C, "Member 'FItemMagicOrbOptionTemplate::OptionValue10' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue11) == 0x000040, "Member 'FItemMagicOrbOptionTemplate::OptionValue11' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue12) == 0x000044, "Member 'FItemMagicOrbOptionTemplate::OptionValue12' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue13) == 0x000048, "Member 'FItemMagicOrbOptionTemplate::OptionValue13' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue14) == 0x00004C, "Member 'FItemMagicOrbOptionTemplate::OptionValue14' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbOptionTemplate, OptionValue15) == 0x000050, "Member 'FItemMagicOrbOptionTemplate::OptionValue15' has a wrong offset!");

// ScriptStruct MirMobile.ItemMagicOrbTemplate
// 0x0068 (0x0070 - 0x0008)
struct FItemMagicOrbTemplate final : public FTableRowBase
{
public:
	int32                                         ItemId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicOrbLevel;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicOrbMaxLevel;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicOrbIcon;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Option01;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Option02;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Option03;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetSkillId01;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetSkillOpenLv01;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveLv01;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetSkillCombatPoint01;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetSkillId02;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetSkillOpenLv02;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveLv02;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetSkillCombatPoint02;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetSkillId03;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetSkillOpenLv03;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveLv03;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PetSkillCombatPoint03;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomOptionGroup;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomOption01OpenLv;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomOption02OpenLv;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomOption03OpenLv;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomOption04OpenLv;                              // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicOrbState;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMagicOrbTemplate) == 0x000008, "Wrong alignment on FItemMagicOrbTemplate");
static_assert(sizeof(FItemMagicOrbTemplate) == 0x000070, "Wrong size on FItemMagicOrbTemplate");
static_assert(offsetof(FItemMagicOrbTemplate, ItemId) == 0x000008, "Member 'FItemMagicOrbTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, MagicOrbLevel) == 0x00000C, "Member 'FItemMagicOrbTemplate::MagicOrbLevel' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, MagicOrbMaxLevel) == 0x000010, "Member 'FItemMagicOrbTemplate::MagicOrbMaxLevel' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, MagicOrbIcon) == 0x000014, "Member 'FItemMagicOrbTemplate::MagicOrbIcon' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, Option01) == 0x000018, "Member 'FItemMagicOrbTemplate::Option01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, Option02) == 0x00001C, "Member 'FItemMagicOrbTemplate::Option02' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, Option03) == 0x000020, "Member 'FItemMagicOrbTemplate::Option03' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PetSkillId01) == 0x000024, "Member 'FItemMagicOrbTemplate::PetSkillId01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PetSkillOpenLv01) == 0x000028, "Member 'FItemMagicOrbTemplate::PetSkillOpenLv01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PassiveLv01) == 0x00002C, "Member 'FItemMagicOrbTemplate::PassiveLv01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PetSkillCombatPoint01) == 0x000030, "Member 'FItemMagicOrbTemplate::PetSkillCombatPoint01' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PetSkillId02) == 0x000034, "Member 'FItemMagicOrbTemplate::PetSkillId02' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PetSkillOpenLv02) == 0x000038, "Member 'FItemMagicOrbTemplate::PetSkillOpenLv02' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PassiveLv02) == 0x00003C, "Member 'FItemMagicOrbTemplate::PassiveLv02' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PetSkillCombatPoint02) == 0x000040, "Member 'FItemMagicOrbTemplate::PetSkillCombatPoint02' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PetSkillId03) == 0x000044, "Member 'FItemMagicOrbTemplate::PetSkillId03' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PetSkillOpenLv03) == 0x000048, "Member 'FItemMagicOrbTemplate::PetSkillOpenLv03' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PassiveLv03) == 0x00004C, "Member 'FItemMagicOrbTemplate::PassiveLv03' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, PetSkillCombatPoint03) == 0x000050, "Member 'FItemMagicOrbTemplate::PetSkillCombatPoint03' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, RandomOptionGroup) == 0x000054, "Member 'FItemMagicOrbTemplate::RandomOptionGroup' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, RandomOption01OpenLv) == 0x000058, "Member 'FItemMagicOrbTemplate::RandomOption01OpenLv' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, RandomOption02OpenLv) == 0x00005C, "Member 'FItemMagicOrbTemplate::RandomOption02OpenLv' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, RandomOption03OpenLv) == 0x000060, "Member 'FItemMagicOrbTemplate::RandomOption03OpenLv' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, RandomOption04OpenLv) == 0x000064, "Member 'FItemMagicOrbTemplate::RandomOption04OpenLv' has a wrong offset!");
static_assert(offsetof(FItemMagicOrbTemplate, MagicOrbState) == 0x000068, "Member 'FItemMagicOrbTemplate::MagicOrbState' has a wrong offset!");

// ScriptStruct MirMobile.ItemMagicStoneTranceTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemMagicStoneTranceTemplate final : public FTableRowBase
{
public:
	int32                                         TranceID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceStep;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusValue;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemMagicStoneTranceTemplate) == 0x000008, "Wrong alignment on FItemMagicStoneTranceTemplate");
static_assert(sizeof(FItemMagicStoneTranceTemplate) == 0x000020, "Wrong size on FItemMagicStoneTranceTemplate");
static_assert(offsetof(FItemMagicStoneTranceTemplate, TranceID) == 0x000008, "Member 'FItemMagicStoneTranceTemplate::TranceID' has a wrong offset!");
static_assert(offsetof(FItemMagicStoneTranceTemplate, TranceStep) == 0x00000C, "Member 'FItemMagicStoneTranceTemplate::TranceStep' has a wrong offset!");
static_assert(offsetof(FItemMagicStoneTranceTemplate, StatusId) == 0x000010, "Member 'FItemMagicStoneTranceTemplate::StatusId' has a wrong offset!");
static_assert(offsetof(FItemMagicStoneTranceTemplate, StatusValue) == 0x000014, "Member 'FItemMagicStoneTranceTemplate::StatusValue' has a wrong offset!");
static_assert(offsetof(FItemMagicStoneTranceTemplate, Grade) == 0x000018, "Member 'FItemMagicStoneTranceTemplate::Grade' has a wrong offset!");
static_assert(offsetof(FItemMagicStoneTranceTemplate, Tier) == 0x00001C, "Member 'FItemMagicStoneTranceTemplate::Tier' has a wrong offset!");

// ScriptStruct MirMobile.StagePreloadTemplate
// 0x0018 (0x0020 - 0x0008)
struct FStagePreloadTemplate final : public FTableRowBase
{
public:
	int32                                         StageID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPreloadData>                   PreloadData;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStagePreloadTemplate) == 0x000008, "Wrong alignment on FStagePreloadTemplate");
static_assert(sizeof(FStagePreloadTemplate) == 0x000020, "Wrong size on FStagePreloadTemplate");
static_assert(offsetof(FStagePreloadTemplate, StageID) == 0x000008, "Member 'FStagePreloadTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FStagePreloadTemplate, PreloadData) == 0x000010, "Member 'FStagePreloadTemplate::PreloadData' has a wrong offset!");

// ScriptStruct MirMobile.ItemMakeAgencyTemplate
// 0x0080 (0x0088 - 0x0008)
struct FItemMakeAgencyTemplate final : public FTableRowBase
{
public:
	int32                                         ItemMakeId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeLimitType;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeWorldLimitCount;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeTryLimitCount;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeSuccessLimitCount;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakePeriodType;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventRepeatId;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MakePeriodStartDate;                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MakePeriodEndDate;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SchedulerCycleId;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BroadCastType;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward01Type;                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward01Id;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward01Count;                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward02Type;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward02Id;                                // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward02Count;                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward03Type;                              // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward03Id;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward03Count;                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward04Type;                              // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward04Id;                                // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward04Count;                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMakeAgencyTemplate) == 0x000008, "Wrong alignment on FItemMakeAgencyTemplate");
static_assert(sizeof(FItemMakeAgencyTemplate) == 0x000088, "Wrong size on FItemMakeAgencyTemplate");
static_assert(offsetof(FItemMakeAgencyTemplate, ItemMakeId) == 0x000008, "Member 'FItemMakeAgencyTemplate::ItemMakeId' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeLimitType) == 0x00000C, "Member 'FItemMakeAgencyTemplate::MakeLimitType' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeWorldLimitCount) == 0x000010, "Member 'FItemMakeAgencyTemplate::MakeWorldLimitCount' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeTryLimitCount) == 0x000014, "Member 'FItemMakeAgencyTemplate::MakeTryLimitCount' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeSuccessLimitCount) == 0x000018, "Member 'FItemMakeAgencyTemplate::MakeSuccessLimitCount' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakePeriodType) == 0x00001C, "Member 'FItemMakeAgencyTemplate::MakePeriodType' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, EventRepeatId) == 0x000020, "Member 'FItemMakeAgencyTemplate::EventRepeatId' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakePeriodStartDate) == 0x000028, "Member 'FItemMakeAgencyTemplate::MakePeriodStartDate' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakePeriodEndDate) == 0x000038, "Member 'FItemMakeAgencyTemplate::MakePeriodEndDate' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, SchedulerCycleId) == 0x000048, "Member 'FItemMakeAgencyTemplate::SchedulerCycleId' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, BroadCastType) == 0x00004C, "Member 'FItemMakeAgencyTemplate::BroadCastType' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, SortOrder) == 0x000050, "Member 'FItemMakeAgencyTemplate::SortOrder' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward01Type) == 0x000054, "Member 'FItemMakeAgencyTemplate::MakeFailReward01Type' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward01Id) == 0x000058, "Member 'FItemMakeAgencyTemplate::MakeFailReward01Id' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward01Count) == 0x00005C, "Member 'FItemMakeAgencyTemplate::MakeFailReward01Count' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward02Type) == 0x000060, "Member 'FItemMakeAgencyTemplate::MakeFailReward02Type' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward02Id) == 0x000064, "Member 'FItemMakeAgencyTemplate::MakeFailReward02Id' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward02Count) == 0x000068, "Member 'FItemMakeAgencyTemplate::MakeFailReward02Count' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward03Type) == 0x00006C, "Member 'FItemMakeAgencyTemplate::MakeFailReward03Type' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward03Id) == 0x000070, "Member 'FItemMakeAgencyTemplate::MakeFailReward03Id' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward03Count) == 0x000074, "Member 'FItemMakeAgencyTemplate::MakeFailReward03Count' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward04Type) == 0x000078, "Member 'FItemMakeAgencyTemplate::MakeFailReward04Type' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward04Id) == 0x00007C, "Member 'FItemMakeAgencyTemplate::MakeFailReward04Id' has a wrong offset!");
static_assert(offsetof(FItemMakeAgencyTemplate, MakeFailReward04Count) == 0x000080, "Member 'FItemMakeAgencyTemplate::MakeFailReward04Count' has a wrong offset!");

// ScriptStruct MirMobile.ItemMakeFrameTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemMakeFrameTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueId;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeGroup;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeSubGroup;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMakeFrameTemplate) == 0x000008, "Wrong alignment on FItemMakeFrameTemplate");
static_assert(sizeof(FItemMakeFrameTemplate) == 0x000020, "Wrong size on FItemMakeFrameTemplate");
static_assert(offsetof(FItemMakeFrameTemplate, Name) == 0x000008, "Member 'FItemMakeFrameTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemMakeFrameTemplate, UniqueId) == 0x00000C, "Member 'FItemMakeFrameTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FItemMakeFrameTemplate, MakeGroup) == 0x000010, "Member 'FItemMakeFrameTemplate::MakeGroup' has a wrong offset!");
static_assert(offsetof(FItemMakeFrameTemplate, MakeSubGroup) == 0x000014, "Member 'FItemMakeFrameTemplate::MakeSubGroup' has a wrong offset!");
static_assert(offsetof(FItemMakeFrameTemplate, NameSId) == 0x000018, "Member 'FItemMakeFrameTemplate::NameSId' has a wrong offset!");

// ScriptStruct MirMobile.ItemMakeTemplate
// 0x0148 (0x0150 - 0x0008)
struct FItemMakeTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemMakeId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabHorizon;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCGroupListID;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabVertical;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreItemId;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeCount;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeType;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetWayType;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialType;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialItemMainType;                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialItemSubType;                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialItemItemTier;                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialItemItemGrade;                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialItemSmeltingCount;                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialItemItemCount;                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialUse01Id;                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialItem01SmeltingCount;                // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialUse02Id;                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialItem02SmeltingCount;                // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialUse03Id;                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialItem03SmeltingCount;                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialUse04Id;                            // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMaterialItem04SmeltingCount;                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialUse01Id;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem01Count;                               // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialUse02Id;                                   // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem02Count;                               // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialUse03Id;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem03Count;                               // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialUse04Id;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem04Count;                               // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost01Id;                                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost01Count;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost02Id;                                      // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost02Count;                                   // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessProbability;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailResultType;                                    // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailReplaceItemId;                                 // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailReplaceItemCount;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailMaterialCollectRate;                           // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuckyProbability;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuckyBonusItemId;                                  // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuckyBonusCount;                                   // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkSteelCheck;                                    // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventSpecialMaterialUse01Id;                       // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventSpecialMaterialItem01SmeltingCount;           // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventSpecialMaterialUse02Id;                       // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventSpecialMaterialItem02SmeltingCount;           // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventSpecialMaterialUse03Id;                       // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventSpecialMaterialItem03SmeltingCount;           // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventSpecialMaterialUse04Id;                       // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventSpecialMaterialItem04SmeltingCount;           // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMaterialUse01Id;                              // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMaterialItem01Count;                          // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMaterialUse02Id;                              // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMaterialItem02Count;                          // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMaterialUse03Id;                              // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMaterialItem03Count;                          // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMaterialUse04Id;                              // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMaterialItem04Count;                          // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventNeedCost01Id;                                 // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventNeedCost01Count;                              // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventNeedCost02Id;                                 // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventNeedCost02Count;                              // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward01Type;                              // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward02Type;                              // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward03Type;                              // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward04Type;                              // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward01Id;                                // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward02Id;                                // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward03Id;                                // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward04Id;                                // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward01Count;                             // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward02Count;                             // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward03Count;                             // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeFailReward04Count;                             // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMakeTemplate) == 0x000008, "Wrong alignment on FItemMakeTemplate");
static_assert(sizeof(FItemMakeTemplate) == 0x000150, "Wrong size on FItemMakeTemplate");
static_assert(offsetof(FItemMakeTemplate, Name) == 0x000008, "Member 'FItemMakeTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, ItemMakeId) == 0x00000C, "Member 'FItemMakeTemplate::ItemMakeId' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, ContentsId) == 0x000010, "Member 'FItemMakeTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventType) == 0x000014, "Member 'FItemMakeTemplate::EventType' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, ClassID) == 0x000018, "Member 'FItemMakeTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, TabHorizon) == 0x00001C, "Member 'FItemMakeTemplate::TabHorizon' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, NPCGroupListID) == 0x000020, "Member 'FItemMakeTemplate::NPCGroupListID' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, TabVertical) == 0x000024, "Member 'FItemMakeTemplate::TabVertical' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, ItemId) == 0x000028, "Member 'FItemMakeTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, PreItemId) == 0x00002C, "Member 'FItemMakeTemplate::PreItemId' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeCount) == 0x000030, "Member 'FItemMakeTemplate::MakeCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeType) == 0x000034, "Member 'FItemMakeTemplate::MakeType' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, GetWayType) == 0x000038, "Member 'FItemMakeTemplate::GetWayType' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialType) == 0x00003C, "Member 'FItemMakeTemplate::SpecialMaterialType' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialItemMainType) == 0x000040, "Member 'FItemMakeTemplate::SpecialMaterialItemMainType' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialItemSubType) == 0x000044, "Member 'FItemMakeTemplate::SpecialMaterialItemSubType' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialItemItemTier) == 0x000048, "Member 'FItemMakeTemplate::SpecialMaterialItemItemTier' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialItemItemGrade) == 0x00004C, "Member 'FItemMakeTemplate::SpecialMaterialItemItemGrade' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialItemSmeltingCount) == 0x000050, "Member 'FItemMakeTemplate::SpecialMaterialItemSmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialItemItemCount) == 0x000054, "Member 'FItemMakeTemplate::SpecialMaterialItemItemCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialUse01Id) == 0x000058, "Member 'FItemMakeTemplate::SpecialMaterialUse01Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialItem01SmeltingCount) == 0x00005C, "Member 'FItemMakeTemplate::SpecialMaterialItem01SmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialUse02Id) == 0x000060, "Member 'FItemMakeTemplate::SpecialMaterialUse02Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialItem02SmeltingCount) == 0x000064, "Member 'FItemMakeTemplate::SpecialMaterialItem02SmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialUse03Id) == 0x000068, "Member 'FItemMakeTemplate::SpecialMaterialUse03Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialItem03SmeltingCount) == 0x00006C, "Member 'FItemMakeTemplate::SpecialMaterialItem03SmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialUse04Id) == 0x000070, "Member 'FItemMakeTemplate::SpecialMaterialUse04Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SpecialMaterialItem04SmeltingCount) == 0x000074, "Member 'FItemMakeTemplate::SpecialMaterialItem04SmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MaterialUse01Id) == 0x000078, "Member 'FItemMakeTemplate::MaterialUse01Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MaterialItem01Count) == 0x00007C, "Member 'FItemMakeTemplate::MaterialItem01Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MaterialUse02Id) == 0x000080, "Member 'FItemMakeTemplate::MaterialUse02Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MaterialItem02Count) == 0x000084, "Member 'FItemMakeTemplate::MaterialItem02Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MaterialUse03Id) == 0x000088, "Member 'FItemMakeTemplate::MaterialUse03Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MaterialItem03Count) == 0x00008C, "Member 'FItemMakeTemplate::MaterialItem03Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MaterialUse04Id) == 0x000090, "Member 'FItemMakeTemplate::MaterialUse04Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MaterialItem04Count) == 0x000094, "Member 'FItemMakeTemplate::MaterialItem04Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, NeedCost01Id) == 0x000098, "Member 'FItemMakeTemplate::NeedCost01Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, NeedCost01Count) == 0x00009C, "Member 'FItemMakeTemplate::NeedCost01Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, NeedCost02Id) == 0x0000A0, "Member 'FItemMakeTemplate::NeedCost02Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, NeedCost02Count) == 0x0000A4, "Member 'FItemMakeTemplate::NeedCost02Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, SuccessProbability) == 0x0000A8, "Member 'FItemMakeTemplate::SuccessProbability' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, FailResultType) == 0x0000AC, "Member 'FItemMakeTemplate::FailResultType' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, FailReplaceItemId) == 0x0000B0, "Member 'FItemMakeTemplate::FailReplaceItemId' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, FailReplaceItemCount) == 0x0000B4, "Member 'FItemMakeTemplate::FailReplaceItemCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, FailMaterialCollectRate) == 0x0000B8, "Member 'FItemMakeTemplate::FailMaterialCollectRate' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, LuckyProbability) == 0x0000BC, "Member 'FItemMakeTemplate::LuckyProbability' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, LuckyBonusItemId) == 0x0000C0, "Member 'FItemMakeTemplate::LuckyBonusItemId' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, LuckyBonusCount) == 0x0000C4, "Member 'FItemMakeTemplate::LuckyBonusCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, DarkSteelCheck) == 0x0000C8, "Member 'FItemMakeTemplate::DarkSteelCheck' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventSpecialMaterialUse01Id) == 0x0000CC, "Member 'FItemMakeTemplate::EventSpecialMaterialUse01Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventSpecialMaterialItem01SmeltingCount) == 0x0000D0, "Member 'FItemMakeTemplate::EventSpecialMaterialItem01SmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventSpecialMaterialUse02Id) == 0x0000D4, "Member 'FItemMakeTemplate::EventSpecialMaterialUse02Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventSpecialMaterialItem02SmeltingCount) == 0x0000D8, "Member 'FItemMakeTemplate::EventSpecialMaterialItem02SmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventSpecialMaterialUse03Id) == 0x0000DC, "Member 'FItemMakeTemplate::EventSpecialMaterialUse03Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventSpecialMaterialItem03SmeltingCount) == 0x0000E0, "Member 'FItemMakeTemplate::EventSpecialMaterialItem03SmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventSpecialMaterialUse04Id) == 0x0000E4, "Member 'FItemMakeTemplate::EventSpecialMaterialUse04Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventSpecialMaterialItem04SmeltingCount) == 0x0000E8, "Member 'FItemMakeTemplate::EventSpecialMaterialItem04SmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventMaterialUse01Id) == 0x0000EC, "Member 'FItemMakeTemplate::EventMaterialUse01Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventMaterialItem01Count) == 0x0000F0, "Member 'FItemMakeTemplate::EventMaterialItem01Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventMaterialUse02Id) == 0x0000F4, "Member 'FItemMakeTemplate::EventMaterialUse02Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventMaterialItem02Count) == 0x0000F8, "Member 'FItemMakeTemplate::EventMaterialItem02Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventMaterialUse03Id) == 0x0000FC, "Member 'FItemMakeTemplate::EventMaterialUse03Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventMaterialItem03Count) == 0x000100, "Member 'FItemMakeTemplate::EventMaterialItem03Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventMaterialUse04Id) == 0x000104, "Member 'FItemMakeTemplate::EventMaterialUse04Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventMaterialItem04Count) == 0x000108, "Member 'FItemMakeTemplate::EventMaterialItem04Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventNeedCost01Id) == 0x00010C, "Member 'FItemMakeTemplate::EventNeedCost01Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventNeedCost01Count) == 0x000110, "Member 'FItemMakeTemplate::EventNeedCost01Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventNeedCost02Id) == 0x000114, "Member 'FItemMakeTemplate::EventNeedCost02Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, EventNeedCost02Count) == 0x000118, "Member 'FItemMakeTemplate::EventNeedCost02Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward01Type) == 0x00011C, "Member 'FItemMakeTemplate::MakeFailReward01Type' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward02Type) == 0x000120, "Member 'FItemMakeTemplate::MakeFailReward02Type' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward03Type) == 0x000124, "Member 'FItemMakeTemplate::MakeFailReward03Type' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward04Type) == 0x000128, "Member 'FItemMakeTemplate::MakeFailReward04Type' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward01Id) == 0x00012C, "Member 'FItemMakeTemplate::MakeFailReward01Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward02Id) == 0x000130, "Member 'FItemMakeTemplate::MakeFailReward02Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward03Id) == 0x000134, "Member 'FItemMakeTemplate::MakeFailReward03Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward04Id) == 0x000138, "Member 'FItemMakeTemplate::MakeFailReward04Id' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward01Count) == 0x00013C, "Member 'FItemMakeTemplate::MakeFailReward01Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward02Count) == 0x000140, "Member 'FItemMakeTemplate::MakeFailReward02Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward03Count) == 0x000144, "Member 'FItemMakeTemplate::MakeFailReward03Count' has a wrong offset!");
static_assert(offsetof(FItemMakeTemplate, MakeFailReward04Count) == 0x000148, "Member 'FItemMakeTemplate::MakeFailReward04Count' has a wrong offset!");

// ScriptStruct MirMobile.ItemMaterialComposeListTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemMaterialComposeListTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComposeListID;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardRate;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemId;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMaterialComposeListTemplate) == 0x000008, "Wrong alignment on FItemMaterialComposeListTemplate");
static_assert(sizeof(FItemMaterialComposeListTemplate) == 0x000020, "Wrong size on FItemMaterialComposeListTemplate");
static_assert(offsetof(FItemMaterialComposeListTemplate, Name) == 0x000008, "Member 'FItemMaterialComposeListTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeListTemplate, ComposeListID) == 0x00000C, "Member 'FItemMaterialComposeListTemplate::ComposeListID' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeListTemplate, RewardRate) == 0x000010, "Member 'FItemMaterialComposeListTemplate::RewardRate' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeListTemplate, RewardItemId) == 0x000014, "Member 'FItemMaterialComposeListTemplate::RewardItemId' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeListTemplate, RewardItemCount) == 0x000018, "Member 'FItemMaterialComposeListTemplate::RewardItemCount' has a wrong offset!");

// ScriptStruct MirMobile.WidgetInfo
// 0x0038 (0x0038 - 0x0000)
struct FWidgetInfo final
{
public:
	EWidgetID                                     M_eWidgetID;                                       // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 M_strWidgetPath;                                   // 0x0008(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         M_iWidgetLayerPriority;                            // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bMaintainWidget;                                 // 0x0020(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xB];                                       // 0x0021(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          M_bUseWidgetPool;                                  // 0x002C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bAsyncLoading;                                   // 0x002D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bShowingForAsyncLoading;                         // 0x002E(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWidgetBase>             M_pWidget;                                         // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetInfo) == 0x000008, "Wrong alignment on FWidgetInfo");
static_assert(sizeof(FWidgetInfo) == 0x000038, "Wrong size on FWidgetInfo");
static_assert(offsetof(FWidgetInfo, M_eWidgetID) == 0x000000, "Member 'FWidgetInfo::M_eWidgetID' has a wrong offset!");
static_assert(offsetof(FWidgetInfo, M_strWidgetPath) == 0x000008, "Member 'FWidgetInfo::M_strWidgetPath' has a wrong offset!");
static_assert(offsetof(FWidgetInfo, M_iWidgetLayerPriority) == 0x00001C, "Member 'FWidgetInfo::M_iWidgetLayerPriority' has a wrong offset!");
static_assert(offsetof(FWidgetInfo, M_bMaintainWidget) == 0x000020, "Member 'FWidgetInfo::M_bMaintainWidget' has a wrong offset!");
static_assert(offsetof(FWidgetInfo, M_bUseWidgetPool) == 0x00002C, "Member 'FWidgetInfo::M_bUseWidgetPool' has a wrong offset!");
static_assert(offsetof(FWidgetInfo, M_bAsyncLoading) == 0x00002D, "Member 'FWidgetInfo::M_bAsyncLoading' has a wrong offset!");
static_assert(offsetof(FWidgetInfo, M_bShowingForAsyncLoading) == 0x00002E, "Member 'FWidgetInfo::M_bShowingForAsyncLoading' has a wrong offset!");
static_assert(offsetof(FWidgetInfo, M_pWidget) == 0x000030, "Member 'FWidgetInfo::M_pWidget' has a wrong offset!");

// ScriptStruct MirMobile.QuestDropItemTemplate
// 0x0018 (0x0020 - 0x0008)
struct FQuestDropItemTemplate final : public FTableRowBase
{
public:
	int32                                         QuestDropId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestType;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropRate;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestDropItemTemplate) == 0x000008, "Wrong alignment on FQuestDropItemTemplate");
static_assert(sizeof(FQuestDropItemTemplate) == 0x000020, "Wrong size on FQuestDropItemTemplate");
static_assert(offsetof(FQuestDropItemTemplate, QuestDropId) == 0x000008, "Member 'FQuestDropItemTemplate::QuestDropId' has a wrong offset!");
static_assert(offsetof(FQuestDropItemTemplate, QuestType) == 0x00000C, "Member 'FQuestDropItemTemplate::QuestType' has a wrong offset!");
static_assert(offsetof(FQuestDropItemTemplate, QuestId) == 0x000010, "Member 'FQuestDropItemTemplate::QuestId' has a wrong offset!");
static_assert(offsetof(FQuestDropItemTemplate, ItemId) == 0x000014, "Member 'FQuestDropItemTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FQuestDropItemTemplate, DropRate) == 0x000018, "Member 'FQuestDropItemTemplate::DropRate' has a wrong offset!");

// ScriptStruct MirMobile.ItemMaterialComposePointTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemMaterialComposePointTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseId;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TypeString;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComposeGradeString;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailPointType;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailPoint;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemMaterialComposePointTemplate) == 0x000008, "Wrong alignment on FItemMaterialComposePointTemplate");
static_assert(sizeof(FItemMaterialComposePointTemplate) == 0x000020, "Wrong size on FItemMaterialComposePointTemplate");
static_assert(offsetof(FItemMaterialComposePointTemplate, Name) == 0x000008, "Member 'FItemMaterialComposePointTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposePointTemplate, ItemUseId) == 0x00000C, "Member 'FItemMaterialComposePointTemplate::ItemUseId' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposePointTemplate, TypeString) == 0x000010, "Member 'FItemMaterialComposePointTemplate::TypeString' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposePointTemplate, ComposeGradeString) == 0x000014, "Member 'FItemMaterialComposePointTemplate::ComposeGradeString' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposePointTemplate, FailPointType) == 0x000018, "Member 'FItemMaterialComposePointTemplate::FailPointType' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposePointTemplate, FailPoint) == 0x00001C, "Member 'FItemMaterialComposePointTemplate::FailPoint' has a wrong offset!");

// ScriptStruct MirMobile.MythicSetEffectTemplate
// 0x0020 (0x0028 - 0x0008)
struct FMythicSetEffectTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetEffectId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectTarget;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseId;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Character;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectID2;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMythicSetEffectTemplate) == 0x000008, "Wrong alignment on FMythicSetEffectTemplate");
static_assert(sizeof(FMythicSetEffectTemplate) == 0x000028, "Wrong size on FMythicSetEffectTemplate");
static_assert(offsetof(FMythicSetEffectTemplate, Name) == 0x000008, "Member 'FMythicSetEffectTemplate::Name' has a wrong offset!");
static_assert(offsetof(FMythicSetEffectTemplate, SetEffectId) == 0x00000C, "Member 'FMythicSetEffectTemplate::SetEffectId' has a wrong offset!");
static_assert(offsetof(FMythicSetEffectTemplate, EffectTarget) == 0x000010, "Member 'FMythicSetEffectTemplate::EffectTarget' has a wrong offset!");
static_assert(offsetof(FMythicSetEffectTemplate, UseId) == 0x000014, "Member 'FMythicSetEffectTemplate::UseId' has a wrong offset!");
static_assert(offsetof(FMythicSetEffectTemplate, Character) == 0x000018, "Member 'FMythicSetEffectTemplate::Character' has a wrong offset!");
static_assert(offsetof(FMythicSetEffectTemplate, EffectId) == 0x00001C, "Member 'FMythicSetEffectTemplate::EffectId' has a wrong offset!");
static_assert(offsetof(FMythicSetEffectTemplate, EffectID2) == 0x000020, "Member 'FMythicSetEffectTemplate::EffectID2' has a wrong offset!");

// ScriptStruct MirMobile.ItemMaterialComposeTemplate
// 0x0040 (0x0048 - 0x0008)
struct FItemMaterialComposeTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainType;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubType;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComposeGrade;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailPointType;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailPointReward;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComposeCostType;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComposeCostValue;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessRate;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessComposeListID1;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessComposeListID2;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessComposeListID3;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessComposeListID4;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessComposeListID5;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessComposeListID6;                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemMaterialComposeTemplate) == 0x000008, "Wrong alignment on FItemMaterialComposeTemplate");
static_assert(sizeof(FItemMaterialComposeTemplate) == 0x000048, "Wrong size on FItemMaterialComposeTemplate");
static_assert(offsetof(FItemMaterialComposeTemplate, Name) == 0x000008, "Member 'FItemMaterialComposeTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, MainType) == 0x00000C, "Member 'FItemMaterialComposeTemplate::MainType' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, SubType) == 0x000010, "Member 'FItemMaterialComposeTemplate::SubType' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, Tier) == 0x000014, "Member 'FItemMaterialComposeTemplate::Tier' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, ComposeGrade) == 0x000018, "Member 'FItemMaterialComposeTemplate::ComposeGrade' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, FailPointType) == 0x00001C, "Member 'FItemMaterialComposeTemplate::FailPointType' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, FailPointReward) == 0x000020, "Member 'FItemMaterialComposeTemplate::FailPointReward' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, ComposeCostType) == 0x000024, "Member 'FItemMaterialComposeTemplate::ComposeCostType' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, ComposeCostValue) == 0x000028, "Member 'FItemMaterialComposeTemplate::ComposeCostValue' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, SuccessRate) == 0x00002C, "Member 'FItemMaterialComposeTemplate::SuccessRate' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, SuccessComposeListID1) == 0x000030, "Member 'FItemMaterialComposeTemplate::SuccessComposeListID1' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, SuccessComposeListID2) == 0x000034, "Member 'FItemMaterialComposeTemplate::SuccessComposeListID2' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, SuccessComposeListID3) == 0x000038, "Member 'FItemMaterialComposeTemplate::SuccessComposeListID3' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, SuccessComposeListID4) == 0x00003C, "Member 'FItemMaterialComposeTemplate::SuccessComposeListID4' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, SuccessComposeListID5) == 0x000040, "Member 'FItemMaterialComposeTemplate::SuccessComposeListID5' has a wrong offset!");
static_assert(offsetof(FItemMaterialComposeTemplate, SuccessComposeListID6) == 0x000044, "Member 'FItemMaterialComposeTemplate::SuccessComposeListID6' has a wrong offset!");

// ScriptStruct MirMobile.ItemOptionGradeTemplate
// 0x0050 (0x0058 - 0x0008)
struct FItemOptionGradeTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemGrade;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemTier;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost01Id;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost01Count;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost02Id;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost02Count;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemUseId01;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemCount01;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionTransRate;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemOptionSpecialType;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialNeedCost01Id;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialNeedCost01Count;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialNeedCost02Id;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialNeedCost02Count;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialNeedItemUseID01;                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialNeedItemCount01;                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialOptionTransRate;                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIconControl;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemOptionGradeTemplate) == 0x000008, "Wrong alignment on FItemOptionGradeTemplate");
static_assert(sizeof(FItemOptionGradeTemplate) == 0x000058, "Wrong size on FItemOptionGradeTemplate");
static_assert(offsetof(FItemOptionGradeTemplate, Name) == 0x000008, "Member 'FItemOptionGradeTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, ItemGrade) == 0x00000C, "Member 'FItemOptionGradeTemplate::ItemGrade' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, ItemTier) == 0x000010, "Member 'FItemOptionGradeTemplate::ItemTier' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, NeedCost01Id) == 0x000014, "Member 'FItemOptionGradeTemplate::NeedCost01Id' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, NeedCost01Count) == 0x000018, "Member 'FItemOptionGradeTemplate::NeedCost01Count' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, NeedCost02Id) == 0x00001C, "Member 'FItemOptionGradeTemplate::NeedCost02Id' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, NeedCost02Count) == 0x000020, "Member 'FItemOptionGradeTemplate::NeedCost02Count' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, NeedItemUseId01) == 0x000024, "Member 'FItemOptionGradeTemplate::NeedItemUseId01' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, NeedItemCount01) == 0x000028, "Member 'FItemOptionGradeTemplate::NeedItemCount01' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, OptionTransRate) == 0x00002C, "Member 'FItemOptionGradeTemplate::OptionTransRate' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, ItemOptionSpecialType) == 0x000030, "Member 'FItemOptionGradeTemplate::ItemOptionSpecialType' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, SpecialNeedCost01Id) == 0x000034, "Member 'FItemOptionGradeTemplate::SpecialNeedCost01Id' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, SpecialNeedCost01Count) == 0x000038, "Member 'FItemOptionGradeTemplate::SpecialNeedCost01Count' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, SpecialNeedCost02Id) == 0x00003C, "Member 'FItemOptionGradeTemplate::SpecialNeedCost02Id' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, SpecialNeedCost02Count) == 0x000040, "Member 'FItemOptionGradeTemplate::SpecialNeedCost02Count' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, SpecialNeedItemUseID01) == 0x000044, "Member 'FItemOptionGradeTemplate::SpecialNeedItemUseID01' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, SpecialNeedItemCount01) == 0x000048, "Member 'FItemOptionGradeTemplate::SpecialNeedItemCount01' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, SpecialOptionTransRate) == 0x00004C, "Member 'FItemOptionGradeTemplate::SpecialOptionTransRate' has a wrong offset!");
static_assert(offsetof(FItemOptionGradeTemplate, ItemIconControl) == 0x000050, "Member 'FItemOptionGradeTemplate::ItemIconControl' has a wrong offset!");

// ScriptStruct MirMobile.ItemOptionRandomTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemOptionRandomTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomOptionGroupId;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionType;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionTypeValue;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionRate;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemOptionRandomTemplate) == 0x000008, "Wrong alignment on FItemOptionRandomTemplate");
static_assert(sizeof(FItemOptionRandomTemplate) == 0x000020, "Wrong size on FItemOptionRandomTemplate");
static_assert(offsetof(FItemOptionRandomTemplate, Name) == 0x000008, "Member 'FItemOptionRandomTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemOptionRandomTemplate, RandomOptionGroupId) == 0x00000C, "Member 'FItemOptionRandomTemplate::RandomOptionGroupId' has a wrong offset!");
static_assert(offsetof(FItemOptionRandomTemplate, OptionType) == 0x000010, "Member 'FItemOptionRandomTemplate::OptionType' has a wrong offset!");
static_assert(offsetof(FItemOptionRandomTemplate, OptionTypeValue) == 0x000014, "Member 'FItemOptionRandomTemplate::OptionTypeValue' has a wrong offset!");
static_assert(offsetof(FItemOptionRandomTemplate, OptionRate) == 0x000018, "Member 'FItemOptionRandomTemplate::OptionRate' has a wrong offset!");

// ScriptStruct MirMobile.ItemRandomExchangeEquipTemplate
// 0x00E8 (0x00F0 - 0x0008)
struct FItemRandomExchangeEquipTemplate final : public FTableRowBase
{
public:
	int32                                         ExchangeId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_Main_Type;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_Sub_type;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_Grade;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_Tier;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_SmeltingType;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_ItemId;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_ItemValue;                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_Type;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_Value;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Input_Item_List1;                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Output_Item_List1;                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Input_Item_List2;                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Output_Item_List2;                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Input_Item_List3;                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Output_Item_List3;                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Input_Item_List4;                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Output_Item_List4;                        // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Input_Item_List5;                         // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Output_Item_List5;                        // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Input_Item_List6;                         // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Exchange_Output_Item_List6;                        // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemRandomExchangeEquipTemplate) == 0x000008, "Wrong alignment on FItemRandomExchangeEquipTemplate");
static_assert(sizeof(FItemRandomExchangeEquipTemplate) == 0x0000F0, "Wrong size on FItemRandomExchangeEquipTemplate");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, ExchangeId) == 0x000008, "Member 'FItemRandomExchangeEquipTemplate::ExchangeId' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Item_Main_Type) == 0x00000C, "Member 'FItemRandomExchangeEquipTemplate::Item_Main_Type' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Item_Sub_type) == 0x000010, "Member 'FItemRandomExchangeEquipTemplate::Item_Sub_type' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Item_Grade) == 0x000014, "Member 'FItemRandomExchangeEquipTemplate::Item_Grade' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Item_Tier) == 0x000018, "Member 'FItemRandomExchangeEquipTemplate::Item_Tier' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Item_SmeltingType) == 0x00001C, "Member 'FItemRandomExchangeEquipTemplate::Item_SmeltingType' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Cost_ItemId) == 0x000020, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Cost_ItemId' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Cost_ItemValue) == 0x000024, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Cost_ItemValue' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Cost_Type) == 0x000028, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Cost_Type' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Cost_Value) == 0x00002C, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Cost_Value' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Input_Item_List1) == 0x000030, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Input_Item_List1' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Output_Item_List1) == 0x000040, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Output_Item_List1' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Input_Item_List2) == 0x000050, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Input_Item_List2' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Output_Item_List2) == 0x000060, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Output_Item_List2' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Input_Item_List3) == 0x000070, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Input_Item_List3' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Output_Item_List3) == 0x000080, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Output_Item_List3' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Input_Item_List4) == 0x000090, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Input_Item_List4' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Output_Item_List4) == 0x0000A0, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Output_Item_List4' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Input_Item_List5) == 0x0000B0, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Input_Item_List5' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Output_Item_List5) == 0x0000C0, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Output_Item_List5' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Input_Item_List6) == 0x0000D0, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Input_Item_List6' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeEquipTemplate, Exchange_Output_Item_List6) == 0x0000E0, "Member 'FItemRandomExchangeEquipTemplate::Exchange_Output_Item_List6' has a wrong offset!");

// ScriptStruct MirMobile.ItemRandomExchangeTemplate
// 0x0020 (0x0028 - 0x0008)
struct FItemRandomExchangeTemplate final : public FTableRowBase
{
public:
	int32                                         ExchangeId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_Main_Type;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_Sub_type;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_Grade;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_ItemId;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_ItemValue;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_Type;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchage_Cost_Value;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemRandomExchangeTemplate) == 0x000008, "Wrong alignment on FItemRandomExchangeTemplate");
static_assert(sizeof(FItemRandomExchangeTemplate) == 0x000028, "Wrong size on FItemRandomExchangeTemplate");
static_assert(offsetof(FItemRandomExchangeTemplate, ExchangeId) == 0x000008, "Member 'FItemRandomExchangeTemplate::ExchangeId' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeTemplate, Item_Main_Type) == 0x00000C, "Member 'FItemRandomExchangeTemplate::Item_Main_Type' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeTemplate, Item_Sub_type) == 0x000010, "Member 'FItemRandomExchangeTemplate::Item_Sub_type' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeTemplate, Item_Grade) == 0x000014, "Member 'FItemRandomExchangeTemplate::Item_Grade' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeTemplate, Exchange_Cost_ItemId) == 0x000018, "Member 'FItemRandomExchangeTemplate::Exchange_Cost_ItemId' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeTemplate, Exchange_Cost_ItemValue) == 0x00001C, "Member 'FItemRandomExchangeTemplate::Exchange_Cost_ItemValue' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeTemplate, Exchange_Cost_Type) == 0x000020, "Member 'FItemRandomExchangeTemplate::Exchange_Cost_Type' has a wrong offset!");
static_assert(offsetof(FItemRandomExchangeTemplate, Exchage_Cost_Value) == 0x000024, "Member 'FItemRandomExchangeTemplate::Exchage_Cost_Value' has a wrong offset!");

// ScriptStruct MirMobile.ItemSecretAbilityTemplate
// 0x0040 (0x0048 - 0x0008)
struct FItemSecretAbilityTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmeltingCount;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Passive;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveLv;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveLvUI;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveBattlePoint;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1Type;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1Value;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2Type;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2Value;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute3Type;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute3Value;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute4Type;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute4Value;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSecretAbilityTemplate) == 0x000008, "Wrong alignment on FItemSecretAbilityTemplate");
static_assert(sizeof(FItemSecretAbilityTemplate) == 0x000048, "Wrong size on FItemSecretAbilityTemplate");
static_assert(offsetof(FItemSecretAbilityTemplate, ID) == 0x000008, "Member 'FItemSecretAbilityTemplate::ID' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, UseId) == 0x00000C, "Member 'FItemSecretAbilityTemplate::UseId' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, SmeltingCount) == 0x000010, "Member 'FItemSecretAbilityTemplate::SmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, Passive) == 0x000014, "Member 'FItemSecretAbilityTemplate::Passive' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, PassiveLv) == 0x000018, "Member 'FItemSecretAbilityTemplate::PassiveLv' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, PassiveLvUI) == 0x00001C, "Member 'FItemSecretAbilityTemplate::PassiveLvUI' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, PassiveBattlePoint) == 0x000020, "Member 'FItemSecretAbilityTemplate::PassiveBattlePoint' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, Attribute1Type) == 0x000024, "Member 'FItemSecretAbilityTemplate::Attribute1Type' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, Attribute1Value) == 0x000028, "Member 'FItemSecretAbilityTemplate::Attribute1Value' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, Attribute2Type) == 0x00002C, "Member 'FItemSecretAbilityTemplate::Attribute2Type' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, Attribute2Value) == 0x000030, "Member 'FItemSecretAbilityTemplate::Attribute2Value' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, Attribute3Type) == 0x000034, "Member 'FItemSecretAbilityTemplate::Attribute3Type' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, Attribute3Value) == 0x000038, "Member 'FItemSecretAbilityTemplate::Attribute3Value' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, Attribute4Type) == 0x00003C, "Member 'FItemSecretAbilityTemplate::Attribute4Type' has a wrong offset!");
static_assert(offsetof(FItemSecretAbilityTemplate, Attribute4Value) == 0x000040, "Member 'FItemSecretAbilityTemplate::Attribute4Value' has a wrong offset!");

// ScriptStruct MirMobile.ItemSelectGetTemplate
// 0x0030 (0x0038 - 0x0008)
struct FItemSelectGetTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectGetId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectGroupId;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNo;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardIds;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardSmelting;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSelectGetTemplate) == 0x000008, "Wrong alignment on FItemSelectGetTemplate");
static_assert(sizeof(FItemSelectGetTemplate) == 0x000038, "Wrong size on FItemSelectGetTemplate");
static_assert(offsetof(FItemSelectGetTemplate, Name) == 0x000008, "Member 'FItemSelectGetTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemSelectGetTemplate, SelectGetId) == 0x00000C, "Member 'FItemSelectGetTemplate::SelectGetId' has a wrong offset!");
static_assert(offsetof(FItemSelectGetTemplate, SelectGroupId) == 0x000010, "Member 'FItemSelectGetTemplate::SelectGroupId' has a wrong offset!");
static_assert(offsetof(FItemSelectGetTemplate, SortNo) == 0x000014, "Member 'FItemSelectGetTemplate::SortNo' has a wrong offset!");
static_assert(offsetof(FItemSelectGetTemplate, RewardType) == 0x000018, "Member 'FItemSelectGetTemplate::RewardType' has a wrong offset!");
static_assert(offsetof(FItemSelectGetTemplate, RewardIds) == 0x000020, "Member 'FItemSelectGetTemplate::RewardIds' has a wrong offset!");
static_assert(offsetof(FItemSelectGetTemplate, RewardValue) == 0x000030, "Member 'FItemSelectGetTemplate::RewardValue' has a wrong offset!");
static_assert(offsetof(FItemSelectGetTemplate, RewardSmelting) == 0x000034, "Member 'FItemSelectGetTemplate::RewardSmelting' has a wrong offset!");

// ScriptStruct MirMobile.ItemSlotInfoTemplate
// 0x0038 (0x0040 - 0x0008)
struct FItemSlotInfoTemplate final : public FTableRowBase
{
public:
	int32                                         SlotType;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNumber;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipTier;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipMainType;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EquipSubType;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OpenConditionType;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionValue;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialUseId;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemCount;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Msg_String;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmptyIcon;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSlotInfoTemplate) == 0x000008, "Wrong alignment on FItemSlotInfoTemplate");
static_assert(sizeof(FItemSlotInfoTemplate) == 0x000040, "Wrong size on FItemSlotInfoTemplate");
static_assert(offsetof(FItemSlotInfoTemplate, SlotType) == 0x000008, "Member 'FItemSlotInfoTemplate::SlotType' has a wrong offset!");
static_assert(offsetof(FItemSlotInfoTemplate, SlotNumber) == 0x00000C, "Member 'FItemSlotInfoTemplate::SlotNumber' has a wrong offset!");
static_assert(offsetof(FItemSlotInfoTemplate, EquipTier) == 0x000010, "Member 'FItemSlotInfoTemplate::EquipTier' has a wrong offset!");
static_assert(offsetof(FItemSlotInfoTemplate, EquipMainType) == 0x000014, "Member 'FItemSlotInfoTemplate::EquipMainType' has a wrong offset!");
static_assert(offsetof(FItemSlotInfoTemplate, EquipSubType) == 0x000018, "Member 'FItemSlotInfoTemplate::EquipSubType' has a wrong offset!");
static_assert(offsetof(FItemSlotInfoTemplate, OpenConditionType) == 0x000028, "Member 'FItemSlotInfoTemplate::OpenConditionType' has a wrong offset!");
static_assert(offsetof(FItemSlotInfoTemplate, OpenConditionValue) == 0x00002C, "Member 'FItemSlotInfoTemplate::OpenConditionValue' has a wrong offset!");
static_assert(offsetof(FItemSlotInfoTemplate, MaterialUseId) == 0x000030, "Member 'FItemSlotInfoTemplate::MaterialUseId' has a wrong offset!");
static_assert(offsetof(FItemSlotInfoTemplate, MaterialItemCount) == 0x000034, "Member 'FItemSlotInfoTemplate::MaterialItemCount' has a wrong offset!");
static_assert(offsetof(FItemSlotInfoTemplate, Msg_String) == 0x000038, "Member 'FItemSlotInfoTemplate::Msg_String' has a wrong offset!");
static_assert(offsetof(FItemSlotInfoTemplate, EmptyIcon) == 0x00003C, "Member 'FItemSlotInfoTemplate::EmptyIcon' has a wrong offset!");

// ScriptStruct MirMobile.ItemSmeltingTemplate
// 0x0090 (0x0098 - 0x0008)
struct FItemSmeltingTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainType;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubType;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmetingCount;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmetingSuccessProbability;                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddSmeltingSuccessProbability;                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemUseId01;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemCount01;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemUseId02;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemCount02;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemUseId03;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemCount03;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemUseId04;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemCount04;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeepProbability;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DownProbability;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakProbability;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmeltingOneDownProbability;                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectableKeepProbability;                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollectableBreakProbability;                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCostValueType01;                           // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCostValue01;                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCostValueType02;                           // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCostValue02;                               // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRatioItemUseId;                                 // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRatioItemValue;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRatioItemUseId01;                               // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddSmeltingSuccessProbability01;                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRatioItemUseId02;                               // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddSmeltingSuccessProbability02;                   // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddRatioItemUseId03;                               // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddSmeltingSuccessProbability03;                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmeltingFailRewardId01;                            // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmeltingFailRewardId02;                            // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmeltingFailRewardId03;                            // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSmeltingTemplate) == 0x000008, "Wrong alignment on FItemSmeltingTemplate");
static_assert(sizeof(FItemSmeltingTemplate) == 0x000098, "Wrong size on FItemSmeltingTemplate");
static_assert(offsetof(FItemSmeltingTemplate, Name) == 0x000008, "Member 'FItemSmeltingTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, RowId) == 0x00000C, "Member 'FItemSmeltingTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MainType) == 0x000010, "Member 'FItemSmeltingTemplate::MainType' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, SubType) == 0x000014, "Member 'FItemSmeltingTemplate::SubType' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, SmetingCount) == 0x000018, "Member 'FItemSmeltingTemplate::SmetingCount' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, SmetingSuccessProbability) == 0x00001C, "Member 'FItemSmeltingTemplate::SmetingSuccessProbability' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, AddSmeltingSuccessProbability) == 0x000020, "Member 'FItemSmeltingTemplate::AddSmeltingSuccessProbability' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialItemUseId01) == 0x000024, "Member 'FItemSmeltingTemplate::MaterialItemUseId01' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialItemCount01) == 0x000028, "Member 'FItemSmeltingTemplate::MaterialItemCount01' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialItemUseId02) == 0x00002C, "Member 'FItemSmeltingTemplate::MaterialItemUseId02' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialItemCount02) == 0x000030, "Member 'FItemSmeltingTemplate::MaterialItemCount02' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialItemUseId03) == 0x000034, "Member 'FItemSmeltingTemplate::MaterialItemUseId03' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialItemCount03) == 0x000038, "Member 'FItemSmeltingTemplate::MaterialItemCount03' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialItemUseId04) == 0x00003C, "Member 'FItemSmeltingTemplate::MaterialItemUseId04' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialItemCount04) == 0x000040, "Member 'FItemSmeltingTemplate::MaterialItemCount04' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, KeepProbability) == 0x000044, "Member 'FItemSmeltingTemplate::KeepProbability' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, DownProbability) == 0x000048, "Member 'FItemSmeltingTemplate::DownProbability' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, BreakProbability) == 0x00004C, "Member 'FItemSmeltingTemplate::BreakProbability' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, SmeltingOneDownProbability) == 0x000050, "Member 'FItemSmeltingTemplate::SmeltingOneDownProbability' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, CollectableKeepProbability) == 0x000054, "Member 'FItemSmeltingTemplate::CollectableKeepProbability' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, CollectableBreakProbability) == 0x000058, "Member 'FItemSmeltingTemplate::CollectableBreakProbability' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialCostValueType01) == 0x00005C, "Member 'FItemSmeltingTemplate::MaterialCostValueType01' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialCostValue01) == 0x000060, "Member 'FItemSmeltingTemplate::MaterialCostValue01' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialCostValueType02) == 0x000064, "Member 'FItemSmeltingTemplate::MaterialCostValueType02' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, MaterialCostValue02) == 0x000068, "Member 'FItemSmeltingTemplate::MaterialCostValue02' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, AddRatioItemUseId) == 0x00006C, "Member 'FItemSmeltingTemplate::AddRatioItemUseId' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, AddRatioItemValue) == 0x000070, "Member 'FItemSmeltingTemplate::AddRatioItemValue' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, AddRatioItemUseId01) == 0x000074, "Member 'FItemSmeltingTemplate::AddRatioItemUseId01' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, AddSmeltingSuccessProbability01) == 0x000078, "Member 'FItemSmeltingTemplate::AddSmeltingSuccessProbability01' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, AddRatioItemUseId02) == 0x00007C, "Member 'FItemSmeltingTemplate::AddRatioItemUseId02' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, AddSmeltingSuccessProbability02) == 0x000080, "Member 'FItemSmeltingTemplate::AddSmeltingSuccessProbability02' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, AddRatioItemUseId03) == 0x000084, "Member 'FItemSmeltingTemplate::AddRatioItemUseId03' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, AddSmeltingSuccessProbability03) == 0x000088, "Member 'FItemSmeltingTemplate::AddSmeltingSuccessProbability03' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, SmeltingFailRewardId01) == 0x00008C, "Member 'FItemSmeltingTemplate::SmeltingFailRewardId01' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, SmeltingFailRewardId02) == 0x000090, "Member 'FItemSmeltingTemplate::SmeltingFailRewardId02' has a wrong offset!");
static_assert(offsetof(FItemSmeltingTemplate, SmeltingFailRewardId03) == 0x000094, "Member 'FItemSmeltingTemplate::SmeltingFailRewardId03' has a wrong offset!");

// ScriptStruct MirMobile.ItemSmeltingAttributeTemplate
// 0x0038 (0x0040 - 0x0008)
struct FItemSmeltingAttributeTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Class;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainType;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubType;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1Value;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2Value;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute3Value;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute4Value;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute5Value;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute6Value;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute7Value;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSmeltingAttributeTemplate) == 0x000008, "Wrong alignment on FItemSmeltingAttributeTemplate");
static_assert(sizeof(FItemSmeltingAttributeTemplate) == 0x000040, "Wrong size on FItemSmeltingAttributeTemplate");
static_assert(offsetof(FItemSmeltingAttributeTemplate, RowId) == 0x000008, "Member 'FItemSmeltingAttributeTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, Class) == 0x00000C, "Member 'FItemSmeltingAttributeTemplate::Class' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, Grade) == 0x000010, "Member 'FItemSmeltingAttributeTemplate::Grade' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, Tier) == 0x000014, "Member 'FItemSmeltingAttributeTemplate::Tier' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, MainType) == 0x000018, "Member 'FItemSmeltingAttributeTemplate::MainType' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, SubType) == 0x00001C, "Member 'FItemSmeltingAttributeTemplate::SubType' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, Attribute1Value) == 0x000020, "Member 'FItemSmeltingAttributeTemplate::Attribute1Value' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, Attribute2Value) == 0x000024, "Member 'FItemSmeltingAttributeTemplate::Attribute2Value' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, Attribute3Value) == 0x000028, "Member 'FItemSmeltingAttributeTemplate::Attribute3Value' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, Attribute4Value) == 0x00002C, "Member 'FItemSmeltingAttributeTemplate::Attribute4Value' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, Attribute5Value) == 0x000030, "Member 'FItemSmeltingAttributeTemplate::Attribute5Value' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, Attribute6Value) == 0x000034, "Member 'FItemSmeltingAttributeTemplate::Attribute6Value' has a wrong offset!");
static_assert(offsetof(FItemSmeltingAttributeTemplate, Attribute7Value) == 0x000038, "Member 'FItemSmeltingAttributeTemplate::Attribute7Value' has a wrong offset!");

// ScriptStruct MirMobile.ItemSpecialAbilityTemplate
// 0x0040 (0x0048 - 0x0008)
struct FItemSpecialAbilityTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmeltingCount;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialAbilityOpen;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Passive;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveLv;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveLvUI;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveBattlePoint;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1Type;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute1Value;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2Type;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute2Value;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute3Type;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute3Value;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute4Type;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attribute4Value;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSpecialAbilityTemplate) == 0x000008, "Wrong alignment on FItemSpecialAbilityTemplate");
static_assert(sizeof(FItemSpecialAbilityTemplate) == 0x000048, "Wrong size on FItemSpecialAbilityTemplate");
static_assert(offsetof(FItemSpecialAbilityTemplate, ID) == 0x000008, "Member 'FItemSpecialAbilityTemplate::ID' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, ItemId) == 0x00000C, "Member 'FItemSpecialAbilityTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, SmeltingCount) == 0x000010, "Member 'FItemSpecialAbilityTemplate::SmeltingCount' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, SpecialAbilityOpen) == 0x000014, "Member 'FItemSpecialAbilityTemplate::SpecialAbilityOpen' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, Passive) == 0x000018, "Member 'FItemSpecialAbilityTemplate::Passive' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, PassiveLv) == 0x00001C, "Member 'FItemSpecialAbilityTemplate::PassiveLv' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, PassiveLvUI) == 0x000020, "Member 'FItemSpecialAbilityTemplate::PassiveLvUI' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, PassiveBattlePoint) == 0x000024, "Member 'FItemSpecialAbilityTemplate::PassiveBattlePoint' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, Attribute1Type) == 0x000028, "Member 'FItemSpecialAbilityTemplate::Attribute1Type' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, Attribute1Value) == 0x00002C, "Member 'FItemSpecialAbilityTemplate::Attribute1Value' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, Attribute2Type) == 0x000030, "Member 'FItemSpecialAbilityTemplate::Attribute2Type' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, Attribute2Value) == 0x000034, "Member 'FItemSpecialAbilityTemplate::Attribute2Value' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, Attribute3Type) == 0x000038, "Member 'FItemSpecialAbilityTemplate::Attribute3Type' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, Attribute3Value) == 0x00003C, "Member 'FItemSpecialAbilityTemplate::Attribute3Value' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, Attribute4Type) == 0x000040, "Member 'FItemSpecialAbilityTemplate::Attribute4Type' has a wrong offset!");
static_assert(offsetof(FItemSpecialAbilityTemplate, Attribute4Value) == 0x000044, "Member 'FItemSpecialAbilityTemplate::Attribute4Value' has a wrong offset!");

// ScriptStruct MirMobile.ItemSpecialExchangeResultTemplate
// 0x0010 (0x0018 - 0x0008)
struct FItemSpecialExchangeResultTemplate final : public FTableRowBase
{
public:
	int32                                         Exchange_Result_Id;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Result_Item_Group_Id;                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result_Item_Id;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result_Item_Desc;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemSpecialExchangeResultTemplate) == 0x000008, "Wrong alignment on FItemSpecialExchangeResultTemplate");
static_assert(sizeof(FItemSpecialExchangeResultTemplate) == 0x000018, "Wrong size on FItemSpecialExchangeResultTemplate");
static_assert(offsetof(FItemSpecialExchangeResultTemplate, Exchange_Result_Id) == 0x000008, "Member 'FItemSpecialExchangeResultTemplate::Exchange_Result_Id' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeResultTemplate, Exchange_Result_Item_Group_Id) == 0x00000C, "Member 'FItemSpecialExchangeResultTemplate::Exchange_Result_Item_Group_Id' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeResultTemplate, Result_Item_Id) == 0x000010, "Member 'FItemSpecialExchangeResultTemplate::Result_Item_Id' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeResultTemplate, Result_Item_Desc) == 0x000014, "Member 'FItemSpecialExchangeResultTemplate::Result_Item_Desc' has a wrong offset!");

// ScriptStruct MirMobile.ItemSpecialExchangeTemplate
// 0x0040 (0x0048 - 0x0008)
struct FItemSpecialExchangeTemplate final : public FTableRowBase
{
public:
	int32                                         Exchange_Id;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Type;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Enroll_Item_Main_Type;                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Enroll_Item_Sub_Type;                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Enroll_Item_Grade;                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Enroll_Item_Tier;                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_ItemUseId;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_ItemUseId_Count;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_Type_1;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_Value_1;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_Type_2;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_Value_2;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_Type_3;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Cost_Value_3;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exchange_Result_Item_Group_Id;                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSpecialExchangeTemplate) == 0x000008, "Wrong alignment on FItemSpecialExchangeTemplate");
static_assert(sizeof(FItemSpecialExchangeTemplate) == 0x000048, "Wrong size on FItemSpecialExchangeTemplate");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Id) == 0x000008, "Member 'FItemSpecialExchangeTemplate::Exchange_Id' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Type) == 0x00000C, "Member 'FItemSpecialExchangeTemplate::Exchange_Type' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Enroll_Item_Main_Type) == 0x000010, "Member 'FItemSpecialExchangeTemplate::Exchange_Enroll_Item_Main_Type' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Enroll_Item_Sub_Type) == 0x000014, "Member 'FItemSpecialExchangeTemplate::Exchange_Enroll_Item_Sub_Type' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Enroll_Item_Grade) == 0x000018, "Member 'FItemSpecialExchangeTemplate::Exchange_Enroll_Item_Grade' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Enroll_Item_Tier) == 0x00001C, "Member 'FItemSpecialExchangeTemplate::Exchange_Enroll_Item_Tier' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_ItemUseId) == 0x000020, "Member 'FItemSpecialExchangeTemplate::Exchange_ItemUseId' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_ItemUseId_Count) == 0x000024, "Member 'FItemSpecialExchangeTemplate::Exchange_ItemUseId_Count' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Cost_Type_1) == 0x000028, "Member 'FItemSpecialExchangeTemplate::Exchange_Cost_Type_1' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Cost_Value_1) == 0x00002C, "Member 'FItemSpecialExchangeTemplate::Exchange_Cost_Value_1' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Cost_Type_2) == 0x000030, "Member 'FItemSpecialExchangeTemplate::Exchange_Cost_Type_2' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Cost_Value_2) == 0x000034, "Member 'FItemSpecialExchangeTemplate::Exchange_Cost_Value_2' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Cost_Type_3) == 0x000038, "Member 'FItemSpecialExchangeTemplate::Exchange_Cost_Type_3' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Cost_Value_3) == 0x00003C, "Member 'FItemSpecialExchangeTemplate::Exchange_Cost_Value_3' has a wrong offset!");
static_assert(offsetof(FItemSpecialExchangeTemplate, Exchange_Result_Item_Group_Id) == 0x000040, "Member 'FItemSpecialExchangeTemplate::Exchange_Result_Item_Group_Id' has a wrong offset!");

// ScriptStruct MirMobile.ItemSPTreasureTranceTemplate
// 0x0020 (0x0028 - 0x0008)
struct FItemSPTreasureTranceTemplate final : public FTableRowBase
{
public:
	int32                                         TranceID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseId;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceType;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranceStep;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusId;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusValue;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveLv;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSPTreasureTranceTemplate) == 0x000008, "Wrong alignment on FItemSPTreasureTranceTemplate");
static_assert(sizeof(FItemSPTreasureTranceTemplate) == 0x000028, "Wrong size on FItemSPTreasureTranceTemplate");
static_assert(offsetof(FItemSPTreasureTranceTemplate, TranceID) == 0x000008, "Member 'FItemSPTreasureTranceTemplate::TranceID' has a wrong offset!");
static_assert(offsetof(FItemSPTreasureTranceTemplate, ItemUseId) == 0x00000C, "Member 'FItemSPTreasureTranceTemplate::ItemUseId' has a wrong offset!");
static_assert(offsetof(FItemSPTreasureTranceTemplate, TranceType) == 0x000010, "Member 'FItemSPTreasureTranceTemplate::TranceType' has a wrong offset!");
static_assert(offsetof(FItemSPTreasureTranceTemplate, TranceStep) == 0x000014, "Member 'FItemSPTreasureTranceTemplate::TranceStep' has a wrong offset!");
static_assert(offsetof(FItemSPTreasureTranceTemplate, StatusId) == 0x000018, "Member 'FItemSPTreasureTranceTemplate::StatusId' has a wrong offset!");
static_assert(offsetof(FItemSPTreasureTranceTemplate, StatusValue) == 0x00001C, "Member 'FItemSPTreasureTranceTemplate::StatusValue' has a wrong offset!");
static_assert(offsetof(FItemSPTreasureTranceTemplate, PassiveLv) == 0x000020, "Member 'FItemSPTreasureTranceTemplate::PassiveLv' has a wrong offset!");

// ScriptStruct MirMobile.ItemUnsealingAccelerationTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemUnsealingAccelerationTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccelerationTime;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringID;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostId;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostValue;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemUnsealingAccelerationTemplate) == 0x000008, "Wrong alignment on FItemUnsealingAccelerationTemplate");
static_assert(sizeof(FItemUnsealingAccelerationTemplate) == 0x000020, "Wrong size on FItemUnsealingAccelerationTemplate");
static_assert(offsetof(FItemUnsealingAccelerationTemplate, RowId) == 0x000008, "Member 'FItemUnsealingAccelerationTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FItemUnsealingAccelerationTemplate, ItemId) == 0x00000C, "Member 'FItemUnsealingAccelerationTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FItemUnsealingAccelerationTemplate, AccelerationTime) == 0x000010, "Member 'FItemUnsealingAccelerationTemplate::AccelerationTime' has a wrong offset!");
static_assert(offsetof(FItemUnsealingAccelerationTemplate, StringID) == 0x000014, "Member 'FItemUnsealingAccelerationTemplate::StringID' has a wrong offset!");
static_assert(offsetof(FItemUnsealingAccelerationTemplate, NeedCostId) == 0x000018, "Member 'FItemUnsealingAccelerationTemplate::NeedCostId' has a wrong offset!");
static_assert(offsetof(FItemUnsealingAccelerationTemplate, NeedCostValue) == 0x00001C, "Member 'FItemUnsealingAccelerationTemplate::NeedCostValue' has a wrong offset!");

// ScriptStruct MirMobile.ItemUnsealingTemplate
// 0x0018 (0x0020 - 0x0008)
struct FItemUnsealingTemplate final : public FTableRowBase
{
public:
	int32                                         UnsealingType;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnsealingTime;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SupportDecreaseTime;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostId;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostValue;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemUnsealingTemplate) == 0x000008, "Wrong alignment on FItemUnsealingTemplate");
static_assert(sizeof(FItemUnsealingTemplate) == 0x000020, "Wrong size on FItemUnsealingTemplate");
static_assert(offsetof(FItemUnsealingTemplate, UnsealingType) == 0x000008, "Member 'FItemUnsealingTemplate::UnsealingType' has a wrong offset!");
static_assert(offsetof(FItemUnsealingTemplate, UnsealingTime) == 0x00000C, "Member 'FItemUnsealingTemplate::UnsealingTime' has a wrong offset!");
static_assert(offsetof(FItemUnsealingTemplate, SupportDecreaseTime) == 0x000010, "Member 'FItemUnsealingTemplate::SupportDecreaseTime' has a wrong offset!");
static_assert(offsetof(FItemUnsealingTemplate, NeedCostId) == 0x000014, "Member 'FItemUnsealingTemplate::NeedCostId' has a wrong offset!");
static_assert(offsetof(FItemUnsealingTemplate, NeedCostValue) == 0x000018, "Member 'FItemUnsealingTemplate::NeedCostValue' has a wrong offset!");

// ScriptStruct MirMobile.ItemViewerTemplate
// 0x0148 (0x0150 - 0x0008)
struct FItemViewerTemplate final : public FTableRowBase
{
public:
	int32                                         StageID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Money;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TimeTicket;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItem01;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItem02;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItem03;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItem04;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItem05;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItem06;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMin01;                               // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMin02;                               // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMin03;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMin04;                               // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMin05;                               // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMin06;                               // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMax01;                               // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMax02;                               // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMax03;                               // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMax04;                               // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMax05;                               // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClassItemCountMax06;                               // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemViewerTemplate) == 0x000008, "Wrong alignment on FItemViewerTemplate");
static_assert(sizeof(FItemViewerTemplate) == 0x000150, "Wrong size on FItemViewerTemplate");
static_assert(offsetof(FItemViewerTemplate, StageID) == 0x000008, "Member 'FItemViewerTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, Money) == 0x000010, "Member 'FItemViewerTemplate::Money' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, TimeTicket) == 0x000020, "Member 'FItemViewerTemplate::TimeTicket' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItem01) == 0x000030, "Member 'FItemViewerTemplate::ClassItem01' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItem02) == 0x000040, "Member 'FItemViewerTemplate::ClassItem02' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItem03) == 0x000050, "Member 'FItemViewerTemplate::ClassItem03' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItem04) == 0x000060, "Member 'FItemViewerTemplate::ClassItem04' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItem05) == 0x000070, "Member 'FItemViewerTemplate::ClassItem05' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItem06) == 0x000080, "Member 'FItemViewerTemplate::ClassItem06' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMin01) == 0x000090, "Member 'FItemViewerTemplate::ClassItemCountMin01' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMin02) == 0x0000A0, "Member 'FItemViewerTemplate::ClassItemCountMin02' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMin03) == 0x0000B0, "Member 'FItemViewerTemplate::ClassItemCountMin03' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMin04) == 0x0000C0, "Member 'FItemViewerTemplate::ClassItemCountMin04' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMin05) == 0x0000D0, "Member 'FItemViewerTemplate::ClassItemCountMin05' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMin06) == 0x0000E0, "Member 'FItemViewerTemplate::ClassItemCountMin06' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMax01) == 0x0000F0, "Member 'FItemViewerTemplate::ClassItemCountMax01' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMax02) == 0x000100, "Member 'FItemViewerTemplate::ClassItemCountMax02' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMax03) == 0x000110, "Member 'FItemViewerTemplate::ClassItemCountMax03' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMax04) == 0x000120, "Member 'FItemViewerTemplate::ClassItemCountMax04' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMax05) == 0x000130, "Member 'FItemViewerTemplate::ClassItemCountMax05' has a wrong offset!");
static_assert(offsetof(FItemViewerTemplate, ClassItemCountMax06) == 0x000140, "Member 'FItemViewerTemplate::ClassItemCountMax06' has a wrong offset!");

// ScriptStruct MirMobile.ItemXDRACOMakeTemplate
// 0x0070 (0x0078 - 0x0008)
struct FItemXDRACOMakeTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemMakeId;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeType;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabHorizon;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabVertical;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeCount;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetWayType;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem01Id;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem01Count;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem02Id;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem02Count;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem03Id;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem03Count;                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem04Id;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItem04Count;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost01Id;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost01Count;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost02Id;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost02Count;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkSteelCheck;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelLimit;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeLimitType;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeLimitCount;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SchedulerCycleId;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemXDRACOMakeTemplate) == 0x000008, "Wrong alignment on FItemXDRACOMakeTemplate");
static_assert(sizeof(FItemXDRACOMakeTemplate) == 0x000078, "Wrong size on FItemXDRACOMakeTemplate");
static_assert(offsetof(FItemXDRACOMakeTemplate, Name) == 0x000008, "Member 'FItemXDRACOMakeTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, ItemMakeId) == 0x00000C, "Member 'FItemXDRACOMakeTemplate::ItemMakeId' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, ContentsId) == 0x000010, "Member 'FItemXDRACOMakeTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MakeType) == 0x000014, "Member 'FItemXDRACOMakeTemplate::MakeType' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, ClassID) == 0x000018, "Member 'FItemXDRACOMakeTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, TabHorizon) == 0x00001C, "Member 'FItemXDRACOMakeTemplate::TabHorizon' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, TabVertical) == 0x000020, "Member 'FItemXDRACOMakeTemplate::TabVertical' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, ItemId) == 0x000024, "Member 'FItemXDRACOMakeTemplate::ItemId' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MakeCount) == 0x000028, "Member 'FItemXDRACOMakeTemplate::MakeCount' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, GetWayType) == 0x00002C, "Member 'FItemXDRACOMakeTemplate::GetWayType' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MaterialItem01Id) == 0x000030, "Member 'FItemXDRACOMakeTemplate::MaterialItem01Id' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MaterialItem01Count) == 0x000034, "Member 'FItemXDRACOMakeTemplate::MaterialItem01Count' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MaterialItem02Id) == 0x000038, "Member 'FItemXDRACOMakeTemplate::MaterialItem02Id' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MaterialItem02Count) == 0x00003C, "Member 'FItemXDRACOMakeTemplate::MaterialItem02Count' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MaterialItem03Id) == 0x000040, "Member 'FItemXDRACOMakeTemplate::MaterialItem03Id' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MaterialItem03Count) == 0x000044, "Member 'FItemXDRACOMakeTemplate::MaterialItem03Count' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MaterialItem04Id) == 0x000048, "Member 'FItemXDRACOMakeTemplate::MaterialItem04Id' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MaterialItem04Count) == 0x00004C, "Member 'FItemXDRACOMakeTemplate::MaterialItem04Count' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, NeedCost01Id) == 0x000050, "Member 'FItemXDRACOMakeTemplate::NeedCost01Id' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, NeedCost01Count) == 0x000054, "Member 'FItemXDRACOMakeTemplate::NeedCost01Count' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, NeedCost02Id) == 0x000058, "Member 'FItemXDRACOMakeTemplate::NeedCost02Id' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, NeedCost02Count) == 0x00005C, "Member 'FItemXDRACOMakeTemplate::NeedCost02Count' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, DarkSteelCheck) == 0x000060, "Member 'FItemXDRACOMakeTemplate::DarkSteelCheck' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, LevelLimit) == 0x000064, "Member 'FItemXDRACOMakeTemplate::LevelLimit' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MakeLimitType) == 0x000068, "Member 'FItemXDRACOMakeTemplate::MakeLimitType' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, MakeLimitCount) == 0x00006C, "Member 'FItemXDRACOMakeTemplate::MakeLimitCount' has a wrong offset!");
static_assert(offsetof(FItemXDRACOMakeTemplate, SchedulerCycleId) == 0x000070, "Member 'FItemXDRACOMakeTemplate::SchedulerCycleId' has a wrong offset!");

// ScriptStruct MirMobile.ItemXDRACOSealingTemplate
// 0x0030 (0x0038 - 0x0008)
struct FItemXDRACOSealingTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainType;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubType;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemGrade;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost01Id;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost01Count;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost02Id;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost02Count;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost03Id;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCost03Count;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemXDRACOSealingTemplate) == 0x000008, "Wrong alignment on FItemXDRACOSealingTemplate");
static_assert(sizeof(FItemXDRACOSealingTemplate) == 0x000038, "Wrong size on FItemXDRACOSealingTemplate");
static_assert(offsetof(FItemXDRACOSealingTemplate, Name) == 0x000008, "Member 'FItemXDRACOSealingTemplate::Name' has a wrong offset!");
static_assert(offsetof(FItemXDRACOSealingTemplate, ID) == 0x00000C, "Member 'FItemXDRACOSealingTemplate::ID' has a wrong offset!");
static_assert(offsetof(FItemXDRACOSealingTemplate, MainType) == 0x000010, "Member 'FItemXDRACOSealingTemplate::MainType' has a wrong offset!");
static_assert(offsetof(FItemXDRACOSealingTemplate, SubType) == 0x000014, "Member 'FItemXDRACOSealingTemplate::SubType' has a wrong offset!");
static_assert(offsetof(FItemXDRACOSealingTemplate, ItemGrade) == 0x000018, "Member 'FItemXDRACOSealingTemplate::ItemGrade' has a wrong offset!");
static_assert(offsetof(FItemXDRACOSealingTemplate, NeedCost01Id) == 0x00001C, "Member 'FItemXDRACOSealingTemplate::NeedCost01Id' has a wrong offset!");
static_assert(offsetof(FItemXDRACOSealingTemplate, NeedCost01Count) == 0x000020, "Member 'FItemXDRACOSealingTemplate::NeedCost01Count' has a wrong offset!");
static_assert(offsetof(FItemXDRACOSealingTemplate, NeedCost02Id) == 0x000024, "Member 'FItemXDRACOSealingTemplate::NeedCost02Id' has a wrong offset!");
static_assert(offsetof(FItemXDRACOSealingTemplate, NeedCost02Count) == 0x000028, "Member 'FItemXDRACOSealingTemplate::NeedCost02Count' has a wrong offset!");
static_assert(offsetof(FItemXDRACOSealingTemplate, NeedCost03Id) == 0x00002C, "Member 'FItemXDRACOSealingTemplate::NeedCost03Id' has a wrong offset!");
static_assert(offsetof(FItemXDRACOSealingTemplate, NeedCost03Count) == 0x000030, "Member 'FItemXDRACOSealingTemplate::NeedCost03Count' has a wrong offset!");

// ScriptStruct MirMobile.SkillSpecialAbilityTemplate
// 0x0070 (0x0078 - 0x0008)
struct FSkillSpecialAbilityTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillMinLv;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillMaxLv;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerSkillAttackId;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Passive;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PassivePartyBuffID;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PassivePartyBuffLv;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SkillOnlyPassive;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         HaveBuffCheck;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HaveBuffCheckPassive;                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillSpecialAbilityTemplate) == 0x000008, "Wrong alignment on FSkillSpecialAbilityTemplate");
static_assert(sizeof(FSkillSpecialAbilityTemplate) == 0x000078, "Wrong size on FSkillSpecialAbilityTemplate");
static_assert(offsetof(FSkillSpecialAbilityTemplate, ID) == 0x000008, "Member 'FSkillSpecialAbilityTemplate::ID' has a wrong offset!");
static_assert(offsetof(FSkillSpecialAbilityTemplate, SkillId) == 0x00000C, "Member 'FSkillSpecialAbilityTemplate::SkillId' has a wrong offset!");
static_assert(offsetof(FSkillSpecialAbilityTemplate, SkillMinLv) == 0x000010, "Member 'FSkillSpecialAbilityTemplate::SkillMinLv' has a wrong offset!");
static_assert(offsetof(FSkillSpecialAbilityTemplate, SkillMaxLv) == 0x000014, "Member 'FSkillSpecialAbilityTemplate::SkillMaxLv' has a wrong offset!");
static_assert(offsetof(FSkillSpecialAbilityTemplate, TriggerSkillAttackId) == 0x000018, "Member 'FSkillSpecialAbilityTemplate::TriggerSkillAttackId' has a wrong offset!");
static_assert(offsetof(FSkillSpecialAbilityTemplate, Passive) == 0x000020, "Member 'FSkillSpecialAbilityTemplate::Passive' has a wrong offset!");
static_assert(offsetof(FSkillSpecialAbilityTemplate, PassivePartyBuffID) == 0x000030, "Member 'FSkillSpecialAbilityTemplate::PassivePartyBuffID' has a wrong offset!");
static_assert(offsetof(FSkillSpecialAbilityTemplate, PassivePartyBuffLv) == 0x000040, "Member 'FSkillSpecialAbilityTemplate::PassivePartyBuffLv' has a wrong offset!");
static_assert(offsetof(FSkillSpecialAbilityTemplate, SkillOnlyPassive) == 0x000050, "Member 'FSkillSpecialAbilityTemplate::SkillOnlyPassive' has a wrong offset!");
static_assert(offsetof(FSkillSpecialAbilityTemplate, HaveBuffCheck) == 0x000060, "Member 'FSkillSpecialAbilityTemplate::HaveBuffCheck' has a wrong offset!");
static_assert(offsetof(FSkillSpecialAbilityTemplate, HaveBuffCheckPassive) == 0x000068, "Member 'FSkillSpecialAbilityTemplate::HaveBuffCheckPassive' has a wrong offset!");

// ScriptStruct MirMobile.KeyActionTemplate
// 0x0030 (0x0038 - 0x0008)
struct FKeyActionTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailActionId;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailActionGroupId;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DetailActionName;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UIName;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyActionTemplate) == 0x000008, "Wrong alignment on FKeyActionTemplate");
static_assert(sizeof(FKeyActionTemplate) == 0x000038, "Wrong size on FKeyActionTemplate");
static_assert(offsetof(FKeyActionTemplate, Name) == 0x000008, "Member 'FKeyActionTemplate::Name' has a wrong offset!");
static_assert(offsetof(FKeyActionTemplate, DetailActionId) == 0x00000C, "Member 'FKeyActionTemplate::DetailActionId' has a wrong offset!");
static_assert(offsetof(FKeyActionTemplate, DetailActionGroupId) == 0x000010, "Member 'FKeyActionTemplate::DetailActionGroupId' has a wrong offset!");
static_assert(offsetof(FKeyActionTemplate, DetailActionName) == 0x000018, "Member 'FKeyActionTemplate::DetailActionName' has a wrong offset!");
static_assert(offsetof(FKeyActionTemplate, UIName) == 0x000028, "Member 'FKeyActionTemplate::UIName' has a wrong offset!");

// ScriptStruct MirMobile.LevelTemplate
// 0x0078 (0x0080 - 0x0008)
struct FLevelTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReqExp;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHP;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMana;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ManaCost;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicalAttack;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Physicaldefense;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magicdefense;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Accuracy;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dodge;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Critical;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvoidCritical;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalOutcome;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReducePhysicalDef;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReduceMagicDef;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Luck;                                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeditationMaxSpirit;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActingPointMax;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProperPassivePoint;                                // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlackIronMax;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillStoneMax;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDurabilityDmg;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AtkBossDamage;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefBossDamage;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AtkPVPDamage;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelTemplate) == 0x000008, "Wrong alignment on FLevelTemplate");
static_assert(sizeof(FLevelTemplate) == 0x000080, "Wrong size on FLevelTemplate");
static_assert(offsetof(FLevelTemplate, RowId) == 0x000008, "Member 'FLevelTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, ClassID) == 0x00000C, "Member 'FLevelTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, Level) == 0x000010, "Member 'FLevelTemplate::Level' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, ReqExp) == 0x000018, "Member 'FLevelTemplate::ReqExp' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, MaxHP) == 0x000020, "Member 'FLevelTemplate::MaxHP' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, MaxMana) == 0x000024, "Member 'FLevelTemplate::MaxMana' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, ManaCost) == 0x000028, "Member 'FLevelTemplate::ManaCost' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, PhysicalAttack) == 0x00002C, "Member 'FLevelTemplate::PhysicalAttack' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, MagicAttack) == 0x000030, "Member 'FLevelTemplate::MagicAttack' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, Physicaldefense) == 0x000034, "Member 'FLevelTemplate::Physicaldefense' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, Magicdefense) == 0x000038, "Member 'FLevelTemplate::Magicdefense' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, Accuracy) == 0x00003C, "Member 'FLevelTemplate::Accuracy' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, Dodge) == 0x000040, "Member 'FLevelTemplate::Dodge' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, Critical) == 0x000044, "Member 'FLevelTemplate::Critical' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, AvoidCritical) == 0x000048, "Member 'FLevelTemplate::AvoidCritical' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, CriticalOutcome) == 0x00004C, "Member 'FLevelTemplate::CriticalOutcome' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, ReducePhysicalDef) == 0x000050, "Member 'FLevelTemplate::ReducePhysicalDef' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, ReduceMagicDef) == 0x000054, "Member 'FLevelTemplate::ReduceMagicDef' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, Luck) == 0x000058, "Member 'FLevelTemplate::Luck' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, MeditationMaxSpirit) == 0x00005C, "Member 'FLevelTemplate::MeditationMaxSpirit' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, ActingPointMax) == 0x000060, "Member 'FLevelTemplate::ActingPointMax' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, ProperPassivePoint) == 0x000064, "Member 'FLevelTemplate::ProperPassivePoint' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, BlackIronMax) == 0x000068, "Member 'FLevelTemplate::BlackIronMax' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, SkillStoneMax) == 0x00006C, "Member 'FLevelTemplate::SkillStoneMax' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, MaxDurabilityDmg) == 0x000070, "Member 'FLevelTemplate::MaxDurabilityDmg' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, AtkBossDamage) == 0x000074, "Member 'FLevelTemplate::AtkBossDamage' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, DefBossDamage) == 0x000078, "Member 'FLevelTemplate::DefBossDamage' has a wrong offset!");
static_assert(offsetof(FLevelTemplate, AtkPVPDamage) == 0x00007C, "Member 'FLevelTemplate::AtkPVPDamage' has a wrong offset!");

// ScriptStruct MirMobile.ZoomPinchInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FZoomPinchInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZoomPinchInfo) == 0x000004, "Wrong alignment on FZoomPinchInfo");
static_assert(sizeof(FZoomPinchInfo) == 0x000010, "Wrong size on FZoomPinchInfo");

// ScriptStruct MirMobile.LoadingTemplate
// 0x0040 (0x0048 - 0x0008)
struct FLoadingTemplate final : public FTableRowBase
{
public:
	int32                                         LoadingId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         LoadingImagePath;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ToolTipTitleStringID;                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ToolTipContentStringID;                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadingTemplate) == 0x000008, "Wrong alignment on FLoadingTemplate");
static_assert(sizeof(FLoadingTemplate) == 0x000048, "Wrong size on FLoadingTemplate");
static_assert(offsetof(FLoadingTemplate, LoadingId) == 0x000008, "Member 'FLoadingTemplate::LoadingId' has a wrong offset!");
static_assert(offsetof(FLoadingTemplate, LoadingImagePath) == 0x000010, "Member 'FLoadingTemplate::LoadingImagePath' has a wrong offset!");
static_assert(offsetof(FLoadingTemplate, ToolTipTitleStringID) == 0x000020, "Member 'FLoadingTemplate::ToolTipTitleStringID' has a wrong offset!");
static_assert(offsetof(FLoadingTemplate, ToolTipContentStringID) == 0x000030, "Member 'FLoadingTemplate::ToolTipContentStringID' has a wrong offset!");

// ScriptStruct MirMobile.MagicSquareStageTemplate
// 0x0038 (0x0040 - 0x0008)
struct FMagicSquareStageTemplate final : public FTableRowBase
{
public:
	int32                                         MagicSquareStageId;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicSquareId;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageInfo;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageRatio_2;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Color;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMagicSquareStageTemplate) == 0x000008, "Wrong alignment on FMagicSquareStageTemplate");
static_assert(sizeof(FMagicSquareStageTemplate) == 0x000040, "Wrong size on FMagicSquareStageTemplate");
static_assert(offsetof(FMagicSquareStageTemplate, MagicSquareStageId) == 0x000008, "Member 'FMagicSquareStageTemplate::MagicSquareStageId' has a wrong offset!");
static_assert(offsetof(FMagicSquareStageTemplate, MagicSquareId) == 0x00000C, "Member 'FMagicSquareStageTemplate::MagicSquareId' has a wrong offset!");
static_assert(offsetof(FMagicSquareStageTemplate, StageID) == 0x000010, "Member 'FMagicSquareStageTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FMagicSquareStageTemplate, StageInfo) == 0x000014, "Member 'FMagicSquareStageTemplate::StageInfo' has a wrong offset!");
static_assert(offsetof(FMagicSquareStageTemplate, StageRatio_2) == 0x000018, "Member 'FMagicSquareStageTemplate::StageRatio_2' has a wrong offset!");
static_assert(offsetof(FMagicSquareStageTemplate, Color) == 0x000020, "Member 'FMagicSquareStageTemplate::Color' has a wrong offset!");
static_assert(offsetof(FMagicSquareStageTemplate, Number) == 0x000030, "Member 'FMagicSquareStageTemplate::Number' has a wrong offset!");

// ScriptStruct MirMobile.MagicSquareTemplate
// 0x0078 (0x0080 - 0x0008)
struct FMagicSquareTemplate final : public FStageCommonTemplate
{
public:
	int32                                         MagicSquareId;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquareName;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquareInfo;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquareThumbnail;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EventTimeline;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 StageID;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NeedLevel;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterType;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterTypeSub;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedEnterCount;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedCombatPoint;                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionReqCombatPoint;                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MonsterLevel;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SeverVisit;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeverVisitRevivalId;                               // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeverVisitNoVitality;                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x14];                                      // 0x006C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMagicSquareTemplate) == 0x000008, "Wrong alignment on FMagicSquareTemplate");
static_assert(sizeof(FMagicSquareTemplate) == 0x000080, "Wrong size on FMagicSquareTemplate");
static_assert(offsetof(FMagicSquareTemplate, MagicSquareId) == 0x000008, "Member 'FMagicSquareTemplate::MagicSquareId' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, SquareName) == 0x00000C, "Member 'FMagicSquareTemplate::SquareName' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, SquareInfo) == 0x000010, "Member 'FMagicSquareTemplate::SquareInfo' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, SquareThumbnail) == 0x000014, "Member 'FMagicSquareTemplate::SquareThumbnail' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, EventTimeline) == 0x000018, "Member 'FMagicSquareTemplate::EventTimeline' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, StageID) == 0x000028, "Member 'FMagicSquareTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, NeedLevel) == 0x000038, "Member 'FMagicSquareTemplate::NeedLevel' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, NeedEnterType) == 0x00003C, "Member 'FMagicSquareTemplate::NeedEnterType' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, NeedEnterTypeSub) == 0x000040, "Member 'FMagicSquareTemplate::NeedEnterTypeSub' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, NeedEnterCount) == 0x000044, "Member 'FMagicSquareTemplate::NeedEnterCount' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, RecommendedCombatPoint) == 0x000048, "Member 'FMagicSquareTemplate::RecommendedCombatPoint' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, ConditionReqCombatPoint) == 0x00004C, "Member 'FMagicSquareTemplate::ConditionReqCombatPoint' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, MonsterLevel) == 0x000050, "Member 'FMagicSquareTemplate::MonsterLevel' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, SeverVisit) == 0x000060, "Member 'FMagicSquareTemplate::SeverVisit' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, SeverVisitRevivalId) == 0x000064, "Member 'FMagicSquareTemplate::SeverVisitRevivalId' has a wrong offset!");
static_assert(offsetof(FMagicSquareTemplate, SeverVisitNoVitality) == 0x000068, "Member 'FMagicSquareTemplate::SeverVisitNoVitality' has a wrong offset!");

// ScriptStruct MirMobile.MagicStoneEquipSlotTemplate
// 0x0018 (0x0020 - 0x0008)
struct FMagicStoneEquipSlotTemplate final : public FTableRowBase
{
public:
	int32                                         SlotNumber;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotType;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotOpenType;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotOpenValue1;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotOpenValue2;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipTier;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMagicStoneEquipSlotTemplate) == 0x000008, "Wrong alignment on FMagicStoneEquipSlotTemplate");
static_assert(sizeof(FMagicStoneEquipSlotTemplate) == 0x000020, "Wrong size on FMagicStoneEquipSlotTemplate");
static_assert(offsetof(FMagicStoneEquipSlotTemplate, SlotNumber) == 0x000008, "Member 'FMagicStoneEquipSlotTemplate::SlotNumber' has a wrong offset!");
static_assert(offsetof(FMagicStoneEquipSlotTemplate, SlotType) == 0x00000C, "Member 'FMagicStoneEquipSlotTemplate::SlotType' has a wrong offset!");
static_assert(offsetof(FMagicStoneEquipSlotTemplate, SlotOpenType) == 0x000010, "Member 'FMagicStoneEquipSlotTemplate::SlotOpenType' has a wrong offset!");
static_assert(offsetof(FMagicStoneEquipSlotTemplate, SlotOpenValue1) == 0x000014, "Member 'FMagicStoneEquipSlotTemplate::SlotOpenValue1' has a wrong offset!");
static_assert(offsetof(FMagicStoneEquipSlotTemplate, SlotOpenValue2) == 0x000018, "Member 'FMagicStoneEquipSlotTemplate::SlotOpenValue2' has a wrong offset!");
static_assert(offsetof(FMagicStoneEquipSlotTemplate, EquipTier) == 0x00001C, "Member 'FMagicStoneEquipSlotTemplate::EquipTier' has a wrong offset!");

// ScriptStruct MirMobile.MapMiniInfoTemplate
// 0x0030 (0x0038 - 0x0008)
struct FMapMiniInfoTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapMiniInfoMainType                          InfoMainType;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InfoSubType;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoSubTypeValue;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoValue;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInfoValue;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoStringId;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapMiniInfoStringPosType                     InfoStringPosType;                                 // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InfoCoordinate;                                    // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapMiniInfoTemplate) == 0x000008, "Wrong alignment on FMapMiniInfoTemplate");
static_assert(sizeof(FMapMiniInfoTemplate) == 0x000038, "Wrong size on FMapMiniInfoTemplate");
static_assert(offsetof(FMapMiniInfoTemplate, Name) == 0x000008, "Member 'FMapMiniInfoTemplate::Name' has a wrong offset!");
static_assert(offsetof(FMapMiniInfoTemplate, InfoMainType) == 0x00000C, "Member 'FMapMiniInfoTemplate::InfoMainType' has a wrong offset!");
static_assert(offsetof(FMapMiniInfoTemplate, InfoSubType) == 0x000010, "Member 'FMapMiniInfoTemplate::InfoSubType' has a wrong offset!");
static_assert(offsetof(FMapMiniInfoTemplate, InfoSubTypeValue) == 0x000014, "Member 'FMapMiniInfoTemplate::InfoSubTypeValue' has a wrong offset!");
static_assert(offsetof(FMapMiniInfoTemplate, InfoValue) == 0x000018, "Member 'FMapMiniInfoTemplate::InfoValue' has a wrong offset!");
static_assert(offsetof(FMapMiniInfoTemplate, DetailInfoValue) == 0x00001C, "Member 'FMapMiniInfoTemplate::DetailInfoValue' has a wrong offset!");
static_assert(offsetof(FMapMiniInfoTemplate, InfoStringId) == 0x000020, "Member 'FMapMiniInfoTemplate::InfoStringId' has a wrong offset!");
static_assert(offsetof(FMapMiniInfoTemplate, InfoStringPosType) == 0x000024, "Member 'FMapMiniInfoTemplate::InfoStringPosType' has a wrong offset!");
static_assert(offsetof(FMapMiniInfoTemplate, InfoCoordinate) == 0x000028, "Member 'FMapMiniInfoTemplate::InfoCoordinate' has a wrong offset!");

// ScriptStruct MirMobile.SkillTemplate
// 0x0210 (0x0218 - 0x0008)
struct FSkillTemplate final : public FTableRowBase
{
public:
	int32                                         SkillId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupNoteSid;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoteSid;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectSid;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon_Gray;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 NameImgId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SkillType;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Group;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillProductType;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseControlTime;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooltime;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCooltime;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelUpCooltime;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalCooltime;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillCostType;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillCost;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillCostType_1;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillCost_1;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AttackLink;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AttackAniTime;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndCutAniTime;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitCount;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 NextNormalSkilLink;                                // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NextNormalSkilProb;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DarkChange;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageType;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MulDamage;                                         // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMulDamage;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDamage;                                         // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpAddDamage;                                  // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MulDamage_1;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpMulDamage_1;                                // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddDamage_1;                                       // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpAddDamage_1;                                // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityType_1;                                     // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityValue_1;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelUpValue_1;                                    // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityTime_1;                                     // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityType_2;                                     // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityValue_2;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelUpValue_2;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityTime_2;                                     // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityType_3;                                     // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityValue_3;                                    // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelUpValue_3;                                    // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityTime_3;                                     // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityType_4;                                     // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityValue_4;                                    // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelUpValue_4;                                    // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityTime_4;                                     // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqClassLevel;                                     // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSkillLevel;                                     // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpCostType1;                                  // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpDefaultCost1;                               // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpCost1;                                      // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemSmallIcon;                                     // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombatPoint;                                       // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpCombatPoint;                                // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndicatorType;                                     // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndicatorIndex;                                    // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndicatorAngle;                                    // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndicatorMin;                                      // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndicatorMax;                                      // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndicatorWidth;                                    // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndicatorOffset;                                   // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainSkillID;                                       // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Targeting;                                         // 0x014C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetHeight;                                      // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlockingCheck;                                     // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Passive;                                           // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          StateConUse;                                       // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveConUse;                                        // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SmiteBuffID;                                       // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SkillCostGroupID;                                  // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqForceLevel;                                     // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqCheckQuest;                                     // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UIViewOrder;                                       // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AutoLearnPassive;                                  // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Skill_MODPassive;                                  // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SpecialLevel;                                      // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SpecialNoteSid;                                    // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SpecialToolTipTitle;                               // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SpecialToolTip;                                    // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SkillUseCount;                                     // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillUseTime;                                      // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AddCoolTime;                                       // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AddSkillCost;                                      // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillTemplate) == 0x000008, "Wrong alignment on FSkillTemplate");
static_assert(sizeof(FSkillTemplate) == 0x000218, "Wrong size on FSkillTemplate");
static_assert(offsetof(FSkillTemplate, SkillId) == 0x000008, "Member 'FSkillTemplate::SkillId' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, NameSId) == 0x00000C, "Member 'FSkillTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, GroupNoteSid) == 0x000010, "Member 'FSkillTemplate::GroupNoteSid' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, NoteSid) == 0x000014, "Member 'FSkillTemplate::NoteSid' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, EffectSid) == 0x000018, "Member 'FSkillTemplate::EffectSid' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, Icon) == 0x00001C, "Member 'FSkillTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, Icon_Gray) == 0x000020, "Member 'FSkillTemplate::Icon_Gray' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, NameImgId) == 0x000028, "Member 'FSkillTemplate::NameImgId' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SkillType) == 0x000038, "Member 'FSkillTemplate::SkillType' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, ClassID) == 0x00003C, "Member 'FSkillTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, Group) == 0x000040, "Member 'FSkillTemplate::Group' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SkillProductType) == 0x000044, "Member 'FSkillTemplate::SkillProductType' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, UseControlTime) == 0x000048, "Member 'FSkillTemplate::UseControlTime' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, Cooltime) == 0x00004C, "Member 'FSkillTemplate::Cooltime' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, MaxCooltime) == 0x000050, "Member 'FSkillTemplate::MaxCooltime' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpCooltime) == 0x000054, "Member 'FSkillTemplate::LevelUpCooltime' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, GlobalCooltime) == 0x000058, "Member 'FSkillTemplate::GlobalCooltime' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SkillCostType) == 0x00005C, "Member 'FSkillTemplate::SkillCostType' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SkillCost) == 0x000060, "Member 'FSkillTemplate::SkillCost' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SkillCostType_1) == 0x000064, "Member 'FSkillTemplate::SkillCostType_1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SkillCost_1) == 0x000068, "Member 'FSkillTemplate::SkillCost_1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AttackLink) == 0x000070, "Member 'FSkillTemplate::AttackLink' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AttackAniTime) == 0x000080, "Member 'FSkillTemplate::AttackAniTime' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, EndCutAniTime) == 0x000084, "Member 'FSkillTemplate::EndCutAniTime' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, HitCount) == 0x000088, "Member 'FSkillTemplate::HitCount' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, NextNormalSkilLink) == 0x000090, "Member 'FSkillTemplate::NextNormalSkilLink' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, NextNormalSkilProb) == 0x0000A0, "Member 'FSkillTemplate::NextNormalSkilProb' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, DarkChange) == 0x0000A4, "Member 'FSkillTemplate::DarkChange' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, DamageType) == 0x0000A8, "Member 'FSkillTemplate::DamageType' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, MulDamage) == 0x0000AC, "Member 'FSkillTemplate::MulDamage' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpMulDamage) == 0x0000B0, "Member 'FSkillTemplate::LevelUpMulDamage' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AddDamage) == 0x0000B4, "Member 'FSkillTemplate::AddDamage' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpAddDamage) == 0x0000B8, "Member 'FSkillTemplate::LevelUpAddDamage' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, MulDamage_1) == 0x0000BC, "Member 'FSkillTemplate::MulDamage_1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpMulDamage_1) == 0x0000C0, "Member 'FSkillTemplate::LevelUpMulDamage_1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AddDamage_1) == 0x0000C4, "Member 'FSkillTemplate::AddDamage_1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpAddDamage_1) == 0x0000C8, "Member 'FSkillTemplate::LevelUpAddDamage_1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityType_1) == 0x0000CC, "Member 'FSkillTemplate::AbilityType_1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityValue_1) == 0x0000D0, "Member 'FSkillTemplate::AbilityValue_1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpValue_1) == 0x0000D4, "Member 'FSkillTemplate::LevelUpValue_1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityTime_1) == 0x0000D8, "Member 'FSkillTemplate::AbilityTime_1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityType_2) == 0x0000DC, "Member 'FSkillTemplate::AbilityType_2' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityValue_2) == 0x0000E0, "Member 'FSkillTemplate::AbilityValue_2' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpValue_2) == 0x0000E4, "Member 'FSkillTemplate::LevelUpValue_2' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityTime_2) == 0x0000E8, "Member 'FSkillTemplate::AbilityTime_2' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityType_3) == 0x0000EC, "Member 'FSkillTemplate::AbilityType_3' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityValue_3) == 0x0000F0, "Member 'FSkillTemplate::AbilityValue_3' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpValue_3) == 0x0000F4, "Member 'FSkillTemplate::LevelUpValue_3' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityTime_3) == 0x0000F8, "Member 'FSkillTemplate::AbilityTime_3' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityType_4) == 0x0000FC, "Member 'FSkillTemplate::AbilityType_4' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityValue_4) == 0x000100, "Member 'FSkillTemplate::AbilityValue_4' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpValue_4) == 0x000104, "Member 'FSkillTemplate::LevelUpValue_4' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AbilityTime_4) == 0x000108, "Member 'FSkillTemplate::AbilityTime_4' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, ReqClassLevel) == 0x00010C, "Member 'FSkillTemplate::ReqClassLevel' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, MaxSkillLevel) == 0x000110, "Member 'FSkillTemplate::MaxSkillLevel' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpCostType1) == 0x000114, "Member 'FSkillTemplate::LevelUpCostType1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpDefaultCost1) == 0x000118, "Member 'FSkillTemplate::LevelUpDefaultCost1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpCost1) == 0x00011C, "Member 'FSkillTemplate::LevelUpCost1' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, ItemSmallIcon) == 0x000120, "Member 'FSkillTemplate::ItemSmallIcon' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, CombatPoint) == 0x000124, "Member 'FSkillTemplate::CombatPoint' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, LevelUpCombatPoint) == 0x000128, "Member 'FSkillTemplate::LevelUpCombatPoint' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, IndicatorType) == 0x00012C, "Member 'FSkillTemplate::IndicatorType' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, IndicatorIndex) == 0x000130, "Member 'FSkillTemplate::IndicatorIndex' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, IndicatorAngle) == 0x000134, "Member 'FSkillTemplate::IndicatorAngle' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, IndicatorMin) == 0x000138, "Member 'FSkillTemplate::IndicatorMin' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, IndicatorMax) == 0x00013C, "Member 'FSkillTemplate::IndicatorMax' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, IndicatorWidth) == 0x000140, "Member 'FSkillTemplate::IndicatorWidth' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, IndicatorOffset) == 0x000144, "Member 'FSkillTemplate::IndicatorOffset' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, MainSkillID) == 0x000148, "Member 'FSkillTemplate::MainSkillID' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, Targeting) == 0x00014C, "Member 'FSkillTemplate::Targeting' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, TargetHeight) == 0x000150, "Member 'FSkillTemplate::TargetHeight' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, BlockingCheck) == 0x000154, "Member 'FSkillTemplate::BlockingCheck' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, Passive) == 0x000158, "Member 'FSkillTemplate::Passive' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, StateConUse) == 0x000168, "Member 'FSkillTemplate::StateConUse' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, MoveConUse) == 0x000169, "Member 'FSkillTemplate::MoveConUse' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SmiteBuffID) == 0x000170, "Member 'FSkillTemplate::SmiteBuffID' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SkillCostGroupID) == 0x000180, "Member 'FSkillTemplate::SkillCostGroupID' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, ReqForceLevel) == 0x000184, "Member 'FSkillTemplate::ReqForceLevel' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, ReqCheckQuest) == 0x000188, "Member 'FSkillTemplate::ReqCheckQuest' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, UIViewOrder) == 0x00018C, "Member 'FSkillTemplate::UIViewOrder' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AutoLearnPassive) == 0x000190, "Member 'FSkillTemplate::AutoLearnPassive' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, Skill_MODPassive) == 0x0001A0, "Member 'FSkillTemplate::Skill_MODPassive' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SpecialLevel) == 0x0001B0, "Member 'FSkillTemplate::SpecialLevel' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SpecialNoteSid) == 0x0001C0, "Member 'FSkillTemplate::SpecialNoteSid' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SpecialToolTipTitle) == 0x0001D0, "Member 'FSkillTemplate::SpecialToolTipTitle' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SpecialToolTip) == 0x0001E0, "Member 'FSkillTemplate::SpecialToolTip' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SkillUseCount) == 0x0001F0, "Member 'FSkillTemplate::SkillUseCount' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, SkillUseTime) == 0x0001F4, "Member 'FSkillTemplate::SkillUseTime' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AddCoolTime) == 0x0001F8, "Member 'FSkillTemplate::AddCoolTime' has a wrong offset!");
static_assert(offsetof(FSkillTemplate, AddSkillCost) == 0x000208, "Member 'FSkillTemplate::AddSkillCost' has a wrong offset!");

// ScriptStruct MirMobile.MapUIAreaTemplate
// 0x0050 (0x0058 - 0x0008)
struct FMapUIAreaTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiniGroupId;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiniGroupStringId;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiniGroupIcon;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MiniGroupCoordinate;                               // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsTabAble;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionIconId;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionId;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchPosition_X;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchPosition_Y;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchScale_X;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchScale_Y;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonLevelMin;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonLevelMax;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyPlay;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapFunction;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapContentID;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapUIAreaTemplate) == 0x000008, "Wrong alignment on FMapUIAreaTemplate");
static_assert(sizeof(FMapUIAreaTemplate) == 0x000058, "Wrong size on FMapUIAreaTemplate");
static_assert(offsetof(FMapUIAreaTemplate, RowId) == 0x000008, "Member 'FMapUIAreaTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, AreaId) == 0x00000C, "Member 'FMapUIAreaTemplate::AreaId' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, MiniGroupId) == 0x000010, "Member 'FMapUIAreaTemplate::MiniGroupId' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, MiniGroupStringId) == 0x000014, "Member 'FMapUIAreaTemplate::MiniGroupStringId' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, MiniGroupIcon) == 0x000018, "Member 'FMapUIAreaTemplate::MiniGroupIcon' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, MiniGroupCoordinate) == 0x00001C, "Member 'FMapUIAreaTemplate::MiniGroupCoordinate' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, GoodsTabAble) == 0x000024, "Member 'FMapUIAreaTemplate::GoodsTabAble' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, DominionIconId) == 0x000028, "Member 'FMapUIAreaTemplate::DominionIconId' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, DominionId) == 0x00002C, "Member 'FMapUIAreaTemplate::DominionId' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, TouchPosition_X) == 0x000030, "Member 'FMapUIAreaTemplate::TouchPosition_X' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, TouchPosition_Y) == 0x000034, "Member 'FMapUIAreaTemplate::TouchPosition_Y' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, TouchScale_X) == 0x000038, "Member 'FMapUIAreaTemplate::TouchScale_X' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, TouchScale_Y) == 0x00003C, "Member 'FMapUIAreaTemplate::TouchScale_Y' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, MonLevelMin) == 0x000040, "Member 'FMapUIAreaTemplate::MonLevelMin' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, MonLevelMax) == 0x000044, "Member 'FMapUIAreaTemplate::MonLevelMax' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, PartyPlay) == 0x000048, "Member 'FMapUIAreaTemplate::PartyPlay' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, MapFunction) == 0x00004C, "Member 'FMapUIAreaTemplate::MapFunction' has a wrong offset!");
static_assert(offsetof(FMapUIAreaTemplate, MapContentID) == 0x000050, "Member 'FMapUIAreaTemplate::MapContentID' has a wrong offset!");

// ScriptStruct MirMobile.GhostInfo
// 0x0020 (0x0020 - 0x0000)
struct FGhostInfo final
{
public:
	class UMeshComponent*                         Ghost;                                             // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamMaterial;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExistTime;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OrigScale;                                         // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGhostInfo) == 0x000008, "Wrong alignment on FGhostInfo");
static_assert(sizeof(FGhostInfo) == 0x000020, "Wrong size on FGhostInfo");
static_assert(offsetof(FGhostInfo, Ghost) == 0x000000, "Member 'FGhostInfo::Ghost' has a wrong offset!");
static_assert(offsetof(FGhostInfo, DynamMaterial) == 0x000008, "Member 'FGhostInfo::DynamMaterial' has a wrong offset!");
static_assert(offsetof(FGhostInfo, ExistTime) == 0x000010, "Member 'FGhostInfo::ExistTime' has a wrong offset!");
static_assert(offsetof(FGhostInfo, OrigScale) == 0x000014, "Member 'FGhostInfo::OrigScale' has a wrong offset!");

// ScriptStruct MirMobile.MapUIMiniTemplate
// 0x0050 (0x0058 - 0x0008)
struct FMapUIMiniTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiniGroupId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiniStageId;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BidoMatrixStageId;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MiniMapCoordinateLT;                               // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MiniMapCoordinateRB;                               // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MiniMapZoom;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UserMovingRaderZoom;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MiniMapResource;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElliteCheck;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultOpenList;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElliteStageId;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapUIMiniTemplate) == 0x000008, "Wrong alignment on FMapUIMiniTemplate");
static_assert(sizeof(FMapUIMiniTemplate) == 0x000058, "Wrong size on FMapUIMiniTemplate");
static_assert(offsetof(FMapUIMiniTemplate, RowId) == 0x000008, "Member 'FMapUIMiniTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, MiniGroupId) == 0x00000C, "Member 'FMapUIMiniTemplate::MiniGroupId' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, MiniStageId) == 0x000010, "Member 'FMapUIMiniTemplate::MiniStageId' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, BidoMatrixStageId) == 0x000014, "Member 'FMapUIMiniTemplate::BidoMatrixStageId' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, MiniMapCoordinateLT) == 0x000018, "Member 'FMapUIMiniTemplate::MiniMapCoordinateLT' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, MiniMapCoordinateRB) == 0x000024, "Member 'FMapUIMiniTemplate::MiniMapCoordinateRB' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, MiniMapZoom) == 0x000030, "Member 'FMapUIMiniTemplate::MiniMapZoom' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, UserMovingRaderZoom) == 0x000034, "Member 'FMapUIMiniTemplate::UserMovingRaderZoom' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, MiniMapResource) == 0x000038, "Member 'FMapUIMiniTemplate::MiniMapResource' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, ElliteCheck) == 0x000048, "Member 'FMapUIMiniTemplate::ElliteCheck' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, DefaultOpenList) == 0x00004C, "Member 'FMapUIMiniTemplate::DefaultOpenList' has a wrong offset!");
static_assert(offsetof(FMapUIMiniTemplate, ElliteStageId) == 0x000050, "Member 'FMapUIMiniTemplate::ElliteStageId' has a wrong offset!");

// ScriptStruct MirMobile.MapUIWorldTemplate
// 0x0050 (0x0058 - 0x0008)
struct FMapUIWorldTemplate final : public FTableRowBase
{
public:
	int32                                         AreaId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaStringId;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaIconId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AreaCoordinate;                                    // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AreaMapResource;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiniGroupId;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchPosition_X;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchPosition_Y;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchScale_X;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TouchScale_Y;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonLevelMin;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonLevelMax;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevAreaId;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextAreaId;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConquerServer;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapUIWorldTemplate) == 0x000008, "Wrong alignment on FMapUIWorldTemplate");
static_assert(sizeof(FMapUIWorldTemplate) == 0x000058, "Wrong size on FMapUIWorldTemplate");
static_assert(offsetof(FMapUIWorldTemplate, AreaId) == 0x000008, "Member 'FMapUIWorldTemplate::AreaId' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, AreaStringId) == 0x00000C, "Member 'FMapUIWorldTemplate::AreaStringId' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, AreaIconId) == 0x000010, "Member 'FMapUIWorldTemplate::AreaIconId' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, AreaCoordinate) == 0x000014, "Member 'FMapUIWorldTemplate::AreaCoordinate' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, AreaMapResource) == 0x000020, "Member 'FMapUIWorldTemplate::AreaMapResource' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, MiniGroupId) == 0x000030, "Member 'FMapUIWorldTemplate::MiniGroupId' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, TouchPosition_X) == 0x000034, "Member 'FMapUIWorldTemplate::TouchPosition_X' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, TouchPosition_Y) == 0x000038, "Member 'FMapUIWorldTemplate::TouchPosition_Y' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, TouchScale_X) == 0x00003C, "Member 'FMapUIWorldTemplate::TouchScale_X' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, TouchScale_Y) == 0x000040, "Member 'FMapUIWorldTemplate::TouchScale_Y' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, MonLevelMin) == 0x000044, "Member 'FMapUIWorldTemplate::MonLevelMin' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, MonLevelMax) == 0x000048, "Member 'FMapUIWorldTemplate::MonLevelMax' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, PrevAreaId) == 0x00004C, "Member 'FMapUIWorldTemplate::PrevAreaId' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, NextAreaId) == 0x000050, "Member 'FMapUIWorldTemplate::NextAreaId' has a wrong offset!");
static_assert(offsetof(FMapUIWorldTemplate, ConquerServer) == 0x000054, "Member 'FMapUIWorldTemplate::ConquerServer' has a wrong offset!");

// ScriptStruct MirMobile.MoneyTemplate
// 0x0030 (0x0038 - 0x0008)
struct FMoneyTemplate final : public FTableRowBase
{
public:
	int32                                         OwnerType;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoneyId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoteID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconSmall;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LimitUserMax;                                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LimitGuildMax;                                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetWayId;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopBuyId;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoneyTemplate) == 0x000008, "Wrong alignment on FMoneyTemplate");
static_assert(sizeof(FMoneyTemplate) == 0x000038, "Wrong size on FMoneyTemplate");
static_assert(offsetof(FMoneyTemplate, OwnerType) == 0x000008, "Member 'FMoneyTemplate::OwnerType' has a wrong offset!");
static_assert(offsetof(FMoneyTemplate, MoneyId) == 0x00000C, "Member 'FMoneyTemplate::MoneyId' has a wrong offset!");
static_assert(offsetof(FMoneyTemplate, NameSId) == 0x000010, "Member 'FMoneyTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FMoneyTemplate, NoteID) == 0x000014, "Member 'FMoneyTemplate::NoteID' has a wrong offset!");
static_assert(offsetof(FMoneyTemplate, Icon) == 0x000018, "Member 'FMoneyTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FMoneyTemplate, IconSmall) == 0x00001C, "Member 'FMoneyTemplate::IconSmall' has a wrong offset!");
static_assert(offsetof(FMoneyTemplate, LimitUserMax) == 0x000020, "Member 'FMoneyTemplate::LimitUserMax' has a wrong offset!");
static_assert(offsetof(FMoneyTemplate, LimitGuildMax) == 0x000028, "Member 'FMoneyTemplate::LimitGuildMax' has a wrong offset!");
static_assert(offsetof(FMoneyTemplate, GetWayId) == 0x000030, "Member 'FMoneyTemplate::GetWayId' has a wrong offset!");
static_assert(offsetof(FMoneyTemplate, ShopBuyId) == 0x000034, "Member 'FMoneyTemplate::ShopBuyId' has a wrong offset!");

// ScriptStruct MirMobile.IAPMarketProductData
// 0x0048 (0x0048 - 0x0000)
struct FIAPMarketProductData final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductName;                                       // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TotalPrice;                                        // 0x0020(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0038(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIAPMarketProductData) == 0x000008, "Wrong alignment on FIAPMarketProductData");
static_assert(sizeof(FIAPMarketProductData) == 0x000048, "Wrong size on FIAPMarketProductData");
static_assert(offsetof(FIAPMarketProductData, ProductId) == 0x000000, "Member 'FIAPMarketProductData::ProductId' has a wrong offset!");
static_assert(offsetof(FIAPMarketProductData, ProductName) == 0x000010, "Member 'FIAPMarketProductData::ProductName' has a wrong offset!");
static_assert(offsetof(FIAPMarketProductData, TotalPrice) == 0x000020, "Member 'FIAPMarketProductData::TotalPrice' has a wrong offset!");
static_assert(offsetof(FIAPMarketProductData, Price) == 0x000030, "Member 'FIAPMarketProductData::Price' has a wrong offset!");
static_assert(offsetof(FIAPMarketProductData, CurrencyCode) == 0x000038, "Member 'FIAPMarketProductData::CurrencyCode' has a wrong offset!");

// ScriptStruct MirMobile.MonsterAITemplate
// 0x0038 (0x0040 - 0x0008)
struct FMonsterAITemplate final : public FTableRowBase
{
public:
	int32                                         AiId;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiIndex;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionType_1;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionType_2;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionType_3;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionType_4;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionValue1_1;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionValue1_2;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionValue2_1;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionValue2_2;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionValue3_1;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionValue3_2;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionValue4_1;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionValue4_2;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonsterAITemplate) == 0x000008, "Wrong alignment on FMonsterAITemplate");
static_assert(sizeof(FMonsterAITemplate) == 0x000040, "Wrong size on FMonsterAITemplate");
static_assert(offsetof(FMonsterAITemplate, AiId) == 0x000008, "Member 'FMonsterAITemplate::AiId' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiIndex) == 0x00000C, "Member 'FMonsterAITemplate::AiIndex' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionType_1) == 0x000010, "Member 'FMonsterAITemplate::AiActionType_1' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionType_2) == 0x000014, "Member 'FMonsterAITemplate::AiActionType_2' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionType_3) == 0x000018, "Member 'FMonsterAITemplate::AiActionType_3' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionType_4) == 0x00001C, "Member 'FMonsterAITemplate::AiActionType_4' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionValue1_1) == 0x000020, "Member 'FMonsterAITemplate::AiActionValue1_1' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionValue1_2) == 0x000024, "Member 'FMonsterAITemplate::AiActionValue1_2' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionValue2_1) == 0x000028, "Member 'FMonsterAITemplate::AiActionValue2_1' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionValue2_2) == 0x00002C, "Member 'FMonsterAITemplate::AiActionValue2_2' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionValue3_1) == 0x000030, "Member 'FMonsterAITemplate::AiActionValue3_1' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionValue3_2) == 0x000034, "Member 'FMonsterAITemplate::AiActionValue3_2' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionValue4_1) == 0x000038, "Member 'FMonsterAITemplate::AiActionValue4_1' has a wrong offset!");
static_assert(offsetof(FMonsterAITemplate, AiActionValue4_2) == 0x00003C, "Member 'FMonsterAITemplate::AiActionValue4_2' has a wrong offset!");

// ScriptStruct MirMobile.MonsterColorGroupTemplate
// 0x0030 (0x0038 - 0x0008)
struct FMonsterColorGroupTemplate final : public FTableRowBase
{
public:
	class FString                                 Color01;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Color02;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Color03;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonsterColorGroupTemplate) == 0x000008, "Wrong alignment on FMonsterColorGroupTemplate");
static_assert(sizeof(FMonsterColorGroupTemplate) == 0x000038, "Wrong size on FMonsterColorGroupTemplate");
static_assert(offsetof(FMonsterColorGroupTemplate, Color01) == 0x000008, "Member 'FMonsterColorGroupTemplate::Color01' has a wrong offset!");
static_assert(offsetof(FMonsterColorGroupTemplate, Color02) == 0x000018, "Member 'FMonsterColorGroupTemplate::Color02' has a wrong offset!");
static_assert(offsetof(FMonsterColorGroupTemplate, Color03) == 0x000028, "Member 'FMonsterColorGroupTemplate::Color03' has a wrong offset!");

// ScriptStruct MirMobile.CharacterPartsMID
// 0x0010 (0x0010 - 0x0000)
struct FCharacterPartsMID final
{
public:
	TArray<class UMaterialInstanceDynamic*>       MIDArray;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterPartsMID) == 0x000008, "Wrong alignment on FCharacterPartsMID");
static_assert(sizeof(FCharacterPartsMID) == 0x000010, "Wrong size on FCharacterPartsMID");
static_assert(offsetof(FCharacterPartsMID, MIDArray) == 0x000000, "Member 'FCharacterPartsMID::MIDArray' has a wrong offset!");

// ScriptStruct MirMobile.MonsterResourceTemplate
// 0x0018 (0x0020 - 0x0008)
struct FMonsterResourceTemplate final : public FTableRowBase
{
public:
	int32                                         MeshLink;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ABPLink;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPLink;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterThumbnail;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarkerHeight;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMonsterResourceTemplate) == 0x000008, "Wrong alignment on FMonsterResourceTemplate");
static_assert(sizeof(FMonsterResourceTemplate) == 0x000020, "Wrong size on FMonsterResourceTemplate");
static_assert(offsetof(FMonsterResourceTemplate, MeshLink) == 0x000008, "Member 'FMonsterResourceTemplate::MeshLink' has a wrong offset!");
static_assert(offsetof(FMonsterResourceTemplate, ABPLink) == 0x00000C, "Member 'FMonsterResourceTemplate::ABPLink' has a wrong offset!");
static_assert(offsetof(FMonsterResourceTemplate, BPLink) == 0x000010, "Member 'FMonsterResourceTemplate::BPLink' has a wrong offset!");
static_assert(offsetof(FMonsterResourceTemplate, MonsterThumbnail) == 0x000014, "Member 'FMonsterResourceTemplate::MonsterThumbnail' has a wrong offset!");
static_assert(offsetof(FMonsterResourceTemplate, MarkerHeight) == 0x000018, "Member 'FMonsterResourceTemplate::MarkerHeight' has a wrong offset!");

// ScriptStruct MirMobile.MythicUpgradeSummaryTemplate
// 0x0048 (0x0050 - 0x0008)
struct FMythicUpgradeSummaryTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpgradeNo;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MythicItemType;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeItemId;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemId01;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemId01SmeltingCount;                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemId02;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemId02SmeltingCount;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusValue;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId01;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId01State;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId02;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId02State;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId03;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId03State;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomOptionCount;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemMakeId;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMythicUpgradeSummaryTemplate) == 0x000008, "Wrong alignment on FMythicUpgradeSummaryTemplate");
static_assert(sizeof(FMythicUpgradeSummaryTemplate) == 0x000050, "Wrong size on FMythicUpgradeSummaryTemplate");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, Name) == 0x000008, "Member 'FMythicUpgradeSummaryTemplate::Name' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, UpgradeNo) == 0x00000C, "Member 'FMythicUpgradeSummaryTemplate::UpgradeNo' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, MythicItemType) == 0x000010, "Member 'FMythicUpgradeSummaryTemplate::MythicItemType' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, MakeItemId) == 0x000014, "Member 'FMythicUpgradeSummaryTemplate::MakeItemId' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, NeedItemId01) == 0x000018, "Member 'FMythicUpgradeSummaryTemplate::NeedItemId01' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, NeedItemId01SmeltingCount) == 0x00001C, "Member 'FMythicUpgradeSummaryTemplate::NeedItemId01SmeltingCount' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, NeedItemId02) == 0x000020, "Member 'FMythicUpgradeSummaryTemplate::NeedItemId02' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, NeedItemId02SmeltingCount) == 0x000024, "Member 'FMythicUpgradeSummaryTemplate::NeedItemId02SmeltingCount' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, StatusValue) == 0x000028, "Member 'FMythicUpgradeSummaryTemplate::StatusValue' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, PassiveId01) == 0x00002C, "Member 'FMythicUpgradeSummaryTemplate::PassiveId01' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, PassiveId01State) == 0x000030, "Member 'FMythicUpgradeSummaryTemplate::PassiveId01State' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, PassiveId02) == 0x000034, "Member 'FMythicUpgradeSummaryTemplate::PassiveId02' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, PassiveId02State) == 0x000038, "Member 'FMythicUpgradeSummaryTemplate::PassiveId02State' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, PassiveId03) == 0x00003C, "Member 'FMythicUpgradeSummaryTemplate::PassiveId03' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, PassiveId03State) == 0x000040, "Member 'FMythicUpgradeSummaryTemplate::PassiveId03State' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, RandomOptionCount) == 0x000044, "Member 'FMythicUpgradeSummaryTemplate::RandomOptionCount' has a wrong offset!");
static_assert(offsetof(FMythicUpgradeSummaryTemplate, ItemMakeId) == 0x000048, "Member 'FMythicUpgradeSummaryTemplate::ItemMakeId' has a wrong offset!");

// ScriptStruct MirMobile.NpcGenTemplate
// 0x0038 (0x0040 - 0x0008)
struct FNpcGenTemplate final : public FTableRowBase
{
public:
	int32                                         TargetID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnerID;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnObjectType;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Location;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rotation;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Value1;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcGenTemplate) == 0x000008, "Wrong alignment on FNpcGenTemplate");
static_assert(sizeof(FNpcGenTemplate) == 0x000040, "Wrong size on FNpcGenTemplate");
static_assert(offsetof(FNpcGenTemplate, TargetID) == 0x000008, "Member 'FNpcGenTemplate::TargetID' has a wrong offset!");
static_assert(offsetof(FNpcGenTemplate, SpawnerID) == 0x00000C, "Member 'FNpcGenTemplate::SpawnerID' has a wrong offset!");
static_assert(offsetof(FNpcGenTemplate, SpawnObjectType) == 0x000010, "Member 'FNpcGenTemplate::SpawnObjectType' has a wrong offset!");
static_assert(offsetof(FNpcGenTemplate, Location) == 0x000018, "Member 'FNpcGenTemplate::Location' has a wrong offset!");
static_assert(offsetof(FNpcGenTemplate, Rotation) == 0x000028, "Member 'FNpcGenTemplate::Rotation' has a wrong offset!");
static_assert(offsetof(FNpcGenTemplate, Value1) == 0x000030, "Member 'FNpcGenTemplate::Value1' has a wrong offset!");

// ScriptStruct MirMobile.NpcItemCraftMaterialTemplate
// 0x0020 (0x0028 - 0x0008)
struct FNpcItemCraftMaterialTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialGroupId;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupMaterialType;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialUseId;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialMainType;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialSubType;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialTier;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialGrade;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcItemCraftMaterialTemplate) == 0x000008, "Wrong alignment on FNpcItemCraftMaterialTemplate");
static_assert(sizeof(FNpcItemCraftMaterialTemplate) == 0x000028, "Wrong size on FNpcItemCraftMaterialTemplate");
static_assert(offsetof(FNpcItemCraftMaterialTemplate, RowId) == 0x000008, "Member 'FNpcItemCraftMaterialTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftMaterialTemplate, MaterialGroupId) == 0x00000C, "Member 'FNpcItemCraftMaterialTemplate::MaterialGroupId' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftMaterialTemplate, GroupMaterialType) == 0x000010, "Member 'FNpcItemCraftMaterialTemplate::GroupMaterialType' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftMaterialTemplate, MaterialUseId) == 0x000014, "Member 'FNpcItemCraftMaterialTemplate::MaterialUseId' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftMaterialTemplate, MaterialMainType) == 0x000018, "Member 'FNpcItemCraftMaterialTemplate::MaterialMainType' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftMaterialTemplate, MaterialSubType) == 0x00001C, "Member 'FNpcItemCraftMaterialTemplate::MaterialSubType' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftMaterialTemplate, MaterialTier) == 0x000020, "Member 'FNpcItemCraftMaterialTemplate::MaterialTier' has a wrong offset!");
static_assert(offsetof(FNpcItemCraftMaterialTemplate, MaterialGrade) == 0x000024, "Member 'FNpcItemCraftMaterialTemplate::MaterialGrade' has a wrong offset!");

// ScriptStruct MirMobile.NpcItemListTemplate
// 0x0010 (0x0018 - 0x0008)
struct FNpcItemListTemplate final : public FTableRowBase
{
public:
	int32                                         NpcItemListGroupId;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NpcItemListUseType;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetItemMakeId;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcItemListTemplate) == 0x000008, "Wrong alignment on FNpcItemListTemplate");
static_assert(sizeof(FNpcItemListTemplate) == 0x000018, "Wrong size on FNpcItemListTemplate");
static_assert(offsetof(FNpcItemListTemplate, NpcItemListGroupId) == 0x000008, "Member 'FNpcItemListTemplate::NpcItemListGroupId' has a wrong offset!");
static_assert(offsetof(FNpcItemListTemplate, NpcItemListUseType) == 0x00000C, "Member 'FNpcItemListTemplate::NpcItemListUseType' has a wrong offset!");
static_assert(offsetof(FNpcItemListTemplate, ClassID) == 0x000010, "Member 'FNpcItemListTemplate::ClassID' has a wrong offset!");
static_assert(offsetof(FNpcItemListTemplate, TargetItemMakeId) == 0x000014, "Member 'FNpcItemListTemplate::TargetItemMakeId' has a wrong offset!");

// ScriptStruct MirMobile.NpcShopListTemplate
// 0x0020 (0x0028 - 0x0008)
struct FNpcShopListTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenOrder;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsGroupId1;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsGroupId2;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsGroupId3;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcShopListTemplate) == 0x000008, "Wrong alignment on FNpcShopListTemplate");
static_assert(sizeof(FNpcShopListTemplate) == 0x000028, "Wrong size on FNpcShopListTemplate");
static_assert(offsetof(FNpcShopListTemplate, RowId) == 0x000008, "Member 'FNpcShopListTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FNpcShopListTemplate, ShopId) == 0x00000C, "Member 'FNpcShopListTemplate::ShopId' has a wrong offset!");
static_assert(offsetof(FNpcShopListTemplate, OpenOrder) == 0x000010, "Member 'FNpcShopListTemplate::OpenOrder' has a wrong offset!");
static_assert(offsetof(FNpcShopListTemplate, Type) == 0x000014, "Member 'FNpcShopListTemplate::Type' has a wrong offset!");
static_assert(offsetof(FNpcShopListTemplate, GoodsGroupId1) == 0x000018, "Member 'FNpcShopListTemplate::GoodsGroupId1' has a wrong offset!");
static_assert(offsetof(FNpcShopListTemplate, GoodsGroupId2) == 0x00001C, "Member 'FNpcShopListTemplate::GoodsGroupId2' has a wrong offset!");
static_assert(offsetof(FNpcShopListTemplate, GoodsGroupId3) == 0x000020, "Member 'FNpcShopListTemplate::GoodsGroupId3' has a wrong offset!");
static_assert(offsetof(FNpcShopListTemplate, EventType) == 0x000024, "Member 'FNpcShopListTemplate::EventType' has a wrong offset!");

// ScriptStruct MirMobile.SeasonTokenMakeTemplate
// 0x0040 (0x0048 - 0x0008)
struct FSeasonTokenMakeTemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeType;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeToken;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TokenIconId;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeItemId;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeCount;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemId;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemCount;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostId;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostCount;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostToken;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedCostTokenCount;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CloseTime;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSeasonTokenMakeTemplate) == 0x000008, "Wrong alignment on FSeasonTokenMakeTemplate");
static_assert(sizeof(FSeasonTokenMakeTemplate) == 0x000048, "Wrong size on FSeasonTokenMakeTemplate");
static_assert(offsetof(FSeasonTokenMakeTemplate, UniqueId) == 0x000008, "Member 'FSeasonTokenMakeTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, MakeType) == 0x00000C, "Member 'FSeasonTokenMakeTemplate::MakeType' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, MakeToken) == 0x000010, "Member 'FSeasonTokenMakeTemplate::MakeToken' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, TokenIconId) == 0x000014, "Member 'FSeasonTokenMakeTemplate::TokenIconId' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, MakeItemId) == 0x000018, "Member 'FSeasonTokenMakeTemplate::MakeItemId' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, MakeCount) == 0x00001C, "Member 'FSeasonTokenMakeTemplate::MakeCount' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, MaterialItemId) == 0x000020, "Member 'FSeasonTokenMakeTemplate::MaterialItemId' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, MaterialItemCount) == 0x000024, "Member 'FSeasonTokenMakeTemplate::MaterialItemCount' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, NeedCostId) == 0x000028, "Member 'FSeasonTokenMakeTemplate::NeedCostId' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, NeedCostCount) == 0x00002C, "Member 'FSeasonTokenMakeTemplate::NeedCostCount' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, NeedCostToken) == 0x000030, "Member 'FSeasonTokenMakeTemplate::NeedCostToken' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, NeedCostTokenCount) == 0x000034, "Member 'FSeasonTokenMakeTemplate::NeedCostTokenCount' has a wrong offset!");
static_assert(offsetof(FSeasonTokenMakeTemplate, CloseTime) == 0x000038, "Member 'FSeasonTokenMakeTemplate::CloseTime' has a wrong offset!");

// ScriptStruct MirMobile.NpcShowScheduleTemplate
// 0x0018 (0x0020 - 0x0008)
struct FNpcShowScheduleTemplate final : public FTableRowBase
{
public:
	int32                                         ViewWeek;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewHour;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewMinute;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HideHour;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HideMinute;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNpcShowScheduleTemplate) == 0x000008, "Wrong alignment on FNpcShowScheduleTemplate");
static_assert(sizeof(FNpcShowScheduleTemplate) == 0x000020, "Wrong size on FNpcShowScheduleTemplate");
static_assert(offsetof(FNpcShowScheduleTemplate, ViewWeek) == 0x000008, "Member 'FNpcShowScheduleTemplate::ViewWeek' has a wrong offset!");
static_assert(offsetof(FNpcShowScheduleTemplate, ViewHour) == 0x00000C, "Member 'FNpcShowScheduleTemplate::ViewHour' has a wrong offset!");
static_assert(offsetof(FNpcShowScheduleTemplate, ViewMinute) == 0x000010, "Member 'FNpcShowScheduleTemplate::ViewMinute' has a wrong offset!");
static_assert(offsetof(FNpcShowScheduleTemplate, HideHour) == 0x000014, "Member 'FNpcShowScheduleTemplate::HideHour' has a wrong offset!");
static_assert(offsetof(FNpcShowScheduleTemplate, HideMinute) == 0x000018, "Member 'FNpcShowScheduleTemplate::HideMinute' has a wrong offset!");

// ScriptStruct MirMobile.UserEventSiegeeveTemplate
// 0x0010 (0x0018 - 0x0008)
struct FUserEventSiegeeveTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserEventId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardOwnerShip;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_Item;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserEventSiegeeveTemplate) == 0x000008, "Wrong alignment on FUserEventSiegeeveTemplate");
static_assert(sizeof(FUserEventSiegeeveTemplate) == 0x000018, "Wrong size on FUserEventSiegeeveTemplate");
static_assert(offsetof(FUserEventSiegeeveTemplate, ID) == 0x000008, "Member 'FUserEventSiegeeveTemplate::ID' has a wrong offset!");
static_assert(offsetof(FUserEventSiegeeveTemplate, UserEventId) == 0x00000C, "Member 'FUserEventSiegeeveTemplate::UserEventId' has a wrong offset!");
static_assert(offsetof(FUserEventSiegeeveTemplate, RewardOwnerShip) == 0x000010, "Member 'FUserEventSiegeeveTemplate::RewardOwnerShip' has a wrong offset!");
static_assert(offsetof(FUserEventSiegeeveTemplate, Reward_Item) == 0x000014, "Member 'FUserEventSiegeeveTemplate::Reward_Item' has a wrong offset!");

// ScriptStruct MirMobile.NpcSpawnTemplate
// 0x0018 (0x0020 - 0x0008)
struct FNpcSpawnTemplate final : public FTableRowBase
{
public:
	int32                                         QuestId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Script;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcSpawnTemplate) == 0x000008, "Wrong alignment on FNpcSpawnTemplate");
static_assert(sizeof(FNpcSpawnTemplate) == 0x000020, "Wrong size on FNpcSpawnTemplate");
static_assert(offsetof(FNpcSpawnTemplate, QuestId) == 0x000008, "Member 'FNpcSpawnTemplate::QuestId' has a wrong offset!");
static_assert(offsetof(FNpcSpawnTemplate, Script) == 0x000010, "Member 'FNpcSpawnTemplate::Script' has a wrong offset!");

// ScriptStruct MirMobile.NpcTemplate
// 0x00F8 (0x0100 - 0x0008)
struct FNpcTemplate final : public FTableRowBase
{
public:
	int32                                         NpcID;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameTitleSid;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCColorId;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultAnimationBP;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceId;                                        // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PartsResourceID;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FunctionData;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WaypointNPC;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NPCScale;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CinematicAnimationBP;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimationPath;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionRange;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SightRange;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewRange;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideNameTag;                                       // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FactionType;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 NpcDialogId;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NpcPortrait;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCBehaviourAiLink;                                // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CollisionBoxExtend;                                // 0x0090(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentsUI;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 NPCGroupListID;                                    // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContentsType1;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TypeValue1;                                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsType2;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TypeValue2;                                        // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsType3;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TypeValue3;                                        // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NpcType;                                           // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCShow;                                           // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 NPCShowQuest;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MerchantNpc;                                       // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegeMode;                                         // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventContentsid;                                   // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNpcTemplate) == 0x000008, "Wrong alignment on FNpcTemplate");
static_assert(sizeof(FNpcTemplate) == 0x000100, "Wrong size on FNpcTemplate");
static_assert(offsetof(FNpcTemplate, NpcID) == 0x000008, "Member 'FNpcTemplate::NpcID' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NameTitleSid) == 0x00000C, "Member 'FNpcTemplate::NameTitleSid' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NameSId) == 0x000010, "Member 'FNpcTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NPCColorId) == 0x000014, "Member 'FNpcTemplate::NPCColorId' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, DefaultAnimationBP) == 0x000018, "Member 'FNpcTemplate::DefaultAnimationBP' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, ResourceId) == 0x00001C, "Member 'FNpcTemplate::ResourceId' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, PartsResourceID) == 0x000028, "Member 'FNpcTemplate::PartsResourceID' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, FunctionData) == 0x000038, "Member 'FNpcTemplate::FunctionData' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, WaypointNPC) == 0x000048, "Member 'FNpcTemplate::WaypointNPC' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NPCScale) == 0x00004C, "Member 'FNpcTemplate::NPCScale' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, CinematicAnimationBP) == 0x000050, "Member 'FNpcTemplate::CinematicAnimationBP' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, AnimationPath) == 0x000054, "Member 'FNpcTemplate::AnimationPath' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, InteractionRange) == 0x000058, "Member 'FNpcTemplate::InteractionRange' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, SightRange) == 0x00005C, "Member 'FNpcTemplate::SightRange' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, ViewRange) == 0x000060, "Member 'FNpcTemplate::ViewRange' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, CapsuleHalfHeight) == 0x000064, "Member 'FNpcTemplate::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, CapsuleRadius) == 0x000068, "Member 'FNpcTemplate::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, HideNameTag) == 0x00006C, "Member 'FNpcTemplate::HideNameTag' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, FactionType) == 0x000070, "Member 'FNpcTemplate::FactionType' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NpcDialogId) == 0x000078, "Member 'FNpcTemplate::NpcDialogId' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NpcPortrait) == 0x000088, "Member 'FNpcTemplate::NpcPortrait' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NPCBehaviourAiLink) == 0x00008C, "Member 'FNpcTemplate::NPCBehaviourAiLink' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, CollisionBoxExtend) == 0x000090, "Member 'FNpcTemplate::CollisionBoxExtend' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, ContentsUI) == 0x0000A0, "Member 'FNpcTemplate::ContentsUI' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NPCGroupListID) == 0x0000B0, "Member 'FNpcTemplate::NPCGroupListID' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, ContentsType1) == 0x0000C0, "Member 'FNpcTemplate::ContentsType1' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, TypeValue1) == 0x0000C4, "Member 'FNpcTemplate::TypeValue1' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, ContentsType2) == 0x0000C8, "Member 'FNpcTemplate::ContentsType2' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, TypeValue2) == 0x0000CC, "Member 'FNpcTemplate::TypeValue2' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, ContentsType3) == 0x0000D0, "Member 'FNpcTemplate::ContentsType3' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, TypeValue3) == 0x0000D4, "Member 'FNpcTemplate::TypeValue3' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NpcType) == 0x0000D8, "Member 'FNpcTemplate::NpcType' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NPCShow) == 0x0000DC, "Member 'FNpcTemplate::NPCShow' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, NPCShowQuest) == 0x0000E0, "Member 'FNpcTemplate::NPCShowQuest' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, MerchantNpc) == 0x0000F0, "Member 'FNpcTemplate::MerchantNpc' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, SiegeMode) == 0x0000F4, "Member 'FNpcTemplate::SiegeMode' has a wrong offset!");
static_assert(offsetof(FNpcTemplate, EventContentsid) == 0x0000F8, "Member 'FNpcTemplate::EventContentsid' has a wrong offset!");

// ScriptStruct MirMobile.StageSectorTemplate
// 0x0020 (0x0028 - 0x0008)
struct FStageSectorTemplate final : public FTableRowBase
{
public:
	int32                                         SectorID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectorGrade;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCostRate;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuckyRewardDropRate;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameTagDropItemRate;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SummonGoblinRate;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStageSectorTemplate) == 0x000008, "Wrong alignment on FStageSectorTemplate");
static_assert(sizeof(FStageSectorTemplate) == 0x000028, "Wrong size on FStageSectorTemplate");
static_assert(offsetof(FStageSectorTemplate, SectorID) == 0x000008, "Member 'FStageSectorTemplate::SectorID' has a wrong offset!");
static_assert(offsetof(FStageSectorTemplate, StageID) == 0x00000C, "Member 'FStageSectorTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FStageSectorTemplate, SectorGrade) == 0x000010, "Member 'FStageSectorTemplate::SectorGrade' has a wrong offset!");
static_assert(offsetof(FStageSectorTemplate, RewardCostRate) == 0x000014, "Member 'FStageSectorTemplate::RewardCostRate' has a wrong offset!");
static_assert(offsetof(FStageSectorTemplate, LuckyRewardDropRate) == 0x000018, "Member 'FStageSectorTemplate::LuckyRewardDropRate' has a wrong offset!");
static_assert(offsetof(FStageSectorTemplate, NameTagDropItemRate) == 0x00001C, "Member 'FStageSectorTemplate::NameTagDropItemRate' has a wrong offset!");
static_assert(offsetof(FStageSectorTemplate, SummonGoblinRate) == 0x000020, "Member 'FStageSectorTemplate::SummonGoblinRate' has a wrong offset!");

// ScriptStruct MirMobile.ObjectMonGenTemplate
// 0x0028 (0x0030 - 0x0008)
struct FObjectMonGenTemplate final : public FTableRowBase
{
public:
	int32                                         ObjectInteractionMonGenID;                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectID;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseId;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PosID;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CastingDesc;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropID;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupGenID;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectMonGenTemplate) == 0x000008, "Wrong alignment on FObjectMonGenTemplate");
static_assert(sizeof(FObjectMonGenTemplate) == 0x000030, "Wrong size on FObjectMonGenTemplate");
static_assert(offsetof(FObjectMonGenTemplate, ObjectInteractionMonGenID) == 0x000008, "Member 'FObjectMonGenTemplate::ObjectInteractionMonGenID' has a wrong offset!");
static_assert(offsetof(FObjectMonGenTemplate, StageID) == 0x00000C, "Member 'FObjectMonGenTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FObjectMonGenTemplate, ObjectID) == 0x000010, "Member 'FObjectMonGenTemplate::ObjectID' has a wrong offset!");
static_assert(offsetof(FObjectMonGenTemplate, UseId) == 0x000014, "Member 'FObjectMonGenTemplate::UseId' has a wrong offset!");
static_assert(offsetof(FObjectMonGenTemplate, ItemCount) == 0x000018, "Member 'FObjectMonGenTemplate::ItemCount' has a wrong offset!");
static_assert(offsetof(FObjectMonGenTemplate, PosID) == 0x00001C, "Member 'FObjectMonGenTemplate::PosID' has a wrong offset!");
static_assert(offsetof(FObjectMonGenTemplate, CastingDesc) == 0x000020, "Member 'FObjectMonGenTemplate::CastingDesc' has a wrong offset!");
static_assert(offsetof(FObjectMonGenTemplate, DropID) == 0x000024, "Member 'FObjectMonGenTemplate::DropID' has a wrong offset!");
static_assert(offsetof(FObjectMonGenTemplate, GroupGenID) == 0x000028, "Member 'FObjectMonGenTemplate::GroupGenID' has a wrong offset!");

// ScriptStruct MirMobile.PacketNameTemplate
// 0x0020 (0x0028 - 0x0008)
struct FPacketNameTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Packet;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Show;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPacketNameTemplate) == 0x000008, "Wrong alignment on FPacketNameTemplate");
static_assert(sizeof(FPacketNameTemplate) == 0x000028, "Wrong size on FPacketNameTemplate");
static_assert(offsetof(FPacketNameTemplate, ID) == 0x000008, "Member 'FPacketNameTemplate::ID' has a wrong offset!");
static_assert(offsetof(FPacketNameTemplate, Packet) == 0x000010, "Member 'FPacketNameTemplate::Packet' has a wrong offset!");
static_assert(offsetof(FPacketNameTemplate, Show) == 0x000020, "Member 'FPacketNameTemplate::Show' has a wrong offset!");

// ScriptStruct MirMobile.PetLevelTemplate
// 0x0040 (0x0048 - 0x0008)
struct FPetLevelTemplate final : public FTableRowBase
{
public:
	int32                                         LevelId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextLevelId;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipSlotCnt;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveLv;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvUpNeedPetItemCount;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvUpNeedCostType01;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvUpNeedCostValue01;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvUpNeedCostType02;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvUpNeedCostValue02;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvUpNeedItemUseId01;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvUpNeedItemCount01;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddCombatPoint;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LvUpSuccessRate;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPetLevelTemplate) == 0x000008, "Wrong alignment on FPetLevelTemplate");
static_assert(sizeof(FPetLevelTemplate) == 0x000048, "Wrong size on FPetLevelTemplate");
static_assert(offsetof(FPetLevelTemplate, LevelId) == 0x000008, "Member 'FPetLevelTemplate::LevelId' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, Tier) == 0x00000C, "Member 'FPetLevelTemplate::Tier' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, Level) == 0x000010, "Member 'FPetLevelTemplate::Level' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, NextLevelId) == 0x000014, "Member 'FPetLevelTemplate::NextLevelId' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, EquipSlotCnt) == 0x000018, "Member 'FPetLevelTemplate::EquipSlotCnt' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, PassiveLv) == 0x00001C, "Member 'FPetLevelTemplate::PassiveLv' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, LvUpNeedPetItemCount) == 0x000020, "Member 'FPetLevelTemplate::LvUpNeedPetItemCount' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, LvUpNeedCostType01) == 0x000024, "Member 'FPetLevelTemplate::LvUpNeedCostType01' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, LvUpNeedCostValue01) == 0x000028, "Member 'FPetLevelTemplate::LvUpNeedCostValue01' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, LvUpNeedCostType02) == 0x00002C, "Member 'FPetLevelTemplate::LvUpNeedCostType02' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, LvUpNeedCostValue02) == 0x000030, "Member 'FPetLevelTemplate::LvUpNeedCostValue02' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, LvUpNeedItemUseId01) == 0x000034, "Member 'FPetLevelTemplate::LvUpNeedItemUseId01' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, LvUpNeedItemCount01) == 0x000038, "Member 'FPetLevelTemplate::LvUpNeedItemCount01' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, AddCombatPoint) == 0x00003C, "Member 'FPetLevelTemplate::AddCombatPoint' has a wrong offset!");
static_assert(offsetof(FPetLevelTemplate, LvUpSuccessRate) == 0x000040, "Member 'FPetLevelTemplate::LvUpSuccessRate' has a wrong offset!");

// ScriptStruct MirMobile.PetSkillTemplate
// 0x0068 (0x0070 - 0x0008)
struct FPetSkillTemplate final : public FTableRowBase
{
public:
	int32                                         PET_SKILLID;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillType;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameSId;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExplainSID;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PETSkillCombatPoint;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UiDesValue01;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddValue01;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UiDesValue02;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddValue02;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UiDesValue03;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddValue03;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UiDesValue04;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddValue04;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UiDesValue05;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddValue05;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreatBuildingAttributeType01;                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreatBuildingAttributeValue01;                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreatBuildingAtttributeAddValue01;                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreatBuildingAttributeType02;                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreatBuildingAttributeValue02;                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GreatBuildingAtttributeAddValue02;                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId01;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassiveId02;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skillkind;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPetSkillTemplate) == 0x000008, "Wrong alignment on FPetSkillTemplate");
static_assert(sizeof(FPetSkillTemplate) == 0x000070, "Wrong size on FPetSkillTemplate");
static_assert(offsetof(FPetSkillTemplate, PET_SKILLID) == 0x000008, "Member 'FPetSkillTemplate::PET_SKILLID' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, SkillType) == 0x00000C, "Member 'FPetSkillTemplate::SkillType' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, IconID) == 0x000010, "Member 'FPetSkillTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, NameSId) == 0x000014, "Member 'FPetSkillTemplate::NameSId' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, ExplainSID) == 0x000018, "Member 'FPetSkillTemplate::ExplainSID' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, PETSkillCombatPoint) == 0x00001C, "Member 'FPetSkillTemplate::PETSkillCombatPoint' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, UiDesValue01) == 0x000020, "Member 'FPetSkillTemplate::UiDesValue01' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, AddValue01) == 0x000024, "Member 'FPetSkillTemplate::AddValue01' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, UiDesValue02) == 0x000028, "Member 'FPetSkillTemplate::UiDesValue02' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, AddValue02) == 0x00002C, "Member 'FPetSkillTemplate::AddValue02' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, UiDesValue03) == 0x000030, "Member 'FPetSkillTemplate::UiDesValue03' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, AddValue03) == 0x000034, "Member 'FPetSkillTemplate::AddValue03' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, UiDesValue04) == 0x000038, "Member 'FPetSkillTemplate::UiDesValue04' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, AddValue04) == 0x00003C, "Member 'FPetSkillTemplate::AddValue04' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, UiDesValue05) == 0x000040, "Member 'FPetSkillTemplate::UiDesValue05' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, AddValue05) == 0x000044, "Member 'FPetSkillTemplate::AddValue05' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, GreatBuildingAttributeType01) == 0x000048, "Member 'FPetSkillTemplate::GreatBuildingAttributeType01' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, GreatBuildingAttributeValue01) == 0x00004C, "Member 'FPetSkillTemplate::GreatBuildingAttributeValue01' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, GreatBuildingAtttributeAddValue01) == 0x000050, "Member 'FPetSkillTemplate::GreatBuildingAtttributeAddValue01' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, GreatBuildingAttributeType02) == 0x000054, "Member 'FPetSkillTemplate::GreatBuildingAttributeType02' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, GreatBuildingAttributeValue02) == 0x000058, "Member 'FPetSkillTemplate::GreatBuildingAttributeValue02' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, GreatBuildingAtttributeAddValue02) == 0x00005C, "Member 'FPetSkillTemplate::GreatBuildingAtttributeAddValue02' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, PassiveId01) == 0x000060, "Member 'FPetSkillTemplate::PassiveId01' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, PassiveId02) == 0x000064, "Member 'FPetSkillTemplate::PassiveId02' has a wrong offset!");
static_assert(offsetof(FPetSkillTemplate, Skillkind) == 0x000068, "Member 'FPetSkillTemplate::Skillkind' has a wrong offset!");

// ScriptStruct MirMobile.PhasingTemplate
// 0x0010 (0x0018 - 0x0008)
struct FPhasingTemplate final : public FTableRowBase
{
public:
	int32                                         PhasingID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerGroup;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhasingTemplate) == 0x000008, "Wrong alignment on FPhasingTemplate");
static_assert(sizeof(FPhasingTemplate) == 0x000018, "Wrong size on FPhasingTemplate");
static_assert(offsetof(FPhasingTemplate, PhasingID) == 0x000008, "Member 'FPhasingTemplate::PhasingID' has a wrong offset!");
static_assert(offsetof(FPhasingTemplate, StageID) == 0x00000C, "Member 'FPhasingTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FPhasingTemplate, TriggerGroup) == 0x000010, "Member 'FPhasingTemplate::TriggerGroup' has a wrong offset!");

// ScriptStruct MirMobile.PKGradeTemplate
// 0x0028 (0x0030 - 0x0008)
struct FPKGradeTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PkGradeType;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PkName;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PkPointMin;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PkPointMax;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetPkPoint;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffId;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WantedFamePoint;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PKGradeAttachBuffId;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PenaltyString;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPKGradeTemplate) == 0x000008, "Wrong alignment on FPKGradeTemplate");
static_assert(sizeof(FPKGradeTemplate) == 0x000030, "Wrong size on FPKGradeTemplate");
static_assert(offsetof(FPKGradeTemplate, RowId) == 0x000008, "Member 'FPKGradeTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FPKGradeTemplate, PkGradeType) == 0x00000C, "Member 'FPKGradeTemplate::PkGradeType' has a wrong offset!");
static_assert(offsetof(FPKGradeTemplate, PkName) == 0x000010, "Member 'FPKGradeTemplate::PkName' has a wrong offset!");
static_assert(offsetof(FPKGradeTemplate, PkPointMin) == 0x000014, "Member 'FPKGradeTemplate::PkPointMin' has a wrong offset!");
static_assert(offsetof(FPKGradeTemplate, PkPointMax) == 0x000018, "Member 'FPKGradeTemplate::PkPointMax' has a wrong offset!");
static_assert(offsetof(FPKGradeTemplate, GetPkPoint) == 0x00001C, "Member 'FPKGradeTemplate::GetPkPoint' has a wrong offset!");
static_assert(offsetof(FPKGradeTemplate, BuffId) == 0x000020, "Member 'FPKGradeTemplate::BuffId' has a wrong offset!");
static_assert(offsetof(FPKGradeTemplate, WantedFamePoint) == 0x000024, "Member 'FPKGradeTemplate::WantedFamePoint' has a wrong offset!");
static_assert(offsetof(FPKGradeTemplate, PKGradeAttachBuffId) == 0x000028, "Member 'FPKGradeTemplate::PKGradeAttachBuffId' has a wrong offset!");
static_assert(offsetof(FPKGradeTemplate, PenaltyString) == 0x00002C, "Member 'FPKGradeTemplate::PenaltyString' has a wrong offset!");

// ScriptStruct MirMobile.PlunderTemplate
// 0x0060 (0x0068 - 0x0008)
struct FPlunderTemplate final : public FStageCommonTemplate
{
public:
	int32                                         PlunderId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageDesSId;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageBossIconid;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Defender_Dominionid;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReqOffenseGuildRanking;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReadyTime_Sec;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CastleGateId;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GateIconid;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bossid;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BossIconid;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trapid01;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Trap01_EffectLocation;                             // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Trap01_EffectRotationYaw;                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trapid02;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Trap02_EffectLocation;                             // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Trap02_EffectRotationYaw;                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardObjectIconId;                                // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlunderRewardid;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlunderTemplate) == 0x000008, "Wrong alignment on FPlunderTemplate");
static_assert(sizeof(FPlunderTemplate) == 0x000068, "Wrong size on FPlunderTemplate");
static_assert(offsetof(FPlunderTemplate, PlunderId) == 0x000008, "Member 'FPlunderTemplate::PlunderId' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, StageID) == 0x00000C, "Member 'FPlunderTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, StageDesSId) == 0x000010, "Member 'FPlunderTemplate::StageDesSId' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, StageBossIconid) == 0x000014, "Member 'FPlunderTemplate::StageBossIconid' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, Defender_Dominionid) == 0x000018, "Member 'FPlunderTemplate::Defender_Dominionid' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, ReqOffenseGuildRanking) == 0x00001C, "Member 'FPlunderTemplate::ReqOffenseGuildRanking' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, ReadyTime_Sec) == 0x000020, "Member 'FPlunderTemplate::ReadyTime_Sec' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, CastleGateId) == 0x000024, "Member 'FPlunderTemplate::CastleGateId' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, GateIconid) == 0x000028, "Member 'FPlunderTemplate::GateIconid' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, Bossid) == 0x00002C, "Member 'FPlunderTemplate::Bossid' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, BossIconid) == 0x000030, "Member 'FPlunderTemplate::BossIconid' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, Trapid01) == 0x000034, "Member 'FPlunderTemplate::Trapid01' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, Trap01_EffectLocation) == 0x000038, "Member 'FPlunderTemplate::Trap01_EffectLocation' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, Trap01_EffectRotationYaw) == 0x000044, "Member 'FPlunderTemplate::Trap01_EffectRotationYaw' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, Trapid02) == 0x000048, "Member 'FPlunderTemplate::Trapid02' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, Trap02_EffectLocation) == 0x00004C, "Member 'FPlunderTemplate::Trap02_EffectLocation' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, Trap02_EffectRotationYaw) == 0x000058, "Member 'FPlunderTemplate::Trap02_EffectRotationYaw' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, RewardObjectIconId) == 0x00005C, "Member 'FPlunderTemplate::RewardObjectIconId' has a wrong offset!");
static_assert(offsetof(FPlunderTemplate, PlunderRewardid) == 0x000060, "Member 'FPlunderTemplate::PlunderRewardid' has a wrong offset!");

// ScriptStruct MirMobile.PopupStoreTemplate
// 0x0018 (0x0020 - 0x0008)
struct FPopupStoreTemplate final : public FTableRowBase
{
public:
	int32                                         PopupStoreId;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldType;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PopupBg;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PopupStoreOpenConditionType;                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PopupStoreOpenConditionValue01;                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPopupStoreTemplate) == 0x000008, "Wrong alignment on FPopupStoreTemplate");
static_assert(sizeof(FPopupStoreTemplate) == 0x000020, "Wrong size on FPopupStoreTemplate");
static_assert(offsetof(FPopupStoreTemplate, PopupStoreId) == 0x000008, "Member 'FPopupStoreTemplate::PopupStoreId' has a wrong offset!");
static_assert(offsetof(FPopupStoreTemplate, WorldType) == 0x00000C, "Member 'FPopupStoreTemplate::WorldType' has a wrong offset!");
static_assert(offsetof(FPopupStoreTemplate, GoodsID) == 0x000010, "Member 'FPopupStoreTemplate::GoodsID' has a wrong offset!");
static_assert(offsetof(FPopupStoreTemplate, PopupBg) == 0x000014, "Member 'FPopupStoreTemplate::PopupBg' has a wrong offset!");
static_assert(offsetof(FPopupStoreTemplate, PopupStoreOpenConditionType) == 0x000018, "Member 'FPopupStoreTemplate::PopupStoreOpenConditionType' has a wrong offset!");
static_assert(offsetof(FPopupStoreTemplate, PopupStoreOpenConditionValue01) == 0x00001C, "Member 'FPopupStoreTemplate::PopupStoreOpenConditionValue01' has a wrong offset!");

// ScriptStruct MirMobile.PortalTemplate
// 0x0048 (0x0050 - 0x0008)
struct FPortalTemplate final : public FTableRowBase
{
public:
	int32                                         PortalTriggerId;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableLevel;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableGreatBuildingID;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableBuildingStep;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableDoingQuestType;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EnableDoingQuest;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EnableCompleteQuestType;                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCompleteQuest;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableAchievement;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableDoingBuff;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentStageId;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarpId;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrivalStageId;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weigth;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPortalTemplate) == 0x000008, "Wrong alignment on FPortalTemplate");
static_assert(sizeof(FPortalTemplate) == 0x000050, "Wrong size on FPortalTemplate");
static_assert(offsetof(FPortalTemplate, PortalTriggerId) == 0x000008, "Member 'FPortalTemplate::PortalTriggerId' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, EnableLevel) == 0x00000C, "Member 'FPortalTemplate::EnableLevel' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, EnableGreatBuildingID) == 0x000010, "Member 'FPortalTemplate::EnableGreatBuildingID' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, EnableBuildingStep) == 0x000014, "Member 'FPortalTemplate::EnableBuildingStep' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, EnableDoingQuestType) == 0x000018, "Member 'FPortalTemplate::EnableDoingQuestType' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, EnableDoingQuest) == 0x000020, "Member 'FPortalTemplate::EnableDoingQuest' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, EnableCompleteQuestType) == 0x000030, "Member 'FPortalTemplate::EnableCompleteQuestType' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, EnableCompleteQuest) == 0x000034, "Member 'FPortalTemplate::EnableCompleteQuest' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, EnableAchievement) == 0x000038, "Member 'FPortalTemplate::EnableAchievement' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, EnableDoingBuff) == 0x00003C, "Member 'FPortalTemplate::EnableDoingBuff' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, CurrentStageId) == 0x000040, "Member 'FPortalTemplate::CurrentStageId' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, WarpId) == 0x000044, "Member 'FPortalTemplate::WarpId' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, ArrivalStageId) == 0x000048, "Member 'FPortalTemplate::ArrivalStageId' has a wrong offset!");
static_assert(offsetof(FPortalTemplate, Weigth) == 0x00004C, "Member 'FPortalTemplate::Weigth' has a wrong offset!");

// ScriptStruct MirMobile.PotentialNodeUITemplate
// 0x0020 (0x0028 - 0x0008)
struct FPotentialNodeUITemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Node_Category;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Node_Grade;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateLock_IconId;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateOpen_IconId;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateGrow_IconId;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateDone_IconId;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPotentialNodeUITemplate) == 0x000008, "Wrong alignment on FPotentialNodeUITemplate");
static_assert(sizeof(FPotentialNodeUITemplate) == 0x000028, "Wrong size on FPotentialNodeUITemplate");
static_assert(offsetof(FPotentialNodeUITemplate, RowId) == 0x000008, "Member 'FPotentialNodeUITemplate::RowId' has a wrong offset!");
static_assert(offsetof(FPotentialNodeUITemplate, Node_Category) == 0x00000C, "Member 'FPotentialNodeUITemplate::Node_Category' has a wrong offset!");
static_assert(offsetof(FPotentialNodeUITemplate, Node_Grade) == 0x000010, "Member 'FPotentialNodeUITemplate::Node_Grade' has a wrong offset!");
static_assert(offsetof(FPotentialNodeUITemplate, StateLock_IconId) == 0x000014, "Member 'FPotentialNodeUITemplate::StateLock_IconId' has a wrong offset!");
static_assert(offsetof(FPotentialNodeUITemplate, StateOpen_IconId) == 0x000018, "Member 'FPotentialNodeUITemplate::StateOpen_IconId' has a wrong offset!");
static_assert(offsetof(FPotentialNodeUITemplate, StateGrow_IconId) == 0x00001C, "Member 'FPotentialNodeUITemplate::StateGrow_IconId' has a wrong offset!");
static_assert(offsetof(FPotentialNodeUITemplate, StateDone_IconId) == 0x000020, "Member 'FPotentialNodeUITemplate::StateDone_IconId' has a wrong offset!");

// ScriptStruct MirMobile.QuestMissionTemplate
// 0x0100 (0x0108 - 0x0008)
struct FQuestMissionTemplate final : public FTableRowBase
{
public:
	int32                                         MissionId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerType;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionTapMenu;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionShowType;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionCombatPower;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionOpenCondition;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionOpenConditionValue;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageGroup;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionGetStageId;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionTarget;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRepeat;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionRepeatCount;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionStageId;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionIconType;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMember;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepNo;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestMissionType                             MissionType;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestHelperType                              HelperType;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapNpcShowType;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoBattleType;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PcTargetSearchDist;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoordinateRange;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter1;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter2;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter3;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter4;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentOpenPage;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionTitleSID;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionObjectiveSID;                               // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringMESSAGE;                                     // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSmallDialog>                   CountSmallTalk;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CountIndication;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ViaCoordinate;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                MissionCoordinate;                                 // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoordinateShowType;                                // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId;                                          // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardEXP;                                         // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGOLD;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsType;                                   // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsCount;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId01;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount01;                                 // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId02;                                    // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount02;                                 // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TestValue;                                         // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutomaticAction;                                   // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconKindType;                                      // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestMissionTemplate) == 0x000008, "Wrong alignment on FQuestMissionTemplate");
static_assert(sizeof(FQuestMissionTemplate) == 0x000108, "Wrong size on FQuestMissionTemplate");
static_assert(offsetof(FQuestMissionTemplate, MissionId) == 0x000008, "Member 'FQuestMissionTemplate::MissionId' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, ServerType) == 0x00000C, "Member 'FQuestMissionTemplate::ServerType' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionTapMenu) == 0x000010, "Member 'FQuestMissionTemplate::MissionTapMenu' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionShowType) == 0x000014, "Member 'FQuestMissionTemplate::MissionShowType' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionCombatPower) == 0x000018, "Member 'FQuestMissionTemplate::MissionCombatPower' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionOpenCondition) == 0x00001C, "Member 'FQuestMissionTemplate::MissionOpenCondition' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionOpenConditionValue) == 0x000020, "Member 'FQuestMissionTemplate::MissionOpenConditionValue' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, StageGroup) == 0x000024, "Member 'FQuestMissionTemplate::StageGroup' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionGetStageId) == 0x000028, "Member 'FQuestMissionTemplate::MissionGetStageId' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionTarget) == 0x00002C, "Member 'FQuestMissionTemplate::MissionTarget' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionRepeat) == 0x000030, "Member 'FQuestMissionTemplate::MissionRepeat' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionRepeatCount) == 0x000034, "Member 'FQuestMissionTemplate::MissionRepeatCount' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionStageId) == 0x000038, "Member 'FQuestMissionTemplate::MissionStageId' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionIconType) == 0x00003C, "Member 'FQuestMissionTemplate::MissionIconType' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, PartyMember) == 0x000040, "Member 'FQuestMissionTemplate::PartyMember' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, StepNo) == 0x000044, "Member 'FQuestMissionTemplate::StepNo' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionType) == 0x000048, "Member 'FQuestMissionTemplate::MissionType' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, HelperType) == 0x00004C, "Member 'FQuestMissionTemplate::HelperType' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MapNpcShowType) == 0x000050, "Member 'FQuestMissionTemplate::MapNpcShowType' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, AutoBattleType) == 0x000054, "Member 'FQuestMissionTemplate::AutoBattleType' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, PcTargetSearchDist) == 0x000058, "Member 'FQuestMissionTemplate::PcTargetSearchDist' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, CoordinateRange) == 0x00005C, "Member 'FQuestMissionTemplate::CoordinateRange' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, Parameter1) == 0x000060, "Member 'FQuestMissionTemplate::Parameter1' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, Parameter2) == 0x000064, "Member 'FQuestMissionTemplate::Parameter2' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, Parameter3) == 0x000068, "Member 'FQuestMissionTemplate::Parameter3' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, Parameter4) == 0x00006C, "Member 'FQuestMissionTemplate::Parameter4' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, ContentOpenPage) == 0x000070, "Member 'FQuestMissionTemplate::ContentOpenPage' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionTitleSID) == 0x000074, "Member 'FQuestMissionTemplate::MissionTitleSID' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionObjectiveSID) == 0x000078, "Member 'FQuestMissionTemplate::MissionObjectiveSID' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, StringMESSAGE) == 0x00007C, "Member 'FQuestMissionTemplate::StringMESSAGE' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, CountSmallTalk) == 0x000080, "Member 'FQuestMissionTemplate::CountSmallTalk' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, CountIndication) == 0x000090, "Member 'FQuestMissionTemplate::CountIndication' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, ViaCoordinate) == 0x000098, "Member 'FQuestMissionTemplate::ViaCoordinate' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, MissionCoordinate) == 0x0000A8, "Member 'FQuestMissionTemplate::MissionCoordinate' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, CoordinateShowType) == 0x0000B4, "Member 'FQuestMissionTemplate::CoordinateShowType' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, EffectId) == 0x0000B8, "Member 'FQuestMissionTemplate::EffectId' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, RewardEXP) == 0x0000BC, "Member 'FQuestMissionTemplate::RewardEXP' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, RewardGOLD) == 0x0000C0, "Member 'FQuestMissionTemplate::RewardGOLD' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, RewardGoodsType) == 0x0000C4, "Member 'FQuestMissionTemplate::RewardGoodsType' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, RewardGoodsCount) == 0x0000C8, "Member 'FQuestMissionTemplate::RewardGoodsCount' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, RewardItemId01) == 0x0000D0, "Member 'FQuestMissionTemplate::RewardItemId01' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, RewardItemCount01) == 0x0000E0, "Member 'FQuestMissionTemplate::RewardItemCount01' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, RewardItemId02) == 0x0000E8, "Member 'FQuestMissionTemplate::RewardItemId02' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, RewardItemCount02) == 0x0000F8, "Member 'FQuestMissionTemplate::RewardItemCount02' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, TestValue) == 0x0000FC, "Member 'FQuestMissionTemplate::TestValue' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, AutomaticAction) == 0x000100, "Member 'FQuestMissionTemplate::AutomaticAction' has a wrong offset!");
static_assert(offsetof(FQuestMissionTemplate, IconKindType) == 0x000104, "Member 'FQuestMissionTemplate::IconKindType' has a wrong offset!");

// ScriptStruct MirMobile.QuestRelationRewardTemplate
// 0x00C0 (0x00C8 - 0x0008)
struct FQuestRelationRewardTemplate final : public FTableRowBase
{
public:
	int32                                         RelationRewardId;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EpisodeType;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RelationIDGroup;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardIcon;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardEXP;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGOLD;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsType;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsCount;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId01;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount01;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId02;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount02;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId03;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount03;                                 // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId04;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount04;                                 // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId05;                                    // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount05;                                 // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId06;                                    // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount06;                                 // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestRelationRewardTemplate) == 0x000008, "Wrong alignment on FQuestRelationRewardTemplate");
static_assert(sizeof(FQuestRelationRewardTemplate) == 0x0000C8, "Wrong size on FQuestRelationRewardTemplate");
static_assert(offsetof(FQuestRelationRewardTemplate, RelationRewardId) == 0x000008, "Member 'FQuestRelationRewardTemplate::RelationRewardId' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, EpisodeType) == 0x00000C, "Member 'FQuestRelationRewardTemplate::EpisodeType' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RelationIDGroup) == 0x000010, "Member 'FQuestRelationRewardTemplate::RelationIDGroup' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardIcon) == 0x000020, "Member 'FQuestRelationRewardTemplate::RewardIcon' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardEXP) == 0x000024, "Member 'FQuestRelationRewardTemplate::RewardEXP' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardGOLD) == 0x000028, "Member 'FQuestRelationRewardTemplate::RewardGOLD' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardGoodsType) == 0x00002C, "Member 'FQuestRelationRewardTemplate::RewardGoodsType' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardGoodsCount) == 0x000030, "Member 'FQuestRelationRewardTemplate::RewardGoodsCount' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemId01) == 0x000038, "Member 'FQuestRelationRewardTemplate::RewardItemId01' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemCount01) == 0x000048, "Member 'FQuestRelationRewardTemplate::RewardItemCount01' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemId02) == 0x000050, "Member 'FQuestRelationRewardTemplate::RewardItemId02' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemCount02) == 0x000060, "Member 'FQuestRelationRewardTemplate::RewardItemCount02' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemId03) == 0x000068, "Member 'FQuestRelationRewardTemplate::RewardItemId03' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemCount03) == 0x000078, "Member 'FQuestRelationRewardTemplate::RewardItemCount03' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemId04) == 0x000080, "Member 'FQuestRelationRewardTemplate::RewardItemId04' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemCount04) == 0x000090, "Member 'FQuestRelationRewardTemplate::RewardItemCount04' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemId05) == 0x000098, "Member 'FQuestRelationRewardTemplate::RewardItemId05' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemCount05) == 0x0000A8, "Member 'FQuestRelationRewardTemplate::RewardItemCount05' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemId06) == 0x0000B0, "Member 'FQuestRelationRewardTemplate::RewardItemId06' has a wrong offset!");
static_assert(offsetof(FQuestRelationRewardTemplate, RewardItemCount06) == 0x0000C0, "Member 'FQuestRelationRewardTemplate::RewardItemCount06' has a wrong offset!");

// ScriptStruct MirMobile.QuestRelationTemplate
// 0x0108 (0x0110 - 0x0008)
struct FQuestRelationTemplate final : public FTableRowBase
{
public:
	int32                                         RelationId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationCategory;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationMenuName;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationMenuIcon;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationListHide;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationQuestStep;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationQuestGrade;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationViewType;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationTitleSID;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationQuestInfoSID;                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationCompleteInfoSID;                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartScript;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ScriptPlayStageID;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 EndScript;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestMissionType                             MissionType;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionTarget;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter1;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter2;                                        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter3;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EnableObjectID;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSmallDialog>                   CountSmallTalk;                                    // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MissionStageId;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MissionCoordinate;                                 // 0x00A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PhaseExitCoordinate;                               // 0x00B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId;                                          // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardEXP;                                         // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGOLD;                                        // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsType;                                   // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsCount;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId01;                                    // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount01;                                 // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId02;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount02;                                 // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionInfoSID;                                    // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionCountShow;                                  // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestRelationTemplate) == 0x000008, "Wrong alignment on FQuestRelationTemplate");
static_assert(sizeof(FQuestRelationTemplate) == 0x000110, "Wrong size on FQuestRelationTemplate");
static_assert(offsetof(FQuestRelationTemplate, RelationId) == 0x000008, "Member 'FQuestRelationTemplate::RelationId' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RelationCategory) == 0x00000C, "Member 'FQuestRelationTemplate::RelationCategory' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RelationMenuName) == 0x000010, "Member 'FQuestRelationTemplate::RelationMenuName' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RelationMenuIcon) == 0x000014, "Member 'FQuestRelationTemplate::RelationMenuIcon' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RelationListHide) == 0x000018, "Member 'FQuestRelationTemplate::RelationListHide' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RelationQuestStep) == 0x00001C, "Member 'FQuestRelationTemplate::RelationQuestStep' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RelationQuestGrade) == 0x000020, "Member 'FQuestRelationTemplate::RelationQuestGrade' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RelationViewType) == 0x000024, "Member 'FQuestRelationTemplate::RelationViewType' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RelationTitleSID) == 0x000028, "Member 'FQuestRelationTemplate::RelationTitleSID' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RelationQuestInfoSID) == 0x00002C, "Member 'FQuestRelationTemplate::RelationQuestInfoSID' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RelationCompleteInfoSID) == 0x000030, "Member 'FQuestRelationTemplate::RelationCompleteInfoSID' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, StartScript) == 0x000038, "Member 'FQuestRelationTemplate::StartScript' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, ScriptPlayStageID) == 0x000048, "Member 'FQuestRelationTemplate::ScriptPlayStageID' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, EndScript) == 0x000058, "Member 'FQuestRelationTemplate::EndScript' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, MissionType) == 0x000068, "Member 'FQuestRelationTemplate::MissionType' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, MissionTarget) == 0x00006C, "Member 'FQuestRelationTemplate::MissionTarget' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, Parameter1) == 0x000070, "Member 'FQuestRelationTemplate::Parameter1' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, Parameter2) == 0x000074, "Member 'FQuestRelationTemplate::Parameter2' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, Parameter3) == 0x000078, "Member 'FQuestRelationTemplate::Parameter3' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, EnableObjectID) == 0x000080, "Member 'FQuestRelationTemplate::EnableObjectID' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, CountSmallTalk) == 0x000090, "Member 'FQuestRelationTemplate::CountSmallTalk' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, MissionStageId) == 0x0000A0, "Member 'FQuestRelationTemplate::MissionStageId' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, MissionCoordinate) == 0x0000A4, "Member 'FQuestRelationTemplate::MissionCoordinate' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, PhaseExitCoordinate) == 0x0000B0, "Member 'FQuestRelationTemplate::PhaseExitCoordinate' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, EffectId) == 0x0000BC, "Member 'FQuestRelationTemplate::EffectId' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RewardType) == 0x0000C0, "Member 'FQuestRelationTemplate::RewardType' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RewardEXP) == 0x0000C4, "Member 'FQuestRelationTemplate::RewardEXP' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RewardGOLD) == 0x0000C8, "Member 'FQuestRelationTemplate::RewardGOLD' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RewardGoodsType) == 0x0000CC, "Member 'FQuestRelationTemplate::RewardGoodsType' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RewardGoodsCount) == 0x0000D0, "Member 'FQuestRelationTemplate::RewardGoodsCount' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RewardItemId01) == 0x0000D8, "Member 'FQuestRelationTemplate::RewardItemId01' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RewardItemCount01) == 0x0000E8, "Member 'FQuestRelationTemplate::RewardItemCount01' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RewardItemId02) == 0x0000F0, "Member 'FQuestRelationTemplate::RewardItemId02' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, RewardItemCount02) == 0x000100, "Member 'FQuestRelationTemplate::RewardItemCount02' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, MissionInfoSID) == 0x000104, "Member 'FQuestRelationTemplate::MissionInfoSID' has a wrong offset!");
static_assert(offsetof(FQuestRelationTemplate, MissionCountShow) == 0x000108, "Member 'FQuestRelationTemplate::MissionCountShow' has a wrong offset!");

// ScriptStruct MirMobile.QuestRequestTemplate
// 0x0128 (0x0130 - 0x0008)
struct FQuestRequestTemplate final : public FTableRowBase
{
public:
	int32                                         RequestID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestIndex;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerType;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestGrade;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestCompleteHideList;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestShowType;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestIconType;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestStageVisible;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMember;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepNo;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestHint;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestStory;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StoryNo;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestCombatPower;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LockInvisible;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestOpenCondition;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestOpenConditionValue;                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AcceptMoveNPC;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AcceptNPC;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AcceptCinematicDialogueID;                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HintNPC;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HintCinematicDialogueID;                           // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapNpcShowType;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestMissionType                             MissionType;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestHelperType                              HelperType;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionTarget;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter1;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter2;                                        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter3;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parameter4;                                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EnableObjectID;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AutoBattleType;                                    // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PcTargetSearchDist;                                // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoordinateRange;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringMESSAGE;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountIndication;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestGetStageId;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestStageId;                                    // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ViaCoordinate;                                     // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                RequestCoordinate;                                 // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoordinateShowType;                                // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId;                                          // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentOpenPage;                                   // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSmallDialog>                   CountSmallTalk;                                    // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RequestTitleSID;                                   // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestObjectiveSID;                               // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardEXP;                                         // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGOLD;                                        // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsType;                                   // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardGoodsCount;                                  // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardItemId01;                                    // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount01;                                 // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardItemId02;                                    // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardItemCount02;                                 // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenConditionHide;                                 // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestRequestTemplate) == 0x000008, "Wrong alignment on FQuestRequestTemplate");
static_assert(sizeof(FQuestRequestTemplate) == 0x000130, "Wrong size on FQuestRequestTemplate");
static_assert(offsetof(FQuestRequestTemplate, RequestID) == 0x000008, "Member 'FQuestRequestTemplate::RequestID' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestIndex) == 0x00000C, "Member 'FQuestRequestTemplate::RequestIndex' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, ServerType) == 0x000010, "Member 'FQuestRequestTemplate::ServerType' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestGrade) == 0x000014, "Member 'FQuestRequestTemplate::RequestGrade' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, QuestCompleteHideList) == 0x000018, "Member 'FQuestRequestTemplate::QuestCompleteHideList' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestShowType) == 0x00001C, "Member 'FQuestRequestTemplate::RequestShowType' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestIconType) == 0x000020, "Member 'FQuestRequestTemplate::RequestIconType' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestStageVisible) == 0x000024, "Member 'FQuestRequestTemplate::RequestStageVisible' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, PartyMember) == 0x000028, "Member 'FQuestRequestTemplate::PartyMember' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, StepNo) == 0x00002C, "Member 'FQuestRequestTemplate::StepNo' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestHint) == 0x000030, "Member 'FQuestRequestTemplate::RequestHint' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestStory) == 0x000034, "Member 'FQuestRequestTemplate::RequestStory' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, StoryNo) == 0x000038, "Member 'FQuestRequestTemplate::StoryNo' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestCombatPower) == 0x00003C, "Member 'FQuestRequestTemplate::RequestCombatPower' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, LockInvisible) == 0x000040, "Member 'FQuestRequestTemplate::LockInvisible' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestOpenCondition) == 0x000044, "Member 'FQuestRequestTemplate::RequestOpenCondition' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestOpenConditionValue) == 0x000048, "Member 'FQuestRequestTemplate::RequestOpenConditionValue' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, AcceptMoveNPC) == 0x00004C, "Member 'FQuestRequestTemplate::AcceptMoveNPC' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, AcceptNPC) == 0x000050, "Member 'FQuestRequestTemplate::AcceptNPC' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, AcceptCinematicDialogueID) == 0x000054, "Member 'FQuestRequestTemplate::AcceptCinematicDialogueID' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, HintNPC) == 0x000058, "Member 'FQuestRequestTemplate::HintNPC' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, HintCinematicDialogueID) == 0x00005C, "Member 'FQuestRequestTemplate::HintCinematicDialogueID' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, MapNpcShowType) == 0x000060, "Member 'FQuestRequestTemplate::MapNpcShowType' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, MissionType) == 0x000064, "Member 'FQuestRequestTemplate::MissionType' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, HelperType) == 0x000068, "Member 'FQuestRequestTemplate::HelperType' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, MissionTarget) == 0x00006C, "Member 'FQuestRequestTemplate::MissionTarget' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, Parameter1) == 0x000070, "Member 'FQuestRequestTemplate::Parameter1' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, Parameter2) == 0x000074, "Member 'FQuestRequestTemplate::Parameter2' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, Parameter3) == 0x000078, "Member 'FQuestRequestTemplate::Parameter3' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, Parameter4) == 0x00007C, "Member 'FQuestRequestTemplate::Parameter4' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, EnableObjectID) == 0x000080, "Member 'FQuestRequestTemplate::EnableObjectID' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, AutoBattleType) == 0x000090, "Member 'FQuestRequestTemplate::AutoBattleType' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, PcTargetSearchDist) == 0x000094, "Member 'FQuestRequestTemplate::PcTargetSearchDist' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, CoordinateRange) == 0x000098, "Member 'FQuestRequestTemplate::CoordinateRange' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, StringMESSAGE) == 0x00009C, "Member 'FQuestRequestTemplate::StringMESSAGE' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, CountIndication) == 0x0000A0, "Member 'FQuestRequestTemplate::CountIndication' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestGetStageId) == 0x0000A4, "Member 'FQuestRequestTemplate::RequestGetStageId' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestStageId) == 0x0000A8, "Member 'FQuestRequestTemplate::RequestStageId' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, ViaCoordinate) == 0x0000B0, "Member 'FQuestRequestTemplate::ViaCoordinate' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestCoordinate) == 0x0000C0, "Member 'FQuestRequestTemplate::RequestCoordinate' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, CoordinateShowType) == 0x0000CC, "Member 'FQuestRequestTemplate::CoordinateShowType' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, EffectId) == 0x0000D0, "Member 'FQuestRequestTemplate::EffectId' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, ContentOpenPage) == 0x0000D4, "Member 'FQuestRequestTemplate::ContentOpenPage' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, CountSmallTalk) == 0x0000D8, "Member 'FQuestRequestTemplate::CountSmallTalk' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestTitleSID) == 0x0000E8, "Member 'FQuestRequestTemplate::RequestTitleSID' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RequestObjectiveSID) == 0x0000EC, "Member 'FQuestRequestTemplate::RequestObjectiveSID' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RewardEXP) == 0x0000F0, "Member 'FQuestRequestTemplate::RewardEXP' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RewardGOLD) == 0x0000F4, "Member 'FQuestRequestTemplate::RewardGOLD' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RewardGoodsType) == 0x0000F8, "Member 'FQuestRequestTemplate::RewardGoodsType' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RewardGoodsCount) == 0x0000FC, "Member 'FQuestRequestTemplate::RewardGoodsCount' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RewardItemId01) == 0x000100, "Member 'FQuestRequestTemplate::RewardItemId01' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RewardItemCount01) == 0x000110, "Member 'FQuestRequestTemplate::RewardItemCount01' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RewardItemId02) == 0x000118, "Member 'FQuestRequestTemplate::RewardItemId02' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, RewardItemCount02) == 0x000128, "Member 'FQuestRequestTemplate::RewardItemCount02' has a wrong offset!");
static_assert(offsetof(FQuestRequestTemplate, OpenConditionHide) == 0x00012C, "Member 'FQuestRequestTemplate::OpenConditionHide' has a wrong offset!");

// ScriptStruct MirMobile.QuestTagSetTemplate
// 0x0010 (0x0018 - 0x0008)
struct FQuestTagSetTemplate final : public FTableRowBase
{
public:
	int32                                         TagId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionIconId;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextIconId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestTagSetTemplate) == 0x000008, "Wrong alignment on FQuestTagSetTemplate");
static_assert(sizeof(FQuestTagSetTemplate) == 0x000018, "Wrong size on FQuestTagSetTemplate");
static_assert(offsetof(FQuestTagSetTemplate, TagId) == 0x000008, "Member 'FQuestTagSetTemplate::TagId' has a wrong offset!");
static_assert(offsetof(FQuestTagSetTemplate, ActionIconId) == 0x00000C, "Member 'FQuestTagSetTemplate::ActionIconId' has a wrong offset!");
static_assert(offsetof(FQuestTagSetTemplate, TextIconId) == 0x000010, "Member 'FQuestTagSetTemplate::TextIconId' has a wrong offset!");

// ScriptStruct MirMobile.RankingSchedulerTemplate
// 0x0028 (0x0030 - 0x0008)
struct FRankingSchedulerTemplate final : public FTableRowBase
{
public:
	int32                                         SchedulerId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryID;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonStartDay;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonEndDay;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankingSchedulerTemplate) == 0x000008, "Wrong alignment on FRankingSchedulerTemplate");
static_assert(sizeof(FRankingSchedulerTemplate) == 0x000030, "Wrong size on FRankingSchedulerTemplate");
static_assert(offsetof(FRankingSchedulerTemplate, SchedulerId) == 0x000008, "Member 'FRankingSchedulerTemplate::SchedulerId' has a wrong offset!");
static_assert(offsetof(FRankingSchedulerTemplate, CategoryID) == 0x00000C, "Member 'FRankingSchedulerTemplate::CategoryID' has a wrong offset!");
static_assert(offsetof(FRankingSchedulerTemplate, SeasonStartDay) == 0x000010, "Member 'FRankingSchedulerTemplate::SeasonStartDay' has a wrong offset!");
static_assert(offsetof(FRankingSchedulerTemplate, SeasonEndDay) == 0x000020, "Member 'FRankingSchedulerTemplate::SeasonEndDay' has a wrong offset!");

// ScriptStruct MirMobile.RankingSeasonRewardTemplate
// 0x00A0 (0x00A8 - 0x0008)
struct FRankingSeasonRewardTemplate final : public FTableRowBase
{
public:
	int32                                         SeasonRewardId;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardGroupId;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonGrade;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankNumber;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankEnd;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankType;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardType1;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardId1;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardItemEnchant01;                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardValue1;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardType2;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardId2;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardItemEnchant02;                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardValue2;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardType3;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardId3;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardItemEnchant03;                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardValue3;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardType4;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardId4;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardItemEnchant04;                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardValue4;                                // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardType5;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardId5;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardItemEnchant05;                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardValue5;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardType6;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardId6;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardItemEnchant06;                         // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardValue6;                                // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardType7;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardId7;                                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardItemEnchant07;                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardValue7;                                // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardType8;                                 // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardId8;                                   // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardItemEnchant08;                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardValue8;                                // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MailPresetId;                                      // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankingSeasonRewardTemplate) == 0x000008, "Wrong alignment on FRankingSeasonRewardTemplate");
static_assert(sizeof(FRankingSeasonRewardTemplate) == 0x0000A8, "Wrong size on FRankingSeasonRewardTemplate");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardId) == 0x000008, "Member 'FRankingSeasonRewardTemplate::SeasonRewardId' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardGroupId) == 0x00000C, "Member 'FRankingSeasonRewardTemplate::SeasonRewardGroupId' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonGrade) == 0x000010, "Member 'FRankingSeasonRewardTemplate::SeasonGrade' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, RankNumber) == 0x000014, "Member 'FRankingSeasonRewardTemplate::RankNumber' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, RankEnd) == 0x000018, "Member 'FRankingSeasonRewardTemplate::RankEnd' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, RankType) == 0x00001C, "Member 'FRankingSeasonRewardTemplate::RankType' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardType1) == 0x000020, "Member 'FRankingSeasonRewardTemplate::SeasonRewardType1' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardId1) == 0x000024, "Member 'FRankingSeasonRewardTemplate::SeasonRewardId1' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardItemEnchant01) == 0x000028, "Member 'FRankingSeasonRewardTemplate::SeasonRewardItemEnchant01' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardValue1) == 0x00002C, "Member 'FRankingSeasonRewardTemplate::SeasonRewardValue1' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardType2) == 0x000030, "Member 'FRankingSeasonRewardTemplate::SeasonRewardType2' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardId2) == 0x000034, "Member 'FRankingSeasonRewardTemplate::SeasonRewardId2' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardItemEnchant02) == 0x000038, "Member 'FRankingSeasonRewardTemplate::SeasonRewardItemEnchant02' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardValue2) == 0x00003C, "Member 'FRankingSeasonRewardTemplate::SeasonRewardValue2' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardType3) == 0x000040, "Member 'FRankingSeasonRewardTemplate::SeasonRewardType3' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardId3) == 0x000044, "Member 'FRankingSeasonRewardTemplate::SeasonRewardId3' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardItemEnchant03) == 0x000048, "Member 'FRankingSeasonRewardTemplate::SeasonRewardItemEnchant03' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardValue3) == 0x00004C, "Member 'FRankingSeasonRewardTemplate::SeasonRewardValue3' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardType4) == 0x000050, "Member 'FRankingSeasonRewardTemplate::SeasonRewardType4' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardId4) == 0x000054, "Member 'FRankingSeasonRewardTemplate::SeasonRewardId4' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardItemEnchant04) == 0x000058, "Member 'FRankingSeasonRewardTemplate::SeasonRewardItemEnchant04' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardValue4) == 0x00005C, "Member 'FRankingSeasonRewardTemplate::SeasonRewardValue4' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardType5) == 0x000060, "Member 'FRankingSeasonRewardTemplate::SeasonRewardType5' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardId5) == 0x000064, "Member 'FRankingSeasonRewardTemplate::SeasonRewardId5' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardItemEnchant05) == 0x000068, "Member 'FRankingSeasonRewardTemplate::SeasonRewardItemEnchant05' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardValue5) == 0x00006C, "Member 'FRankingSeasonRewardTemplate::SeasonRewardValue5' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardType6) == 0x000070, "Member 'FRankingSeasonRewardTemplate::SeasonRewardType6' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardId6) == 0x000074, "Member 'FRankingSeasonRewardTemplate::SeasonRewardId6' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardItemEnchant06) == 0x000078, "Member 'FRankingSeasonRewardTemplate::SeasonRewardItemEnchant06' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardValue6) == 0x00007C, "Member 'FRankingSeasonRewardTemplate::SeasonRewardValue6' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardType7) == 0x000080, "Member 'FRankingSeasonRewardTemplate::SeasonRewardType7' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardId7) == 0x000084, "Member 'FRankingSeasonRewardTemplate::SeasonRewardId7' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardItemEnchant07) == 0x000088, "Member 'FRankingSeasonRewardTemplate::SeasonRewardItemEnchant07' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardValue7) == 0x00008C, "Member 'FRankingSeasonRewardTemplate::SeasonRewardValue7' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardType8) == 0x000090, "Member 'FRankingSeasonRewardTemplate::SeasonRewardType8' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardId8) == 0x000094, "Member 'FRankingSeasonRewardTemplate::SeasonRewardId8' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardItemEnchant08) == 0x000098, "Member 'FRankingSeasonRewardTemplate::SeasonRewardItemEnchant08' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, SeasonRewardValue8) == 0x00009C, "Member 'FRankingSeasonRewardTemplate::SeasonRewardValue8' has a wrong offset!");
static_assert(offsetof(FRankingSeasonRewardTemplate, MailPresetId) == 0x0000A0, "Member 'FRankingSeasonRewardTemplate::MailPresetId' has a wrong offset!");

// ScriptStruct MirMobile.ResourceEtcTemplate
// 0x0018 (0x0020 - 0x0008)
struct FResourceEtcTemplate final : public FTableRowBase
{
public:
	int32                                         ResourceId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceEtcTemplate) == 0x000008, "Wrong alignment on FResourceEtcTemplate");
static_assert(sizeof(FResourceEtcTemplate) == 0x000020, "Wrong size on FResourceEtcTemplate");
static_assert(offsetof(FResourceEtcTemplate, ResourceId) == 0x000008, "Member 'FResourceEtcTemplate::ResourceId' has a wrong offset!");
static_assert(offsetof(FResourceEtcTemplate, Filename) == 0x000010, "Member 'FResourceEtcTemplate::Filename' has a wrong offset!");

// ScriptStruct MirMobile.SeasonSchedulerTemplate
// 0x0048 (0x0050 - 0x0008)
struct FSeasonSchedulerTemplate final : public FTableRowBase
{
public:
	int32                                         SeasonId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonName;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankingCategoryId;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSeasonLoop;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoopScheduleType;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SeasonStart;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopSeasonOpenTerm;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonLinkContentsType;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonContentsRulesId;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRewardGroupId;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonToolTip;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonGradeToolTip;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRankToolTip;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSeasonSchedulerTemplate) == 0x000008, "Wrong alignment on FSeasonSchedulerTemplate");
static_assert(sizeof(FSeasonSchedulerTemplate) == 0x000050, "Wrong size on FSeasonSchedulerTemplate");
static_assert(offsetof(FSeasonSchedulerTemplate, SeasonId) == 0x000008, "Member 'FSeasonSchedulerTemplate::SeasonId' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, SeasonName) == 0x00000C, "Member 'FSeasonSchedulerTemplate::SeasonName' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, RankingCategoryId) == 0x000010, "Member 'FSeasonSchedulerTemplate::RankingCategoryId' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, IsSeasonLoop) == 0x000014, "Member 'FSeasonSchedulerTemplate::IsSeasonLoop' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, LoopScheduleType) == 0x000018, "Member 'FSeasonSchedulerTemplate::LoopScheduleType' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, SeasonStart) == 0x000020, "Member 'FSeasonSchedulerTemplate::SeasonStart' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, LoopSeasonOpenTerm) == 0x000030, "Member 'FSeasonSchedulerTemplate::LoopSeasonOpenTerm' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, SeasonLinkContentsType) == 0x000034, "Member 'FSeasonSchedulerTemplate::SeasonLinkContentsType' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, SeasonContentsRulesId) == 0x000038, "Member 'FSeasonSchedulerTemplate::SeasonContentsRulesId' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, SeasonRewardGroupId) == 0x00003C, "Member 'FSeasonSchedulerTemplate::SeasonRewardGroupId' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, SeasonToolTip) == 0x000040, "Member 'FSeasonSchedulerTemplate::SeasonToolTip' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, SeasonGradeToolTip) == 0x000044, "Member 'FSeasonSchedulerTemplate::SeasonGradeToolTip' has a wrong offset!");
static_assert(offsetof(FSeasonSchedulerTemplate, SeasonRankToolTip) == 0x000048, "Member 'FSeasonSchedulerTemplate::SeasonRankToolTip' has a wrong offset!");

// ScriptStruct MirMobile.SequenceDialogueTemplate
// 0x00C8 (0x00D0 - 0x0008)
struct FSequenceDialogueTemplate final : public FTableRowBase
{
public:
	class FString                                 DialogueText;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_CHT;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_CHS;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_JPN;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_ENG;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_THA;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_IND;                                  // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_VIE;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_GER;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_SPA;                                  // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_POR;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueText_RUS;                                  // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialoguePostion                              DialogueType;                                      // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSequenceDialogueTemplate) == 0x000008, "Wrong alignment on FSequenceDialogueTemplate");
static_assert(sizeof(FSequenceDialogueTemplate) == 0x0000D0, "Wrong size on FSequenceDialogueTemplate");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText) == 0x000008, "Member 'FSequenceDialogueTemplate::DialogueText' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_CHT) == 0x000018, "Member 'FSequenceDialogueTemplate::DialogueText_CHT' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_CHS) == 0x000028, "Member 'FSequenceDialogueTemplate::DialogueText_CHS' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_JPN) == 0x000038, "Member 'FSequenceDialogueTemplate::DialogueText_JPN' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_ENG) == 0x000048, "Member 'FSequenceDialogueTemplate::DialogueText_ENG' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_THA) == 0x000058, "Member 'FSequenceDialogueTemplate::DialogueText_THA' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_IND) == 0x000068, "Member 'FSequenceDialogueTemplate::DialogueText_IND' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_VIE) == 0x000078, "Member 'FSequenceDialogueTemplate::DialogueText_VIE' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_GER) == 0x000088, "Member 'FSequenceDialogueTemplate::DialogueText_GER' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_SPA) == 0x000098, "Member 'FSequenceDialogueTemplate::DialogueText_SPA' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_POR) == 0x0000A8, "Member 'FSequenceDialogueTemplate::DialogueText_POR' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueText_RUS) == 0x0000B8, "Member 'FSequenceDialogueTemplate::DialogueText_RUS' has a wrong offset!");
static_assert(offsetof(FSequenceDialogueTemplate, DialogueType) == 0x0000C8, "Member 'FSequenceDialogueTemplate::DialogueType' has a wrong offset!");

// ScriptStruct MirMobile.SkillCostTemplate
// 0x0078 (0x0080 - 0x0008)
struct FSkillCostTemplate final : public FTableRowBase
{
public:
	int32                                         SkillCostId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillGroupID;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillLevel;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCLevel;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodLevel;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceLevel;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillGrade;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemGrade;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIcon;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpCostType;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpCostValue;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpCostType1;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpCostValue1;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpItemId;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpUseItemId;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpItemValue;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpItemId1;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpUseItemId1;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpItemValue1;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillLevelUpType;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillCombatPoint;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemMakeId;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SmiteBuffID;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SilenceUse;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StateConUse;                                       // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HaveBuffID;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HaveSmiteBuffID;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillCostTemplate) == 0x000008, "Wrong alignment on FSkillCostTemplate");
static_assert(sizeof(FSkillCostTemplate) == 0x000080, "Wrong size on FSkillCostTemplate");
static_assert(offsetof(FSkillCostTemplate, SkillCostId) == 0x000008, "Member 'FSkillCostTemplate::SkillCostId' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, SkillGroupID) == 0x00000C, "Member 'FSkillCostTemplate::SkillGroupID' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, SkillLevel) == 0x000010, "Member 'FSkillCostTemplate::SkillLevel' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, PCLevel) == 0x000014, "Member 'FSkillCostTemplate::PCLevel' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, BloodLevel) == 0x000018, "Member 'FSkillCostTemplate::BloodLevel' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, ForceLevel) == 0x00001C, "Member 'FSkillCostTemplate::ForceLevel' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, SkillGrade) == 0x000020, "Member 'FSkillCostTemplate::SkillGrade' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, ItemGrade) == 0x000024, "Member 'FSkillCostTemplate::ItemGrade' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, ItemIcon) == 0x000028, "Member 'FSkillCostTemplate::ItemIcon' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, LevelUpCostType) == 0x00002C, "Member 'FSkillCostTemplate::LevelUpCostType' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, LevelUpCostValue) == 0x000030, "Member 'FSkillCostTemplate::LevelUpCostValue' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, LevelUpCostType1) == 0x000034, "Member 'FSkillCostTemplate::LevelUpCostType1' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, LevelUpCostValue1) == 0x000038, "Member 'FSkillCostTemplate::LevelUpCostValue1' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, LevelUpItemId) == 0x00003C, "Member 'FSkillCostTemplate::LevelUpItemId' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, LevelUpUseItemId) == 0x000040, "Member 'FSkillCostTemplate::LevelUpUseItemId' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, LevelUpItemValue) == 0x000044, "Member 'FSkillCostTemplate::LevelUpItemValue' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, LevelUpItemId1) == 0x000048, "Member 'FSkillCostTemplate::LevelUpItemId1' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, LevelUpUseItemId1) == 0x00004C, "Member 'FSkillCostTemplate::LevelUpUseItemId1' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, LevelUpItemValue1) == 0x000050, "Member 'FSkillCostTemplate::LevelUpItemValue1' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, SkillLevelUpType) == 0x000054, "Member 'FSkillCostTemplate::SkillLevelUpType' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, SkillCombatPoint) == 0x000058, "Member 'FSkillCostTemplate::SkillCombatPoint' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, ItemMakeId) == 0x00005C, "Member 'FSkillCostTemplate::ItemMakeId' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, SmiteBuffID) == 0x000060, "Member 'FSkillCostTemplate::SmiteBuffID' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, SilenceUse) == 0x000070, "Member 'FSkillCostTemplate::SilenceUse' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, StateConUse) == 0x000074, "Member 'FSkillCostTemplate::StateConUse' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, HaveBuffID) == 0x000078, "Member 'FSkillCostTemplate::HaveBuffID' has a wrong offset!");
static_assert(offsetof(FSkillCostTemplate, HaveSmiteBuffID) == 0x00007C, "Member 'FSkillCostTemplate::HaveSmiteBuffID' has a wrong offset!");

// ScriptStruct MirMobile.ServerChangeCostTemplate
// 0x0028 (0x0030 - 0x0008)
struct FServerChangeCostTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeCondtionType;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLevel;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerChangeCostType;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedMoneyType;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedMoneyValue;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemUseId;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedItemCount;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerChangeCostTemplate) == 0x000008, "Wrong alignment on FServerChangeCostTemplate");
static_assert(sizeof(FServerChangeCostTemplate) == 0x000030, "Wrong size on FServerChangeCostTemplate");
static_assert(offsetof(FServerChangeCostTemplate, ID) == 0x000008, "Member 'FServerChangeCostTemplate::ID' has a wrong offset!");
static_assert(offsetof(FServerChangeCostTemplate, ChangeCondtionType) == 0x00000C, "Member 'FServerChangeCostTemplate::ChangeCondtionType' has a wrong offset!");
static_assert(offsetof(FServerChangeCostTemplate, MinLevel) == 0x000010, "Member 'FServerChangeCostTemplate::MinLevel' has a wrong offset!");
static_assert(offsetof(FServerChangeCostTemplate, MaxLevel) == 0x000014, "Member 'FServerChangeCostTemplate::MaxLevel' has a wrong offset!");
static_assert(offsetof(FServerChangeCostTemplate, ServerChangeCostType) == 0x000018, "Member 'FServerChangeCostTemplate::ServerChangeCostType' has a wrong offset!");
static_assert(offsetof(FServerChangeCostTemplate, NeedMoneyType) == 0x00001C, "Member 'FServerChangeCostTemplate::NeedMoneyType' has a wrong offset!");
static_assert(offsetof(FServerChangeCostTemplate, NeedMoneyValue) == 0x000020, "Member 'FServerChangeCostTemplate::NeedMoneyValue' has a wrong offset!");
static_assert(offsetof(FServerChangeCostTemplate, NeedItemUseId) == 0x000024, "Member 'FServerChangeCostTemplate::NeedItemUseId' has a wrong offset!");
static_assert(offsetof(FServerChangeCostTemplate, NeedItemCount) == 0x000028, "Member 'FServerChangeCostTemplate::NeedItemCount' has a wrong offset!");

// ScriptStruct MirMobile.UIShopPeriodTemplate
// 0x0080 (0x0088 - 0x0008)
struct FUIShopPeriodTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PeriodId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Period;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstRewardKindCount;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FirstRewardType;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FirstRewardId;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FirstRewardCount;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DailyRewardKindCount;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DailyRewardType;                                   // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DailyRewardId;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DailyRewardCount;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIShopPeriodTemplate) == 0x000008, "Wrong alignment on FUIShopPeriodTemplate");
static_assert(sizeof(FUIShopPeriodTemplate) == 0x000088, "Wrong size on FUIShopPeriodTemplate");
static_assert(offsetof(FUIShopPeriodTemplate, Name) == 0x000008, "Member 'FUIShopPeriodTemplate::Name' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, RowId) == 0x00000C, "Member 'FUIShopPeriodTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, PeriodId) == 0x000010, "Member 'FUIShopPeriodTemplate::PeriodId' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, Period) == 0x000014, "Member 'FUIShopPeriodTemplate::Period' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, FirstRewardKindCount) == 0x000018, "Member 'FUIShopPeriodTemplate::FirstRewardKindCount' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, FirstRewardType) == 0x000020, "Member 'FUIShopPeriodTemplate::FirstRewardType' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, FirstRewardId) == 0x000030, "Member 'FUIShopPeriodTemplate::FirstRewardId' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, FirstRewardCount) == 0x000040, "Member 'FUIShopPeriodTemplate::FirstRewardCount' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, DailyRewardKindCount) == 0x000050, "Member 'FUIShopPeriodTemplate::DailyRewardKindCount' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, DailyRewardType) == 0x000058, "Member 'FUIShopPeriodTemplate::DailyRewardType' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, DailyRewardId) == 0x000068, "Member 'FUIShopPeriodTemplate::DailyRewardId' has a wrong offset!");
static_assert(offsetof(FUIShopPeriodTemplate, DailyRewardCount) == 0x000078, "Member 'FUIShopPeriodTemplate::DailyRewardCount' has a wrong offset!");

// ScriptStruct MirMobile.ServerChangeUITemplate
// 0x0018 (0x0020 - 0x0008)
struct FServerChangeUITemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsShow;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleSId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleDescId;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonSid;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerChangeUITemplate) == 0x000008, "Wrong alignment on FServerChangeUITemplate");
static_assert(sizeof(FServerChangeUITemplate) == 0x000020, "Wrong size on FServerChangeUITemplate");
static_assert(offsetof(FServerChangeUITemplate, ID) == 0x000008, "Member 'FServerChangeUITemplate::ID' has a wrong offset!");
static_assert(offsetof(FServerChangeUITemplate, IsShow) == 0x00000C, "Member 'FServerChangeUITemplate::IsShow' has a wrong offset!");
static_assert(offsetof(FServerChangeUITemplate, TitleSId) == 0x000010, "Member 'FServerChangeUITemplate::TitleSId' has a wrong offset!");
static_assert(offsetof(FServerChangeUITemplate, TitleDescId) == 0x000014, "Member 'FServerChangeUITemplate::TitleDescId' has a wrong offset!");
static_assert(offsetof(FServerChangeUITemplate, ButtonSid) == 0x000018, "Member 'FServerChangeUITemplate::ButtonSid' has a wrong offset!");
static_assert(offsetof(FServerChangeUITemplate, Icon) == 0x00001C, "Member 'FServerChangeUITemplate::Icon' has a wrong offset!");

// ScriptStruct MirMobile.ShopGoodsTemplate
// 0x0020 (0x0028 - 0x0008)
struct FShopGoodsTemplate final : public FTableRowBase
{
public:
	int32                                         GoodsGroupId;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsType;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsCommodityId;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOnOff;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnOFF;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderNum;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShopGoodsTemplate) == 0x000008, "Wrong alignment on FShopGoodsTemplate");
static_assert(sizeof(FShopGoodsTemplate) == 0x000028, "Wrong size on FShopGoodsTemplate");
static_assert(offsetof(FShopGoodsTemplate, GoodsGroupId) == 0x000008, "Member 'FShopGoodsTemplate::GoodsGroupId' has a wrong offset!");
static_assert(offsetof(FShopGoodsTemplate, GoodsID) == 0x00000C, "Member 'FShopGoodsTemplate::GoodsID' has a wrong offset!");
static_assert(offsetof(FShopGoodsTemplate, GoodsType) == 0x000010, "Member 'FShopGoodsTemplate::GoodsType' has a wrong offset!");
static_assert(offsetof(FShopGoodsTemplate, GoodsCommodityId) == 0x000014, "Member 'FShopGoodsTemplate::GoodsCommodityId' has a wrong offset!");
static_assert(offsetof(FShopGoodsTemplate, DisplayOnOff) == 0x000018, "Member 'FShopGoodsTemplate::DisplayOnOff' has a wrong offset!");
static_assert(offsetof(FShopGoodsTemplate, OnOFF) == 0x00001C, "Member 'FShopGoodsTemplate::OnOFF' has a wrong offset!");
static_assert(offsetof(FShopGoodsTemplate, OrderNum) == 0x000020, "Member 'FShopGoodsTemplate::OrderNum' has a wrong offset!");

// ScriptStruct MirMobile.SkillStateTemplate
// 0x0018 (0x0020 - 0x0008)
struct FSkillStateTemplate final : public FTableRowBase
{
public:
	int32                                         StateId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameIconID;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateGroup;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControlGrade;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionGrade;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillStateTemplate) == 0x000008, "Wrong alignment on FSkillStateTemplate");
static_assert(sizeof(FSkillStateTemplate) == 0x000020, "Wrong size on FSkillStateTemplate");
static_assert(offsetof(FSkillStateTemplate, StateId) == 0x000008, "Member 'FSkillStateTemplate::StateId' has a wrong offset!");
static_assert(offsetof(FSkillStateTemplate, NameId) == 0x00000C, "Member 'FSkillStateTemplate::NameId' has a wrong offset!");
static_assert(offsetof(FSkillStateTemplate, NameIconID) == 0x000010, "Member 'FSkillStateTemplate::NameIconID' has a wrong offset!");
static_assert(offsetof(FSkillStateTemplate, StateGroup) == 0x000014, "Member 'FSkillStateTemplate::StateGroup' has a wrong offset!");
static_assert(offsetof(FSkillStateTemplate, ControlGrade) == 0x000018, "Member 'FSkillStateTemplate::ControlGrade' has a wrong offset!");
static_assert(offsetof(FSkillStateTemplate, ActionGrade) == 0x00001C, "Member 'FSkillStateTemplate::ActionGrade' has a wrong offset!");

// ScriptStruct MirMobile.SlangTemplate
// 0x0010 (0x0018 - 0x0008)
struct FSlangTemplate final : public FTableRowBase
{
public:
	class FString                                 SlangWord;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlangTemplate) == 0x000008, "Wrong alignment on FSlangTemplate");
static_assert(sizeof(FSlangTemplate) == 0x000018, "Wrong size on FSlangTemplate");
static_assert(offsetof(FSlangTemplate, SlangWord) == 0x000008, "Member 'FSlangTemplate::SlangWord' has a wrong offset!");

// ScriptStruct MirMobile.SmallTalkSettingTemplate
// 0x0020 (0x0028 - 0x0008)
struct FSmallTalkSettingTemplate final : public FTableRowBase
{
public:
	int32                                         UniqueId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmalltTalkDialogueId;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmallTalkType;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Condition;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLevel;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmallTalkSettingTemplate) == 0x000008, "Wrong alignment on FSmallTalkSettingTemplate");
static_assert(sizeof(FSmallTalkSettingTemplate) == 0x000028, "Wrong size on FSmallTalkSettingTemplate");
static_assert(offsetof(FSmallTalkSettingTemplate, UniqueId) == 0x000008, "Member 'FSmallTalkSettingTemplate::UniqueId' has a wrong offset!");
static_assert(offsetof(FSmallTalkSettingTemplate, StageID) == 0x00000C, "Member 'FSmallTalkSettingTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FSmallTalkSettingTemplate, SmalltTalkDialogueId) == 0x000010, "Member 'FSmallTalkSettingTemplate::SmalltTalkDialogueId' has a wrong offset!");
static_assert(offsetof(FSmallTalkSettingTemplate, SmallTalkType) == 0x000014, "Member 'FSmallTalkSettingTemplate::SmallTalkType' has a wrong offset!");
static_assert(offsetof(FSmallTalkSettingTemplate, Condition) == 0x000018, "Member 'FSmallTalkSettingTemplate::Condition' has a wrong offset!");
static_assert(offsetof(FSmallTalkSettingTemplate, Count) == 0x00001C, "Member 'FSmallTalkSettingTemplate::Count' has a wrong offset!");
static_assert(offsetof(FSmallTalkSettingTemplate, MinLevel) == 0x000020, "Member 'FSmallTalkSettingTemplate::MinLevel' has a wrong offset!");
static_assert(offsetof(FSmallTalkSettingTemplate, MaxLevel) == 0x000024, "Member 'FSmallTalkSettingTemplate::MaxLevel' has a wrong offset!");

// ScriptStruct MirMobile.StageTemplate
// 0x0188 (0x0190 - 0x0008)
struct FStageTemplate final : public FTableRowBase
{
public:
	int32                                         StageID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageNameSID;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestStageNameSID;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageType                                    StageType;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CameraPreset;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChannelId;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoadingId;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThemeID;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GraphicLevel;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TriggerLevel;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardPosition_X;                                // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardPosition_Y;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInitialEntrySequenceType                     SequenceType;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SequencePlayId;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Repeat;                                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageRule;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevivalId;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KickRevivalId;                                     // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoardOnOff;                                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnDataID;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillZone;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageLevel;                                        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockSize;                                         // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaVRadius;                                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanMeditation;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GuildSanctumId;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PKGuardOff;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PKtendency;                                        // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Durability;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathPenalty_Durability;                           // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathPenalty_Injure;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathPenalty_Steal;                                // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathPenalty_StealValue;                           // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathPenalty_EXP;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectWarpNeedCostId;                              // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectWarpNeedCostCount;                           // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectWarpNeedItemId;                              // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectWarpNeedItemUseId;                           // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapMiniInfo;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WayPoint;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SafetyArea;                                        // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SectorGrade;                                       // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AIRWALKBAN;                                        // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombatPower;                                       // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectWarpAble;                                    // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableLevel;                                       // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableQuest;                                       // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCombatPower;                                 // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableGreatBuildingID;                             // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableBuildingStep;                                // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetWayType;                                        // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GatheringZone;                                     // 0x011C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MiningZone;                                        // 0x0128(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpiritZone;                                        // 0x0134(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GetWayCoordinate;                                  // 0x0140(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionId_Inter;                                  // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionId_Siege;                                  // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominionId_StrongPoint;                            // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsConquestServer;                                  // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnWarpLocation;                                // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeverVisit;                                        // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeverVisitRevivalId;                               // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeverVisitNoVitality;                              // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConquerSeverNoVitality;                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildWarPlunderId;                                 // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnablePkGrade;                                     // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mapmark;                                           // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Union_Zone;                                        // 0x017D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E[0x2];                                      // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GuildAltarId;                                      // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0xC];                                      // 0x0184(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStageTemplate) == 0x000008, "Wrong alignment on FStageTemplate");
static_assert(sizeof(FStageTemplate) == 0x000190, "Wrong size on FStageTemplate");
static_assert(offsetof(FStageTemplate, StageID) == 0x000008, "Member 'FStageTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FStageTemplate, StageNameSID) == 0x00000C, "Member 'FStageTemplate::StageNameSID' has a wrong offset!");
static_assert(offsetof(FStageTemplate, QuestStageNameSID) == 0x000010, "Member 'FStageTemplate::QuestStageNameSID' has a wrong offset!");
static_assert(offsetof(FStageTemplate, StageType) == 0x000014, "Member 'FStageTemplate::StageType' has a wrong offset!");
static_assert(offsetof(FStageTemplate, CameraPreset) == 0x000018, "Member 'FStageTemplate::CameraPreset' has a wrong offset!");
static_assert(offsetof(FStageTemplate, ChannelId) == 0x00001C, "Member 'FStageTemplate::ChannelId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, LoadingId) == 0x000020, "Member 'FStageTemplate::LoadingId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, ThemeID) == 0x000024, "Member 'FStageTemplate::ThemeID' has a wrong offset!");
static_assert(offsetof(FStageTemplate, GraphicLevel) == 0x000028, "Member 'FStageTemplate::GraphicLevel' has a wrong offset!");
static_assert(offsetof(FStageTemplate, TriggerLevel) == 0x000038, "Member 'FStageTemplate::TriggerLevel' has a wrong offset!");
static_assert(offsetof(FStageTemplate, StandardPosition_X) == 0x000048, "Member 'FStageTemplate::StandardPosition_X' has a wrong offset!");
static_assert(offsetof(FStageTemplate, StandardPosition_Y) == 0x00004C, "Member 'FStageTemplate::StandardPosition_Y' has a wrong offset!");
static_assert(offsetof(FStageTemplate, SequenceType) == 0x000050, "Member 'FStageTemplate::SequenceType' has a wrong offset!");
static_assert(offsetof(FStageTemplate, SequencePlayId) == 0x000054, "Member 'FStageTemplate::SequencePlayId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, Repeat) == 0x000058, "Member 'FStageTemplate::Repeat' has a wrong offset!");
static_assert(offsetof(FStageTemplate, StageRule) == 0x00005C, "Member 'FStageTemplate::StageRule' has a wrong offset!");
static_assert(offsetof(FStageTemplate, RevivalId) == 0x000060, "Member 'FStageTemplate::RevivalId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, KickRevivalId) == 0x000064, "Member 'FStageTemplate::KickRevivalId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, BoardOnOff) == 0x000068, "Member 'FStageTemplate::BoardOnOff' has a wrong offset!");
static_assert(offsetof(FStageTemplate, SpawnDataID) == 0x00006C, "Member 'FStageTemplate::SpawnDataID' has a wrong offset!");
static_assert(offsetof(FStageTemplate, KillZone) == 0x000070, "Member 'FStageTemplate::KillZone' has a wrong offset!");
static_assert(offsetof(FStageTemplate, StageLevel) == 0x000074, "Member 'FStageTemplate::StageLevel' has a wrong offset!");
static_assert(offsetof(FStageTemplate, BlockSize) == 0x000078, "Member 'FStageTemplate::BlockSize' has a wrong offset!");
static_assert(offsetof(FStageTemplate, ChaVRadius) == 0x00007C, "Member 'FStageTemplate::ChaVRadius' has a wrong offset!");
static_assert(offsetof(FStageTemplate, CanMeditation) == 0x000080, "Member 'FStageTemplate::CanMeditation' has a wrong offset!");
static_assert(offsetof(FStageTemplate, GuildSanctumId) == 0x000084, "Member 'FStageTemplate::GuildSanctumId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, PKGuardOff) == 0x000088, "Member 'FStageTemplate::PKGuardOff' has a wrong offset!");
static_assert(offsetof(FStageTemplate, PKtendency) == 0x00008C, "Member 'FStageTemplate::PKtendency' has a wrong offset!");
static_assert(offsetof(FStageTemplate, Durability) == 0x000090, "Member 'FStageTemplate::Durability' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DeathPenalty_Durability) == 0x000094, "Member 'FStageTemplate::DeathPenalty_Durability' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DeathPenalty_Injure) == 0x000098, "Member 'FStageTemplate::DeathPenalty_Injure' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DeathPenalty_Steal) == 0x00009C, "Member 'FStageTemplate::DeathPenalty_Steal' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DeathPenalty_StealValue) == 0x0000A0, "Member 'FStageTemplate::DeathPenalty_StealValue' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DeathPenalty_EXP) == 0x0000A4, "Member 'FStageTemplate::DeathPenalty_EXP' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DirectWarpNeedCostId) == 0x0000A8, "Member 'FStageTemplate::DirectWarpNeedCostId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DirectWarpNeedCostCount) == 0x0000AC, "Member 'FStageTemplate::DirectWarpNeedCostCount' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DirectWarpNeedItemId) == 0x0000B0, "Member 'FStageTemplate::DirectWarpNeedItemId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DirectWarpNeedItemUseId) == 0x0000B4, "Member 'FStageTemplate::DirectWarpNeedItemUseId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, MapMiniInfo) == 0x0000B8, "Member 'FStageTemplate::MapMiniInfo' has a wrong offset!");
static_assert(offsetof(FStageTemplate, WayPoint) == 0x0000C8, "Member 'FStageTemplate::WayPoint' has a wrong offset!");
static_assert(offsetof(FStageTemplate, SafetyArea) == 0x0000D8, "Member 'FStageTemplate::SafetyArea' has a wrong offset!");
static_assert(offsetof(FStageTemplate, SectorGrade) == 0x0000E8, "Member 'FStageTemplate::SectorGrade' has a wrong offset!");
static_assert(offsetof(FStageTemplate, AIRWALKBAN) == 0x0000F8, "Member 'FStageTemplate::AIRWALKBAN' has a wrong offset!");
static_assert(offsetof(FStageTemplate, CombatPower) == 0x0000FC, "Member 'FStageTemplate::CombatPower' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DirectWarpAble) == 0x000100, "Member 'FStageTemplate::DirectWarpAble' has a wrong offset!");
static_assert(offsetof(FStageTemplate, EnableLevel) == 0x000104, "Member 'FStageTemplate::EnableLevel' has a wrong offset!");
static_assert(offsetof(FStageTemplate, EnableQuest) == 0x000108, "Member 'FStageTemplate::EnableQuest' has a wrong offset!");
static_assert(offsetof(FStageTemplate, EnableCombatPower) == 0x00010C, "Member 'FStageTemplate::EnableCombatPower' has a wrong offset!");
static_assert(offsetof(FStageTemplate, EnableGreatBuildingID) == 0x000110, "Member 'FStageTemplate::EnableGreatBuildingID' has a wrong offset!");
static_assert(offsetof(FStageTemplate, EnableBuildingStep) == 0x000114, "Member 'FStageTemplate::EnableBuildingStep' has a wrong offset!");
static_assert(offsetof(FStageTemplate, GetWayType) == 0x000118, "Member 'FStageTemplate::GetWayType' has a wrong offset!");
static_assert(offsetof(FStageTemplate, GatheringZone) == 0x00011C, "Member 'FStageTemplate::GatheringZone' has a wrong offset!");
static_assert(offsetof(FStageTemplate, MiningZone) == 0x000128, "Member 'FStageTemplate::MiningZone' has a wrong offset!");
static_assert(offsetof(FStageTemplate, SpiritZone) == 0x000134, "Member 'FStageTemplate::SpiritZone' has a wrong offset!");
static_assert(offsetof(FStageTemplate, GetWayCoordinate) == 0x000140, "Member 'FStageTemplate::GetWayCoordinate' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DominionId_Inter) == 0x00014C, "Member 'FStageTemplate::DominionId_Inter' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DominionId_Siege) == 0x000150, "Member 'FStageTemplate::DominionId_Siege' has a wrong offset!");
static_assert(offsetof(FStageTemplate, DominionId_StrongPoint) == 0x000154, "Member 'FStageTemplate::DominionId_StrongPoint' has a wrong offset!");
static_assert(offsetof(FStageTemplate, IsConquestServer) == 0x000158, "Member 'FStageTemplate::IsConquestServer' has a wrong offset!");
static_assert(offsetof(FStageTemplate, ReturnWarpLocation) == 0x00015C, "Member 'FStageTemplate::ReturnWarpLocation' has a wrong offset!");
static_assert(offsetof(FStageTemplate, IconID) == 0x000160, "Member 'FStageTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FStageTemplate, SeverVisit) == 0x000164, "Member 'FStageTemplate::SeverVisit' has a wrong offset!");
static_assert(offsetof(FStageTemplate, SeverVisitRevivalId) == 0x000168, "Member 'FStageTemplate::SeverVisitRevivalId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, SeverVisitNoVitality) == 0x00016C, "Member 'FStageTemplate::SeverVisitNoVitality' has a wrong offset!");
static_assert(offsetof(FStageTemplate, ConquerSeverNoVitality) == 0x000170, "Member 'FStageTemplate::ConquerSeverNoVitality' has a wrong offset!");
static_assert(offsetof(FStageTemplate, GuildWarPlunderId) == 0x000174, "Member 'FStageTemplate::GuildWarPlunderId' has a wrong offset!");
static_assert(offsetof(FStageTemplate, EnablePkGrade) == 0x000178, "Member 'FStageTemplate::EnablePkGrade' has a wrong offset!");
static_assert(offsetof(FStageTemplate, Mapmark) == 0x00017C, "Member 'FStageTemplate::Mapmark' has a wrong offset!");
static_assert(offsetof(FStageTemplate, Union_Zone) == 0x00017D, "Member 'FStageTemplate::Union_Zone' has a wrong offset!");
static_assert(offsetof(FStageTemplate, GuildAltarId) == 0x000180, "Member 'FStageTemplate::GuildAltarId' has a wrong offset!");

// ScriptStruct MirMobile.StatusTemplate
// 0x0070 (0x0078 - 0x0008)
struct FStatusTemplate final : public FTableRowBase
{
public:
	int32                                         StatusId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status_CalculateID;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddStatusType;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddStatusID;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddStatusValue;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RateAddStatusID;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringID;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpgradeStringId;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconBlood;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconMasteryOff;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconMasteryOn;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoViewType;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoViewOrder;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InfoViewRate;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 InfoFocus;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 StatusInfoId;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         IconStatusInfo;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueFormat;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatusTemplate) == 0x000008, "Wrong alignment on FStatusTemplate");
static_assert(sizeof(FStatusTemplate) == 0x000078, "Wrong size on FStatusTemplate");
static_assert(offsetof(FStatusTemplate, StatusId) == 0x000008, "Member 'FStatusTemplate::StatusId' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, Status_CalculateID) == 0x00000C, "Member 'FStatusTemplate::Status_CalculateID' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, AddStatusType) == 0x000010, "Member 'FStatusTemplate::AddStatusType' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, AddStatusID) == 0x000014, "Member 'FStatusTemplate::AddStatusID' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, AddStatusValue) == 0x000018, "Member 'FStatusTemplate::AddStatusValue' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, RateAddStatusID) == 0x00001C, "Member 'FStatusTemplate::RateAddStatusID' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, StringID) == 0x000020, "Member 'FStatusTemplate::StringID' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, UpgradeStringId) == 0x000024, "Member 'FStatusTemplate::UpgradeStringId' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, IconBlood) == 0x000028, "Member 'FStatusTemplate::IconBlood' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, IconMasteryOff) == 0x00002C, "Member 'FStatusTemplate::IconMasteryOff' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, IconMasteryOn) == 0x000030, "Member 'FStatusTemplate::IconMasteryOn' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, InfoViewType) == 0x000034, "Member 'FStatusTemplate::InfoViewType' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, InfoViewOrder) == 0x000038, "Member 'FStatusTemplate::InfoViewOrder' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, InfoViewRate) == 0x000040, "Member 'FStatusTemplate::InfoViewRate' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, InfoFocus) == 0x000050, "Member 'FStatusTemplate::InfoFocus' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, StatusInfoId) == 0x000060, "Member 'FStatusTemplate::StatusInfoId' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, IconStatusInfo) == 0x000070, "Member 'FStatusTemplate::IconStatusInfo' has a wrong offset!");
static_assert(offsetof(FStatusTemplate, ValueFormat) == 0x000074, "Member 'FStatusTemplate::ValueFormat' has a wrong offset!");

// ScriptStruct MirMobile.UserEventTemplate
// 0x00C0 (0x00C8 - 0x0008)
struct FUserEventTemplate final : public FTableRowBase
{
public:
	int32                                         EventId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventName;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldType;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventContentsid;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinLevel;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMaxLevel;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStep;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCondition;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CloseCondition;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CloseTime;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UiButtonUrl;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UiButtonIcon;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UiButtonImg;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UiButtonName;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UiInPresetUrl;                                     // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UiInPresetLocal;                                   // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UiOrderNum;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemUseId;                                 // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemCnt;                                   // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardLimit;                                       // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventEndSort;                                      // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToolTipID;                                         // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttendanceBonusCycle;                              // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserEventTemplate) == 0x000008, "Wrong alignment on FUserEventTemplate");
static_assert(sizeof(FUserEventTemplate) == 0x0000C8, "Wrong size on FUserEventTemplate");
static_assert(offsetof(FUserEventTemplate, EventId) == 0x000008, "Member 'FUserEventTemplate::EventId' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, EventName) == 0x00000C, "Member 'FUserEventTemplate::EventName' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, EventType) == 0x000010, "Member 'FUserEventTemplate::EventType' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, WorldType) == 0x000014, "Member 'FUserEventTemplate::WorldType' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, EventContentsid) == 0x000018, "Member 'FUserEventTemplate::EventContentsid' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, EventMinLevel) == 0x00001C, "Member 'FUserEventTemplate::EventMinLevel' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, EventMaxLevel) == 0x000020, "Member 'FUserEventTemplate::EventMaxLevel' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, MaxStep) == 0x000024, "Member 'FUserEventTemplate::MaxStep' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, StartCondition) == 0x000028, "Member 'FUserEventTemplate::StartCondition' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, StartTime) == 0x000030, "Member 'FUserEventTemplate::StartTime' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, CloseCondition) == 0x000040, "Member 'FUserEventTemplate::CloseCondition' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, CloseTime) == 0x000048, "Member 'FUserEventTemplate::CloseTime' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, UiButtonUrl) == 0x000058, "Member 'FUserEventTemplate::UiButtonUrl' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, UiButtonIcon) == 0x000068, "Member 'FUserEventTemplate::UiButtonIcon' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, UiButtonImg) == 0x000070, "Member 'FUserEventTemplate::UiButtonImg' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, UiButtonName) == 0x000080, "Member 'FUserEventTemplate::UiButtonName' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, UiInPresetUrl) == 0x000088, "Member 'FUserEventTemplate::UiInPresetUrl' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, UiInPresetLocal) == 0x000098, "Member 'FUserEventTemplate::UiInPresetLocal' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, UiOrderNum) == 0x0000A8, "Member 'FUserEventTemplate::UiOrderNum' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, MaterialItemUseId) == 0x0000AC, "Member 'FUserEventTemplate::MaterialItemUseId' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, MaterialItemCnt) == 0x0000B0, "Member 'FUserEventTemplate::MaterialItemCnt' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, RewardLimit) == 0x0000B4, "Member 'FUserEventTemplate::RewardLimit' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, EventEndSort) == 0x0000B8, "Member 'FUserEventTemplate::EventEndSort' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, ToolTipID) == 0x0000BC, "Member 'FUserEventTemplate::ToolTipID' has a wrong offset!");
static_assert(offsetof(FUserEventTemplate, AttendanceBonusCycle) == 0x0000C0, "Member 'FUserEventTemplate::AttendanceBonusCycle' has a wrong offset!");

// ScriptStruct MirMobile.StringBuiltinTemplate
// 0x00C8 (0x00D0 - 0x0008)
struct FStringBuiltinTemplate final : public FTableRowBase
{
public:
	int32                                         StringID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextKr;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHT;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHS;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JPN;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ENG;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 THA;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IND;                                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VIE;                                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GER;                                               // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SPA;                                               // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 POR;                                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RUS;                                               // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringBuiltinTemplate) == 0x000008, "Wrong alignment on FStringBuiltinTemplate");
static_assert(sizeof(FStringBuiltinTemplate) == 0x0000D0, "Wrong size on FStringBuiltinTemplate");
static_assert(offsetof(FStringBuiltinTemplate, StringID) == 0x000008, "Member 'FStringBuiltinTemplate::StringID' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, TextKr) == 0x000010, "Member 'FStringBuiltinTemplate::TextKr' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, CHT) == 0x000020, "Member 'FStringBuiltinTemplate::CHT' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, CHS) == 0x000030, "Member 'FStringBuiltinTemplate::CHS' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, JPN) == 0x000040, "Member 'FStringBuiltinTemplate::JPN' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, ENG) == 0x000050, "Member 'FStringBuiltinTemplate::ENG' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, THA) == 0x000060, "Member 'FStringBuiltinTemplate::THA' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, IND) == 0x000070, "Member 'FStringBuiltinTemplate::IND' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, VIE) == 0x000080, "Member 'FStringBuiltinTemplate::VIE' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, GER) == 0x000090, "Member 'FStringBuiltinTemplate::GER' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, SPA) == 0x0000A0, "Member 'FStringBuiltinTemplate::SPA' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, POR) == 0x0000B0, "Member 'FStringBuiltinTemplate::POR' has a wrong offset!");
static_assert(offsetof(FStringBuiltinTemplate, RUS) == 0x0000C0, "Member 'FStringBuiltinTemplate::RUS' has a wrong offset!");

// ScriptStruct MirMobile.StringErrorTemplate
// 0x0020 (0x0028 - 0x0008)
struct FStringErrorTemplate final : public FTableRowBase
{
public:
	int32                                         ErrorId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorType;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LinkStringId;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LinkStringDev;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringErrorTemplate) == 0x000008, "Wrong alignment on FStringErrorTemplate");
static_assert(sizeof(FStringErrorTemplate) == 0x000028, "Wrong size on FStringErrorTemplate");
static_assert(offsetof(FStringErrorTemplate, ErrorId) == 0x000008, "Member 'FStringErrorTemplate::ErrorId' has a wrong offset!");
static_assert(offsetof(FStringErrorTemplate, ErrorType) == 0x00000C, "Member 'FStringErrorTemplate::ErrorType' has a wrong offset!");
static_assert(offsetof(FStringErrorTemplate, LinkStringId) == 0x000010, "Member 'FStringErrorTemplate::LinkStringId' has a wrong offset!");
static_assert(offsetof(FStringErrorTemplate, LinkStringDev) == 0x000018, "Member 'FStringErrorTemplate::LinkStringDev' has a wrong offset!");

// ScriptStruct MirMobile.StringMailTemplate
// 0x00C8 (0x00D0 - 0x0008)
struct FStringMailTemplate final : public FTableRowBase
{
public:
	int32                                         StringID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextColorId;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextKr;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHT;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHS;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JPN;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ENG;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 THA;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IND;                                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VIE;                                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GER;                                               // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SPA;                                               // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 POR;                                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RUS;                                               // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringMailTemplate) == 0x000008, "Wrong alignment on FStringMailTemplate");
static_assert(sizeof(FStringMailTemplate) == 0x0000D0, "Wrong size on FStringMailTemplate");
static_assert(offsetof(FStringMailTemplate, StringID) == 0x000008, "Member 'FStringMailTemplate::StringID' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, TextColorId) == 0x00000C, "Member 'FStringMailTemplate::TextColorId' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, TextKr) == 0x000010, "Member 'FStringMailTemplate::TextKr' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, CHT) == 0x000020, "Member 'FStringMailTemplate::CHT' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, CHS) == 0x000030, "Member 'FStringMailTemplate::CHS' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, JPN) == 0x000040, "Member 'FStringMailTemplate::JPN' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, ENG) == 0x000050, "Member 'FStringMailTemplate::ENG' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, THA) == 0x000060, "Member 'FStringMailTemplate::THA' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, IND) == 0x000070, "Member 'FStringMailTemplate::IND' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, VIE) == 0x000080, "Member 'FStringMailTemplate::VIE' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, GER) == 0x000090, "Member 'FStringMailTemplate::GER' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, SPA) == 0x0000A0, "Member 'FStringMailTemplate::SPA' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, POR) == 0x0000B0, "Member 'FStringMailTemplate::POR' has a wrong offset!");
static_assert(offsetof(FStringMailTemplate, RUS) == 0x0000C0, "Member 'FStringMailTemplate::RUS' has a wrong offset!");

// ScriptStruct MirMobile.StringQuestTemplate
// 0x00C8 (0x00D0 - 0x0008)
struct FStringQuestTemplate final : public FTableRowBase
{
public:
	int32                                         StringID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGTextType;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextKr;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHT;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHS;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JPN;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ENG;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 THA;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IND;                                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VIE;                                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GER;                                               // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SPA;                                               // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 POR;                                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RUS;                                               // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringQuestTemplate) == 0x000008, "Wrong alignment on FStringQuestTemplate");
static_assert(sizeof(FStringQuestTemplate) == 0x0000D0, "Wrong size on FStringQuestTemplate");
static_assert(offsetof(FStringQuestTemplate, StringID) == 0x000008, "Member 'FStringQuestTemplate::StringID' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, BGTextType) == 0x00000C, "Member 'FStringQuestTemplate::BGTextType' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, TextKr) == 0x000010, "Member 'FStringQuestTemplate::TextKr' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, CHT) == 0x000020, "Member 'FStringQuestTemplate::CHT' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, CHS) == 0x000030, "Member 'FStringQuestTemplate::CHS' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, JPN) == 0x000040, "Member 'FStringQuestTemplate::JPN' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, ENG) == 0x000050, "Member 'FStringQuestTemplate::ENG' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, THA) == 0x000060, "Member 'FStringQuestTemplate::THA' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, IND) == 0x000070, "Member 'FStringQuestTemplate::IND' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, VIE) == 0x000080, "Member 'FStringQuestTemplate::VIE' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, GER) == 0x000090, "Member 'FStringQuestTemplate::GER' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, SPA) == 0x0000A0, "Member 'FStringQuestTemplate::SPA' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, POR) == 0x0000B0, "Member 'FStringQuestTemplate::POR' has a wrong offset!");
static_assert(offsetof(FStringQuestTemplate, RUS) == 0x0000C0, "Member 'FStringQuestTemplate::RUS' has a wrong offset!");

// ScriptStruct MirMobile.StringTemplate
// 0x00C8 (0x00D0 - 0x0008)
struct FStringTemplate final : public FTableRowBase
{
public:
	int32                                         StringID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextKr;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHT;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHS;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JPN;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ENG;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 THA;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IND;                                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VIE;                                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GER;                                               // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SPA;                                               // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 POR;                                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RUS;                                               // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStringTemplate) == 0x000008, "Wrong alignment on FStringTemplate");
static_assert(sizeof(FStringTemplate) == 0x0000D0, "Wrong size on FStringTemplate");
static_assert(offsetof(FStringTemplate, StringID) == 0x000008, "Member 'FStringTemplate::StringID' has a wrong offset!");
static_assert(offsetof(FStringTemplate, TextKr) == 0x000010, "Member 'FStringTemplate::TextKr' has a wrong offset!");
static_assert(offsetof(FStringTemplate, CHT) == 0x000020, "Member 'FStringTemplate::CHT' has a wrong offset!");
static_assert(offsetof(FStringTemplate, CHS) == 0x000030, "Member 'FStringTemplate::CHS' has a wrong offset!");
static_assert(offsetof(FStringTemplate, JPN) == 0x000040, "Member 'FStringTemplate::JPN' has a wrong offset!");
static_assert(offsetof(FStringTemplate, ENG) == 0x000050, "Member 'FStringTemplate::ENG' has a wrong offset!");
static_assert(offsetof(FStringTemplate, THA) == 0x000060, "Member 'FStringTemplate::THA' has a wrong offset!");
static_assert(offsetof(FStringTemplate, IND) == 0x000070, "Member 'FStringTemplate::IND' has a wrong offset!");
static_assert(offsetof(FStringTemplate, VIE) == 0x000080, "Member 'FStringTemplate::VIE' has a wrong offset!");
static_assert(offsetof(FStringTemplate, GER) == 0x000090, "Member 'FStringTemplate::GER' has a wrong offset!");
static_assert(offsetof(FStringTemplate, SPA) == 0x0000A0, "Member 'FStringTemplate::SPA' has a wrong offset!");
static_assert(offsetof(FStringTemplate, POR) == 0x0000B0, "Member 'FStringTemplate::POR' has a wrong offset!");
static_assert(offsetof(FStringTemplate, RUS) == 0x0000C0, "Member 'FStringTemplate::RUS' has a wrong offset!");

// ScriptStruct MirMobile.StrongPointTemplate
// 0x0030 (0x0038 - 0x0008)
struct FStrongPointTemplate final : public FTableRowBase
{
public:
	int32                                         StrongPointId;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabId;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameStrId;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinTargetID;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevivalId;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_DominionId;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time_TakeOver;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time_TakeOverReady;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildDevId;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildDevLevel;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStrongPointTemplate) == 0x000008, "Wrong alignment on FStrongPointTemplate");
static_assert(sizeof(FStrongPointTemplate) == 0x000038, "Wrong size on FStrongPointTemplate");
static_assert(offsetof(FStrongPointTemplate, StrongPointId) == 0x000008, "Member 'FStrongPointTemplate::StrongPointId' has a wrong offset!");
static_assert(offsetof(FStrongPointTemplate, TabId) == 0x00000C, "Member 'FStrongPointTemplate::TabId' has a wrong offset!");
static_assert(offsetof(FStrongPointTemplate, NameStrId) == 0x000010, "Member 'FStrongPointTemplate::NameStrId' has a wrong offset!");
static_assert(offsetof(FStrongPointTemplate, StageID) == 0x000014, "Member 'FStrongPointTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FStrongPointTemplate, WinTargetID) == 0x000018, "Member 'FStrongPointTemplate::WinTargetID' has a wrong offset!");
static_assert(offsetof(FStrongPointTemplate, RevivalId) == 0x00001C, "Member 'FStrongPointTemplate::RevivalId' has a wrong offset!");
static_assert(offsetof(FStrongPointTemplate, Reward_DominionId) == 0x000020, "Member 'FStrongPointTemplate::Reward_DominionId' has a wrong offset!");
static_assert(offsetof(FStrongPointTemplate, Time_TakeOver) == 0x000024, "Member 'FStrongPointTemplate::Time_TakeOver' has a wrong offset!");
static_assert(offsetof(FStrongPointTemplate, Time_TakeOverReady) == 0x000028, "Member 'FStrongPointTemplate::Time_TakeOverReady' has a wrong offset!");
static_assert(offsetof(FStrongPointTemplate, GuildDevId) == 0x00002C, "Member 'FStrongPointTemplate::GuildDevId' has a wrong offset!");
static_assert(offsetof(FStrongPointTemplate, GuildDevLevel) == 0x000030, "Member 'FStrongPointTemplate::GuildDevLevel' has a wrong offset!");

// ScriptStruct MirMobile.SystemDataConquerServerTemplate
// 0x0020 (0x0028 - 0x0008)
struct FSystemDataConquerServerTemplate final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Parameter;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionType;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionValue;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSystemDataConquerServerTemplate) == 0x000008, "Wrong alignment on FSystemDataConquerServerTemplate");
static_assert(sizeof(FSystemDataConquerServerTemplate) == 0x000028, "Wrong size on FSystemDataConquerServerTemplate");
static_assert(offsetof(FSystemDataConquerServerTemplate, ID) == 0x000008, "Member 'FSystemDataConquerServerTemplate::ID' has a wrong offset!");
static_assert(offsetof(FSystemDataConquerServerTemplate, Parameter) == 0x000010, "Member 'FSystemDataConquerServerTemplate::Parameter' has a wrong offset!");
static_assert(offsetof(FSystemDataConquerServerTemplate, OptionType) == 0x000020, "Member 'FSystemDataConquerServerTemplate::OptionType' has a wrong offset!");
static_assert(offsetof(FSystemDataConquerServerTemplate, OptionValue) == 0x000024, "Member 'FSystemDataConquerServerTemplate::OptionValue' has a wrong offset!");

// ScriptStruct MirMobile.TotalMenuContentsTemplate
// 0x0020 (0x0028 - 0x0008)
struct FTotalMenuContentsTemplate final : public FTableRowBase
{
public:
	int32                                         ContentsId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuCostMainType1;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuCostSubType1;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuCostMainType2;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuCostSubType2;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuCostMainType3;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuCostSubType3;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTotalMenuContentsTemplate) == 0x000008, "Wrong alignment on FTotalMenuContentsTemplate");
static_assert(sizeof(FTotalMenuContentsTemplate) == 0x000028, "Wrong size on FTotalMenuContentsTemplate");
static_assert(offsetof(FTotalMenuContentsTemplate, ContentsId) == 0x000008, "Member 'FTotalMenuContentsTemplate::ContentsId' has a wrong offset!");
static_assert(offsetof(FTotalMenuContentsTemplate, MenuCostMainType1) == 0x00000C, "Member 'FTotalMenuContentsTemplate::MenuCostMainType1' has a wrong offset!");
static_assert(offsetof(FTotalMenuContentsTemplate, MenuCostSubType1) == 0x000010, "Member 'FTotalMenuContentsTemplate::MenuCostSubType1' has a wrong offset!");
static_assert(offsetof(FTotalMenuContentsTemplate, MenuCostMainType2) == 0x000014, "Member 'FTotalMenuContentsTemplate::MenuCostMainType2' has a wrong offset!");
static_assert(offsetof(FTotalMenuContentsTemplate, MenuCostSubType2) == 0x000018, "Member 'FTotalMenuContentsTemplate::MenuCostSubType2' has a wrong offset!");
static_assert(offsetof(FTotalMenuContentsTemplate, MenuCostMainType3) == 0x00001C, "Member 'FTotalMenuContentsTemplate::MenuCostMainType3' has a wrong offset!");
static_assert(offsetof(FTotalMenuContentsTemplate, MenuCostSubType3) == 0x000020, "Member 'FTotalMenuContentsTemplate::MenuCostSubType3' has a wrong offset!");

// ScriptStruct MirMobile.TotalMenuTemplate
// 0x0058 (0x0060 - 0x0008)
struct FTotalMenuTemplate final : public FTableRowBase
{
public:
	int32                                         MenuId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupType;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuDepth;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuName;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuSymbol;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ChildMenu;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChildContentsId;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LinkContents;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IndicatorContentsId;                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CheckAbleButton;                                   // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTotalMenuTemplate) == 0x000008, "Wrong alignment on FTotalMenuTemplate");
static_assert(sizeof(FTotalMenuTemplate) == 0x000060, "Wrong size on FTotalMenuTemplate");
static_assert(offsetof(FTotalMenuTemplate, MenuId) == 0x000008, "Member 'FTotalMenuTemplate::MenuId' has a wrong offset!");
static_assert(offsetof(FTotalMenuTemplate, GroupType) == 0x00000C, "Member 'FTotalMenuTemplate::GroupType' has a wrong offset!");
static_assert(offsetof(FTotalMenuTemplate, MenuDepth) == 0x000010, "Member 'FTotalMenuTemplate::MenuDepth' has a wrong offset!");
static_assert(offsetof(FTotalMenuTemplate, MenuName) == 0x000014, "Member 'FTotalMenuTemplate::MenuName' has a wrong offset!");
static_assert(offsetof(FTotalMenuTemplate, MenuSymbol) == 0x000018, "Member 'FTotalMenuTemplate::MenuSymbol' has a wrong offset!");
static_assert(offsetof(FTotalMenuTemplate, ChildMenu) == 0x000020, "Member 'FTotalMenuTemplate::ChildMenu' has a wrong offset!");
static_assert(offsetof(FTotalMenuTemplate, ChildContentsId) == 0x000030, "Member 'FTotalMenuTemplate::ChildContentsId' has a wrong offset!");
static_assert(offsetof(FTotalMenuTemplate, LinkContents) == 0x000040, "Member 'FTotalMenuTemplate::LinkContents' has a wrong offset!");
static_assert(offsetof(FTotalMenuTemplate, IndicatorContentsId) == 0x000048, "Member 'FTotalMenuTemplate::IndicatorContentsId' has a wrong offset!");
static_assert(offsetof(FTotalMenuTemplate, CheckAbleButton) == 0x000058, "Member 'FTotalMenuTemplate::CheckAbleButton' has a wrong offset!");

// ScriptStruct MirMobile.TotemTemplate
// 0x0028 (0x0030 - 0x0008)
struct FTotemTemplate final : public FTableRowBase
{
public:
	int32                                         TotemId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceId;                                        // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillAttackID;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cleartime;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AniSequence;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTotemTemplate) == 0x000008, "Wrong alignment on FTotemTemplate");
static_assert(sizeof(FTotemTemplate) == 0x000030, "Wrong size on FTotemTemplate");
static_assert(offsetof(FTotemTemplate, TotemId) == 0x000008, "Member 'FTotemTemplate::TotemId' has a wrong offset!");
static_assert(offsetof(FTotemTemplate, ResourceId) == 0x00000C, "Member 'FTotemTemplate::ResourceId' has a wrong offset!");
static_assert(offsetof(FTotemTemplate, SkillAttackID) == 0x000014, "Member 'FTotemTemplate::SkillAttackID' has a wrong offset!");
static_assert(offsetof(FTotemTemplate, Cleartime) == 0x000018, "Member 'FTotemTemplate::Cleartime' has a wrong offset!");
static_assert(offsetof(FTotemTemplate, AniSequence) == 0x000020, "Member 'FTotemTemplate::AniSequence' has a wrong offset!");

// ScriptStruct MirMobile.TradeItemType
// 0x0018 (0x0018 - 0x0000)
struct FTradeItemType final
{
public:
	int32                                         MainType;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SubType;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTradeItemType) == 0x000008, "Wrong alignment on FTradeItemType");
static_assert(sizeof(FTradeItemType) == 0x000018, "Wrong size on FTradeItemType");
static_assert(offsetof(FTradeItemType, MainType) == 0x000000, "Member 'FTradeItemType::MainType' has a wrong offset!");
static_assert(offsetof(FTradeItemType, SubType) == 0x000008, "Member 'FTradeItemType::SubType' has a wrong offset!");

// ScriptStruct MirMobile.TradeMenuTemplate
// 0x0030 (0x0038 - 0x0008)
struct FTradeMenuTemplate final : public FTableRowBase
{
public:
	int32                                         TradeId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TradeMainGroup;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TradeMainGroupString;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TradeSubList;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TradeSubListString;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilterSmelting;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilterClass;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilterGrade;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTradeItemType>                 ItemType;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTradeMenuTemplate) == 0x000008, "Wrong alignment on FTradeMenuTemplate");
static_assert(sizeof(FTradeMenuTemplate) == 0x000038, "Wrong size on FTradeMenuTemplate");
static_assert(offsetof(FTradeMenuTemplate, TradeId) == 0x000008, "Member 'FTradeMenuTemplate::TradeId' has a wrong offset!");
static_assert(offsetof(FTradeMenuTemplate, TradeMainGroup) == 0x00000C, "Member 'FTradeMenuTemplate::TradeMainGroup' has a wrong offset!");
static_assert(offsetof(FTradeMenuTemplate, TradeMainGroupString) == 0x000010, "Member 'FTradeMenuTemplate::TradeMainGroupString' has a wrong offset!");
static_assert(offsetof(FTradeMenuTemplate, TradeSubList) == 0x000014, "Member 'FTradeMenuTemplate::TradeSubList' has a wrong offset!");
static_assert(offsetof(FTradeMenuTemplate, TradeSubListString) == 0x000018, "Member 'FTradeMenuTemplate::TradeSubListString' has a wrong offset!");
static_assert(offsetof(FTradeMenuTemplate, FilterSmelting) == 0x00001C, "Member 'FTradeMenuTemplate::FilterSmelting' has a wrong offset!");
static_assert(offsetof(FTradeMenuTemplate, FilterClass) == 0x000020, "Member 'FTradeMenuTemplate::FilterClass' has a wrong offset!");
static_assert(offsetof(FTradeMenuTemplate, FilterGrade) == 0x000024, "Member 'FTradeMenuTemplate::FilterGrade' has a wrong offset!");
static_assert(offsetof(FTradeMenuTemplate, ItemType) == 0x000028, "Member 'FTradeMenuTemplate::ItemType' has a wrong offset!");

// ScriptStruct MirMobile.TriggerDataTemplate
// 0x0080 (0x0088 - 0x0008)
struct FTriggerDataTemplate final : public FTableRowBase
{
public:
	int32                                         TriggerID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETriggerType                                  TriggerType;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TriggerLocation;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerRotation;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LinkID;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Value1;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Value2;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Value3;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Value4;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Value5;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTriggerDataTemplate) == 0x000008, "Wrong alignment on FTriggerDataTemplate");
static_assert(sizeof(FTriggerDataTemplate) == 0x000088, "Wrong size on FTriggerDataTemplate");
static_assert(offsetof(FTriggerDataTemplate, TriggerID) == 0x000008, "Member 'FTriggerDataTemplate::TriggerID' has a wrong offset!");
static_assert(offsetof(FTriggerDataTemplate, TriggerType) == 0x00000C, "Member 'FTriggerDataTemplate::TriggerType' has a wrong offset!");
static_assert(offsetof(FTriggerDataTemplate, TriggerLocation) == 0x000010, "Member 'FTriggerDataTemplate::TriggerLocation' has a wrong offset!");
static_assert(offsetof(FTriggerDataTemplate, TriggerRotation) == 0x000020, "Member 'FTriggerDataTemplate::TriggerRotation' has a wrong offset!");
static_assert(offsetof(FTriggerDataTemplate, LinkID) == 0x000028, "Member 'FTriggerDataTemplate::LinkID' has a wrong offset!");
static_assert(offsetof(FTriggerDataTemplate, Value1) == 0x000038, "Member 'FTriggerDataTemplate::Value1' has a wrong offset!");
static_assert(offsetof(FTriggerDataTemplate, Value2) == 0x000048, "Member 'FTriggerDataTemplate::Value2' has a wrong offset!");
static_assert(offsetof(FTriggerDataTemplate, Value3) == 0x000058, "Member 'FTriggerDataTemplate::Value3' has a wrong offset!");
static_assert(offsetof(FTriggerDataTemplate, Value4) == 0x000068, "Member 'FTriggerDataTemplate::Value4' has a wrong offset!");
static_assert(offsetof(FTriggerDataTemplate, Value5) == 0x000078, "Member 'FTriggerDataTemplate::Value5' has a wrong offset!");

// ScriptStruct MirMobile.TriggerGroupTemplate
// 0x0010 (0x0018 - 0x0008)
struct FTriggerGroupTemplate final : public FTableRowBase
{
public:
	int32                                         TriggerGroup;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TriggerName;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTriggerGroupTemplate) == 0x000008, "Wrong alignment on FTriggerGroupTemplate");
static_assert(sizeof(FTriggerGroupTemplate) == 0x000018, "Wrong size on FTriggerGroupTemplate");
static_assert(offsetof(FTriggerGroupTemplate, TriggerGroup) == 0x000008, "Member 'FTriggerGroupTemplate::TriggerGroup' has a wrong offset!");
static_assert(offsetof(FTriggerGroupTemplate, TriggerName) == 0x00000C, "Member 'FTriggerGroupTemplate::TriggerName' has a wrong offset!");

// ScriptStruct MirMobile.UIShopItemPackageTemplate
// 0x01F8 (0x0200 - 0x0008)
struct FUIShopItemPackageTemplate final : public FTableRowBase
{
public:
	int32                                         ShopPackageId;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Choice;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Icon;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenEffect;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType1;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RewardId1;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue1;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType1;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue1;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType2;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId2;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue2;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType2;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue2;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType3;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId3;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue3;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType3;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue3;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType4;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId4;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue4;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType4;                                      // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue4;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType5;                                       // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId5;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue5;                                      // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType5;                                      // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue5;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType6;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId6;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue6;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType6;                                      // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue6;                                     // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType7;                                       // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId7;                                         // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue7;                                      // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType7;                                      // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue7;                                     // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType8;                                       // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId8;                                         // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue8;                                      // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType8;                                      // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue8;                                     // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType9;                                       // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId9;                                         // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue9;                                      // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType9;                                      // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue9;                                     // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType10;                                      // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId10;                                        // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue10;                                     // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType10;                                     // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue10;                                    // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType11;                                      // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId11;                                        // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue11;                                     // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType11;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue11;                                    // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType12;                                      // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId12;                                        // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue12;                                     // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType12;                                     // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue12;                                    // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType13;                                      // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId13;                                        // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue13;                                     // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType13;                                     // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue13;                                    // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType14;                                      // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId14;                                        // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue14;                                     // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType14;                                     // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue14;                                    // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardType15;                                      // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardId15;                                        // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardValue15;                                     // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantType15;                                     // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnchantValue15;                                    // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIShopItemPackageTemplate) == 0x000008, "Wrong alignment on FUIShopItemPackageTemplate");
static_assert(sizeof(FUIShopItemPackageTemplate) == 0x000200, "Wrong size on FUIShopItemPackageTemplate");
static_assert(offsetof(FUIShopItemPackageTemplate, ShopPackageId) == 0x000008, "Member 'FUIShopItemPackageTemplate::ShopPackageId' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, Choice) == 0x00000C, "Member 'FUIShopItemPackageTemplate::Choice' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, Icon) == 0x000010, "Member 'FUIShopItemPackageTemplate::Icon' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, OpenEffect) == 0x000014, "Member 'FUIShopItemPackageTemplate::OpenEffect' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType1) == 0x000018, "Member 'FUIShopItemPackageTemplate::RewardType1' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId1) == 0x000020, "Member 'FUIShopItemPackageTemplate::RewardId1' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue1) == 0x000030, "Member 'FUIShopItemPackageTemplate::RewardValue1' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType1) == 0x000034, "Member 'FUIShopItemPackageTemplate::EnchantType1' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue1) == 0x000038, "Member 'FUIShopItemPackageTemplate::EnchantValue1' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType2) == 0x00003C, "Member 'FUIShopItemPackageTemplate::RewardType2' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId2) == 0x000040, "Member 'FUIShopItemPackageTemplate::RewardId2' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue2) == 0x000050, "Member 'FUIShopItemPackageTemplate::RewardValue2' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType2) == 0x000054, "Member 'FUIShopItemPackageTemplate::EnchantType2' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue2) == 0x000058, "Member 'FUIShopItemPackageTemplate::EnchantValue2' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType3) == 0x00005C, "Member 'FUIShopItemPackageTemplate::RewardType3' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId3) == 0x000060, "Member 'FUIShopItemPackageTemplate::RewardId3' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue3) == 0x000070, "Member 'FUIShopItemPackageTemplate::RewardValue3' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType3) == 0x000074, "Member 'FUIShopItemPackageTemplate::EnchantType3' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue3) == 0x000078, "Member 'FUIShopItemPackageTemplate::EnchantValue3' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType4) == 0x00007C, "Member 'FUIShopItemPackageTemplate::RewardType4' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId4) == 0x000080, "Member 'FUIShopItemPackageTemplate::RewardId4' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue4) == 0x000090, "Member 'FUIShopItemPackageTemplate::RewardValue4' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType4) == 0x000094, "Member 'FUIShopItemPackageTemplate::EnchantType4' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue4) == 0x000098, "Member 'FUIShopItemPackageTemplate::EnchantValue4' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType5) == 0x00009C, "Member 'FUIShopItemPackageTemplate::RewardType5' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId5) == 0x0000A0, "Member 'FUIShopItemPackageTemplate::RewardId5' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue5) == 0x0000B0, "Member 'FUIShopItemPackageTemplate::RewardValue5' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType5) == 0x0000B4, "Member 'FUIShopItemPackageTemplate::EnchantType5' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue5) == 0x0000B8, "Member 'FUIShopItemPackageTemplate::EnchantValue5' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType6) == 0x0000BC, "Member 'FUIShopItemPackageTemplate::RewardType6' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId6) == 0x0000C0, "Member 'FUIShopItemPackageTemplate::RewardId6' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue6) == 0x0000D0, "Member 'FUIShopItemPackageTemplate::RewardValue6' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType6) == 0x0000D4, "Member 'FUIShopItemPackageTemplate::EnchantType6' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue6) == 0x0000D8, "Member 'FUIShopItemPackageTemplate::EnchantValue6' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType7) == 0x0000DC, "Member 'FUIShopItemPackageTemplate::RewardType7' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId7) == 0x0000E0, "Member 'FUIShopItemPackageTemplate::RewardId7' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue7) == 0x0000F0, "Member 'FUIShopItemPackageTemplate::RewardValue7' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType7) == 0x0000F4, "Member 'FUIShopItemPackageTemplate::EnchantType7' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue7) == 0x0000F8, "Member 'FUIShopItemPackageTemplate::EnchantValue7' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType8) == 0x0000FC, "Member 'FUIShopItemPackageTemplate::RewardType8' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId8) == 0x000100, "Member 'FUIShopItemPackageTemplate::RewardId8' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue8) == 0x000110, "Member 'FUIShopItemPackageTemplate::RewardValue8' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType8) == 0x000114, "Member 'FUIShopItemPackageTemplate::EnchantType8' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue8) == 0x000118, "Member 'FUIShopItemPackageTemplate::EnchantValue8' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType9) == 0x00011C, "Member 'FUIShopItemPackageTemplate::RewardType9' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId9) == 0x000120, "Member 'FUIShopItemPackageTemplate::RewardId9' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue9) == 0x000130, "Member 'FUIShopItemPackageTemplate::RewardValue9' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType9) == 0x000134, "Member 'FUIShopItemPackageTemplate::EnchantType9' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue9) == 0x000138, "Member 'FUIShopItemPackageTemplate::EnchantValue9' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType10) == 0x00013C, "Member 'FUIShopItemPackageTemplate::RewardType10' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId10) == 0x000140, "Member 'FUIShopItemPackageTemplate::RewardId10' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue10) == 0x000150, "Member 'FUIShopItemPackageTemplate::RewardValue10' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType10) == 0x000154, "Member 'FUIShopItemPackageTemplate::EnchantType10' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue10) == 0x000158, "Member 'FUIShopItemPackageTemplate::EnchantValue10' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType11) == 0x00015C, "Member 'FUIShopItemPackageTemplate::RewardType11' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId11) == 0x000160, "Member 'FUIShopItemPackageTemplate::RewardId11' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue11) == 0x000170, "Member 'FUIShopItemPackageTemplate::RewardValue11' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType11) == 0x000174, "Member 'FUIShopItemPackageTemplate::EnchantType11' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue11) == 0x000178, "Member 'FUIShopItemPackageTemplate::EnchantValue11' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType12) == 0x00017C, "Member 'FUIShopItemPackageTemplate::RewardType12' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId12) == 0x000180, "Member 'FUIShopItemPackageTemplate::RewardId12' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue12) == 0x000190, "Member 'FUIShopItemPackageTemplate::RewardValue12' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType12) == 0x000194, "Member 'FUIShopItemPackageTemplate::EnchantType12' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue12) == 0x000198, "Member 'FUIShopItemPackageTemplate::EnchantValue12' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType13) == 0x00019C, "Member 'FUIShopItemPackageTemplate::RewardType13' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId13) == 0x0001A0, "Member 'FUIShopItemPackageTemplate::RewardId13' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue13) == 0x0001B0, "Member 'FUIShopItemPackageTemplate::RewardValue13' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType13) == 0x0001B4, "Member 'FUIShopItemPackageTemplate::EnchantType13' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue13) == 0x0001B8, "Member 'FUIShopItemPackageTemplate::EnchantValue13' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType14) == 0x0001BC, "Member 'FUIShopItemPackageTemplate::RewardType14' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId14) == 0x0001C0, "Member 'FUIShopItemPackageTemplate::RewardId14' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue14) == 0x0001D0, "Member 'FUIShopItemPackageTemplate::RewardValue14' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType14) == 0x0001D4, "Member 'FUIShopItemPackageTemplate::EnchantType14' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue14) == 0x0001D8, "Member 'FUIShopItemPackageTemplate::EnchantValue14' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardType15) == 0x0001DC, "Member 'FUIShopItemPackageTemplate::RewardType15' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardId15) == 0x0001E0, "Member 'FUIShopItemPackageTemplate::RewardId15' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, RewardValue15) == 0x0001F0, "Member 'FUIShopItemPackageTemplate::RewardValue15' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantType15) == 0x0001F4, "Member 'FUIShopItemPackageTemplate::EnchantType15' has a wrong offset!");
static_assert(offsetof(FUIShopItemPackageTemplate, EnchantValue15) == 0x0001F8, "Member 'FUIShopItemPackageTemplate::EnchantValue15' has a wrong offset!");

// ScriptStruct MirMobile.UIStringTemplate
// 0x00D8 (0x00E0 - 0x0008)
struct FUIStringTemplate final : public FTableRowBase
{
public:
	int32                                         StringID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChattingMessageType;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageType;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextKr;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHT;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CHS;                                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JPN;                                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ENG;                                               // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 THA;                                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IND;                                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VIE;                                               // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GER;                                               // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SPA;                                               // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 POR;                                               // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RUS;                                               // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextColorId;                                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIStringTemplate) == 0x000008, "Wrong alignment on FUIStringTemplate");
static_assert(sizeof(FUIStringTemplate) == 0x0000E0, "Wrong size on FUIStringTemplate");
static_assert(offsetof(FUIStringTemplate, StringID) == 0x000008, "Member 'FUIStringTemplate::StringID' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, ChattingMessageType) == 0x00000C, "Member 'FUIStringTemplate::ChattingMessageType' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, MessageType) == 0x000010, "Member 'FUIStringTemplate::MessageType' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, TextKr) == 0x000018, "Member 'FUIStringTemplate::TextKr' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, CHT) == 0x000028, "Member 'FUIStringTemplate::CHT' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, CHS) == 0x000038, "Member 'FUIStringTemplate::CHS' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, JPN) == 0x000048, "Member 'FUIStringTemplate::JPN' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, ENG) == 0x000058, "Member 'FUIStringTemplate::ENG' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, THA) == 0x000068, "Member 'FUIStringTemplate::THA' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, IND) == 0x000078, "Member 'FUIStringTemplate::IND' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, VIE) == 0x000088, "Member 'FUIStringTemplate::VIE' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, GER) == 0x000098, "Member 'FUIStringTemplate::GER' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, SPA) == 0x0000A8, "Member 'FUIStringTemplate::SPA' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, POR) == 0x0000B8, "Member 'FUIStringTemplate::POR' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, RUS) == 0x0000C8, "Member 'FUIStringTemplate::RUS' has a wrong offset!");
static_assert(offsetof(FUIStringTemplate, TextColorId) == 0x0000D8, "Member 'FUIStringTemplate::TextColorId' has a wrong offset!");

// ScriptStruct MirMobile.UnderWorldTemplate
// 0x0030 (0x0038 - 0x0008)
struct FUnderWorldTemplate final : public FStageCommonTemplate
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UwID;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageSort;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageNameID;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageNoteID;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelValue;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrivalLocation;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageThumbnail;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventThumbnail;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BossMonsterID;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedPerson;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnderWorldTemplate) == 0x000008, "Wrong alignment on FUnderWorldTemplate");
static_assert(sizeof(FUnderWorldTemplate) == 0x000038, "Wrong size on FUnderWorldTemplate");
static_assert(offsetof(FUnderWorldTemplate, Name) == 0x000008, "Member 'FUnderWorldTemplate::Name' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, UwID) == 0x00000C, "Member 'FUnderWorldTemplate::UwID' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, StageID) == 0x000010, "Member 'FUnderWorldTemplate::StageID' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, StageSort) == 0x000014, "Member 'FUnderWorldTemplate::StageSort' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, StageNameID) == 0x000018, "Member 'FUnderWorldTemplate::StageNameID' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, StageNoteID) == 0x00001C, "Member 'FUnderWorldTemplate::StageNoteID' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, LevelValue) == 0x000020, "Member 'FUnderWorldTemplate::LevelValue' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, ArrivalLocation) == 0x000024, "Member 'FUnderWorldTemplate::ArrivalLocation' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, StageThumbnail) == 0x000028, "Member 'FUnderWorldTemplate::StageThumbnail' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, EventThumbnail) == 0x00002C, "Member 'FUnderWorldTemplate::EventThumbnail' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, BossMonsterID) == 0x000030, "Member 'FUnderWorldTemplate::BossMonsterID' has a wrong offset!");
static_assert(offsetof(FUnderWorldTemplate, RecommendedPerson) == 0x000034, "Member 'FUnderWorldTemplate::RecommendedPerson' has a wrong offset!");

// ScriptStruct MirMobile.UserEventAgencyTemplate
// 0x0010 (0x0018 - 0x0008)
struct FUserEventAgencyTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialItemId;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitCountValue;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserEventAgencyTemplate) == 0x000008, "Wrong alignment on FUserEventAgencyTemplate");
static_assert(sizeof(FUserEventAgencyTemplate) == 0x000018, "Wrong size on FUserEventAgencyTemplate");
static_assert(offsetof(FUserEventAgencyTemplate, Name) == 0x000008, "Member 'FUserEventAgencyTemplate::Name' has a wrong offset!");
static_assert(offsetof(FUserEventAgencyTemplate, EventId) == 0x00000C, "Member 'FUserEventAgencyTemplate::EventId' has a wrong offset!");
static_assert(offsetof(FUserEventAgencyTemplate, MaterialItemId) == 0x000010, "Member 'FUserEventAgencyTemplate::MaterialItemId' has a wrong offset!");
static_assert(offsetof(FUserEventAgencyTemplate, LimitCountValue) == 0x000014, "Member 'FUserEventAgencyTemplate::LimitCountValue' has a wrong offset!");

// ScriptStruct MirMobile.UserEventBenedictionTemplate
// 0x0028 (0x0030 - 0x0008)
struct FUserEventBenedictionTemplate final : public FTableRowBase
{
public:
	int32                                         Name;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Event_Type;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot_Icon;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot_BG;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Incense_Type;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Incense_Grade;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseItem_ID;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_Value;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward_Item;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserEventBenedictionTemplate) == 0x000008, "Wrong alignment on FUserEventBenedictionTemplate");
static_assert(sizeof(FUserEventBenedictionTemplate) == 0x000030, "Wrong size on FUserEventBenedictionTemplate");
static_assert(offsetof(FUserEventBenedictionTemplate, Name) == 0x000008, "Member 'FUserEventBenedictionTemplate::Name' has a wrong offset!");
static_assert(offsetof(FUserEventBenedictionTemplate, ID) == 0x00000C, "Member 'FUserEventBenedictionTemplate::ID' has a wrong offset!");
static_assert(offsetof(FUserEventBenedictionTemplate, Event_Type) == 0x000010, "Member 'FUserEventBenedictionTemplate::Event_Type' has a wrong offset!");
static_assert(offsetof(FUserEventBenedictionTemplate, Slot_Icon) == 0x000014, "Member 'FUserEventBenedictionTemplate::Slot_Icon' has a wrong offset!");
static_assert(offsetof(FUserEventBenedictionTemplate, Slot_BG) == 0x000018, "Member 'FUserEventBenedictionTemplate::Slot_BG' has a wrong offset!");
static_assert(offsetof(FUserEventBenedictionTemplate, Incense_Type) == 0x00001C, "Member 'FUserEventBenedictionTemplate::Incense_Type' has a wrong offset!");
static_assert(offsetof(FUserEventBenedictionTemplate, Incense_Grade) == 0x000020, "Member 'FUserEventBenedictionTemplate::Incense_Grade' has a wrong offset!");
static_assert(offsetof(FUserEventBenedictionTemplate, UseItem_ID) == 0x000024, "Member 'FUserEventBenedictionTemplate::UseItem_ID' has a wrong offset!");
static_assert(offsetof(FUserEventBenedictionTemplate, Item_Value) == 0x000028, "Member 'FUserEventBenedictionTemplate::Item_Value' has a wrong offset!");
static_assert(offsetof(FUserEventBenedictionTemplate, Reward_Item) == 0x00002C, "Member 'FUserEventBenedictionTemplate::Reward_Item' has a wrong offset!");

// ScriptStruct MirMobile.UserEventGoalTemplate
// 0x0050 (0x0058 - 0x0008)
struct FUserEventGoalTemplate final : public FTableRowBase
{
public:
	int32                                         RowId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalCompleteStep;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalCompleteValue;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward1Type;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward1Id;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward1Count;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward2Type;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward2Id;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward2Count;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward3Type;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward3Id;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward3Count;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusRewardType;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusRewardId;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusRewardCount;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetryGoalCostId;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetryGoalCostValue;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventDataId;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserEventGoalTemplate) == 0x000008, "Wrong alignment on FUserEventGoalTemplate");
static_assert(sizeof(FUserEventGoalTemplate) == 0x000058, "Wrong size on FUserEventGoalTemplate");
static_assert(offsetof(FUserEventGoalTemplate, RowId) == 0x000008, "Member 'FUserEventGoalTemplate::RowId' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, EventId) == 0x00000C, "Member 'FUserEventGoalTemplate::EventId' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, GoalCompleteStep) == 0x000010, "Member 'FUserEventGoalTemplate::GoalCompleteStep' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, GoalCompleteValue) == 0x000014, "Member 'FUserEventGoalTemplate::GoalCompleteValue' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, Reward1Type) == 0x000018, "Member 'FUserEventGoalTemplate::Reward1Type' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, Reward1Id) == 0x00001C, "Member 'FUserEventGoalTemplate::Reward1Id' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, Reward1Count) == 0x000020, "Member 'FUserEventGoalTemplate::Reward1Count' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, Reward2Type) == 0x000024, "Member 'FUserEventGoalTemplate::Reward2Type' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, Reward2Id) == 0x000028, "Member 'FUserEventGoalTemplate::Reward2Id' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, Reward2Count) == 0x00002C, "Member 'FUserEventGoalTemplate::Reward2Count' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, Reward3Type) == 0x000030, "Member 'FUserEventGoalTemplate::Reward3Type' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, Reward3Id) == 0x000034, "Member 'FUserEventGoalTemplate::Reward3Id' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, Reward3Count) == 0x000038, "Member 'FUserEventGoalTemplate::Reward3Count' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, BonusRewardType) == 0x00003C, "Member 'FUserEventGoalTemplate::BonusRewardType' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, BonusRewardId) == 0x000040, "Member 'FUserEventGoalTemplate::BonusRewardId' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, BonusRewardCount) == 0x000044, "Member 'FUserEventGoalTemplate::BonusRewardCount' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, RetryGoalCostId) == 0x000048, "Member 'FUserEventGoalTemplate::RetryGoalCostId' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, RetryGoalCostValue) == 0x00004C, "Member 'FUserEventGoalTemplate::RetryGoalCostValue' has a wrong offset!");
static_assert(offsetof(FUserEventGoalTemplate, EventDataId) == 0x000050, "Member 'FUserEventGoalTemplate::EventDataId' has a wrong offset!");

// ScriptStruct MirMobile.VehicleRideTemplate
// 0x00B0 (0x00B8 - 0x0008)
struct FVehicleRideTemplate final : public FTableRowBase
{
public:
	int32                                         VehicleId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UiIndex;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshResourceId;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NameTagOffset;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshOffsetXYZ;                                     // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VehicleRoomRotate;                                 // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColorId;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimType;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimClassName;                                     // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vehicle_EffectGroupid;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RideSpeed;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FastRideSpeed;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FastRideSec;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseAbleType;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseAbleValue;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseAbleStr;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RideAbleType;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RideAbleStr;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockNeedCostType;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockNeedCostId;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockNeedCostValue;                               // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenAttributeType;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenAttributeValue;                                // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType01;                                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue01;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType02;                                   // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue02;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeType03;                                   // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttributeValue03;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Grade;                                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewProduct;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuxuryType;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumePartsType;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopProduct;                                       // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID;                                           // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleRideTemplate) == 0x000008, "Wrong alignment on FVehicleRideTemplate");
static_assert(sizeof(FVehicleRideTemplate) == 0x0000B8, "Wrong size on FVehicleRideTemplate");
static_assert(offsetof(FVehicleRideTemplate, VehicleId) == 0x000008, "Member 'FVehicleRideTemplate::VehicleId' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, UiIndex) == 0x00000C, "Member 'FVehicleRideTemplate::UiIndex' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, NameId) == 0x000010, "Member 'FVehicleRideTemplate::NameId' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, IconID) == 0x000014, "Member 'FVehicleRideTemplate::IconID' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, MeshResourceId) == 0x000018, "Member 'FVehicleRideTemplate::MeshResourceId' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, NameTagOffset) == 0x000020, "Member 'FVehicleRideTemplate::NameTagOffset' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, MeshOffsetXYZ) == 0x000024, "Member 'FVehicleRideTemplate::MeshOffsetXYZ' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, VehicleRoomRotate) == 0x000030, "Member 'FVehicleRideTemplate::VehicleRoomRotate' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, ColorId) == 0x00003C, "Member 'FVehicleRideTemplate::ColorId' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, AnimType) == 0x000040, "Member 'FVehicleRideTemplate::AnimType' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, AnimClassName) == 0x000044, "Member 'FVehicleRideTemplate::AnimClassName' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, Vehicle_EffectGroupid) == 0x00004C, "Member 'FVehicleRideTemplate::Vehicle_EffectGroupid' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, RideSpeed) == 0x000050, "Member 'FVehicleRideTemplate::RideSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, FastRideSpeed) == 0x000054, "Member 'FVehicleRideTemplate::FastRideSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, FastRideSec) == 0x000058, "Member 'FVehicleRideTemplate::FastRideSec' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, PurchaseAbleType) == 0x00005C, "Member 'FVehicleRideTemplate::PurchaseAbleType' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, PurchaseAbleValue) == 0x000060, "Member 'FVehicleRideTemplate::PurchaseAbleValue' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, PurchaseAbleStr) == 0x000064, "Member 'FVehicleRideTemplate::PurchaseAbleStr' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, RideAbleType) == 0x000068, "Member 'FVehicleRideTemplate::RideAbleType' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, RideAbleStr) == 0x00006C, "Member 'FVehicleRideTemplate::RideAbleStr' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, UnlockNeedCostType) == 0x000070, "Member 'FVehicleRideTemplate::UnlockNeedCostType' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, UnlockNeedCostId) == 0x000074, "Member 'FVehicleRideTemplate::UnlockNeedCostId' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, UnlockNeedCostValue) == 0x000078, "Member 'FVehicleRideTemplate::UnlockNeedCostValue' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, OpenAttributeType) == 0x00007C, "Member 'FVehicleRideTemplate::OpenAttributeType' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, OpenAttributeValue) == 0x000080, "Member 'FVehicleRideTemplate::OpenAttributeValue' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, AttributeType01) == 0x000084, "Member 'FVehicleRideTemplate::AttributeType01' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, AttributeValue01) == 0x000088, "Member 'FVehicleRideTemplate::AttributeValue01' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, AttributeType02) == 0x00008C, "Member 'FVehicleRideTemplate::AttributeType02' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, AttributeValue02) == 0x000090, "Member 'FVehicleRideTemplate::AttributeValue02' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, AttributeType03) == 0x000094, "Member 'FVehicleRideTemplate::AttributeType03' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, AttributeValue03) == 0x000098, "Member 'FVehicleRideTemplate::AttributeValue03' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, Grade) == 0x00009C, "Member 'FVehicleRideTemplate::Grade' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, NewProduct) == 0x0000A0, "Member 'FVehicleRideTemplate::NewProduct' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, LuxuryType) == 0x0000A4, "Member 'FVehicleRideTemplate::LuxuryType' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, CostumePartsType) == 0x0000A8, "Member 'FVehicleRideTemplate::CostumePartsType' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, ShopProduct) == 0x0000AC, "Member 'FVehicleRideTemplate::ShopProduct' has a wrong offset!");
static_assert(offsetof(FVehicleRideTemplate, GoodsID) == 0x0000B0, "Member 'FVehicleRideTemplate::GoodsID' has a wrong offset!");

// ScriptStruct MirMobile.WarpLocationTemplate
// 0x0028 (0x0030 - 0x0008)
struct FWarpLocationTemplate final : public FTableRowBase
{
public:
	int32                                         WarpId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Arrival_StageId;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Coordinate;                                        // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationYaw;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraYaw;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraPitch;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraDistance;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarpArrivalRadius;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarpLocationTemplate) == 0x000008, "Wrong alignment on FWarpLocationTemplate");
static_assert(sizeof(FWarpLocationTemplate) == 0x000030, "Wrong size on FWarpLocationTemplate");
static_assert(offsetof(FWarpLocationTemplate, WarpId) == 0x000008, "Member 'FWarpLocationTemplate::WarpId' has a wrong offset!");
static_assert(offsetof(FWarpLocationTemplate, Arrival_StageId) == 0x00000C, "Member 'FWarpLocationTemplate::Arrival_StageId' has a wrong offset!");
static_assert(offsetof(FWarpLocationTemplate, Coordinate) == 0x000010, "Member 'FWarpLocationTemplate::Coordinate' has a wrong offset!");
static_assert(offsetof(FWarpLocationTemplate, RotationYaw) == 0x00001C, "Member 'FWarpLocationTemplate::RotationYaw' has a wrong offset!");
static_assert(offsetof(FWarpLocationTemplate, CameraYaw) == 0x000020, "Member 'FWarpLocationTemplate::CameraYaw' has a wrong offset!");
static_assert(offsetof(FWarpLocationTemplate, CameraPitch) == 0x000024, "Member 'FWarpLocationTemplate::CameraPitch' has a wrong offset!");
static_assert(offsetof(FWarpLocationTemplate, CameraDistance) == 0x000028, "Member 'FWarpLocationTemplate::CameraDistance' has a wrong offset!");
static_assert(offsetof(FWarpLocationTemplate, WarpArrivalRadius) == 0x00002C, "Member 'FWarpLocationTemplate::WarpArrivalRadius' has a wrong offset!");

// ScriptStruct MirMobile.WaypointTemplate
// 0x0030 (0x0038 - 0x0008)
struct FWaypointTemplate final : public FTableRowBase
{
public:
	int32                                         ActiveRadius;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultState;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaypointWarpNeedItemId;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaypointWarpNeedItemCount;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WayPointName;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WarpCoordinate;                                    // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaypointTemplate) == 0x000008, "Wrong alignment on FWaypointTemplate");
static_assert(sizeof(FWaypointTemplate) == 0x000038, "Wrong size on FWaypointTemplate");
static_assert(offsetof(FWaypointTemplate, ActiveRadius) == 0x000008, "Member 'FWaypointTemplate::ActiveRadius' has a wrong offset!");
static_assert(offsetof(FWaypointTemplate, DefaultState) == 0x00000C, "Member 'FWaypointTemplate::DefaultState' has a wrong offset!");
static_assert(offsetof(FWaypointTemplate, WaypointWarpNeedItemId) == 0x000010, "Member 'FWaypointTemplate::WaypointWarpNeedItemId' has a wrong offset!");
static_assert(offsetof(FWaypointTemplate, WaypointWarpNeedItemCount) == 0x000014, "Member 'FWaypointTemplate::WaypointWarpNeedItemCount' has a wrong offset!");
static_assert(offsetof(FWaypointTemplate, WayPointName) == 0x000018, "Member 'FWaypointTemplate::WayPointName' has a wrong offset!");
static_assert(offsetof(FWaypointTemplate, Location) == 0x00001C, "Member 'FWaypointTemplate::Location' has a wrong offset!");
static_assert(offsetof(FWaypointTemplate, WarpCoordinate) == 0x000028, "Member 'FWaypointTemplate::WarpCoordinate' has a wrong offset!");

// ScriptStruct MirMobile.WorldBuffTemplate
// 0x0020 (0x0028 - 0x0008)
struct FWorldBuffTemplate final : public FTableRowBase
{
public:
	int32                                         WorldBuffID;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BuffStageID;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BuffId;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffTime;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldBuffTemplate) == 0x000008, "Wrong alignment on FWorldBuffTemplate");
static_assert(sizeof(FWorldBuffTemplate) == 0x000028, "Wrong size on FWorldBuffTemplate");
static_assert(offsetof(FWorldBuffTemplate, WorldBuffID) == 0x000008, "Member 'FWorldBuffTemplate::WorldBuffID' has a wrong offset!");
static_assert(offsetof(FWorldBuffTemplate, BuffStageID) == 0x000010, "Member 'FWorldBuffTemplate::BuffStageID' has a wrong offset!");
static_assert(offsetof(FWorldBuffTemplate, BuffId) == 0x000020, "Member 'FWorldBuffTemplate::BuffId' has a wrong offset!");
static_assert(offsetof(FWorldBuffTemplate, BuffTime) == 0x000024, "Member 'FWorldBuffTemplate::BuffTime' has a wrong offset!");

// ScriptStruct MirMobile.GhostTrailMaterialParameterData
// 0x0010 (0x0010 - 0x0000)
struct FGhostTrailMaterialParameterData final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginValue;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGhostTrailMaterialParameterData) == 0x000004, "Wrong alignment on FGhostTrailMaterialParameterData");
static_assert(sizeof(FGhostTrailMaterialParameterData) == 0x000010, "Wrong size on FGhostTrailMaterialParameterData");
static_assert(offsetof(FGhostTrailMaterialParameterData, ParameterName) == 0x000000, "Member 'FGhostTrailMaterialParameterData::ParameterName' has a wrong offset!");
static_assert(offsetof(FGhostTrailMaterialParameterData, BeginValue) == 0x000008, "Member 'FGhostTrailMaterialParameterData::BeginValue' has a wrong offset!");
static_assert(offsetof(FGhostTrailMaterialParameterData, EndValue) == 0x00000C, "Member 'FGhostTrailMaterialParameterData::EndValue' has a wrong offset!");

// ScriptStruct MirMobile.DownloadProfileImagData
// 0x0018 (0x0018 - 0x0000)
struct FDownloadProfileImagData final
{
public:
	int32                                         FailCount;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         ImageArray;                                        // 0x0008(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDownloadProfileImagData) == 0x000008, "Wrong alignment on FDownloadProfileImagData");
static_assert(sizeof(FDownloadProfileImagData) == 0x000018, "Wrong size on FDownloadProfileImagData");
static_assert(offsetof(FDownloadProfileImagData, FailCount) == 0x000000, "Member 'FDownloadProfileImagData::FailCount' has a wrong offset!");
static_assert(offsetof(FDownloadProfileImagData, ImageArray) == 0x000008, "Member 'FDownloadProfileImagData::ImageArray' has a wrong offset!");

// ScriptStruct MirMobile.IAPWSReceiptData
// 0x0080 (0x0080 - 0x0000)
struct FIAPWSReceiptData final
{
public:
	class FString                                 PayID;                                             // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductId;                                         // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderId;                                           // 0x0020(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgent;                                         // 0x0030(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerKey;                                         // 0x0040(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AccountUID;                                        // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CharacterUID;                                      // 0x0058(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0060(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ShopGoodsVersion;                                  // 0x0064(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopGoodsID;                                       // 0x0068(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PurchaseToken;                                     // 0x0070(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIAPWSReceiptData) == 0x000008, "Wrong alignment on FIAPWSReceiptData");
static_assert(sizeof(FIAPWSReceiptData) == 0x000080, "Wrong size on FIAPWSReceiptData");
static_assert(offsetof(FIAPWSReceiptData, PayID) == 0x000000, "Member 'FIAPWSReceiptData::PayID' has a wrong offset!");
static_assert(offsetof(FIAPWSReceiptData, ProductId) == 0x000010, "Member 'FIAPWSReceiptData::ProductId' has a wrong offset!");
static_assert(offsetof(FIAPWSReceiptData, OrderId) == 0x000020, "Member 'FIAPWSReceiptData::OrderId' has a wrong offset!");
static_assert(offsetof(FIAPWSReceiptData, UserAgent) == 0x000030, "Member 'FIAPWSReceiptData::UserAgent' has a wrong offset!");
static_assert(offsetof(FIAPWSReceiptData, PlayerKey) == 0x000040, "Member 'FIAPWSReceiptData::PlayerKey' has a wrong offset!");
static_assert(offsetof(FIAPWSReceiptData, AccountUID) == 0x000050, "Member 'FIAPWSReceiptData::AccountUID' has a wrong offset!");
static_assert(offsetof(FIAPWSReceiptData, CharacterUID) == 0x000058, "Member 'FIAPWSReceiptData::CharacterUID' has a wrong offset!");
static_assert(offsetof(FIAPWSReceiptData, ItemType) == 0x000060, "Member 'FIAPWSReceiptData::ItemType' has a wrong offset!");
static_assert(offsetof(FIAPWSReceiptData, ShopGoodsVersion) == 0x000064, "Member 'FIAPWSReceiptData::ShopGoodsVersion' has a wrong offset!");
static_assert(offsetof(FIAPWSReceiptData, ShopGoodsID) == 0x000068, "Member 'FIAPWSReceiptData::ShopGoodsID' has a wrong offset!");
static_assert(offsetof(FIAPWSReceiptData, PurchaseToken) == 0x000070, "Member 'FIAPWSReceiptData::PurchaseToken' has a wrong offset!");

// ScriptStruct MirMobile.IAPUserRequestData
// 0x0040 (0x0040 - 0x0000)
struct FIAPUserRequestData final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemName;                                          // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TotalPrice;                                        // 0x0020(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ShopGoodsVersion;                                  // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopGoodsID;                                       // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x003C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIAPUserRequestData) == 0x000008, "Wrong alignment on FIAPUserRequestData");
static_assert(sizeof(FIAPUserRequestData) == 0x000040, "Wrong size on FIAPUserRequestData");
static_assert(offsetof(FIAPUserRequestData, ProductId) == 0x000000, "Member 'FIAPUserRequestData::ProductId' has a wrong offset!");
static_assert(offsetof(FIAPUserRequestData, ItemName) == 0x000010, "Member 'FIAPUserRequestData::ItemName' has a wrong offset!");
static_assert(offsetof(FIAPUserRequestData, TotalPrice) == 0x000020, "Member 'FIAPUserRequestData::TotalPrice' has a wrong offset!");
static_assert(offsetof(FIAPUserRequestData, ItemType) == 0x000030, "Member 'FIAPUserRequestData::ItemType' has a wrong offset!");
static_assert(offsetof(FIAPUserRequestData, ShopGoodsVersion) == 0x000034, "Member 'FIAPUserRequestData::ShopGoodsVersion' has a wrong offset!");
static_assert(offsetof(FIAPUserRequestData, ShopGoodsID) == 0x000038, "Member 'FIAPUserRequestData::ShopGoodsID' has a wrong offset!");
static_assert(offsetof(FIAPUserRequestData, Quantity) == 0x00003C, "Member 'FIAPUserRequestData::Quantity' has a wrong offset!");

// ScriptStruct MirMobile.IAPProductData
// 0x00A8 (0x00A8 - 0x0000)
struct FIAPProductData final
{
public:
	class FString                                 PayID;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseId;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Consumable;                                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TotalPrice;                                        // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ShopGoodsVersion;                                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopGoodsID;                                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Receipt;                                           // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransactionState;                                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TransactionId;                                     // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerKey;                                         // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIAPProductData) == 0x000008, "Wrong alignment on FIAPProductData");
static_assert(sizeof(FIAPProductData) == 0x0000A8, "Wrong size on FIAPProductData");
static_assert(offsetof(FIAPProductData, PayID) == 0x000000, "Member 'FIAPProductData::PayID' has a wrong offset!");
static_assert(offsetof(FIAPProductData, ProductId) == 0x000010, "Member 'FIAPProductData::ProductId' has a wrong offset!");
static_assert(offsetof(FIAPProductData, PurchaseId) == 0x000020, "Member 'FIAPProductData::PurchaseId' has a wrong offset!");
static_assert(offsetof(FIAPProductData, Consumable) == 0x000030, "Member 'FIAPProductData::Consumable' has a wrong offset!");
static_assert(offsetof(FIAPProductData, ItemName) == 0x000038, "Member 'FIAPProductData::ItemName' has a wrong offset!");
static_assert(offsetof(FIAPProductData, TotalPrice) == 0x000048, "Member 'FIAPProductData::TotalPrice' has a wrong offset!");
static_assert(offsetof(FIAPProductData, ItemType) == 0x000058, "Member 'FIAPProductData::ItemType' has a wrong offset!");
static_assert(offsetof(FIAPProductData, ShopGoodsVersion) == 0x00005C, "Member 'FIAPProductData::ShopGoodsVersion' has a wrong offset!");
static_assert(offsetof(FIAPProductData, ShopGoodsID) == 0x000060, "Member 'FIAPProductData::ShopGoodsID' has a wrong offset!");
static_assert(offsetof(FIAPProductData, Receipt) == 0x000068, "Member 'FIAPProductData::Receipt' has a wrong offset!");
static_assert(offsetof(FIAPProductData, TransactionState) == 0x000078, "Member 'FIAPProductData::TransactionState' has a wrong offset!");
static_assert(offsetof(FIAPProductData, TransactionId) == 0x000080, "Member 'FIAPProductData::TransactionId' has a wrong offset!");
static_assert(offsetof(FIAPProductData, PlayerKey) == 0x000090, "Member 'FIAPProductData::PlayerKey' has a wrong offset!");
static_assert(offsetof(FIAPProductData, Quantity) == 0x0000A0, "Member 'FIAPProductData::Quantity' has a wrong offset!");

// ScriptStruct MirMobile.SkillCondition
// 0x0010 (0x0010 - 0x0000)
struct FSkillCondition final
{
public:
	EConditionType                                ConditionType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableConditionTarget;                             // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConditionTarget                              ConditionTarget;                                   // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableConditionValue;                              // 0x0003(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionValue;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExecutionProbability;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillCondition) == 0x000004, "Wrong alignment on FSkillCondition");
static_assert(sizeof(FSkillCondition) == 0x000010, "Wrong size on FSkillCondition");
static_assert(offsetof(FSkillCondition, ConditionType) == 0x000000, "Member 'FSkillCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FSkillCondition, EnableConditionTarget) == 0x000001, "Member 'FSkillCondition::EnableConditionTarget' has a wrong offset!");
static_assert(offsetof(FSkillCondition, ConditionTarget) == 0x000002, "Member 'FSkillCondition::ConditionTarget' has a wrong offset!");
static_assert(offsetof(FSkillCondition, EnableConditionValue) == 0x000003, "Member 'FSkillCondition::EnableConditionValue' has a wrong offset!");
static_assert(offsetof(FSkillCondition, ConditionValue) == 0x000004, "Member 'FSkillCondition::ConditionValue' has a wrong offset!");
static_assert(offsetof(FSkillCondition, ExecutionProbability) == 0x000008, "Member 'FSkillCondition::ExecutionProbability' has a wrong offset!");
static_assert(offsetof(FSkillCondition, SkillId) == 0x00000C, "Member 'FSkillCondition::SkillId' has a wrong offset!");

// ScriptStruct MirMobile.PotentialLineInfo_ForDesignTime
// 0x0010 (0x0010 - 0x0000)
struct FPotentialLineInfo_ForDesignTime final
{
public:
	TArray<int32>                                 ArUnlockPotentialID;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPotentialLineInfo_ForDesignTime) == 0x000008, "Wrong alignment on FPotentialLineInfo_ForDesignTime");
static_assert(sizeof(FPotentialLineInfo_ForDesignTime) == 0x000010, "Wrong size on FPotentialLineInfo_ForDesignTime");
static_assert(offsetof(FPotentialLineInfo_ForDesignTime, ArUnlockPotentialID) == 0x000000, "Member 'FPotentialLineInfo_ForDesignTime::ArUnlockPotentialID' has a wrong offset!");

// ScriptStruct MirMobile.PotentialLineInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FPotentialLineInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMM_Potential_Node*                     PPotentialNode;                                    // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UMM_Potential_Node*>        MapUnlockPotentialNode;                            // 0x0010(0x0050)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int32, class UMM_Potential_Line*>        MapLine;                                           // 0x0060(0x0050)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPotentialLineInfo) == 0x000008, "Wrong alignment on FPotentialLineInfo");
static_assert(sizeof(FPotentialLineInfo) == 0x0000B0, "Wrong size on FPotentialLineInfo");
static_assert(offsetof(FPotentialLineInfo, PPotentialNode) == 0x000008, "Member 'FPotentialLineInfo::PPotentialNode' has a wrong offset!");
static_assert(offsetof(FPotentialLineInfo, MapUnlockPotentialNode) == 0x000010, "Member 'FPotentialLineInfo::MapUnlockPotentialNode' has a wrong offset!");
static_assert(offsetof(FPotentialLineInfo, MapLine) == 0x000060, "Member 'FPotentialLineInfo::MapLine' has a wrong offset!");

// ScriptStruct MirMobile.ContributionSlot
// 0x0050 (0x0050 - 0x0000)
struct FContributionSlot final
{
public:
	class UMirTextBlock*                          Txt_Fixed_Lv;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirTextBlock*                          Txt_level_01;                                      // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirImage*                              Icon_class_01;                                     // 0x0010(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirImage*                              Icon_party_01;                                     // 0x0018(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirImage*                              ImgSelect;                                         // 0x0020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirTextBlock*                          TxtRank;                                           // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirTextBlock*                          Txt_name_01;                                       // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirTextBlock*                          Txt_number_01;                                     // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirTextBlock*                          Txt_percent_01;                                    // 0x0040(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContributionSlot) == 0x000008, "Wrong alignment on FContributionSlot");
static_assert(sizeof(FContributionSlot) == 0x000050, "Wrong size on FContributionSlot");
static_assert(offsetof(FContributionSlot, Txt_Fixed_Lv) == 0x000000, "Member 'FContributionSlot::Txt_Fixed_Lv' has a wrong offset!");
static_assert(offsetof(FContributionSlot, Txt_level_01) == 0x000008, "Member 'FContributionSlot::Txt_level_01' has a wrong offset!");
static_assert(offsetof(FContributionSlot, Icon_class_01) == 0x000010, "Member 'FContributionSlot::Icon_class_01' has a wrong offset!");
static_assert(offsetof(FContributionSlot, Icon_party_01) == 0x000018, "Member 'FContributionSlot::Icon_party_01' has a wrong offset!");
static_assert(offsetof(FContributionSlot, ImgSelect) == 0x000020, "Member 'FContributionSlot::ImgSelect' has a wrong offset!");
static_assert(offsetof(FContributionSlot, TxtRank) == 0x000028, "Member 'FContributionSlot::TxtRank' has a wrong offset!");
static_assert(offsetof(FContributionSlot, Txt_name_01) == 0x000030, "Member 'FContributionSlot::Txt_name_01' has a wrong offset!");
static_assert(offsetof(FContributionSlot, Txt_number_01) == 0x000038, "Member 'FContributionSlot::Txt_number_01' has a wrong offset!");
static_assert(offsetof(FContributionSlot, Txt_percent_01) == 0x000040, "Member 'FContributionSlot::Txt_percent_01' has a wrong offset!");

// ScriptStruct MirMobile.BoneControlData
// 0x0018 (0x0018 - 0x0000)
struct FBoneControlData final
{
public:
	class FString                                 ControlName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneAlpha;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoneControlData) == 0x000008, "Wrong alignment on FBoneControlData");
static_assert(sizeof(FBoneControlData) == 0x000018, "Wrong size on FBoneControlData");
static_assert(offsetof(FBoneControlData, ControlName) == 0x000000, "Member 'FBoneControlData::ControlName' has a wrong offset!");
static_assert(offsetof(FBoneControlData, BoneAlpha) == 0x000010, "Member 'FBoneControlData::BoneAlpha' has a wrong offset!");

// ScriptStruct MirMobile.DecalSpawnInfo
// 0x0024 (0x0060 - 0x003C)
struct alignas(0x08) FDecalSpawnInfo final : public FEffectSpawnInfo
{
public:
	uint8                                         Pad_3C[0x24];                                      // 0x003C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDecalSpawnInfo) == 0x000008, "Wrong alignment on FDecalSpawnInfo");
static_assert(sizeof(FDecalSpawnInfo) == 0x000060, "Wrong size on FDecalSpawnInfo");

// ScriptStruct MirMobile.ParticleBeamSpawnInfo
// 0x005C (0x0098 - 0x003C)
struct alignas(0x08) FParticleBeamSpawnInfo final : public FEffectSpawnInfo
{
public:
	uint8                                         Pad_3C[0x5C];                                      // 0x003C(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParticleBeamSpawnInfo) == 0x000008, "Wrong alignment on FParticleBeamSpawnInfo");
static_assert(sizeof(FParticleBeamSpawnInfo) == 0x000098, "Wrong size on FParticleBeamSpawnInfo");

// ScriptStruct MirMobile.EmoteSlotInfo
// 0x0030 (0x0030 - 0x0000)
struct FEmoteSlotInfo final
{
public:
	int32                                         EmoteID;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmoteNameID;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EmoteName;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 EmoteIconPath;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteSlotInfo) == 0x000008, "Wrong alignment on FEmoteSlotInfo");
static_assert(sizeof(FEmoteSlotInfo) == 0x000030, "Wrong size on FEmoteSlotInfo");
static_assert(offsetof(FEmoteSlotInfo, EmoteID) == 0x000000, "Member 'FEmoteSlotInfo::EmoteID' has a wrong offset!");
static_assert(offsetof(FEmoteSlotInfo, EmoteNameID) == 0x000004, "Member 'FEmoteSlotInfo::EmoteNameID' has a wrong offset!");
static_assert(offsetof(FEmoteSlotInfo, EmoteName) == 0x000008, "Member 'FEmoteSlotInfo::EmoteName' has a wrong offset!");
static_assert(offsetof(FEmoteSlotInfo, EmoteIconPath) == 0x000020, "Member 'FEmoteSlotInfo::EmoteIconPath' has a wrong offset!");

// ScriptStruct MirMobile.GuildInfo
// 0x0020 (0x0020 - 0x0000)
struct FGuildInfo final
{
public:
	uint64                                        GuildID;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0008(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildMarkEdgeIconID;                               // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildMarkIconID;                                   // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuildInfo) == 0x000008, "Wrong alignment on FGuildInfo");
static_assert(sizeof(FGuildInfo) == 0x000020, "Wrong size on FGuildInfo");
static_assert(offsetof(FGuildInfo, GuildID) == 0x000000, "Member 'FGuildInfo::GuildID' has a wrong offset!");
static_assert(offsetof(FGuildInfo, GuildName) == 0x000008, "Member 'FGuildInfo::GuildName' has a wrong offset!");
static_assert(offsetof(FGuildInfo, GuildMarkEdgeIconID) == 0x000018, "Member 'FGuildInfo::GuildMarkEdgeIconID' has a wrong offset!");
static_assert(offsetof(FGuildInfo, GuildMarkIconID) == 0x00001C, "Member 'FGuildInfo::GuildMarkIconID' has a wrong offset!");

// ScriptStruct MirMobile.GachaVisualSettings
// 0x0034 (0x0034 - 0x0000)
struct FGachaVisualSettings final
{
public:
	float                                         BgHue;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorGradingLUT_Intensity;                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DirectionalLightColor;                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TombstoneShineColor;                               // 0x000C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TombstoneCenterLightColor;                         // 0x001C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomIntensity;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGachaVisualSettings) == 0x000004, "Wrong alignment on FGachaVisualSettings");
static_assert(sizeof(FGachaVisualSettings) == 0x000034, "Wrong size on FGachaVisualSettings");
static_assert(offsetof(FGachaVisualSettings, BgHue) == 0x000000, "Member 'FGachaVisualSettings::BgHue' has a wrong offset!");
static_assert(offsetof(FGachaVisualSettings, ColorGradingLUT_Intensity) == 0x000004, "Member 'FGachaVisualSettings::ColorGradingLUT_Intensity' has a wrong offset!");
static_assert(offsetof(FGachaVisualSettings, DirectionalLightColor) == 0x000008, "Member 'FGachaVisualSettings::DirectionalLightColor' has a wrong offset!");
static_assert(offsetof(FGachaVisualSettings, TombstoneShineColor) == 0x00000C, "Member 'FGachaVisualSettings::TombstoneShineColor' has a wrong offset!");
static_assert(offsetof(FGachaVisualSettings, TombstoneCenterLightColor) == 0x00001C, "Member 'FGachaVisualSettings::TombstoneCenterLightColor' has a wrong offset!");
static_assert(offsetof(FGachaVisualSettings, BloomIntensity) == 0x00002C, "Member 'FGachaVisualSettings::BloomIntensity' has a wrong offset!");
static_assert(offsetof(FGachaVisualSettings, BloomThreshold) == 0x000030, "Member 'FGachaVisualSettings::BloomThreshold' has a wrong offset!");

// ScriptStruct MirMobile.MonsterInitInfo
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FMonsterInitInfo final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMonsterInitInfo) == 0x000008, "Wrong alignment on FMonsterInitInfo");
static_assert(sizeof(FMonsterInitInfo) == 0x000038, "Wrong size on FMonsterInitInfo");

// ScriptStruct MirMobile.ResourcePoolData
// 0x0010 (0x0010 - 0x0000)
struct FResourcePoolData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                PResourceObject;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourcePoolData) == 0x000008, "Wrong alignment on FResourcePoolData");
static_assert(sizeof(FResourcePoolData) == 0x000010, "Wrong size on FResourcePoolData");
static_assert(offsetof(FResourcePoolData, PResourceObject) == 0x000008, "Member 'FResourcePoolData::PResourceObject' has a wrong offset!");

// ScriptStruct MirMobile.AsyncLoadData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAsyncLoadData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAsyncLoadData) == 0x000008, "Wrong alignment on FAsyncLoadData");
static_assert(sizeof(FAsyncLoadData) == 0x000028, "Wrong size on FAsyncLoadData");

// ScriptStruct MirMobile.PoolActor
// 0x0008 (0x0008 - 0x0000)
struct FPoolActor final
{
public:
	class AActor*                                 PPoolActor;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoolActor) == 0x000008, "Wrong alignment on FPoolActor");
static_assert(sizeof(FPoolActor) == 0x000008, "Wrong size on FPoolActor");
static_assert(offsetof(FPoolActor, PPoolActor) == 0x000000, "Member 'FPoolActor::PPoolActor' has a wrong offset!");

// ScriptStruct MirMobile.MsgDisplayInfo
// 0x0010 (0x0010 - 0x0000)
struct FMsgDisplayInfo final
{
public:
	TWeakObjectPtr<class UWidgetBase>             M_pSlot;                                           // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M_iCurIndex;                                       // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M_fDestLocY;                                       // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMsgDisplayInfo) == 0x000004, "Wrong alignment on FMsgDisplayInfo");
static_assert(sizeof(FMsgDisplayInfo) == 0x000010, "Wrong size on FMsgDisplayInfo");
static_assert(offsetof(FMsgDisplayInfo, M_pSlot) == 0x000000, "Member 'FMsgDisplayInfo::M_pSlot' has a wrong offset!");
static_assert(offsetof(FMsgDisplayInfo, M_iCurIndex) == 0x000008, "Member 'FMsgDisplayInfo::M_iCurIndex' has a wrong offset!");
static_assert(offsetof(FMsgDisplayInfo, M_fDestLocY) == 0x00000C, "Member 'FMsgDisplayInfo::M_fDestLocY' has a wrong offset!");

// ScriptStruct MirMobile.OccupationReward
// 0x000C (0x000C - 0x0000)
struct FOccupationReward final
{
public:
	EOccupationRewardType                         RewardType;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOccupationReward) == 0x000004, "Wrong alignment on FOccupationReward");
static_assert(sizeof(FOccupationReward) == 0x00000C, "Wrong size on FOccupationReward");
static_assert(offsetof(FOccupationReward, RewardType) == 0x000000, "Member 'FOccupationReward::RewardType' has a wrong offset!");
static_assert(offsetof(FOccupationReward, ID) == 0x000004, "Member 'FOccupationReward::ID' has a wrong offset!");
static_assert(offsetof(FOccupationReward, Count) == 0x000008, "Member 'FOccupationReward::Count' has a wrong offset!");

// ScriptStruct MirMobile.BrushLoading_Callback
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FBrushLoading_Callback final
{
public:
	TWeakObjectPtr<class UObject>                 M_CallbackOwnerPtr;                                // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBrushLoading_Callback) == 0x000008, "Wrong alignment on FBrushLoading_Callback");
static_assert(sizeof(FBrushLoading_Callback) == 0x000018, "Wrong size on FBrushLoading_Callback");
static_assert(offsetof(FBrushLoading_Callback, M_CallbackOwnerPtr) == 0x000000, "Member 'FBrushLoading_Callback::M_CallbackOwnerPtr' has a wrong offset!");

// ScriptStruct MirMobile.BrushLoading
// 0x0028 (0x0028 - 0x0000)
struct FBrushLoading final
{
public:
	class FString                                 M_strPath;                                         // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bLoading;                                        // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBrushLoading_Callback>         M_arCallback;                                      // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrushLoading) == 0x000008, "Wrong alignment on FBrushLoading");
static_assert(sizeof(FBrushLoading) == 0x000028, "Wrong size on FBrushLoading");
static_assert(offsetof(FBrushLoading, M_strPath) == 0x000000, "Member 'FBrushLoading::M_strPath' has a wrong offset!");
static_assert(offsetof(FBrushLoading, M_bLoading) == 0x000010, "Member 'FBrushLoading::M_bLoading' has a wrong offset!");
static_assert(offsetof(FBrushLoading, M_arCallback) == 0x000018, "Member 'FBrushLoading::M_arCallback' has a wrong offset!");

// ScriptStruct MirMobile.PetPlacement
// 0x001C (0x001C - 0x0000)
struct FPetPlacement final
{
public:
	float                                         PetScale;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PetLocation;                                       // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PetRotation;                                       // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPetPlacement) == 0x000004, "Wrong alignment on FPetPlacement");
static_assert(sizeof(FPetPlacement) == 0x00001C, "Wrong size on FPetPlacement");
static_assert(offsetof(FPetPlacement, PetScale) == 0x000000, "Member 'FPetPlacement::PetScale' has a wrong offset!");
static_assert(offsetof(FPetPlacement, PetLocation) == 0x000004, "Member 'FPetPlacement::PetLocation' has a wrong offset!");
static_assert(offsetof(FPetPlacement, PetRotation) == 0x000010, "Member 'FPetPlacement::PetRotation' has a wrong offset!");

// ScriptStruct MirMobile.PhotoMode_ValueRange
// 0x0008 (0x0008 - 0x0000)
struct FPhotoMode_ValueRange final
{
public:
	float                                         MinValue;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhotoMode_ValueRange) == 0x000004, "Wrong alignment on FPhotoMode_ValueRange");
static_assert(sizeof(FPhotoMode_ValueRange) == 0x000008, "Wrong size on FPhotoMode_ValueRange");
static_assert(offsetof(FPhotoMode_ValueRange, MinValue) == 0x000000, "Member 'FPhotoMode_ValueRange::MinValue' has a wrong offset!");
static_assert(offsetof(FPhotoMode_ValueRange, MaxValue) == 0x000004, "Member 'FPhotoMode_ValueRange::MaxValue' has a wrong offset!");

// ScriptStruct MirMobile.PhotoMode_Option
// 0x0008 (0x0008 - 0x0000)
struct FPhotoMode_Option final
{
public:
	int32                                         StringID;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OptionState;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhotoMode_Option) == 0x000004, "Wrong alignment on FPhotoMode_Option");
static_assert(sizeof(FPhotoMode_Option) == 0x000008, "Wrong size on FPhotoMode_Option");
static_assert(offsetof(FPhotoMode_Option, StringID) == 0x000000, "Member 'FPhotoMode_Option::StringID' has a wrong offset!");
static_assert(offsetof(FPhotoMode_Option, OptionState) == 0x000004, "Member 'FPhotoMode_Option::OptionState' has a wrong offset!");

// ScriptStruct MirMobile.PhotoMode_Filter
// 0x0030 (0x0030 - 0x0000)
struct FPhotoMode_Filter final
{
public:
	int32                                         StringID;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 IconColor;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                LUTTexture;                                        // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhotoMode_Filter) == 0x000008, "Wrong alignment on FPhotoMode_Filter");
static_assert(sizeof(FPhotoMode_Filter) == 0x000030, "Wrong size on FPhotoMode_Filter");
static_assert(offsetof(FPhotoMode_Filter, StringID) == 0x000000, "Member 'FPhotoMode_Filter::StringID' has a wrong offset!");
static_assert(offsetof(FPhotoMode_Filter, IconColor) == 0x000004, "Member 'FPhotoMode_Filter::IconColor' has a wrong offset!");
static_assert(offsetof(FPhotoMode_Filter, LUTTexture) == 0x000008, "Member 'FPhotoMode_Filter::LUTTexture' has a wrong offset!");

// ScriptStruct MirMobile.PhotoMode_Pose
// 0x0008 (0x0008 - 0x0000)
struct FPhotoMode_Pose final
{
public:
	int32                                         IconID;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoseAnimIndex;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhotoMode_Pose) == 0x000004, "Wrong alignment on FPhotoMode_Pose");
static_assert(sizeof(FPhotoMode_Pose) == 0x000008, "Wrong size on FPhotoMode_Pose");
static_assert(offsetof(FPhotoMode_Pose, IconID) == 0x000000, "Member 'FPhotoMode_Pose::IconID' has a wrong offset!");
static_assert(offsetof(FPhotoMode_Pose, PoseAnimIndex) == 0x000004, "Member 'FPhotoMode_Pose::PoseAnimIndex' has a wrong offset!");

// ScriptStruct MirMobile.TriggerScriptData
// 0x0018 (0x0018 - 0x0000)
struct FTriggerScriptData final
{
public:
	ETriggerScriptType                            ScriptType;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ScriptValue;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTriggerScriptData) == 0x000008, "Wrong alignment on FTriggerScriptData");
static_assert(sizeof(FTriggerScriptData) == 0x000018, "Wrong size on FTriggerScriptData");
static_assert(offsetof(FTriggerScriptData, ScriptType) == 0x000000, "Member 'FTriggerScriptData::ScriptType' has a wrong offset!");
static_assert(offsetof(FTriggerScriptData, ScriptValue) == 0x000008, "Member 'FTriggerScriptData::ScriptValue' has a wrong offset!");

// ScriptStruct MirMobile.BrushObject
// 0x0020 (0x0020 - 0x0000)
struct FBrushObject final
{
public:
	class UObject*                                M_pObjImage;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              M_vImageSize;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           M_ColorOpacity;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrushObject) == 0x000008, "Wrong alignment on FBrushObject");
static_assert(sizeof(FBrushObject) == 0x000020, "Wrong size on FBrushObject");
static_assert(offsetof(FBrushObject, M_pObjImage) == 0x000000, "Member 'FBrushObject::M_pObjImage' has a wrong offset!");
static_assert(offsetof(FBrushObject, M_vImageSize) == 0x000008, "Member 'FBrushObject::M_vImageSize' has a wrong offset!");
static_assert(offsetof(FBrushObject, M_ColorOpacity) == 0x000010, "Member 'FBrushObject::M_ColorOpacity' has a wrong offset!");

}

