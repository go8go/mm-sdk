#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaStore

#include "Basic.hpp"

#include "XsollaStore_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function XsollaStore.XsollaStoreSubsystem.AddToCart
// 0x0058 (0x0058 - 0x0000)
struct XsollaStoreSubsystem_AddToCart final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0034(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0044(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_AddToCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_AddToCart");
static_assert(sizeof(XsollaStoreSubsystem_AddToCart) == 0x000058, "Wrong size on XsollaStoreSubsystem_AddToCart");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_AddToCart::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_AddToCart::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, ItemSKU) == 0x000020, "Member 'XsollaStoreSubsystem_AddToCart::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, Quantity) == 0x000030, "Member 'XsollaStoreSubsystem_AddToCart::Quantity' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, SuccessCallback) == 0x000034, "Member 'XsollaStoreSubsystem_AddToCart::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_AddToCart, ErrorCallback) == 0x000044, "Member 'XsollaStoreSubsystem_AddToCart::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.BuyItemWithVirtualCurrency
// 0x0050 (0x0050 - 0x0000)
struct XsollaStoreSubsystem_BuyItemWithVirtualCurrency final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencySKU;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 OrderId)>                SuccessCallback;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_BuyItemWithVirtualCurrency");
static_assert(sizeof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency) == 0x000050, "Wrong size on XsollaStoreSubsystem_BuyItemWithVirtualCurrency");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, ItemSKU) == 0x000010, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, CurrencySKU) == 0x000020, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::CurrencySKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, SuccessCallback) == 0x000030, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_BuyItemWithVirtualCurrency, ErrorCallback) == 0x000040, "Member 'XsollaStoreSubsystem_BuyItemWithVirtualCurrency::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.CheckOrder
// 0x0038 (0x0038 - 0x0000)
struct XsollaStoreSubsystem_CheckOrder final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 OrderId, EXsollaOrderStatus OrderStatus)> SuccessCallback;                                   // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreSubsystem_CheckOrder) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_CheckOrder");
static_assert(sizeof(XsollaStoreSubsystem_CheckOrder) == 0x000038, "Wrong size on XsollaStoreSubsystem_CheckOrder");
static_assert(offsetof(XsollaStoreSubsystem_CheckOrder, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_CheckOrder::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CheckOrder, OrderId) == 0x000010, "Member 'XsollaStoreSubsystem_CheckOrder::OrderId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CheckOrder, SuccessCallback) == 0x000014, "Member 'XsollaStoreSubsystem_CheckOrder::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_CheckOrder, ErrorCallback) == 0x000024, "Member 'XsollaStoreSubsystem_CheckOrder::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.ClearCart
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_ClearCart final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_ClearCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_ClearCart");
static_assert(sizeof(XsollaStoreSubsystem_ClearCart) == 0x000040, "Wrong size on XsollaStoreSubsystem_ClearCart");
static_assert(offsetof(XsollaStoreSubsystem_ClearCart, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_ClearCart::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ClearCart, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_ClearCart::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ClearCart, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_ClearCart::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ClearCart, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_ClearCart::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.ConsumeInventoryItem
// 0x0058 (0x0058 - 0x0000)
struct XsollaStoreSubsystem_ConsumeInventoryItem final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId;                                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_ConsumeInventoryItem) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_ConsumeInventoryItem");
static_assert(sizeof(XsollaStoreSubsystem_ConsumeInventoryItem) == 0x000058, "Wrong size on XsollaStoreSubsystem_ConsumeInventoryItem");
static_assert(offsetof(XsollaStoreSubsystem_ConsumeInventoryItem, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_ConsumeInventoryItem::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ConsumeInventoryItem, ItemSKU) == 0x000010, "Member 'XsollaStoreSubsystem_ConsumeInventoryItem::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ConsumeInventoryItem, Quantity) == 0x000020, "Member 'XsollaStoreSubsystem_ConsumeInventoryItem::Quantity' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ConsumeInventoryItem, InstanceId) == 0x000028, "Member 'XsollaStoreSubsystem_ConsumeInventoryItem::InstanceId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ConsumeInventoryItem, SuccessCallback) == 0x000038, "Member 'XsollaStoreSubsystem_ConsumeInventoryItem::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_ConsumeInventoryItem, ErrorCallback) == 0x000048, "Member 'XsollaStoreSubsystem_ConsumeInventoryItem::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.FetchCartPaymentToken
// 0x0070 (0x0070 - 0x0000)
struct XsollaStoreSubsystem_FetchCartPaymentToken final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& AccessToken, int32 OrderId)> SuccessCallback;                                   // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_FetchCartPaymentToken) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_FetchCartPaymentToken");
static_assert(sizeof(XsollaStoreSubsystem_FetchCartPaymentToken) == 0x000070, "Wrong size on XsollaStoreSubsystem_FetchCartPaymentToken");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, Currency) == 0x000020, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::Currency' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, Country) == 0x000030, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, Locale) == 0x000040, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, SuccessCallback) == 0x000050, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchCartPaymentToken, ErrorCallback) == 0x000060, "Member 'XsollaStoreSubsystem_FetchCartPaymentToken::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.FetchPaymentToken
// 0x0070 (0x0070 - 0x0000)
struct XsollaStoreSubsystem_FetchPaymentToken final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Locale;                                            // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& AccessToken, int32 OrderId)> SuccessCallback;                                   // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_FetchPaymentToken) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_FetchPaymentToken");
static_assert(sizeof(XsollaStoreSubsystem_FetchPaymentToken) == 0x000070, "Wrong size on XsollaStoreSubsystem_FetchPaymentToken");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_FetchPaymentToken::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, ItemSKU) == 0x000010, "Member 'XsollaStoreSubsystem_FetchPaymentToken::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, Currency) == 0x000020, "Member 'XsollaStoreSubsystem_FetchPaymentToken::Currency' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, Country) == 0x000030, "Member 'XsollaStoreSubsystem_FetchPaymentToken::Country' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, Locale) == 0x000040, "Member 'XsollaStoreSubsystem_FetchPaymentToken::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, SuccessCallback) == 0x000050, "Member 'XsollaStoreSubsystem_FetchPaymentToken::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FetchPaymentToken, ErrorCallback) == 0x000060, "Member 'XsollaStoreSubsystem_FetchPaymentToken::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrency
// 0x0030 (0x0030 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualCurrency final
{
public:
	class FString                                 CurrencySKU;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FVirtualCurrency& Currency)> SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualCurrency) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualCurrency");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualCurrency) == 0x000030, "Wrong size on XsollaStoreSubsystem_GetVirtualCurrency");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrency, CurrencySKU) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualCurrency::CurrencySKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrency, SuccessCallback) == 0x000010, "Member 'XsollaStoreSubsystem_GetVirtualCurrency::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrency, ErrorCallback) == 0x000020, "Member 'XsollaStoreSubsystem_GetVirtualCurrency::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyPackage
// 0x0030 (0x0030 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualCurrencyPackage final
{
public:
	class FString                                 PackageSKU;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FVirtualCurrencyPackage& CurrencyPackage)> SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualCurrencyPackage) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualCurrencyPackage");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualCurrencyPackage) == 0x000030, "Wrong size on XsollaStoreSubsystem_GetVirtualCurrencyPackage");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackage, PackageSKU) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackage::PackageSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackage, SuccessCallback) == 0x000010, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackage::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackage, ErrorCallback) == 0x000020, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackage::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.Initialize
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreSubsystem_Initialize final
{
public:
	class FString                                 InProjectId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_Initialize) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_Initialize");
static_assert(sizeof(XsollaStoreSubsystem_Initialize) == 0x000010, "Wrong size on XsollaStoreSubsystem_Initialize");
static_assert(offsetof(XsollaStoreSubsystem_Initialize, InProjectId) == 0x000000, "Member 'XsollaStoreSubsystem_Initialize::InProjectId' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.LaunchPaymentConsole
// 0x0018 (0x0018 - 0x0000)
struct XsollaStoreSubsystem_LaunchPaymentConsole final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            BrowserWidget;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_LaunchPaymentConsole) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_LaunchPaymentConsole");
static_assert(sizeof(XsollaStoreSubsystem_LaunchPaymentConsole) == 0x000018, "Wrong size on XsollaStoreSubsystem_LaunchPaymentConsole");
static_assert(offsetof(XsollaStoreSubsystem_LaunchPaymentConsole, AccessToken) == 0x000000, "Member 'XsollaStoreSubsystem_LaunchPaymentConsole::AccessToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_LaunchPaymentConsole, BrowserWidget) == 0x000010, "Member 'XsollaStoreSubsystem_LaunchPaymentConsole::BrowserWidget' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.LoadImageFromWeb
// 0x0030 (0x0030 - 0x0000)
struct XsollaStoreSubsystem_LoadImageFromWeb final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FSlateBrush& ImageBrush)> SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_LoadImageFromWeb) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_LoadImageFromWeb");
static_assert(sizeof(XsollaStoreSubsystem_LoadImageFromWeb) == 0x000030, "Wrong size on XsollaStoreSubsystem_LoadImageFromWeb");
static_assert(offsetof(XsollaStoreSubsystem_LoadImageFromWeb, URL) == 0x000000, "Member 'XsollaStoreSubsystem_LoadImageFromWeb::URL' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_LoadImageFromWeb, SuccessCallback) == 0x000010, "Member 'XsollaStoreSubsystem_LoadImageFromWeb::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_LoadImageFromWeb, ErrorCallback) == 0x000020, "Member 'XsollaStoreSubsystem_LoadImageFromWeb::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.RemoveFromCart
// 0x0050 (0x0050 - 0x0000)
struct XsollaStoreSubsystem_RemoveFromCart final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSKU;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_RemoveFromCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_RemoveFromCart");
static_assert(sizeof(XsollaStoreSubsystem_RemoveFromCart) == 0x000050, "Wrong size on XsollaStoreSubsystem_RemoveFromCart");
static_assert(offsetof(XsollaStoreSubsystem_RemoveFromCart, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_RemoveFromCart::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RemoveFromCart, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_RemoveFromCart::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RemoveFromCart, ItemSKU) == 0x000020, "Member 'XsollaStoreSubsystem_RemoveFromCart::ItemSKU' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RemoveFromCart, SuccessCallback) == 0x000030, "Member 'XsollaStoreSubsystem_RemoveFromCart::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_RemoveFromCart, ErrorCallback) == 0x000040, "Member 'XsollaStoreSubsystem_RemoveFromCart::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.UpdateCart
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_UpdateCart final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_UpdateCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_UpdateCart");
static_assert(sizeof(XsollaStoreSubsystem_UpdateCart) == 0x000040, "Wrong size on XsollaStoreSubsystem_UpdateCart");
static_assert(offsetof(XsollaStoreSubsystem_UpdateCart, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_UpdateCart::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateCart, CartId) == 0x000010, "Member 'XsollaStoreSubsystem_UpdateCart::CartId' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateCart, SuccessCallback) == 0x000020, "Member 'XsollaStoreSubsystem_UpdateCart::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateCart, ErrorCallback) == 0x000030, "Member 'XsollaStoreSubsystem_UpdateCart::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.UpdateInventory
// 0x0030 (0x0030 - 0x0000)
struct XsollaStoreSubsystem_UpdateInventory final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_UpdateInventory) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_UpdateInventory");
static_assert(sizeof(XsollaStoreSubsystem_UpdateInventory) == 0x000030, "Wrong size on XsollaStoreSubsystem_UpdateInventory");
static_assert(offsetof(XsollaStoreSubsystem_UpdateInventory, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_UpdateInventory::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateInventory, SuccessCallback) == 0x000010, "Member 'XsollaStoreSubsystem_UpdateInventory::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateInventory, ErrorCallback) == 0x000020, "Member 'XsollaStoreSubsystem_UpdateInventory::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.UpdateItemGroups
// 0x0030 (0x0030 - 0x0000)
struct XsollaStoreSubsystem_UpdateItemGroups final
{
public:
	class FString                                 Locale;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_UpdateItemGroups) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_UpdateItemGroups");
static_assert(sizeof(XsollaStoreSubsystem_UpdateItemGroups) == 0x000030, "Wrong size on XsollaStoreSubsystem_UpdateItemGroups");
static_assert(offsetof(XsollaStoreSubsystem_UpdateItemGroups, Locale) == 0x000000, "Member 'XsollaStoreSubsystem_UpdateItemGroups::Locale' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateItemGroups, SuccessCallback) == 0x000010, "Member 'XsollaStoreSubsystem_UpdateItemGroups::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateItemGroups, ErrorCallback) == 0x000020, "Member 'XsollaStoreSubsystem_UpdateItemGroups::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.UpdateVirtualCurrencies
// 0x0020 (0x0020 - 0x0000)
struct XsollaStoreSubsystem_UpdateVirtualCurrencies final
{
public:
	TDelegate<void()>                             SuccessCallback;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_UpdateVirtualCurrencies) == 0x000004, "Wrong alignment on XsollaStoreSubsystem_UpdateVirtualCurrencies");
static_assert(sizeof(XsollaStoreSubsystem_UpdateVirtualCurrencies) == 0x000020, "Wrong size on XsollaStoreSubsystem_UpdateVirtualCurrencies");
static_assert(offsetof(XsollaStoreSubsystem_UpdateVirtualCurrencies, SuccessCallback) == 0x000000, "Member 'XsollaStoreSubsystem_UpdateVirtualCurrencies::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateVirtualCurrencies, ErrorCallback) == 0x000010, "Member 'XsollaStoreSubsystem_UpdateVirtualCurrencies::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.UpdateVirtualCurrencyBalance
// 0x0030 (0x0030 - 0x0000)
struct XsollaStoreSubsystem_UpdateVirtualCurrencyBalance final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_UpdateVirtualCurrencyBalance) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_UpdateVirtualCurrencyBalance");
static_assert(sizeof(XsollaStoreSubsystem_UpdateVirtualCurrencyBalance) == 0x000030, "Wrong size on XsollaStoreSubsystem_UpdateVirtualCurrencyBalance");
static_assert(offsetof(XsollaStoreSubsystem_UpdateVirtualCurrencyBalance, AuthToken) == 0x000000, "Member 'XsollaStoreSubsystem_UpdateVirtualCurrencyBalance::AuthToken' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateVirtualCurrencyBalance, SuccessCallback) == 0x000010, "Member 'XsollaStoreSubsystem_UpdateVirtualCurrencyBalance::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateVirtualCurrencyBalance, ErrorCallback) == 0x000020, "Member 'XsollaStoreSubsystem_UpdateVirtualCurrencyBalance::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.UpdateVirtualCurrencyPackages
// 0x0020 (0x0020 - 0x0000)
struct XsollaStoreSubsystem_UpdateVirtualCurrencyPackages final
{
public:
	TDelegate<void()>                             SuccessCallback;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_UpdateVirtualCurrencyPackages) == 0x000004, "Wrong alignment on XsollaStoreSubsystem_UpdateVirtualCurrencyPackages");
static_assert(sizeof(XsollaStoreSubsystem_UpdateVirtualCurrencyPackages) == 0x000020, "Wrong size on XsollaStoreSubsystem_UpdateVirtualCurrencyPackages");
static_assert(offsetof(XsollaStoreSubsystem_UpdateVirtualCurrencyPackages, SuccessCallback) == 0x000000, "Member 'XsollaStoreSubsystem_UpdateVirtualCurrencyPackages::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateVirtualCurrencyPackages, ErrorCallback) == 0x000010, "Member 'XsollaStoreSubsystem_UpdateVirtualCurrencyPackages::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.UpdateVirtualItems
// 0x0020 (0x0020 - 0x0000)
struct XsollaStoreSubsystem_UpdateVirtualItems final
{
public:
	TDelegate<void()>                             SuccessCallback;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)> ErrorCallback;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_UpdateVirtualItems) == 0x000004, "Wrong alignment on XsollaStoreSubsystem_UpdateVirtualItems");
static_assert(sizeof(XsollaStoreSubsystem_UpdateVirtualItems) == 0x000020, "Wrong size on XsollaStoreSubsystem_UpdateVirtualItems");
static_assert(offsetof(XsollaStoreSubsystem_UpdateVirtualItems, SuccessCallback) == 0x000000, "Member 'XsollaStoreSubsystem_UpdateVirtualItems::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_UpdateVirtualItems, ErrorCallback) == 0x000010, "Member 'XsollaStoreSubsystem_UpdateVirtualItems::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.FormatPrice
// 0x0028 (0x0028 - 0x0000)
struct XsollaStoreSubsystem_FormatPrice final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_FormatPrice) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_FormatPrice");
static_assert(sizeof(XsollaStoreSubsystem_FormatPrice) == 0x000028, "Wrong size on XsollaStoreSubsystem_FormatPrice");
static_assert(offsetof(XsollaStoreSubsystem_FormatPrice, Amount) == 0x000000, "Member 'XsollaStoreSubsystem_FormatPrice::Amount' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FormatPrice, Currency) == 0x000008, "Member 'XsollaStoreSubsystem_FormatPrice::Currency' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_FormatPrice, ReturnValue) == 0x000018, "Member 'XsollaStoreSubsystem_FormatPrice::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetCart
// 0x0040 (0x0040 - 0x0000)
struct XsollaStoreSubsystem_GetCart final
{
public:
	struct FStoreCart                             ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetCart) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetCart");
static_assert(sizeof(XsollaStoreSubsystem_GetCart) == 0x000040, "Wrong size on XsollaStoreSubsystem_GetCart");
static_assert(offsetof(XsollaStoreSubsystem_GetCart, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetCart::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetCurrencyLibrary
// 0x0008 (0x0008 - 0x0000)
struct XsollaStoreSubsystem_GetCurrencyLibrary final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetCurrencyLibrary) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetCurrencyLibrary");
static_assert(sizeof(XsollaStoreSubsystem_GetCurrencyLibrary) == 0x000008, "Wrong size on XsollaStoreSubsystem_GetCurrencyLibrary");
static_assert(offsetof(XsollaStoreSubsystem_GetCurrencyLibrary, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetCurrencyLibrary::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetInventory
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreSubsystem_GetInventory final
{
public:
	struct FStoreInventory                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetInventory) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetInventory");
static_assert(sizeof(XsollaStoreSubsystem_GetInventory) == 0x000010, "Wrong size on XsollaStoreSubsystem_GetInventory");
static_assert(offsetof(XsollaStoreSubsystem_GetInventory, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetInventory::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetItemsData
// 0x0070 (0x0070 - 0x0000)
struct XsollaStoreSubsystem_GetItemsData final
{
public:
	struct FStoreItemsData                        ReturnValue;                                       // 0x0000(0x0070)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetItemsData) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetItemsData");
static_assert(sizeof(XsollaStoreSubsystem_GetItemsData) == 0x000070, "Wrong size on XsollaStoreSubsystem_GetItemsData");
static_assert(offsetof(XsollaStoreSubsystem_GetItemsData, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetItemsData::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetPendingPaystationUrl
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreSubsystem_GetPendingPaystationUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetPendingPaystationUrl) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetPendingPaystationUrl");
static_assert(sizeof(XsollaStoreSubsystem_GetPendingPaystationUrl) == 0x000010, "Wrong size on XsollaStoreSubsystem_GetPendingPaystationUrl");
static_assert(offsetof(XsollaStoreSubsystem_GetPendingPaystationUrl, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetPendingPaystationUrl::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyBalance
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualCurrencyBalance final
{
public:
	TArray<struct FVirtualCurrencyBalance>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualCurrencyBalance) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualCurrencyBalance");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualCurrencyBalance) == 0x000010, "Wrong size on XsollaStoreSubsystem_GetVirtualCurrencyBalance");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyBalance, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyBalance::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyData
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualCurrencyData final
{
public:
	TArray<struct FVirtualCurrency>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualCurrencyData) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualCurrencyData");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualCurrencyData) == 0x000010, "Wrong size on XsollaStoreSubsystem_GetVirtualCurrencyData");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyData, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyData::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyPackages
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualCurrencyPackages final
{
public:
	TArray<struct FVirtualCurrencyPackage>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualCurrencyPackages) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualCurrencyPackages");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualCurrencyPackages) == 0x000010, "Wrong size on XsollaStoreSubsystem_GetVirtualCurrencyPackages");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualCurrencyPackages, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualCurrencyPackages::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualItems
// 0x0020 (0x0020 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualItems final
{
public:
	class FString                                 GroupFilter;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStoreItem>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualItems) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualItems");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualItems) == 0x000020, "Wrong size on XsollaStoreSubsystem_GetVirtualItems");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItems, GroupFilter) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualItems::GroupFilter' has a wrong offset!");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItems, ReturnValue) == 0x000010, "Member 'XsollaStoreSubsystem_GetVirtualItems::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreSubsystem.GetVirtualItemsWithoutGroup
// 0x0010 (0x0010 - 0x0000)
struct XsollaStoreSubsystem_GetVirtualItemsWithoutGroup final
{
public:
	TArray<struct FStoreItem>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreSubsystem_GetVirtualItemsWithoutGroup) == 0x000008, "Wrong alignment on XsollaStoreSubsystem_GetVirtualItemsWithoutGroup");
static_assert(sizeof(XsollaStoreSubsystem_GetVirtualItemsWithoutGroup) == 0x000010, "Wrong size on XsollaStoreSubsystem_GetVirtualItemsWithoutGroup");
static_assert(offsetof(XsollaStoreSubsystem_GetVirtualItemsWithoutGroup, ReturnValue) == 0x000000, "Member 'XsollaStoreSubsystem_GetVirtualItemsWithoutGroup::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreImageLoader.LoadImage
// 0x0030 (0x0030 - 0x0000)
struct XsollaStoreImageLoader_LoadImage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FSlateBrush& ImageBrush)> SuccessCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ErrorCallback;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreImageLoader_LoadImage) == 0x000008, "Wrong alignment on XsollaStoreImageLoader_LoadImage");
static_assert(sizeof(XsollaStoreImageLoader_LoadImage) == 0x000030, "Wrong size on XsollaStoreImageLoader_LoadImage");
static_assert(offsetof(XsollaStoreImageLoader_LoadImage, URL) == 0x000000, "Member 'XsollaStoreImageLoader_LoadImage::URL' has a wrong offset!");
static_assert(offsetof(XsollaStoreImageLoader_LoadImage, SuccessCallback) == 0x000010, "Member 'XsollaStoreImageLoader_LoadImage::SuccessCallback' has a wrong offset!");
static_assert(offsetof(XsollaStoreImageLoader_LoadImage, ErrorCallback) == 0x000020, "Member 'XsollaStoreImageLoader_LoadImage::ErrorCallback' has a wrong offset!");

// Function XsollaStore.XsollaStoreLibrary.Equal_StoreCartStoreCart
// 0x0088 (0x0088 - 0x0000)
struct XsollaStoreLibrary_Equal_StoreCartStoreCart final
{
public:
	struct FStoreCart                             A;                                                 // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FStoreCart                             B;                                                 // 0x0040(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XsollaStoreLibrary_Equal_StoreCartStoreCart) == 0x000008, "Wrong alignment on XsollaStoreLibrary_Equal_StoreCartStoreCart");
static_assert(sizeof(XsollaStoreLibrary_Equal_StoreCartStoreCart) == 0x000088, "Wrong size on XsollaStoreLibrary_Equal_StoreCartStoreCart");
static_assert(offsetof(XsollaStoreLibrary_Equal_StoreCartStoreCart, A) == 0x000000, "Member 'XsollaStoreLibrary_Equal_StoreCartStoreCart::A' has a wrong offset!");
static_assert(offsetof(XsollaStoreLibrary_Equal_StoreCartStoreCart, B) == 0x000040, "Member 'XsollaStoreLibrary_Equal_StoreCartStoreCart::B' has a wrong offset!");
static_assert(offsetof(XsollaStoreLibrary_Equal_StoreCartStoreCart, ReturnValue) == 0x000080, "Member 'XsollaStoreLibrary_Equal_StoreCartStoreCart::ReturnValue' has a wrong offset!");

// Function XsollaStore.XsollaStoreLibrary.GetStoreSettings
// 0x0008 (0x0008 - 0x0000)
struct XsollaStoreLibrary_GetStoreSettings final
{
public:
	class UXsollaStoreSettings*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XsollaStoreLibrary_GetStoreSettings) == 0x000008, "Wrong alignment on XsollaStoreLibrary_GetStoreSettings");
static_assert(sizeof(XsollaStoreLibrary_GetStoreSettings) == 0x000008, "Wrong size on XsollaStoreLibrary_GetStoreSettings");
static_assert(offsetof(XsollaStoreLibrary_GetStoreSettings, ReturnValue) == 0x000000, "Member 'XsollaStoreLibrary_GetStoreSettings::ReturnValue' has a wrong offset!");

}

