#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WebBrowserWidget

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class WebBrowserWidget.WebBrowser
// 0x0048 (0x0150 - 0x0108)
class UWebBrowser : public UWidget
{
public:
	UMulticastInlineDelegateProperty_             OnUrlChanged;                                      // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnBeforePopup;                                     // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 InitialURL;                                        // 0x0128(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportsTransparency;                             // 0x0138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139[0x17];                                     // 0x0139(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindUObject(const class FString& Name_0, class UObject* Object, bool bIsPermanent);
	void CallJSFunction(const class FString& FunctionName, const class FString& Param);
	void ExecuteJavascript(const class FString& ScriptText);
	void LoadRequest(const class FString& URL, const class FString& Method, const TMap<class FString, class FString>& HeaderMap, const class FString& Content);
	void LoadString(const class FString& Contents, const class FString& DummyURL);
	void LoadURL(const class FString& NewURL);
	void OnBeforePopup__DelegateSignature(const class FString& URL, const class FString& Frame);
	void OnUrlChanged__DelegateSignature(const class FText& Text);
	void SetFocusToBrowser();
	void UnbindUObject(const class FString& Name_0, class UObject* Object, bool bIsPermanent);

	class FText GetTitleText() const;
	class FString GetUrl() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebBrowser">();
	}
	static class UWebBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebBrowser>();
	}
};
static_assert(alignof(UWebBrowser) == 0x000008, "Wrong alignment on UWebBrowser");
static_assert(sizeof(UWebBrowser) == 0x000150, "Wrong size on UWebBrowser");
static_assert(offsetof(UWebBrowser, OnUrlChanged) == 0x000108, "Member 'UWebBrowser::OnUrlChanged' has a wrong offset!");
static_assert(offsetof(UWebBrowser, OnBeforePopup) == 0x000118, "Member 'UWebBrowser::OnBeforePopup' has a wrong offset!");
static_assert(offsetof(UWebBrowser, InitialURL) == 0x000128, "Member 'UWebBrowser::InitialURL' has a wrong offset!");
static_assert(offsetof(UWebBrowser, bSupportsTransparency) == 0x000138, "Member 'UWebBrowser::bSupportsTransparency' has a wrong offset!");

// Class WebBrowserWidget.WebBrowserAssetManager
// 0x0050 (0x0078 - 0x0028)
class UWebBrowserAssetManager final : public UObject
{
public:
	TSoftObjectPtr<class UMaterial>               DefaultMaterial;                                   // 0x0028(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x28];                                      // 0x0050(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebBrowserAssetManager">();
	}
	static class UWebBrowserAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebBrowserAssetManager>();
	}
};
static_assert(alignof(UWebBrowserAssetManager) == 0x000008, "Wrong alignment on UWebBrowserAssetManager");
static_assert(sizeof(UWebBrowserAssetManager) == 0x000078, "Wrong size on UWebBrowserAssetManager");
static_assert(offsetof(UWebBrowserAssetManager, DefaultMaterial) == 0x000028, "Member 'UWebBrowserAssetManager::DefaultMaterial' has a wrong offset!");

}

