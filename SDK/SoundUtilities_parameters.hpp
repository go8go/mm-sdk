#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundUtilities

#include "Basic.hpp"


namespace SDK::Params
{

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetBeatTempo
// 0x0010 (0x0010 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetBeatTempo final
{
public:
	float                                         BeatsPerMinute;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeatMultiplier;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DivisionsOfWholeNote;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetBeatTempo");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo) == 0x000010, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetBeatTempo");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo, BeatsPerMinute) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetBeatTempo::BeatsPerMinute' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo, BeatMultiplier) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetBeatTempo::BeatMultiplier' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo, DivisionsOfWholeNote) == 0x000008, "Member 'SoundUtilitiesBPFunctionLibrary_GetBeatTempo::DivisionsOfWholeNote' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetBeatTempo, ReturnValue) == 0x00000C, "Member 'SoundUtilitiesBPFunctionLibrary_GetBeatTempo::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetFrequencyFromMIDIPitch
// 0x0008 (0x0008 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch final
{
public:
	int32                                         MidiNote;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch) == 0x000008, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch, MidiNote) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch::MidiNote' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch, ReturnValue) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetFrequencyFromMIDIPitch::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetMIDIPitchFromFrequency
// 0x0008 (0x0008 - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency final
{
public:
	float                                         Frequency;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency) == 0x000008, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency, Frequency) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency::Frequency' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency, ReturnValue) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetMIDIPitchFromFrequency::ReturnValue' has a wrong offset!");

// Function SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetPitchScaleFromMIDIPitch
// 0x000C (0x000C - 0x0000)
struct SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch final
{
public:
	int32                                         BaseMidiNote;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetMidiNote;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch) == 0x000004, "Wrong alignment on SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch");
static_assert(sizeof(SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch) == 0x00000C, "Wrong size on SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch, BaseMidiNote) == 0x000000, "Member 'SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch::BaseMidiNote' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch, TargetMidiNote) == 0x000004, "Member 'SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch::TargetMidiNote' has a wrong offset!");
static_assert(offsetof(SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch, ReturnValue) == 0x000008, "Member 'SoundUtilitiesBPFunctionLibrary_GetPitchScaleFromMIDIPitch::ReturnValue' has a wrong offset!");

}

