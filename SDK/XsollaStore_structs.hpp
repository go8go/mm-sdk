#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaStore

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum XsollaStore.EXsollaOrderStatus
// NumValues: 0x0005
enum class EXsollaOrderStatus : uint8
{
	Unknown                                  = 0,
	New                                      = 1,
	Paid                                     = 2,
	Done                                     = 3,
	EXsollaOrderStatus_MAX                   = 4,
};

// Enum XsollaStore.EXsollaPublishingPlatform
// NumValues: 0x000E
enum class EXsollaPublishingPlatform : uint8
{
	NotDefined                               = 0,
	PlaystationNetwork                       = 1,
	XboxLive                                 = 2,
	Xsolla                                   = 3,
	PcStandalone                             = 4,
	NintendoShop                             = 5,
	GooglePlay                               = 6,
	AppStoreIos                              = 7,
	AndroidStandalone                        = 8,
	IosStandalone                            = 9,
	AndroidOther                             = 10,
	IosOther                                 = 11,
	PcOther                                  = 12,
	EXsollaPublishingPlatform_MAX            = 13,
};

// Enum XsollaStore.EXsollaPaymentUiTheme
// NumValues: 0x0004
enum class EXsollaPaymentUiTheme : uint8
{
	Default                                  = 0,
	DefaultDark                              = 1,
	Dark                                     = 2,
	EXsollaPaymentUiTheme_MAX                = 3,
};

// Enum XsollaStore.EXsollaRequestVerb
// NumValues: 0x0005
enum class EXsollaRequestVerb : uint8
{
	GET                                      = 0,
	POST                                     = 1,
	PUT                                      = 2,
	DELETE                                   = 3,
	EXsollaRequestVerb_MAX                   = 4,
};

// ScriptStruct XsollaStore.VirtualCurrencyBalance
// 0x0048 (0x0048 - 0x0000)
struct FVirtualCurrencyBalance final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVirtualCurrencyBalance) == 0x000008, "Wrong alignment on FVirtualCurrencyBalance");
static_assert(sizeof(FVirtualCurrencyBalance) == 0x000048, "Wrong size on FVirtualCurrencyBalance");
static_assert(offsetof(FVirtualCurrencyBalance, Sku) == 0x000000, "Member 'FVirtualCurrencyBalance::Sku' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyBalance, Name) == 0x000010, "Member 'FVirtualCurrencyBalance::Name' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyBalance, Description) == 0x000020, "Member 'FVirtualCurrencyBalance::Description' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyBalance, Image_url) == 0x000030, "Member 'FVirtualCurrencyBalance::Image_url' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyBalance, Amount) == 0x000040, "Member 'FVirtualCurrencyBalance::Amount' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrencyBalanceData
// 0x0010 (0x0010 - 0x0000)
struct FVirtualCurrencyBalanceData final
{
public:
	TArray<struct FVirtualCurrencyBalance>        Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyBalanceData) == 0x000008, "Wrong alignment on FVirtualCurrencyBalanceData");
static_assert(sizeof(FVirtualCurrencyBalanceData) == 0x000010, "Wrong size on FVirtualCurrencyBalanceData");
static_assert(offsetof(FVirtualCurrencyBalanceData, Items) == 0x000000, "Member 'FVirtualCurrencyBalanceData::Items' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrencyPrice
// 0x0030 (0x0030 - 0x0000)
struct FVirtualCurrencyPrice final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_default;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount_without_discount;                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Image_url;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyPrice) == 0x000008, "Wrong alignment on FVirtualCurrencyPrice");
static_assert(sizeof(FVirtualCurrencyPrice) == 0x000030, "Wrong size on FVirtualCurrencyPrice");
static_assert(offsetof(FVirtualCurrencyPrice, Sku) == 0x000000, "Member 'FVirtualCurrencyPrice::Sku' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPrice, Is_default) == 0x000010, "Member 'FVirtualCurrencyPrice::Is_default' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPrice, Amount) == 0x000014, "Member 'FVirtualCurrencyPrice::Amount' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPrice, Amount_without_discount) == 0x000018, "Member 'FVirtualCurrencyPrice::Amount_without_discount' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPrice, Image_url) == 0x000020, "Member 'FVirtualCurrencyPrice::Image_url' has a wrong offset!");

// ScriptStruct XsollaStore.StorePrice
// 0x0018 (0x0018 - 0x0000)
struct FStorePrice final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount_without_discount;                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStorePrice) == 0x000008, "Wrong alignment on FStorePrice");
static_assert(sizeof(FStorePrice) == 0x000018, "Wrong size on FStorePrice");
static_assert(offsetof(FStorePrice, Amount) == 0x000000, "Member 'FStorePrice::Amount' has a wrong offset!");
static_assert(offsetof(FStorePrice, Amount_without_discount) == 0x000004, "Member 'FStorePrice::Amount_without_discount' has a wrong offset!");
static_assert(offsetof(FStorePrice, Currency) == 0x000008, "Member 'FStorePrice::Currency' has a wrong offset!");

// ScriptStruct XsollaStore.StoreCartItem
// 0x0088 (0x0088 - 0x0000)
struct FStoreCartItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Long_description;                                  // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStorePrice                            Price;                                             // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FVirtualCurrencyPrice>          Vc_prices;                                         // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoreCartItem) == 0x000008, "Wrong alignment on FStoreCartItem");
static_assert(sizeof(FStoreCartItem) == 0x000088, "Wrong size on FStoreCartItem");
static_assert(offsetof(FStoreCartItem, Sku) == 0x000000, "Member 'FStoreCartItem::Sku' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Name) == 0x000010, "Member 'FStoreCartItem::Name' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Description) == 0x000020, "Member 'FStoreCartItem::Description' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Long_description) == 0x000030, "Member 'FStoreCartItem::Long_description' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Is_free) == 0x000040, "Member 'FStoreCartItem::Is_free' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Price) == 0x000048, "Member 'FStoreCartItem::Price' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Vc_prices) == 0x000060, "Member 'FStoreCartItem::Vc_prices' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Image_url) == 0x000070, "Member 'FStoreCartItem::Image_url' has a wrong offset!");
static_assert(offsetof(FStoreCartItem, Quantity) == 0x000080, "Member 'FStoreCartItem::Quantity' has a wrong offset!");

// ScriptStruct XsollaStore.StoreCart
// 0x0040 (0x0040 - 0x0000)
struct FStoreCart final
{
public:
	class FString                                 Cart_id;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStorePrice                            Price;                                             // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStoreCartItem>                 Items;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreCart) == 0x000008, "Wrong alignment on FStoreCart");
static_assert(sizeof(FStoreCart) == 0x000040, "Wrong size on FStoreCart");
static_assert(offsetof(FStoreCart, Cart_id) == 0x000000, "Member 'FStoreCart::Cart_id' has a wrong offset!");
static_assert(offsetof(FStoreCart, Price) == 0x000010, "Member 'FStoreCart::Price' has a wrong offset!");
static_assert(offsetof(FStoreCart, Is_free) == 0x000028, "Member 'FStoreCart::Is_free' has a wrong offset!");
static_assert(offsetof(FStoreCart, Items) == 0x000030, "Member 'FStoreCart::Items' has a wrong offset!");

// ScriptStruct XsollaStore.StoreGroup
// 0x0060 (0x0060 - 0x0000)
struct FStoreGroup final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 External_id;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parent_external_id;                                // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreGroup) == 0x000008, "Wrong alignment on FStoreGroup");
static_assert(sizeof(FStoreGroup) == 0x000060, "Wrong size on FStoreGroup");
static_assert(offsetof(FStoreGroup, ID) == 0x000000, "Member 'FStoreGroup::ID' has a wrong offset!");
static_assert(offsetof(FStoreGroup, External_id) == 0x000008, "Member 'FStoreGroup::External_id' has a wrong offset!");
static_assert(offsetof(FStoreGroup, Name) == 0x000018, "Member 'FStoreGroup::Name' has a wrong offset!");
static_assert(offsetof(FStoreGroup, Description) == 0x000028, "Member 'FStoreGroup::Description' has a wrong offset!");
static_assert(offsetof(FStoreGroup, Image_url) == 0x000038, "Member 'FStoreGroup::Image_url' has a wrong offset!");
static_assert(offsetof(FStoreGroup, Level) == 0x000048, "Member 'FStoreGroup::Level' has a wrong offset!");
static_assert(offsetof(FStoreGroup, Order) == 0x00004C, "Member 'FStoreGroup::Order' has a wrong offset!");
static_assert(offsetof(FStoreGroup, Parent_external_id) == 0x000050, "Member 'FStoreGroup::Parent_external_id' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrencyPackageContent
// 0x0048 (0x0048 - 0x0000)
struct FVirtualCurrencyPackageContent final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVirtualCurrencyPackageContent) == 0x000008, "Wrong alignment on FVirtualCurrencyPackageContent");
static_assert(sizeof(FVirtualCurrencyPackageContent) == 0x000048, "Wrong size on FVirtualCurrencyPackageContent");
static_assert(offsetof(FVirtualCurrencyPackageContent, Sku) == 0x000000, "Member 'FVirtualCurrencyPackageContent::Sku' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackageContent, Name) == 0x000010, "Member 'FVirtualCurrencyPackageContent::Name' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackageContent, Description) == 0x000020, "Member 'FVirtualCurrencyPackageContent::Description' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackageContent, Image_url) == 0x000030, "Member 'FVirtualCurrencyPackageContent::Image_url' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackageContent, Quantity) == 0x000040, "Member 'FVirtualCurrencyPackageContent::Quantity' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrencyPackage
// 0x00B8 (0x00B8 - 0x0000)
struct FVirtualCurrencyPackage final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Order;                                             // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStoreGroup>                    Groups;                                            // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FStorePrice                            Price;                                             // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVirtualCurrencyPackageContent         Content;                                           // 0x0070(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyPackage) == 0x000008, "Wrong alignment on FVirtualCurrencyPackage");
static_assert(sizeof(FVirtualCurrencyPackage) == 0x0000B8, "Wrong size on FVirtualCurrencyPackage");
static_assert(offsetof(FVirtualCurrencyPackage, Sku) == 0x000000, "Member 'FVirtualCurrencyPackage::Sku' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Name) == 0x000010, "Member 'FVirtualCurrencyPackage::Name' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Description) == 0x000020, "Member 'FVirtualCurrencyPackage::Description' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Image_url) == 0x000030, "Member 'FVirtualCurrencyPackage::Image_url' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Is_free) == 0x000040, "Member 'FVirtualCurrencyPackage::Is_free' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Order) == 0x000044, "Member 'FVirtualCurrencyPackage::Order' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Groups) == 0x000048, "Member 'FVirtualCurrencyPackage::Groups' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Price) == 0x000058, "Member 'FVirtualCurrencyPackage::Price' has a wrong offset!");
static_assert(offsetof(FVirtualCurrencyPackage, Content) == 0x000070, "Member 'FVirtualCurrencyPackage::Content' has a wrong offset!");

// ScriptStruct XsollaStore.XsollaStoreCurrencySymbol
// 0x0028 (0x0028 - 0x0000)
struct FXsollaStoreCurrencySymbol final
{
public:
	class FString                                 Grapheme;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Format;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Rtl;                                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FXsollaStoreCurrencySymbol) == 0x000008, "Wrong alignment on FXsollaStoreCurrencySymbol");
static_assert(sizeof(FXsollaStoreCurrencySymbol) == 0x000028, "Wrong size on FXsollaStoreCurrencySymbol");
static_assert(offsetof(FXsollaStoreCurrencySymbol, Grapheme) == 0x000000, "Member 'FXsollaStoreCurrencySymbol::Grapheme' has a wrong offset!");
static_assert(offsetof(FXsollaStoreCurrencySymbol, Format) == 0x000010, "Member 'FXsollaStoreCurrencySymbol::Format' has a wrong offset!");
static_assert(offsetof(FXsollaStoreCurrencySymbol, Rtl) == 0x000020, "Member 'FXsollaStoreCurrencySymbol::Rtl' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrency
// 0x0080 (0x0080 - 0x0000)
struct FVirtualCurrency final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Attributes;                                        // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Order;                                             // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Groups;                                            // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FStorePrice                            Price;                                             // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrency) == 0x000008, "Wrong alignment on FVirtualCurrency");
static_assert(sizeof(FVirtualCurrency) == 0x000080, "Wrong size on FVirtualCurrency");
static_assert(offsetof(FVirtualCurrency, Sku) == 0x000000, "Member 'FVirtualCurrency::Sku' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Name) == 0x000010, "Member 'FVirtualCurrency::Name' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Description) == 0x000020, "Member 'FVirtualCurrency::Description' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Image_url) == 0x000030, "Member 'FVirtualCurrency::Image_url' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Attributes) == 0x000040, "Member 'FVirtualCurrency::Attributes' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Is_free) == 0x000050, "Member 'FVirtualCurrency::Is_free' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Order) == 0x000054, "Member 'FVirtualCurrency::Order' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Groups) == 0x000058, "Member 'FVirtualCurrency::Groups' has a wrong offset!");
static_assert(offsetof(FVirtualCurrency, Price) == 0x000068, "Member 'FVirtualCurrency::Price' has a wrong offset!");

// ScriptStruct XsollaStore.XsollaStoreCurrency
// 0x0050 (0x0058 - 0x0008)
struct FXsollaStoreCurrency final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FractionSize;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXsollaStoreCurrencySymbol             Symbol;                                            // 0x0030(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaStoreCurrency) == 0x000008, "Wrong alignment on FXsollaStoreCurrency");
static_assert(sizeof(FXsollaStoreCurrency) == 0x000058, "Wrong size on FXsollaStoreCurrency");
static_assert(offsetof(FXsollaStoreCurrency, Name) == 0x000008, "Member 'FXsollaStoreCurrency::Name' has a wrong offset!");
static_assert(offsetof(FXsollaStoreCurrency, Description) == 0x000018, "Member 'FXsollaStoreCurrency::Description' has a wrong offset!");
static_assert(offsetof(FXsollaStoreCurrency, FractionSize) == 0x000028, "Member 'FXsollaStoreCurrency::FractionSize' has a wrong offset!");
static_assert(offsetof(FXsollaStoreCurrency, Symbol) == 0x000030, "Member 'FXsollaStoreCurrency::Symbol' has a wrong offset!");

// ScriptStruct XsollaStore.StoreInventoryItem
// 0x0088 (0x0088 - 0x0000)
struct FStoreInventoryItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Attributes;                                        // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStoreGroup>                    Groups;                                            // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Instance_id;                                       // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Remaining_uses;                                    // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreInventoryItem) == 0x000008, "Wrong alignment on FStoreInventoryItem");
static_assert(sizeof(FStoreInventoryItem) == 0x000088, "Wrong size on FStoreInventoryItem");
static_assert(offsetof(FStoreInventoryItem, Sku) == 0x000000, "Member 'FStoreInventoryItem::Sku' has a wrong offset!");
static_assert(offsetof(FStoreInventoryItem, Name) == 0x000010, "Member 'FStoreInventoryItem::Name' has a wrong offset!");
static_assert(offsetof(FStoreInventoryItem, Type) == 0x000020, "Member 'FStoreInventoryItem::Type' has a wrong offset!");
static_assert(offsetof(FStoreInventoryItem, Description) == 0x000030, "Member 'FStoreInventoryItem::Description' has a wrong offset!");
static_assert(offsetof(FStoreInventoryItem, Image_url) == 0x000040, "Member 'FStoreInventoryItem::Image_url' has a wrong offset!");
static_assert(offsetof(FStoreInventoryItem, Attributes) == 0x000050, "Member 'FStoreInventoryItem::Attributes' has a wrong offset!");
static_assert(offsetof(FStoreInventoryItem, Groups) == 0x000060, "Member 'FStoreInventoryItem::Groups' has a wrong offset!");
static_assert(offsetof(FStoreInventoryItem, Instance_id) == 0x000070, "Member 'FStoreInventoryItem::Instance_id' has a wrong offset!");
static_assert(offsetof(FStoreInventoryItem, Quantity) == 0x000080, "Member 'FStoreInventoryItem::Quantity' has a wrong offset!");
static_assert(offsetof(FStoreInventoryItem, Remaining_uses) == 0x000084, "Member 'FStoreInventoryItem::Remaining_uses' has a wrong offset!");

// ScriptStruct XsollaStore.StoreInventory
// 0x0010 (0x0010 - 0x0000)
struct FStoreInventory final
{
public:
	TArray<struct FStoreInventoryItem>            Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreInventory) == 0x000008, "Wrong alignment on FStoreInventory");
static_assert(sizeof(FStoreInventory) == 0x000010, "Wrong size on FStoreInventory");
static_assert(offsetof(FStoreInventory, Items) == 0x000000, "Member 'FStoreInventory::Items' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrencyPackagesData
// 0x0010 (0x0010 - 0x0000)
struct FVirtualCurrencyPackagesData final
{
public:
	TArray<struct FVirtualCurrencyPackage>        Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyPackagesData) == 0x000008, "Wrong alignment on FVirtualCurrencyPackagesData");
static_assert(sizeof(FVirtualCurrencyPackagesData) == 0x000010, "Wrong size on FVirtualCurrencyPackagesData");
static_assert(offsetof(FVirtualCurrencyPackagesData, Items) == 0x000000, "Member 'FVirtualCurrencyPackagesData::Items' has a wrong offset!");

// ScriptStruct XsollaStore.VirtualCurrencyData
// 0x0010 (0x0010 - 0x0000)
struct FVirtualCurrencyData final
{
public:
	TArray<struct FVirtualCurrency>               Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCurrencyData) == 0x000008, "Wrong alignment on FVirtualCurrencyData");
static_assert(sizeof(FVirtualCurrencyData) == 0x000010, "Wrong size on FVirtualCurrencyData");
static_assert(offsetof(FVirtualCurrencyData, Items) == 0x000000, "Member 'FVirtualCurrencyData::Items' has a wrong offset!");

// ScriptStruct XsollaStore.StoreItem
// 0x0090 (0x0090 - 0x0000)
struct FStoreItem final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Long_description;                                  // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStoreGroup>                    Groups;                                            // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Is_free;                                           // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStorePrice                            Price;                                             // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FVirtualCurrencyPrice>          Virtual_prices;                                    // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Image_url;                                         // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreItem) == 0x000008, "Wrong alignment on FStoreItem");
static_assert(sizeof(FStoreItem) == 0x000090, "Wrong size on FStoreItem");
static_assert(offsetof(FStoreItem, Sku) == 0x000000, "Member 'FStoreItem::Sku' has a wrong offset!");
static_assert(offsetof(FStoreItem, Name) == 0x000010, "Member 'FStoreItem::Name' has a wrong offset!");
static_assert(offsetof(FStoreItem, Description) == 0x000020, "Member 'FStoreItem::Description' has a wrong offset!");
static_assert(offsetof(FStoreItem, Long_description) == 0x000030, "Member 'FStoreItem::Long_description' has a wrong offset!");
static_assert(offsetof(FStoreItem, Groups) == 0x000040, "Member 'FStoreItem::Groups' has a wrong offset!");
static_assert(offsetof(FStoreItem, Is_free) == 0x000050, "Member 'FStoreItem::Is_free' has a wrong offset!");
static_assert(offsetof(FStoreItem, Price) == 0x000058, "Member 'FStoreItem::Price' has a wrong offset!");
static_assert(offsetof(FStoreItem, Virtual_prices) == 0x000070, "Member 'FStoreItem::Virtual_prices' has a wrong offset!");
static_assert(offsetof(FStoreItem, Image_url) == 0x000080, "Member 'FStoreItem::Image_url' has a wrong offset!");

// ScriptStruct XsollaStore.StoreItemsData
// 0x0070 (0x0070 - 0x0000)
struct FStoreItemsData final
{
public:
	TArray<struct FStoreItem>                     Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class FString>                           GroupIds;                                          // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStoreGroup>                    Groups;                                            // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreItemsData) == 0x000008, "Wrong alignment on FStoreItemsData");
static_assert(sizeof(FStoreItemsData) == 0x000070, "Wrong size on FStoreItemsData");
static_assert(offsetof(FStoreItemsData, Items) == 0x000000, "Member 'FStoreItemsData::Items' has a wrong offset!");
static_assert(offsetof(FStoreItemsData, GroupIds) == 0x000010, "Member 'FStoreItemsData::GroupIds' has a wrong offset!");
static_assert(offsetof(FStoreItemsData, Groups) == 0x000060, "Member 'FStoreItemsData::Groups' has a wrong offset!");

// ScriptStruct XsollaStore.XsollaStoreSaveData
// 0x0020 (0x0020 - 0x0000)
struct FXsollaStoreSaveData final
{
public:
	class FString                                 CartId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartCurrency;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXsollaStoreSaveData) == 0x000008, "Wrong alignment on FXsollaStoreSaveData");
static_assert(sizeof(FXsollaStoreSaveData) == 0x000020, "Wrong size on FXsollaStoreSaveData");
static_assert(offsetof(FXsollaStoreSaveData, CartId) == 0x000000, "Member 'FXsollaStoreSaveData::CartId' has a wrong offset!");
static_assert(offsetof(FXsollaStoreSaveData, CartCurrency) == 0x000010, "Member 'FXsollaStoreSaveData::CartCurrency' has a wrong offset!");

}

