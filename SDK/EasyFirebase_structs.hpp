#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EasyFirebase

#include "Basic.hpp"


namespace SDK
{

// Enum EasyFirebase.ValueEventType
// NumValues: 0x0003
enum class EValueEventType : uint8
{
	Changed                                  = 0,
	Cancelled                                = 1,
	ValueEventType_MAX                       = 2,
};

// Enum EasyFirebase.ChildEventType
// NumValues: 0x0006
enum class EChildEventType : uint8
{
	Added                                    = 0,
	Changed                                  = 1,
	Moved                                    = 2,
	Removed                                  = 3,
	Cancelled                                = 4,
	ChildEventType_MAX                       = 5,
};

// Enum EasyFirebase.AnalyticsParameter
// NumValues: 0x0034
enum class EAnalyticsParameter : uint8
{
	Achievement_id                           = 0,
	Aclid                                    = 1,
	Affiliation                              = 2,
	Campaign                                 = 3,
	Character                                = 4,
	Checkout_step                            = 5,
	Checkout_option                          = 6,
	Content                                  = 7,
	Content_type                             = 8,
	Coupon                                   = 9,
	Cp1                                      = 10,
	Creative_name                            = 11,
	Creative_slot                            = 12,
	Currency                                 = 13,
	Destination                              = 14,
	End_date                                 = 15,
	Flight_number                            = 16,
	Group_id                                 = 17,
	Index                                    = 18,
	Item_brand                               = 19,
	Item_category                            = 20,
	Item_id                                  = 21,
	Item_location_id                         = 22,
	Item_name                                = 23,
	Item_list                                = 24,
	Item_variant                             = 25,
	Level                                    = 26,
	Location                                 = 27,
	Medium                                   = 28,
	Number_of_nights                         = 29,
	Number_of_passengers                     = 30,
	Number_of_rooms                          = 31,
	Origin                                   = 32,
	Price                                    = 33,
	Quantity                                 = 34,
	Score                                    = 35,
	Search_term                              = 36,
	Shipping                                 = 37,
	Sign_up_method                           = 38,
	Method                                   = 39,
	Source                                   = 40,
	Start_date                               = 41,
	Tax                                      = 42,
	Term                                     = 43,
	Transaction_id                           = 44,
	Travel_class                             = 45,
	Value                                    = 46,
	Virtual_currency_name                    = 47,
	Level_name                               = 48,
	Success                                  = 49,
	Extend_session                           = 50,
	AnalyticsParameter_MAX                   = 51,
};

// Enum EasyFirebase.AnalyticsEvent
// NumValues: 0x0020
enum class EAnalyticsEvent : uint8
{
	Add_payment_info                         = 0,
	Add_to_cart                              = 1,
	Add_to_wishlist                          = 2,
	App_open                                 = 3,
	begin_checkout                           = 4,
	Campaign_details                         = 5,
	Checkout_progress                        = 6,
	Earn_virtual_currency                    = 7,
	Ecommerce_purchase                       = 8,
	Generate_lead                            = 9,
	Join_group                               = 10,
	Level_up                                 = 11,
	Login                                    = 12,
	Post_score                               = 13,
	Present_offer                            = 14,
	Purchase_refund                          = 15,
	Remove_from_cart                         = 16,
	Search                                   = 17,
	Select_content                           = 18,
	Set_checkout_option                      = 19,
	Share                                    = 20,
	Sign_up                                  = 21,
	Spend_virtual_currency                   = 22,
	Tutorial_begin                           = 23,
	Tutorial_complete                        = 24,
	Unlock_achievement                       = 25,
	View_item                                = 26,
	View_item_list                           = 27,
	View_search_results                      = 28,
	Level_start                              = 29,
	Level_end                                = 30,
	AnalyticsEvent_MAX                       = 31,
};

// Enum EasyFirebase.ValueSource
// NumValues: 0x0004
enum class EValueSource : uint8
{
	KValueSourceStaticValue                  = 0,
	KValueSourceRemoteValue                  = 1,
	KValueSourceDefaultValue                 = 2,
	ValueSource_MAX                          = 3,
};

// Enum EasyFirebase.VariantType
// NumValues: 0x0008
enum class EVariantType : uint8
{
	Null                                     = 0,
	Int64                                    = 1,
	Float                                    = 2,
	Bool                                     = 3,
	String                                   = 4,
	Vector                                   = 5,
	Map                                      = 6,
	VariantType_MAX                          = 7,
};

// ScriptStruct EasyFirebase.ValueInfo
// 0x0002 (0x0002 - 0x0000)
struct FValueInfo final
{
public:
	EValueSource                                  Source;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Conversion_successful;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValueInfo) == 0x000001, "Wrong alignment on FValueInfo");
static_assert(sizeof(FValueInfo) == 0x000002, "Wrong size on FValueInfo");
static_assert(offsetof(FValueInfo, Source) == 0x000000, "Member 'FValueInfo::Source' has a wrong offset!");
static_assert(offsetof(FValueInfo, Conversion_successful) == 0x000001, "Member 'FValueInfo::Conversion_successful' has a wrong offset!");

// ScriptStruct EasyFirebase.AdditionalUserInfo
// 0x0070 (0x0070 - 0x0000)
struct FAdditionalUserInfo final
{
public:
	class FString                                 Provider_id;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User_name;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UFirebaseVariant*, class UFirebaseVariant*> Profile;                                           // 0x0020(0x0050)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdditionalUserInfo) == 0x000008, "Wrong alignment on FAdditionalUserInfo");
static_assert(sizeof(FAdditionalUserInfo) == 0x000070, "Wrong size on FAdditionalUserInfo");
static_assert(offsetof(FAdditionalUserInfo, Provider_id) == 0x000000, "Member 'FAdditionalUserInfo::Provider_id' has a wrong offset!");
static_assert(offsetof(FAdditionalUserInfo, User_name) == 0x000010, "Member 'FAdditionalUserInfo::User_name' has a wrong offset!");
static_assert(offsetof(FAdditionalUserInfo, Profile) == 0x000020, "Member 'FAdditionalUserInfo::Profile' has a wrong offset!");

// ScriptStruct EasyFirebase.UserMetadata
// 0x0010 (0x0010 - 0x0000)
struct FUserMetadata final
{
public:
	int64                                         Last_sign_in_timestamp;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Creation_timestamp;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserMetadata) == 0x000008, "Wrong alignment on FUserMetadata");
static_assert(sizeof(FUserMetadata) == 0x000010, "Wrong size on FUserMetadata");
static_assert(offsetof(FUserMetadata, Last_sign_in_timestamp) == 0x000000, "Member 'FUserMetadata::Last_sign_in_timestamp' has a wrong offset!");
static_assert(offsetof(FUserMetadata, Creation_timestamp) == 0x000008, "Member 'FUserMetadata::Creation_timestamp' has a wrong offset!");

// ScriptStruct EasyFirebase.FirebaseSignInResult
// 0x0088 (0x0088 - 0x0000)
struct FFirebaseSignInResult final
{
public:
	class UFirebaseUser*                          User;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAdditionalUserInfo                    Info;                                              // 0x0008(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUserMetadata                          Meta;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseSignInResult) == 0x000008, "Wrong alignment on FFirebaseSignInResult");
static_assert(sizeof(FFirebaseSignInResult) == 0x000088, "Wrong size on FFirebaseSignInResult");
static_assert(offsetof(FFirebaseSignInResult, User) == 0x000000, "Member 'FFirebaseSignInResult::User' has a wrong offset!");
static_assert(offsetof(FFirebaseSignInResult, Info) == 0x000008, "Member 'FFirebaseSignInResult::Info' has a wrong offset!");
static_assert(offsetof(FFirebaseSignInResult, Meta) == 0x000078, "Member 'FFirebaseSignInResult::Meta' has a wrong offset!");

// ScriptStruct EasyFirebase.FetchProvidersResult
// 0x0010 (0x0010 - 0x0000)
struct FFetchProvidersResult final
{
public:
	TArray<class FString>                         Providers;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFetchProvidersResult) == 0x000008, "Wrong alignment on FFetchProvidersResult");
static_assert(sizeof(FFetchProvidersResult) == 0x000010, "Wrong size on FFetchProvidersResult");
static_assert(offsetof(FFetchProvidersResult, Providers) == 0x000000, "Member 'FFetchProvidersResult::Providers' has a wrong offset!");

// ScriptStruct EasyFirebase.CancelParam
// 0x0018 (0x0018 - 0x0000)
struct FCancelParam final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCancelParam) == 0x000008, "Wrong alignment on FCancelParam");
static_assert(sizeof(FCancelParam) == 0x000018, "Wrong size on FCancelParam");
static_assert(offsetof(FCancelParam, ErrorCode) == 0x000000, "Member 'FCancelParam::ErrorCode' has a wrong offset!");
static_assert(offsetof(FCancelParam, ErrorMessage) == 0x000008, "Member 'FCancelParam::ErrorMessage' has a wrong offset!");

// ScriptStruct EasyFirebase.ChildEventParam
// 0x0018 (0x0018 - 0x0000)
struct FChildEventParam final
{
public:
	class UFirebaseDataSnapshot*                  DataSnapshot;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviousSiblingKey;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChildEventParam) == 0x000008, "Wrong alignment on FChildEventParam");
static_assert(sizeof(FChildEventParam) == 0x000018, "Wrong size on FChildEventParam");
static_assert(offsetof(FChildEventParam, DataSnapshot) == 0x000000, "Member 'FChildEventParam::DataSnapshot' has a wrong offset!");
static_assert(offsetof(FChildEventParam, PreviousSiblingKey) == 0x000008, "Member 'FChildEventParam::PreviousSiblingKey' has a wrong offset!");

// ScriptStruct EasyFirebase.AnalyticsParam
// 0x0018 (0x0018 - 0x0000)
struct FAnalyticsParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFirebaseVariant*                       Value;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnalyticsParam) == 0x000008, "Wrong alignment on FAnalyticsParam");
static_assert(sizeof(FAnalyticsParam) == 0x000018, "Wrong size on FAnalyticsParam");
static_assert(offsetof(FAnalyticsParam, Name) == 0x000000, "Member 'FAnalyticsParam::Name' has a wrong offset!");
static_assert(offsetof(FAnalyticsParam, Value) == 0x000010, "Member 'FAnalyticsParam::Value' has a wrong offset!");

// ScriptStruct EasyFirebase.FirebaseConfigKeyValueVariant
// 0x0018 (0x0018 - 0x0000)
struct FFirebaseConfigKeyValueVariant final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFirebaseVariant*                       Value;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseConfigKeyValueVariant) == 0x000008, "Wrong alignment on FFirebaseConfigKeyValueVariant");
static_assert(sizeof(FFirebaseConfigKeyValueVariant) == 0x000018, "Wrong size on FFirebaseConfigKeyValueVariant");
static_assert(offsetof(FFirebaseConfigKeyValueVariant, Key) == 0x000000, "Member 'FFirebaseConfigKeyValueVariant::Key' has a wrong offset!");
static_assert(offsetof(FFirebaseConfigKeyValueVariant, Value) == 0x000010, "Member 'FFirebaseConfigKeyValueVariant::Value' has a wrong offset!");

// ScriptStruct EasyFirebase.FirebaseNotify
// 0x00C0 (0x00C0 - 0x0000)
struct FFirebaseNotify final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Icon;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sound;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 badge;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Color;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Click_action;                                      // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 body_loc_key;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         body_loc_args;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Title_loc_key;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Title_loc_args;                                    // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseNotify) == 0x000008, "Wrong alignment on FFirebaseNotify");
static_assert(sizeof(FFirebaseNotify) == 0x0000C0, "Wrong size on FFirebaseNotify");
static_assert(offsetof(FFirebaseNotify, Title) == 0x000000, "Member 'FFirebaseNotify::Title' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, Body) == 0x000010, "Member 'FFirebaseNotify::Body' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, Icon) == 0x000020, "Member 'FFirebaseNotify::Icon' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, Sound) == 0x000030, "Member 'FFirebaseNotify::Sound' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, badge) == 0x000040, "Member 'FFirebaseNotify::badge' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, Tag) == 0x000050, "Member 'FFirebaseNotify::Tag' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, Color) == 0x000060, "Member 'FFirebaseNotify::Color' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, Click_action) == 0x000070, "Member 'FFirebaseNotify::Click_action' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, body_loc_key) == 0x000080, "Member 'FFirebaseNotify::body_loc_key' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, body_loc_args) == 0x000090, "Member 'FFirebaseNotify::body_loc_args' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, Title_loc_key) == 0x0000A0, "Member 'FFirebaseNotify::Title_loc_key' has a wrong offset!");
static_assert(offsetof(FFirebaseNotify, Title_loc_args) == 0x0000B0, "Member 'FFirebaseNotify::Title_loc_args' has a wrong offset!");

// ScriptStruct EasyFirebase.FirebaseMessage
// 0x01C0 (0x01C0 - 0x0000)
struct FFirebaseMessage final
{
public:
	class FString                                 From;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Collapse_key;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Data;                                              // 0x0030(0x0050)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Message_id;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message_type;                                      // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Priority;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time_to_live;                                      // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Error;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error_description;                                 // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Notification_opened;                               // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Link;                                              // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Sent_time;                                         // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Have_notify;                                       // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFirebaseNotify                        Notification;                                      // 0x0100(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseMessage) == 0x000008, "Wrong alignment on FFirebaseMessage");
static_assert(sizeof(FFirebaseMessage) == 0x0001C0, "Wrong size on FFirebaseMessage");
static_assert(offsetof(FFirebaseMessage, From) == 0x000000, "Member 'FFirebaseMessage::From' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, To) == 0x000010, "Member 'FFirebaseMessage::To' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Collapse_key) == 0x000020, "Member 'FFirebaseMessage::Collapse_key' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Data) == 0x000030, "Member 'FFirebaseMessage::Data' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Message_id) == 0x000080, "Member 'FFirebaseMessage::Message_id' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Message_type) == 0x000090, "Member 'FFirebaseMessage::Message_type' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Priority) == 0x0000A0, "Member 'FFirebaseMessage::Priority' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Time_to_live) == 0x0000B0, "Member 'FFirebaseMessage::Time_to_live' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Error) == 0x0000B8, "Member 'FFirebaseMessage::Error' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Error_description) == 0x0000C8, "Member 'FFirebaseMessage::Error_description' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Notification_opened) == 0x0000D8, "Member 'FFirebaseMessage::Notification_opened' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Link) == 0x0000E0, "Member 'FFirebaseMessage::Link' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Sent_time) == 0x0000F0, "Member 'FFirebaseMessage::Sent_time' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Have_notify) == 0x0000F8, "Member 'FFirebaseMessage::Have_notify' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Notification) == 0x000100, "Member 'FFirebaseMessage::Notification' has a wrong offset!");

// ScriptStruct EasyFirebase.UserProfile
// 0x0020 (0x0020 - 0x0000)
struct FUserProfile final
{
public:
	class FString                                 Display_name;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Photo_url;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserProfile) == 0x000008, "Wrong alignment on FUserProfile");
static_assert(sizeof(FUserProfile) == 0x000020, "Wrong size on FUserProfile");
static_assert(offsetof(FUserProfile, Display_name) == 0x000000, "Member 'FUserProfile::Display_name' has a wrong offset!");
static_assert(offsetof(FUserProfile, Photo_url) == 0x000010, "Member 'FUserProfile::Photo_url' has a wrong offset!");

}

