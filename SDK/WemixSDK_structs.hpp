#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WemixSDK

#include "Basic.hpp"


namespace SDK
{

// Enum WemixSDK.EPlaySignType
// NumValues: 0x0003
enum class EPlaySignType : uint8
{
	Message                                  = 0,
	Transaction                              = 1,
	EPlaySignType_MAX                        = 2,
};

// Enum WemixSDK.EResponseType
// NumValues: 0x0003
enum class EResponseType : uint8
{
	Connect                                  = 0,
	Sign                                     = 1,
	EResponseType_MAX                        = 2,
};

// Enum WemixSDK.EWalletType
// NumValues: 0x0007
enum class EWalletType : uint8
{
	NONE                                     = 0,
	UNA_WALLET                               = 1,
	WEMIX_WALLET                             = 2,
	PLAY_WALLET                              = 3,
	METAMASK                                 = 4,
	WEMIX_PLAY_APP                           = 5,
	EWalletType_MAX                          = 6,
};

// Enum WemixSDK.EMemoColor
// NumValues: 0x0004
enum class EMemoColor : uint8
{
	Red                                      = 0,
	Yellow                                   = 1,
	Green                                    = 2,
	EMemoColor_MAX                           = 3,
};

// ScriptStruct WemixSDK.WemixSendMessage
// 0x0030 (0x0030 - 0x0000)
struct FWemixSendMessage final
{
public:
	class FString                                 Scheme;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TxId;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWemixSendMessage) == 0x000008, "Wrong alignment on FWemixSendMessage");
static_assert(sizeof(FWemixSendMessage) == 0x000030, "Wrong size on FWemixSendMessage");
static_assert(offsetof(FWemixSendMessage, Scheme) == 0x000000, "Member 'FWemixSendMessage::Scheme' has a wrong offset!");
static_assert(offsetof(FWemixSendMessage, TxId) == 0x000010, "Member 'FWemixSendMessage::TxId' has a wrong offset!");
static_assert(offsetof(FWemixSendMessage, Data) == 0x000020, "Member 'FWemixSendMessage::Data' has a wrong offset!");

// ScriptStruct WemixSDK.MessageData
// 0x0030 (0x0030 - 0x0000)
struct FMessageData final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageData) == 0x000008, "Wrong alignment on FMessageData");
static_assert(sizeof(FMessageData) == 0x000030, "Wrong size on FMessageData");
static_assert(offsetof(FMessageData, Type) == 0x000000, "Member 'FMessageData::Type' has a wrong offset!");
static_assert(offsetof(FMessageData, Name) == 0x000010, "Member 'FMessageData::Name' has a wrong offset!");
static_assert(offsetof(FMessageData, Value) == 0x000020, "Member 'FMessageData::Value' has a wrong offset!");

// ScriptStruct WemixSDK.MemoOption
// 0x0028 (0x0028 - 0x0000)
struct FMemoOption final
{
public:
	class FString                                 DisplayText;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Color;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseMemo;                                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMemoOption) == 0x000008, "Wrong alignment on FMemoOption");
static_assert(sizeof(FMemoOption) == 0x000028, "Wrong size on FMemoOption");
static_assert(offsetof(FMemoOption, DisplayText) == 0x000000, "Member 'FMemoOption::DisplayText' has a wrong offset!");
static_assert(offsetof(FMemoOption, Color) == 0x000010, "Member 'FMemoOption::Color' has a wrong offset!");
static_assert(offsetof(FMemoOption, UseMemo) == 0x000020, "Member 'FMemoOption::UseMemo' has a wrong offset!");

// ScriptStruct WemixSDK.MessageSignature
// 0x0038 (0x0038 - 0x0000)
struct FMessageSignature final
{
public:
	TArray<struct FMessageData>                   Messages;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMemoOption                            Memo;                                              // 0x0010(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageSignature) == 0x000008, "Wrong alignment on FMessageSignature");
static_assert(sizeof(FMessageSignature) == 0x000038, "Wrong size on FMessageSignature");
static_assert(offsetof(FMessageSignature, Messages) == 0x000000, "Member 'FMessageSignature::Messages' has a wrong offset!");
static_assert(offsetof(FMessageSignature, Memo) == 0x000010, "Member 'FMessageSignature::Memo' has a wrong offset!");

// ScriptStruct WemixSDK.MessageSignatures
// 0x0010 (0x0010 - 0x0000)
struct FMessageSignatures final
{
public:
	TArray<struct FMessageSignature>              MessageSignatures;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageSignatures) == 0x000008, "Wrong alignment on FMessageSignatures");
static_assert(sizeof(FMessageSignatures) == 0x000010, "Wrong size on FMessageSignatures");
static_assert(offsetof(FMessageSignatures, MessageSignatures) == 0x000000, "Member 'FMessageSignatures::MessageSignatures' has a wrong offset!");

// ScriptStruct WemixSDK.TransactionSignature
// 0x0038 (0x0038 - 0x0000)
struct FTransactionSignature final
{
public:
	class FString                                 Hash;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMemoOption                            Memo;                                              // 0x0010(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransactionSignature) == 0x000008, "Wrong alignment on FTransactionSignature");
static_assert(sizeof(FTransactionSignature) == 0x000038, "Wrong size on FTransactionSignature");
static_assert(offsetof(FTransactionSignature, Hash) == 0x000000, "Member 'FTransactionSignature::Hash' has a wrong offset!");
static_assert(offsetof(FTransactionSignature, Memo) == 0x000010, "Member 'FTransactionSignature::Memo' has a wrong offset!");

// ScriptStruct WemixSDK.TransactionSignatures
// 0x0010 (0x0010 - 0x0000)
struct FTransactionSignatures final
{
public:
	TArray<struct FTransactionSignature>          TransactionSignatures;                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransactionSignatures) == 0x000008, "Wrong alignment on FTransactionSignatures");
static_assert(sizeof(FTransactionSignatures) == 0x000010, "Wrong size on FTransactionSignatures");
static_assert(offsetof(FTransactionSignatures, TransactionSignatures) == 0x000000, "Member 'FTransactionSignatures::TransactionSignatures' has a wrong offset!");

// ScriptStruct WemixSDK.MessageHashSignature
// 0x0038 (0x0038 - 0x0000)
struct FMessageHashSignature final
{
public:
	class FString                                 Hash;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMemoOption                            Memo;                                              // 0x0010(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageHashSignature) == 0x000008, "Wrong alignment on FMessageHashSignature");
static_assert(sizeof(FMessageHashSignature) == 0x000038, "Wrong size on FMessageHashSignature");
static_assert(offsetof(FMessageHashSignature, Hash) == 0x000000, "Member 'FMessageHashSignature::Hash' has a wrong offset!");
static_assert(offsetof(FMessageHashSignature, Memo) == 0x000010, "Member 'FMessageHashSignature::Memo' has a wrong offset!");

// ScriptStruct WemixSDK.WCConnectResult
// 0x0018 (0x0018 - 0x0000)
struct FWCConnectResult final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWalletType                                   Wallet;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWCConnectResult) == 0x000008, "Wrong alignment on FWCConnectResult");
static_assert(sizeof(FWCConnectResult) == 0x000018, "Wrong size on FWCConnectResult");
static_assert(offsetof(FWCConnectResult, Address) == 0x000000, "Member 'FWCConnectResult::Address' has a wrong offset!");
static_assert(offsetof(FWCConnectResult, Wallet) == 0x000010, "Member 'FWCConnectResult::Wallet' has a wrong offset!");

// ScriptStruct WemixSDK.MessageHashSignatures
// 0x0010 (0x0010 - 0x0000)
struct FMessageHashSignatures final
{
public:
	TArray<struct FMessageHashSignature>          MessageHashSignatures;                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageHashSignatures) == 0x000008, "Wrong alignment on FMessageHashSignatures");
static_assert(sizeof(FMessageHashSignatures) == 0x000010, "Wrong size on FMessageHashSignatures");
static_assert(offsetof(FMessageHashSignatures, MessageHashSignatures) == 0x000000, "Member 'FMessageHashSignatures::MessageHashSignatures' has a wrong offset!");

// ScriptStruct WemixSDK.MobileConnectResult
// 0x0028 (0x0028 - 0x0000)
struct FMobileConnectResult final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Wallet;                                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainId;                                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMobileConnectResult) == 0x000008, "Wrong alignment on FMobileConnectResult");
static_assert(sizeof(FMobileConnectResult) == 0x000028, "Wrong size on FMobileConnectResult");
static_assert(offsetof(FMobileConnectResult, Address) == 0x000000, "Member 'FMobileConnectResult::Address' has a wrong offset!");
static_assert(offsetof(FMobileConnectResult, Wallet) == 0x000010, "Member 'FMobileConnectResult::Wallet' has a wrong offset!");
static_assert(offsetof(FMobileConnectResult, ChainId) == 0x000020, "Member 'FMobileConnectResult::ChainId' has a wrong offset!");

// ScriptStruct WemixSDK.SDKInfo
// 0x0010 (0x0010 - 0x0000)
struct FSDKInfo final
{
public:
	class FString                                 Version;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDKInfo) == 0x000008, "Wrong alignment on FSDKInfo");
static_assert(sizeof(FSDKInfo) == 0x000010, "Wrong size on FSDKInfo");
static_assert(offsetof(FSDKInfo, Version) == 0x000000, "Member 'FSDKInfo::Version' has a wrong offset!");

// ScriptStruct WemixSDK.WebBrowserResponse
// 0x0020 (0x0020 - 0x0000)
struct FWebBrowserResponse final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWebBrowserResponse) == 0x000008, "Wrong alignment on FWebBrowserResponse");
static_assert(sizeof(FWebBrowserResponse) == 0x000020, "Wrong size on FWebBrowserResponse");
static_assert(offsetof(FWebBrowserResponse, Data) == 0x000000, "Member 'FWebBrowserResponse::Data' has a wrong offset!");
static_assert(offsetof(FWebBrowserResponse, Error) == 0x000010, "Member 'FWebBrowserResponse::Error' has a wrong offset!");

// ScriptStruct WemixSDK.WemixConfigMobile
// 0x0038 (0x0038 - 0x0000)
struct FWemixConfigMobile final
{
public:
	bool                                          IsDebug;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLogging;                                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDarkMode;                                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WemixHost;                                         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WebBaseUrl;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SupportWallet;                                     // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWemixConfigMobile) == 0x000008, "Wrong alignment on FWemixConfigMobile");
static_assert(sizeof(FWemixConfigMobile) == 0x000038, "Wrong size on FWemixConfigMobile");
static_assert(offsetof(FWemixConfigMobile, IsDebug) == 0x000000, "Member 'FWemixConfigMobile::IsDebug' has a wrong offset!");
static_assert(offsetof(FWemixConfigMobile, IsLogging) == 0x000001, "Member 'FWemixConfigMobile::IsLogging' has a wrong offset!");
static_assert(offsetof(FWemixConfigMobile, IsDarkMode) == 0x000002, "Member 'FWemixConfigMobile::IsDarkMode' has a wrong offset!");
static_assert(offsetof(FWemixConfigMobile, WemixHost) == 0x000008, "Member 'FWemixConfigMobile::WemixHost' has a wrong offset!");
static_assert(offsetof(FWemixConfigMobile, WebBaseUrl) == 0x000018, "Member 'FWemixConfigMobile::WebBaseUrl' has a wrong offset!");
static_assert(offsetof(FWemixConfigMobile, SupportWallet) == 0x000028, "Member 'FWemixConfigMobile::SupportWallet' has a wrong offset!");

// ScriptStruct WemixSDK.WemixConfig
// 0x0058 (0x0058 - 0x0000)
struct FWemixConfig final
{
public:
	bool                                          IsDebug;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLogging;                                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDarkMode;                                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WemixHost;                                         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WebBaseUrl;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EWalletType>                           SupportWallet;                                     // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 WalletAccountSlot;                                 // 0x0038(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WebBrowserCacheRootPath;                           // 0x0048(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWemixConfig) == 0x000008, "Wrong alignment on FWemixConfig");
static_assert(sizeof(FWemixConfig) == 0x000058, "Wrong size on FWemixConfig");
static_assert(offsetof(FWemixConfig, IsDebug) == 0x000000, "Member 'FWemixConfig::IsDebug' has a wrong offset!");
static_assert(offsetof(FWemixConfig, IsLogging) == 0x000001, "Member 'FWemixConfig::IsLogging' has a wrong offset!");
static_assert(offsetof(FWemixConfig, IsDarkMode) == 0x000002, "Member 'FWemixConfig::IsDarkMode' has a wrong offset!");
static_assert(offsetof(FWemixConfig, WemixHost) == 0x000008, "Member 'FWemixConfig::WemixHost' has a wrong offset!");
static_assert(offsetof(FWemixConfig, WebBaseUrl) == 0x000018, "Member 'FWemixConfig::WebBaseUrl' has a wrong offset!");
static_assert(offsetof(FWemixConfig, SupportWallet) == 0x000028, "Member 'FWemixConfig::SupportWallet' has a wrong offset!");
static_assert(offsetof(FWemixConfig, WalletAccountSlot) == 0x000038, "Member 'FWemixConfig::WalletAccountSlot' has a wrong offset!");
static_assert(offsetof(FWemixConfig, WebBrowserCacheRootPath) == 0x000048, "Member 'FWemixConfig::WebBrowserCacheRootPath' has a wrong offset!");

// ScriptStruct WemixSDK.WPSignResult
// 0x0010 (0x0010 - 0x0000)
struct FWPSignResult final
{
public:
	TArray<class FString>                         Signatures;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWPSignResult) == 0x000008, "Wrong alignment on FWPSignResult");
static_assert(sizeof(FWPSignResult) == 0x000010, "Wrong size on FWPSignResult");
static_assert(offsetof(FWPSignResult, Signatures) == 0x000000, "Member 'FWPSignResult::Signatures' has a wrong offset!");

// ScriptStruct WemixSDK.WCSignResult
// 0x0030 (0x0030 - 0x0000)
struct FWCSignResult final
{
public:
	class FString                                 Signature;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RawTx;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RawData;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWCSignResult) == 0x000008, "Wrong alignment on FWCSignResult");
static_assert(sizeof(FWCSignResult) == 0x000030, "Wrong size on FWCSignResult");
static_assert(offsetof(FWCSignResult, Signature) == 0x000000, "Member 'FWCSignResult::Signature' has a wrong offset!");
static_assert(offsetof(FWCSignResult, RawTx) == 0x000010, "Member 'FWCSignResult::RawTx' has a wrong offset!");
static_assert(offsetof(FWCSignResult, RawData) == 0x000020, "Member 'FWCSignResult::RawData' has a wrong offset!");

// ScriptStruct WemixSDK.SignResult
// 0x0030 (0x0030 - 0x0000)
struct FSignResult final
{
public:
	class FString                                 Signature;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RawTx;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RawData;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSignResult) == 0x000008, "Wrong alignment on FSignResult");
static_assert(sizeof(FSignResult) == 0x000030, "Wrong size on FSignResult");
static_assert(offsetof(FSignResult, Signature) == 0x000000, "Member 'FSignResult::Signature' has a wrong offset!");
static_assert(offsetof(FSignResult, RawTx) == 0x000010, "Member 'FSignResult::RawTx' has a wrong offset!");
static_assert(offsetof(FSignResult, RawData) == 0x000020, "Member 'FSignResult::RawData' has a wrong offset!");

// ScriptStruct WemixSDK.WPConnectResult
// 0x0020 (0x0020 - 0x0000)
struct FWPConnectResult final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWPConnectResult) == 0x000008, "Wrong alignment on FWPConnectResult");
static_assert(sizeof(FWPConnectResult) == 0x000020, "Wrong size on FWPConnectResult");
static_assert(offsetof(FWPConnectResult, Address) == 0x000000, "Member 'FWPConnectResult::Address' has a wrong offset!");
static_assert(offsetof(FWPConnectResult, UserID) == 0x000010, "Member 'FWPConnectResult::UserID' has a wrong offset!");

// ScriptStruct WemixSDK.ConnectResult
// 0x0018 (0x0018 - 0x0000)
struct FConnectResult final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWalletType                                   Wallet;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChainId;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConnectResult) == 0x000008, "Wrong alignment on FConnectResult");
static_assert(sizeof(FConnectResult) == 0x000018, "Wrong size on FConnectResult");
static_assert(offsetof(FConnectResult, Address) == 0x000000, "Member 'FConnectResult::Address' has a wrong offset!");
static_assert(offsetof(FConnectResult, Wallet) == 0x000010, "Member 'FConnectResult::Wallet' has a wrong offset!");
static_assert(offsetof(FConnectResult, ChainId) == 0x000014, "Member 'FConnectResult::ChainId' has a wrong offset!");

// ScriptStruct WemixSDK.WemixError
// 0x0018 (0x0018 - 0x0000)
struct FWemixError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWemixError) == 0x000008, "Wrong alignment on FWemixError");
static_assert(sizeof(FWemixError) == 0x000018, "Wrong size on FWemixError");
static_assert(offsetof(FWemixError, Code) == 0x000000, "Member 'FWemixError::Code' has a wrong offset!");
static_assert(offsetof(FWemixError, Message) == 0x000008, "Member 'FWemixError::Message' has a wrong offset!");

}

