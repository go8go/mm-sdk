#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AndroidGoodies

#include "Basic.hpp"

#include "AndroidGoodies_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AndroidGoodies.AGAlarmClock.CanSetAlarm
// 0x0001 (0x0001 - 0x0000)
struct AGAlarmClock_CanSetAlarm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGAlarmClock_CanSetAlarm) == 0x000001, "Wrong alignment on AGAlarmClock_CanSetAlarm");
static_assert(sizeof(AGAlarmClock_CanSetAlarm) == 0x000001, "Wrong size on AGAlarmClock_CanSetAlarm");
static_assert(offsetof(AGAlarmClock_CanSetAlarm, ReturnValue) == 0x000000, "Member 'AGAlarmClock_CanSetAlarm::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGAlarmClock.CanSetTimer
// 0x0001 (0x0001 - 0x0000)
struct AGAlarmClock_CanSetTimer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGAlarmClock_CanSetTimer) == 0x000001, "Wrong alignment on AGAlarmClock_CanSetTimer");
static_assert(sizeof(AGAlarmClock_CanSetTimer) == 0x000001, "Wrong size on AGAlarmClock_CanSetTimer");
static_assert(offsetof(AGAlarmClock_CanSetTimer, ReturnValue) == 0x000000, "Member 'AGAlarmClock_CanSetTimer::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGAlarmClock.SetAlarm
// 0x0028 (0x0028 - 0x0000)
struct AGAlarmClock_SetAlarm final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAGAlarmDaysData                       Days;                                              // 0x0018(0x0007)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Vibrate;                                           // 0x001F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipUi;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGAlarmClock_SetAlarm) == 0x000008, "Wrong alignment on AGAlarmClock_SetAlarm");
static_assert(sizeof(AGAlarmClock_SetAlarm) == 0x000028, "Wrong size on AGAlarmClock_SetAlarm");
static_assert(offsetof(AGAlarmClock_SetAlarm, Hour) == 0x000000, "Member 'AGAlarmClock_SetAlarm::Hour' has a wrong offset!");
static_assert(offsetof(AGAlarmClock_SetAlarm, Minute) == 0x000004, "Member 'AGAlarmClock_SetAlarm::Minute' has a wrong offset!");
static_assert(offsetof(AGAlarmClock_SetAlarm, Message) == 0x000008, "Member 'AGAlarmClock_SetAlarm::Message' has a wrong offset!");
static_assert(offsetof(AGAlarmClock_SetAlarm, Days) == 0x000018, "Member 'AGAlarmClock_SetAlarm::Days' has a wrong offset!");
static_assert(offsetof(AGAlarmClock_SetAlarm, Vibrate) == 0x00001F, "Member 'AGAlarmClock_SetAlarm::Vibrate' has a wrong offset!");
static_assert(offsetof(AGAlarmClock_SetAlarm, SkipUi) == 0x000020, "Member 'AGAlarmClock_SetAlarm::SkipUi' has a wrong offset!");

// Function AndroidGoodies.AGAlarmClock.SetTimer
// 0x0020 (0x0020 - 0x0000)
struct AGAlarmClock_SetTimer final
{
public:
	int32                                         LengthSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipUi;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGAlarmClock_SetTimer) == 0x000008, "Wrong alignment on AGAlarmClock_SetTimer");
static_assert(sizeof(AGAlarmClock_SetTimer) == 0x000020, "Wrong size on AGAlarmClock_SetTimer");
static_assert(offsetof(AGAlarmClock_SetTimer, LengthSeconds) == 0x000000, "Member 'AGAlarmClock_SetTimer::LengthSeconds' has a wrong offset!");
static_assert(offsetof(AGAlarmClock_SetTimer, Message) == 0x000008, "Member 'AGAlarmClock_SetTimer::Message' has a wrong offset!");
static_assert(offsetof(AGAlarmClock_SetTimer, SkipUi) == 0x000018, "Member 'AGAlarmClock_SetTimer::SkipUi' has a wrong offset!");

// Function AndroidGoodies.AGAlarmClock.SnoozeAlarm
// 0x0004 (0x0004 - 0x0000)
struct AGAlarmClock_SnoozeAlarm final
{
public:
	int32                                         SnoozeDurationMinutes;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGAlarmClock_SnoozeAlarm) == 0x000004, "Wrong alignment on AGAlarmClock_SnoozeAlarm");
static_assert(sizeof(AGAlarmClock_SnoozeAlarm) == 0x000004, "Wrong size on AGAlarmClock_SnoozeAlarm");
static_assert(offsetof(AGAlarmClock_SnoozeAlarm, SnoozeDurationMinutes) == 0x000000, "Member 'AGAlarmClock_SnoozeAlarm::SnoozeDurationMinutes' has a wrong offset!");

// Function AndroidGoodies.AGApps.CallPhoneNumber
// 0x0010 (0x0010 - 0x0000)
struct AGApps_CallPhoneNumber final
{
public:
	class FString                                 Number;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_CallPhoneNumber) == 0x000008, "Wrong alignment on AGApps_CallPhoneNumber");
static_assert(sizeof(AGApps_CallPhoneNumber) == 0x000010, "Wrong size on AGApps_CallPhoneNumber");
static_assert(offsetof(AGApps_CallPhoneNumber, Number) == 0x000000, "Member 'AGApps_CallPhoneNumber::Number' has a wrong offset!");

// Function AndroidGoodies.AGApps.DialPhoneNumber
// 0x0010 (0x0010 - 0x0000)
struct AGApps_DialPhoneNumber final
{
public:
	class FString                                 Number;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_DialPhoneNumber) == 0x000008, "Wrong alignment on AGApps_DialPhoneNumber");
static_assert(sizeof(AGApps_DialPhoneNumber) == 0x000010, "Wrong size on AGApps_DialPhoneNumber");
static_assert(offsetof(AGApps_DialPhoneNumber, Number) == 0x000000, "Member 'AGApps_DialPhoneNumber::Number' has a wrong offset!");

// Function AndroidGoodies.AGApps.DownloadAndInstallApk
// 0x0040 (0x0040 - 0x0000)
struct AGApps_DownloadAndInstallApk final
{
public:
	class FString                                 DownloadUrl;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DownloadTitle;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DownloadDescription;                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Error)>   OnError;                                           // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_DownloadAndInstallApk) == 0x000008, "Wrong alignment on AGApps_DownloadAndInstallApk");
static_assert(sizeof(AGApps_DownloadAndInstallApk) == 0x000040, "Wrong size on AGApps_DownloadAndInstallApk");
static_assert(offsetof(AGApps_DownloadAndInstallApk, DownloadUrl) == 0x000000, "Member 'AGApps_DownloadAndInstallApk::DownloadUrl' has a wrong offset!");
static_assert(offsetof(AGApps_DownloadAndInstallApk, DownloadTitle) == 0x000010, "Member 'AGApps_DownloadAndInstallApk::DownloadTitle' has a wrong offset!");
static_assert(offsetof(AGApps_DownloadAndInstallApk, DownloadDescription) == 0x000020, "Member 'AGApps_DownloadAndInstallApk::DownloadDescription' has a wrong offset!");
static_assert(offsetof(AGApps_DownloadAndInstallApk, OnError) == 0x000030, "Member 'AGApps_DownloadAndInstallApk::OnError' has a wrong offset!");

// Function AndroidGoodies.AGApps.HasPhoneApp
// 0x0001 (0x0001 - 0x0000)
struct AGApps_HasPhoneApp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_HasPhoneApp) == 0x000001, "Wrong alignment on AGApps_HasPhoneApp");
static_assert(sizeof(AGApps_HasPhoneApp) == 0x000001, "Wrong size on AGApps_HasPhoneApp");
static_assert(offsetof(AGApps_HasPhoneApp, ReturnValue) == 0x000000, "Member 'AGApps_HasPhoneApp::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGApps.InstallApkFromFile
// 0x0020 (0x0020 - 0x0000)
struct AGApps_InstallApkFromFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Error)>   OnError;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_InstallApkFromFile) == 0x000008, "Wrong alignment on AGApps_InstallApkFromFile");
static_assert(sizeof(AGApps_InstallApkFromFile) == 0x000020, "Wrong size on AGApps_InstallApkFromFile");
static_assert(offsetof(AGApps_InstallApkFromFile, FilePath) == 0x000000, "Member 'AGApps_InstallApkFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(AGApps_InstallApkFromFile, OnError) == 0x000010, "Member 'AGApps_InstallApkFromFile::OnError' has a wrong offset!");

// Function AndroidGoodies.AGApps.OpenAnotherApplication
// 0x0010 (0x0010 - 0x0000)
struct AGApps_OpenAnotherApplication final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_OpenAnotherApplication) == 0x000008, "Wrong alignment on AGApps_OpenAnotherApplication");
static_assert(sizeof(AGApps_OpenAnotherApplication) == 0x000010, "Wrong size on AGApps_OpenAnotherApplication");
static_assert(offsetof(AGApps_OpenAnotherApplication, PackageName) == 0x000000, "Member 'AGApps_OpenAnotherApplication::PackageName' has a wrong offset!");

// Function AndroidGoodies.AGApps.OpenFacebookProfile
// 0x0010 (0x0010 - 0x0000)
struct AGApps_OpenFacebookProfile final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_OpenFacebookProfile) == 0x000008, "Wrong alignment on AGApps_OpenFacebookProfile");
static_assert(sizeof(AGApps_OpenFacebookProfile) == 0x000010, "Wrong size on AGApps_OpenFacebookProfile");
static_assert(offsetof(AGApps_OpenFacebookProfile, ProfileId) == 0x000000, "Member 'AGApps_OpenFacebookProfile::ProfileId' has a wrong offset!");

// Function AndroidGoodies.AGApps.OpenInstagramProfile
// 0x0010 (0x0010 - 0x0000)
struct AGApps_OpenInstagramProfile final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_OpenInstagramProfile) == 0x000008, "Wrong alignment on AGApps_OpenInstagramProfile");
static_assert(sizeof(AGApps_OpenInstagramProfile) == 0x000010, "Wrong size on AGApps_OpenInstagramProfile");
static_assert(offsetof(AGApps_OpenInstagramProfile, ProfileId) == 0x000000, "Member 'AGApps_OpenInstagramProfile::ProfileId' has a wrong offset!");

// Function AndroidGoodies.AGApps.OpenTwitterProfile
// 0x0010 (0x0010 - 0x0000)
struct AGApps_OpenTwitterProfile final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_OpenTwitterProfile) == 0x000008, "Wrong alignment on AGApps_OpenTwitterProfile");
static_assert(sizeof(AGApps_OpenTwitterProfile) == 0x000010, "Wrong size on AGApps_OpenTwitterProfile");
static_assert(offsetof(AGApps_OpenTwitterProfile, ProfileId) == 0x000000, "Member 'AGApps_OpenTwitterProfile::ProfileId' has a wrong offset!");

// Function AndroidGoodies.AGApps.OpenYoutubeVideo
// 0x0010 (0x0010 - 0x0000)
struct AGApps_OpenYoutubeVideo final
{
public:
	class FString                                 VideoId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_OpenYoutubeVideo) == 0x000008, "Wrong alignment on AGApps_OpenYoutubeVideo");
static_assert(sizeof(AGApps_OpenYoutubeVideo) == 0x000010, "Wrong size on AGApps_OpenYoutubeVideo");
static_assert(offsetof(AGApps_OpenYoutubeVideo, VideoId) == 0x000000, "Member 'AGApps_OpenYoutubeVideo::VideoId' has a wrong offset!");

// Function AndroidGoodies.AGApps.UninstallPackage
// 0x0010 (0x0010 - 0x0000)
struct AGApps_UninstallPackage final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGApps_UninstallPackage) == 0x000008, "Wrong alignment on AGApps_UninstallPackage");
static_assert(sizeof(AGApps_UninstallPackage) == 0x000010, "Wrong size on AGApps_UninstallPackage");
static_assert(offsetof(AGApps_UninstallPackage, PackageName) == 0x000000, "Member 'AGApps_UninstallPackage::PackageName' has a wrong offset!");

// Function AndroidGoodies.AGChosenFile.GetCreatedAt
// 0x0008 (0x0008 - 0x0000)
struct AGChosenFile_GetCreatedAt final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenFile_GetCreatedAt) == 0x000008, "Wrong alignment on AGChosenFile_GetCreatedAt");
static_assert(sizeof(AGChosenFile_GetCreatedAt) == 0x000008, "Wrong size on AGChosenFile_GetCreatedAt");
static_assert(offsetof(AGChosenFile_GetCreatedAt, ReturnValue) == 0x000000, "Member 'AGChosenFile_GetCreatedAt::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenFile.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct AGChosenFile_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenFile_GetDisplayName) == 0x000008, "Wrong alignment on AGChosenFile_GetDisplayName");
static_assert(sizeof(AGChosenFile_GetDisplayName) == 0x000010, "Wrong size on AGChosenFile_GetDisplayName");
static_assert(offsetof(AGChosenFile_GetDisplayName, ReturnValue) == 0x000000, "Member 'AGChosenFile_GetDisplayName::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenFile.GetFileExtensionFromMimeType
// 0x0010 (0x0010 - 0x0000)
struct AGChosenFile_GetFileExtensionFromMimeType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenFile_GetFileExtensionFromMimeType) == 0x000008, "Wrong alignment on AGChosenFile_GetFileExtensionFromMimeType");
static_assert(sizeof(AGChosenFile_GetFileExtensionFromMimeType) == 0x000010, "Wrong size on AGChosenFile_GetFileExtensionFromMimeType");
static_assert(offsetof(AGChosenFile_GetFileExtensionFromMimeType, ReturnValue) == 0x000000, "Member 'AGChosenFile_GetFileExtensionFromMimeType::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenFile.GetFileExtensionFromMimeTypeWithoutDot
// 0x0010 (0x0010 - 0x0000)
struct AGChosenFile_GetFileExtensionFromMimeTypeWithoutDot final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenFile_GetFileExtensionFromMimeTypeWithoutDot) == 0x000008, "Wrong alignment on AGChosenFile_GetFileExtensionFromMimeTypeWithoutDot");
static_assert(sizeof(AGChosenFile_GetFileExtensionFromMimeTypeWithoutDot) == 0x000010, "Wrong size on AGChosenFile_GetFileExtensionFromMimeTypeWithoutDot");
static_assert(offsetof(AGChosenFile_GetFileExtensionFromMimeTypeWithoutDot, ReturnValue) == 0x000000, "Member 'AGChosenFile_GetFileExtensionFromMimeTypeWithoutDot::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenFile.GetHumanReadableSize
// 0x0018 (0x0018 - 0x0000)
struct AGChosenFile_GetHumanReadableSize final
{
public:
	bool                                          bytesRounded;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenFile_GetHumanReadableSize) == 0x000008, "Wrong alignment on AGChosenFile_GetHumanReadableSize");
static_assert(sizeof(AGChosenFile_GetHumanReadableSize) == 0x000018, "Wrong size on AGChosenFile_GetHumanReadableSize");
static_assert(offsetof(AGChosenFile_GetHumanReadableSize, bytesRounded) == 0x000000, "Member 'AGChosenFile_GetHumanReadableSize::bytesRounded' has a wrong offset!");
static_assert(offsetof(AGChosenFile_GetHumanReadableSize, ReturnValue) == 0x000008, "Member 'AGChosenFile_GetHumanReadableSize::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenFile.GetMimeType
// 0x0010 (0x0010 - 0x0000)
struct AGChosenFile_GetMimeType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenFile_GetMimeType) == 0x000008, "Wrong alignment on AGChosenFile_GetMimeType");
static_assert(sizeof(AGChosenFile_GetMimeType) == 0x000010, "Wrong size on AGChosenFile_GetMimeType");
static_assert(offsetof(AGChosenFile_GetMimeType, ReturnValue) == 0x000000, "Member 'AGChosenFile_GetMimeType::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenFile.GetOriginalPath
// 0x0010 (0x0010 - 0x0000)
struct AGChosenFile_GetOriginalPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenFile_GetOriginalPath) == 0x000008, "Wrong alignment on AGChosenFile_GetOriginalPath");
static_assert(sizeof(AGChosenFile_GetOriginalPath) == 0x000010, "Wrong size on AGChosenFile_GetOriginalPath");
static_assert(offsetof(AGChosenFile_GetOriginalPath, ReturnValue) == 0x000000, "Member 'AGChosenFile_GetOriginalPath::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenFile.GetSize
// 0x0008 (0x0008 - 0x0000)
struct AGChosenFile_GetSize final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenFile_GetSize) == 0x000008, "Wrong alignment on AGChosenFile_GetSize");
static_assert(sizeof(AGChosenFile_GetSize) == 0x000008, "Wrong size on AGChosenFile_GetSize");
static_assert(offsetof(AGChosenFile_GetSize, ReturnValue) == 0x000000, "Member 'AGChosenFile_GetSize::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenFile.IsSuccess
// 0x0001 (0x0001 - 0x0000)
struct AGChosenFile_IsSuccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenFile_IsSuccess) == 0x000001, "Wrong alignment on AGChosenFile_IsSuccess");
static_assert(sizeof(AGChosenFile_IsSuccess) == 0x000001, "Wrong size on AGChosenFile_IsSuccess");
static_assert(offsetof(AGChosenFile_IsSuccess, ReturnValue) == 0x000000, "Member 'AGChosenFile_IsSuccess::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenImage.GetHeight
// 0x0004 (0x0004 - 0x0000)
struct AGChosenImage_GetHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenImage_GetHeight) == 0x000004, "Wrong alignment on AGChosenImage_GetHeight");
static_assert(sizeof(AGChosenImage_GetHeight) == 0x000004, "Wrong size on AGChosenImage_GetHeight");
static_assert(offsetof(AGChosenImage_GetHeight, ReturnValue) == 0x000000, "Member 'AGChosenImage_GetHeight::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenImage.GetOrientation
// 0x0004 (0x0004 - 0x0000)
struct AGChosenImage_GetOrientation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenImage_GetOrientation) == 0x000004, "Wrong alignment on AGChosenImage_GetOrientation");
static_assert(sizeof(AGChosenImage_GetOrientation) == 0x000004, "Wrong size on AGChosenImage_GetOrientation");
static_assert(offsetof(AGChosenImage_GetOrientation, ReturnValue) == 0x000000, "Member 'AGChosenImage_GetOrientation::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenImage.GetOrientationName
// 0x0010 (0x0010 - 0x0000)
struct AGChosenImage_GetOrientationName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenImage_GetOrientationName) == 0x000008, "Wrong alignment on AGChosenImage_GetOrientationName");
static_assert(sizeof(AGChosenImage_GetOrientationName) == 0x000010, "Wrong size on AGChosenImage_GetOrientationName");
static_assert(offsetof(AGChosenImage_GetOrientationName, ReturnValue) == 0x000000, "Member 'AGChosenImage_GetOrientationName::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenImage.GetThumbnailPath
// 0x0010 (0x0010 - 0x0000)
struct AGChosenImage_GetThumbnailPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenImage_GetThumbnailPath) == 0x000008, "Wrong alignment on AGChosenImage_GetThumbnailPath");
static_assert(sizeof(AGChosenImage_GetThumbnailPath) == 0x000010, "Wrong size on AGChosenImage_GetThumbnailPath");
static_assert(offsetof(AGChosenImage_GetThumbnailPath, ReturnValue) == 0x000000, "Member 'AGChosenImage_GetThumbnailPath::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenImage.GetThumbnailSmallPath
// 0x0010 (0x0010 - 0x0000)
struct AGChosenImage_GetThumbnailSmallPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenImage_GetThumbnailSmallPath) == 0x000008, "Wrong alignment on AGChosenImage_GetThumbnailSmallPath");
static_assert(sizeof(AGChosenImage_GetThumbnailSmallPath) == 0x000010, "Wrong size on AGChosenImage_GetThumbnailSmallPath");
static_assert(offsetof(AGChosenImage_GetThumbnailSmallPath, ReturnValue) == 0x000000, "Member 'AGChosenImage_GetThumbnailSmallPath::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGChosenImage.GetWidth
// 0x0004 (0x0004 - 0x0000)
struct AGChosenImage_GetWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGChosenImage_GetWidth) == 0x000004, "Wrong alignment on AGChosenImage_GetWidth");
static_assert(sizeof(AGChosenImage_GetWidth) == 0x000004, "Wrong size on AGChosenImage_GetWidth");
static_assert(offsetof(AGChosenImage_GetWidth, ReturnValue) == 0x000000, "Member 'AGChosenImage_GetWidth::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGContactsBPL.AddContact
// 0x0028 (0x0028 - 0x0000)
struct AGContactsBPL_AddContact final
{
public:
	struct FAGContact                             Contact;                                           // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGContactsBPL_AddContact) == 0x000008, "Wrong alignment on AGContactsBPL_AddContact");
static_assert(sizeof(AGContactsBPL_AddContact) == 0x000028, "Wrong size on AGContactsBPL_AddContact");
static_assert(offsetof(AGContactsBPL_AddContact, Contact) == 0x000000, "Member 'AGContactsBPL_AddContact::Contact' has a wrong offset!");
static_assert(offsetof(AGContactsBPL_AddContact, ReturnValue) == 0x000020, "Member 'AGContactsBPL_AddContact::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGContactsBPL.GetAllContacts
// 0x0010 (0x0010 - 0x0000)
struct AGContactsBPL_GetAllContacts final
{
public:
	TArray<struct FAGContact>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGContactsBPL_GetAllContacts) == 0x000008, "Wrong alignment on AGContactsBPL_GetAllContacts");
static_assert(sizeof(AGContactsBPL_GetAllContacts) == 0x000010, "Wrong size on AGContactsBPL_GetAllContacts");
static_assert(offsetof(AGContactsBPL_GetAllContacts, ReturnValue) == 0x000000, "Member 'AGContactsBPL_GetAllContacts::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGContactsBPL.GetContactsWithName
// 0x0020 (0x0020 - 0x0000)
struct AGContactsBPL_GetContactsWithName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAGContact>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGContactsBPL_GetContactsWithName) == 0x000008, "Wrong alignment on AGContactsBPL_GetContactsWithName");
static_assert(sizeof(AGContactsBPL_GetContactsWithName) == 0x000020, "Wrong size on AGContactsBPL_GetContactsWithName");
static_assert(offsetof(AGContactsBPL_GetContactsWithName, Name_0) == 0x000000, "Member 'AGContactsBPL_GetContactsWithName::Name_0' has a wrong offset!");
static_assert(offsetof(AGContactsBPL_GetContactsWithName, ReturnValue) == 0x000010, "Member 'AGContactsBPL_GetContactsWithName::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGContactsBPL.GetContactsWithNumber
// 0x0020 (0x0020 - 0x0000)
struct AGContactsBPL_GetContactsWithNumber final
{
public:
	class FString                                 Number;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAGContact>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGContactsBPL_GetContactsWithNumber) == 0x000008, "Wrong alignment on AGContactsBPL_GetContactsWithNumber");
static_assert(sizeof(AGContactsBPL_GetContactsWithNumber) == 0x000020, "Wrong size on AGContactsBPL_GetContactsWithNumber");
static_assert(offsetof(AGContactsBPL_GetContactsWithNumber, Number) == 0x000000, "Member 'AGContactsBPL_GetContactsWithNumber::Number' has a wrong offset!");
static_assert(offsetof(AGContactsBPL_GetContactsWithNumber, ReturnValue) == 0x000010, "Member 'AGContactsBPL_GetContactsWithNumber::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGContactsBPL.GetUserPhoneNumber
// 0x0010 (0x0010 - 0x0000)
struct AGContactsBPL_GetUserPhoneNumber final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGContactsBPL_GetUserPhoneNumber) == 0x000008, "Wrong alignment on AGContactsBPL_GetUserPhoneNumber");
static_assert(sizeof(AGContactsBPL_GetUserPhoneNumber) == 0x000010, "Wrong size on AGContactsBPL_GetUserPhoneNumber");
static_assert(offsetof(AGContactsBPL_GetUserPhoneNumber, ReturnValue) == 0x000000, "Member 'AGContactsBPL_GetUserPhoneNumber::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDateTimePickerBPL.ShowDatePicker
// 0x0030 (0x0030 - 0x0000)
struct AGDateTimePickerBPL_ShowDatePicker final
{
public:
	struct FDateTime                              InitialDate;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Year, int32 Month, int32 Day)> OnDateSetCallback;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnCancelCallback;                                  // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDateTimePickerBPL_ShowDatePicker) == 0x000008, "Wrong alignment on AGDateTimePickerBPL_ShowDatePicker");
static_assert(sizeof(AGDateTimePickerBPL_ShowDatePicker) == 0x000030, "Wrong size on AGDateTimePickerBPL_ShowDatePicker");
static_assert(offsetof(AGDateTimePickerBPL_ShowDatePicker, InitialDate) == 0x000000, "Member 'AGDateTimePickerBPL_ShowDatePicker::InitialDate' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowDatePicker, OnDateSetCallback) == 0x000008, "Member 'AGDateTimePickerBPL_ShowDatePicker::OnDateSetCallback' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowDatePicker, OnCancelCallback) == 0x000018, "Member 'AGDateTimePickerBPL_ShowDatePicker::OnCancelCallback' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowDatePicker, Theme) == 0x000028, "Member 'AGDateTimePickerBPL_ShowDatePicker::Theme' has a wrong offset!");

// Function AndroidGoodies.AGDateTimePickerBPL.ShowDatePickerWithLimits
// 0x0040 (0x0040 - 0x0000)
struct AGDateTimePickerBPL_ShowDatePickerWithLimits final
{
public:
	struct FDateTime                              InitialDate;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Year, int32 Month, int32 Day)> OnDateSetCallback;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnCancelCallback;                                  // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDateTime                              FromDate;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ToDate;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDateTimePickerBPL_ShowDatePickerWithLimits) == 0x000008, "Wrong alignment on AGDateTimePickerBPL_ShowDatePickerWithLimits");
static_assert(sizeof(AGDateTimePickerBPL_ShowDatePickerWithLimits) == 0x000040, "Wrong size on AGDateTimePickerBPL_ShowDatePickerWithLimits");
static_assert(offsetof(AGDateTimePickerBPL_ShowDatePickerWithLimits, InitialDate) == 0x000000, "Member 'AGDateTimePickerBPL_ShowDatePickerWithLimits::InitialDate' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowDatePickerWithLimits, OnDateSetCallback) == 0x000008, "Member 'AGDateTimePickerBPL_ShowDatePickerWithLimits::OnDateSetCallback' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowDatePickerWithLimits, OnCancelCallback) == 0x000018, "Member 'AGDateTimePickerBPL_ShowDatePickerWithLimits::OnCancelCallback' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowDatePickerWithLimits, FromDate) == 0x000028, "Member 'AGDateTimePickerBPL_ShowDatePickerWithLimits::FromDate' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowDatePickerWithLimits, ToDate) == 0x000030, "Member 'AGDateTimePickerBPL_ShowDatePickerWithLimits::ToDate' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowDatePickerWithLimits, Theme) == 0x000038, "Member 'AGDateTimePickerBPL_ShowDatePickerWithLimits::Theme' has a wrong offset!");

// Function AndroidGoodies.AGDateTimePickerBPL.ShowTimePicker
// 0x002C (0x002C - 0x0000)
struct AGDateTimePickerBPL_ShowTimePicker final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Hour, int32 Minute)>     OnTimeSetCallback;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnCancelCallback;                                  // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is24HourView;                                      // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDateTimePickerBPL_ShowTimePicker) == 0x000004, "Wrong alignment on AGDateTimePickerBPL_ShowTimePicker");
static_assert(sizeof(AGDateTimePickerBPL_ShowTimePicker) == 0x00002C, "Wrong size on AGDateTimePickerBPL_ShowTimePicker");
static_assert(offsetof(AGDateTimePickerBPL_ShowTimePicker, Hour) == 0x000000, "Member 'AGDateTimePickerBPL_ShowTimePicker::Hour' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowTimePicker, Minute) == 0x000004, "Member 'AGDateTimePickerBPL_ShowTimePicker::Minute' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowTimePicker, OnTimeSetCallback) == 0x000008, "Member 'AGDateTimePickerBPL_ShowTimePicker::OnTimeSetCallback' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowTimePicker, OnCancelCallback) == 0x000018, "Member 'AGDateTimePickerBPL_ShowTimePicker::OnCancelCallback' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowTimePicker, Theme) == 0x000028, "Member 'AGDateTimePickerBPL_ShowTimePicker::Theme' has a wrong offset!");
static_assert(offsetof(AGDateTimePickerBPL_ShowTimePicker, Is24HourView) == 0x000029, "Member 'AGDateTimePickerBPL_ShowTimePicker::Is24HourView' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetAndroidId
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetAndroidId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetAndroidId) == 0x000008, "Wrong alignment on AGDeviceInfo_GetAndroidId");
static_assert(sizeof(AGDeviceInfo_GetAndroidId) == 0x000010, "Wrong size on AGDeviceInfo_GetAndroidId");
static_assert(offsetof(AGDeviceInfo_GetAndroidId, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetAndroidId::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetApplicationPackageName
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetApplicationPackageName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetApplicationPackageName) == 0x000008, "Wrong alignment on AGDeviceInfo_GetApplicationPackageName");
static_assert(sizeof(AGDeviceInfo_GetApplicationPackageName) == 0x000010, "Wrong size on AGDeviceInfo_GetApplicationPackageName");
static_assert(offsetof(AGDeviceInfo_GetApplicationPackageName, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetApplicationPackageName::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetBaseOs
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetBaseOs final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetBaseOs) == 0x000008, "Wrong alignment on AGDeviceInfo_GetBaseOs");
static_assert(sizeof(AGDeviceInfo_GetBaseOs) == 0x000010, "Wrong size on AGDeviceInfo_GetBaseOs");
static_assert(offsetof(AGDeviceInfo_GetBaseOs, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetBaseOs::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetBoard
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetBoard final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetBoard) == 0x000008, "Wrong alignment on AGDeviceInfo_GetBoard");
static_assert(sizeof(AGDeviceInfo_GetBoard) == 0x000010, "Wrong size on AGDeviceInfo_GetBoard");
static_assert(offsetof(AGDeviceInfo_GetBoard, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetBoard::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetBootloader
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetBootloader final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetBootloader) == 0x000008, "Wrong alignment on AGDeviceInfo_GetBootloader");
static_assert(sizeof(AGDeviceInfo_GetBootloader) == 0x000010, "Wrong size on AGDeviceInfo_GetBootloader");
static_assert(offsetof(AGDeviceInfo_GetBootloader, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetBootloader::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetBrand
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetBrand final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetBrand) == 0x000008, "Wrong alignment on AGDeviceInfo_GetBrand");
static_assert(sizeof(AGDeviceInfo_GetBrand) == 0x000010, "Wrong size on AGDeviceInfo_GetBrand");
static_assert(offsetof(AGDeviceInfo_GetBrand, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetBrand::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetCodeName
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetCodeName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetCodeName) == 0x000008, "Wrong alignment on AGDeviceInfo_GetCodeName");
static_assert(sizeof(AGDeviceInfo_GetCodeName) == 0x000010, "Wrong size on AGDeviceInfo_GetCodeName");
static_assert(offsetof(AGDeviceInfo_GetCodeName, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetCodeName::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetDevice
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetDevice final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetDevice) == 0x000008, "Wrong alignment on AGDeviceInfo_GetDevice");
static_assert(sizeof(AGDeviceInfo_GetDevice) == 0x000010, "Wrong size on AGDeviceInfo_GetDevice");
static_assert(offsetof(AGDeviceInfo_GetDevice, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetDevice::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetDisplay
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetDisplay final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetDisplay) == 0x000008, "Wrong alignment on AGDeviceInfo_GetDisplay");
static_assert(sizeof(AGDeviceInfo_GetDisplay) == 0x000010, "Wrong size on AGDeviceInfo_GetDisplay");
static_assert(offsetof(AGDeviceInfo_GetDisplay, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetDisplay::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetHardware
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetHardware final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetHardware) == 0x000008, "Wrong alignment on AGDeviceInfo_GetHardware");
static_assert(sizeof(AGDeviceInfo_GetHardware) == 0x000010, "Wrong size on AGDeviceInfo_GetHardware");
static_assert(offsetof(AGDeviceInfo_GetHardware, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetHardware::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetManufacturer
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetManufacturer final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetManufacturer) == 0x000008, "Wrong alignment on AGDeviceInfo_GetManufacturer");
static_assert(sizeof(AGDeviceInfo_GetManufacturer) == 0x000010, "Wrong size on AGDeviceInfo_GetManufacturer");
static_assert(offsetof(AGDeviceInfo_GetManufacturer, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetManufacturer::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetModel
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetModel final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetModel) == 0x000008, "Wrong alignment on AGDeviceInfo_GetModel");
static_assert(sizeof(AGDeviceInfo_GetModel) == 0x000010, "Wrong size on AGDeviceInfo_GetModel");
static_assert(offsetof(AGDeviceInfo_GetModel, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetModel::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetProduct
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetProduct final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetProduct) == 0x000008, "Wrong alignment on AGDeviceInfo_GetProduct");
static_assert(sizeof(AGDeviceInfo_GetProduct) == 0x000010, "Wrong size on AGDeviceInfo_GetProduct");
static_assert(offsetof(AGDeviceInfo_GetProduct, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetProduct::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetRadio
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetRadio final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetRadio) == 0x000008, "Wrong alignment on AGDeviceInfo_GetRadio");
static_assert(sizeof(AGDeviceInfo_GetRadio) == 0x000010, "Wrong size on AGDeviceInfo_GetRadio");
static_assert(offsetof(AGDeviceInfo_GetRadio, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetRadio::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetRelease
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetRelease final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetRelease) == 0x000008, "Wrong alignment on AGDeviceInfo_GetRelease");
static_assert(sizeof(AGDeviceInfo_GetRelease) == 0x000010, "Wrong size on AGDeviceInfo_GetRelease");
static_assert(offsetof(AGDeviceInfo_GetRelease, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetRelease::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetSdkInt
// 0x0004 (0x0004 - 0x0000)
struct AGDeviceInfo_GetSdkInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetSdkInt) == 0x000004, "Wrong alignment on AGDeviceInfo_GetSdkInt");
static_assert(sizeof(AGDeviceInfo_GetSdkInt) == 0x000004, "Wrong size on AGDeviceInfo_GetSdkInt");
static_assert(offsetof(AGDeviceInfo_GetSdkInt, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetSdkInt::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetSerial
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetSerial final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetSerial) == 0x000008, "Wrong alignment on AGDeviceInfo_GetSerial");
static_assert(sizeof(AGDeviceInfo_GetSerial) == 0x000010, "Wrong size on AGDeviceInfo_GetSerial");
static_assert(offsetof(AGDeviceInfo_GetSerial, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetSerial::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetTags
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetTags final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetTags) == 0x000008, "Wrong alignment on AGDeviceInfo_GetTags");
static_assert(sizeof(AGDeviceInfo_GetTags) == 0x000010, "Wrong size on AGDeviceInfo_GetTags");
static_assert(offsetof(AGDeviceInfo_GetTags, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetTags::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.GetType
// 0x0010 (0x0010 - 0x0000)
struct AGDeviceInfo_GetType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_GetType) == 0x000008, "Wrong alignment on AGDeviceInfo_GetType");
static_assert(sizeof(AGDeviceInfo_GetType) == 0x000010, "Wrong size on AGDeviceInfo_GetType");
static_assert(offsetof(AGDeviceInfo_GetType, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_GetType::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCamera
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCamera) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCamera");
static_assert(sizeof(AGDeviceInfo_HasCamera) == 0x000001, "Wrong size on AGDeviceInfo_HasCamera");
static_assert(offsetof(AGDeviceInfo_HasCamera, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCamera::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCameraAny
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCameraAny final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCameraAny) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCameraAny");
static_assert(sizeof(AGDeviceInfo_HasCameraAny) == 0x000001, "Wrong size on AGDeviceInfo_HasCameraAny");
static_assert(offsetof(AGDeviceInfo_HasCameraAny, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCameraAny::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCameraAr
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCameraAr final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCameraAr) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCameraAr");
static_assert(sizeof(AGDeviceInfo_HasCameraAr) == 0x000001, "Wrong size on AGDeviceInfo_HasCameraAr");
static_assert(offsetof(AGDeviceInfo_HasCameraAr, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCameraAr::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCameraAutofocus
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCameraAutofocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCameraAutofocus) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCameraAutofocus");
static_assert(sizeof(AGDeviceInfo_HasCameraAutofocus) == 0x000001, "Wrong size on AGDeviceInfo_HasCameraAutofocus");
static_assert(offsetof(AGDeviceInfo_HasCameraAutofocus, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCameraAutofocus::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCameraCapabilityManualPostprocessing
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCameraCapabilityManualPostprocessing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCameraCapabilityManualPostprocessing) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCameraCapabilityManualPostprocessing");
static_assert(sizeof(AGDeviceInfo_HasCameraCapabilityManualPostprocessing) == 0x000001, "Wrong size on AGDeviceInfo_HasCameraCapabilityManualPostprocessing");
static_assert(offsetof(AGDeviceInfo_HasCameraCapabilityManualPostprocessing, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCameraCapabilityManualPostprocessing::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCameraCapabilityManualSensor
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCameraCapabilityManualSensor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCameraCapabilityManualSensor) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCameraCapabilityManualSensor");
static_assert(sizeof(AGDeviceInfo_HasCameraCapabilityManualSensor) == 0x000001, "Wrong size on AGDeviceInfo_HasCameraCapabilityManualSensor");
static_assert(offsetof(AGDeviceInfo_HasCameraCapabilityManualSensor, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCameraCapabilityManualSensor::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCameraCapabilityRaw
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCameraCapabilityRaw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCameraCapabilityRaw) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCameraCapabilityRaw");
static_assert(sizeof(AGDeviceInfo_HasCameraCapabilityRaw) == 0x000001, "Wrong size on AGDeviceInfo_HasCameraCapabilityRaw");
static_assert(offsetof(AGDeviceInfo_HasCameraCapabilityRaw, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCameraCapabilityRaw::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCameraExternal
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCameraExternal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCameraExternal) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCameraExternal");
static_assert(sizeof(AGDeviceInfo_HasCameraExternal) == 0x000001, "Wrong size on AGDeviceInfo_HasCameraExternal");
static_assert(offsetof(AGDeviceInfo_HasCameraExternal, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCameraExternal::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCameraFlash
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCameraFlash final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCameraFlash) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCameraFlash");
static_assert(sizeof(AGDeviceInfo_HasCameraFlash) == 0x000001, "Wrong size on AGDeviceInfo_HasCameraFlash");
static_assert(offsetof(AGDeviceInfo_HasCameraFlash, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCameraFlash::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCameraFront
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCameraFront final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCameraFront) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCameraFront");
static_assert(sizeof(AGDeviceInfo_HasCameraFront) == 0x000001, "Wrong size on AGDeviceInfo_HasCameraFront");
static_assert(offsetof(AGDeviceInfo_HasCameraFront, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCameraFront::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasCameraLevelFull
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasCameraLevelFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasCameraLevelFull) == 0x000001, "Wrong alignment on AGDeviceInfo_HasCameraLevelFull");
static_assert(sizeof(AGDeviceInfo_HasCameraLevelFull) == 0x000001, "Wrong size on AGDeviceInfo_HasCameraLevelFull");
static_assert(offsetof(AGDeviceInfo_HasCameraLevelFull, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasCameraLevelFull::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasGamepad
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasGamepad) == 0x000001, "Wrong alignment on AGDeviceInfo_HasGamepad");
static_assert(sizeof(AGDeviceInfo_HasGamepad) == 0x000001, "Wrong size on AGDeviceInfo_HasGamepad");
static_assert(offsetof(AGDeviceInfo_HasGamepad, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasGamepad::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasMicrophone
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasMicrophone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasMicrophone) == 0x000001, "Wrong alignment on AGDeviceInfo_HasMicrophone");
static_assert(sizeof(AGDeviceInfo_HasMicrophone) == 0x000001, "Wrong size on AGDeviceInfo_HasMicrophone");
static_assert(offsetof(AGDeviceInfo_HasMicrophone, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasMicrophone::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasRamLow
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasRamLow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasRamLow) == 0x000001, "Wrong alignment on AGDeviceInfo_HasRamLow");
static_assert(sizeof(AGDeviceInfo_HasRamLow) == 0x000001, "Wrong size on AGDeviceInfo_HasRamLow");
static_assert(offsetof(AGDeviceInfo_HasRamLow, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasRamLow::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasRamNormal
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasRamNormal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasRamNormal) == 0x000001, "Wrong alignment on AGDeviceInfo_HasRamNormal");
static_assert(sizeof(AGDeviceInfo_HasRamNormal) == 0x000001, "Wrong size on AGDeviceInfo_HasRamNormal");
static_assert(offsetof(AGDeviceInfo_HasRamNormal, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasRamNormal::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorAccelerometer
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorAccelerometer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorAccelerometer) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorAccelerometer");
static_assert(sizeof(AGDeviceInfo_HasSensorAccelerometer) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorAccelerometer");
static_assert(offsetof(AGDeviceInfo_HasSensorAccelerometer, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorAccelerometer::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorAmbientTemperature
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorAmbientTemperature final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorAmbientTemperature) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorAmbientTemperature");
static_assert(sizeof(AGDeviceInfo_HasSensorAmbientTemperature) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorAmbientTemperature");
static_assert(offsetof(AGDeviceInfo_HasSensorAmbientTemperature, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorAmbientTemperature::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorBarometer
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorBarometer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorBarometer) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorBarometer");
static_assert(sizeof(AGDeviceInfo_HasSensorBarometer) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorBarometer");
static_assert(offsetof(AGDeviceInfo_HasSensorBarometer, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorBarometer::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorCompass
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorCompass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorCompass) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorCompass");
static_assert(sizeof(AGDeviceInfo_HasSensorCompass) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorCompass");
static_assert(offsetof(AGDeviceInfo_HasSensorCompass, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorCompass::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorGyroscope
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorGyroscope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorGyroscope) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorGyroscope");
static_assert(sizeof(AGDeviceInfo_HasSensorGyroscope) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorGyroscope");
static_assert(offsetof(AGDeviceInfo_HasSensorGyroscope, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorGyroscope::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorHeartRate
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorHeartRate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorHeartRate) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorHeartRate");
static_assert(sizeof(AGDeviceInfo_HasSensorHeartRate) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorHeartRate");
static_assert(offsetof(AGDeviceInfo_HasSensorHeartRate, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorHeartRate::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorHeartRateEcg
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorHeartRateEcg final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorHeartRateEcg) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorHeartRateEcg");
static_assert(sizeof(AGDeviceInfo_HasSensorHeartRateEcg) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorHeartRateEcg");
static_assert(offsetof(AGDeviceInfo_HasSensorHeartRateEcg, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorHeartRateEcg::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorLight
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorLight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorLight) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorLight");
static_assert(sizeof(AGDeviceInfo_HasSensorLight) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorLight");
static_assert(offsetof(AGDeviceInfo_HasSensorLight, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorLight::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorProximity
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorProximity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorProximity) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorProximity");
static_assert(sizeof(AGDeviceInfo_HasSensorProximity) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorProximity");
static_assert(offsetof(AGDeviceInfo_HasSensorProximity, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorProximity::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorRelativeHumidity
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorRelativeHumidity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorRelativeHumidity) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorRelativeHumidity");
static_assert(sizeof(AGDeviceInfo_HasSensorRelativeHumidity) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorRelativeHumidity");
static_assert(offsetof(AGDeviceInfo_HasSensorRelativeHumidity, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorRelativeHumidity::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorStepCounter
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorStepCounter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorStepCounter) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorStepCounter");
static_assert(sizeof(AGDeviceInfo_HasSensorStepCounter) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorStepCounter");
static_assert(offsetof(AGDeviceInfo_HasSensorStepCounter, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorStepCounter::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSensorStepDetector
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSensorStepDetector final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSensorStepDetector) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSensorStepDetector");
static_assert(sizeof(AGDeviceInfo_HasSensorStepDetector) == 0x000001, "Wrong size on AGDeviceInfo_HasSensorStepDetector");
static_assert(offsetof(AGDeviceInfo_HasSensorStepDetector, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSensorStepDetector::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSip
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasSip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasSip) == 0x000001, "Wrong alignment on AGDeviceInfo_HasSip");
static_assert(sizeof(AGDeviceInfo_HasSip) == 0x000001, "Wrong size on AGDeviceInfo_HasSip");
static_assert(offsetof(AGDeviceInfo_HasSip, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasSip::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasStrongBoxKeyStore
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasStrongBoxKeyStore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasStrongBoxKeyStore) == 0x000001, "Wrong alignment on AGDeviceInfo_HasStrongBoxKeyStore");
static_assert(sizeof(AGDeviceInfo_HasStrongBoxKeyStore) == 0x000001, "Wrong size on AGDeviceInfo_HasStrongBoxKeyStore");
static_assert(offsetof(AGDeviceInfo_HasStrongBoxKeyStore, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasStrongBoxKeyStore::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasSystemFeature
// 0x0018 (0x0018 - 0x0000)
struct AGDeviceInfo_HasSystemFeature final
{
public:
	class FString                                 FeatureName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDeviceInfo_HasSystemFeature) == 0x000008, "Wrong alignment on AGDeviceInfo_HasSystemFeature");
static_assert(sizeof(AGDeviceInfo_HasSystemFeature) == 0x000018, "Wrong size on AGDeviceInfo_HasSystemFeature");
static_assert(offsetof(AGDeviceInfo_HasSystemFeature, FeatureName) == 0x000000, "Member 'AGDeviceInfo_HasSystemFeature::FeatureName' has a wrong offset!");
static_assert(offsetof(AGDeviceInfo_HasSystemFeature, ReturnValue) == 0x000010, "Member 'AGDeviceInfo_HasSystemFeature::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasTelephony
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasTelephony final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasTelephony) == 0x000001, "Wrong alignment on AGDeviceInfo_HasTelephony");
static_assert(sizeof(AGDeviceInfo_HasTelephony) == 0x000001, "Wrong size on AGDeviceInfo_HasTelephony");
static_assert(offsetof(AGDeviceInfo_HasTelephony, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasTelephony::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasTelephonyCdma
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasTelephonyCdma final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasTelephonyCdma) == 0x000001, "Wrong alignment on AGDeviceInfo_HasTelephonyCdma");
static_assert(sizeof(AGDeviceInfo_HasTelephonyCdma) == 0x000001, "Wrong size on AGDeviceInfo_HasTelephonyCdma");
static_assert(offsetof(AGDeviceInfo_HasTelephonyCdma, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasTelephonyCdma::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasTelephonyEuicc
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasTelephonyEuicc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasTelephonyEuicc) == 0x000001, "Wrong alignment on AGDeviceInfo_HasTelephonyEuicc");
static_assert(sizeof(AGDeviceInfo_HasTelephonyEuicc) == 0x000001, "Wrong size on AGDeviceInfo_HasTelephonyEuicc");
static_assert(offsetof(AGDeviceInfo_HasTelephonyEuicc, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasTelephonyEuicc::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasTelephonyGsm
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasTelephonyGsm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasTelephonyGsm) == 0x000001, "Wrong alignment on AGDeviceInfo_HasTelephonyGsm");
static_assert(sizeof(AGDeviceInfo_HasTelephonyGsm) == 0x000001, "Wrong size on AGDeviceInfo_HasTelephonyGsm");
static_assert(offsetof(AGDeviceInfo_HasTelephonyGsm, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasTelephonyGsm::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasTelephonyMbms
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasTelephonyMbms final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasTelephonyMbms) == 0x000001, "Wrong alignment on AGDeviceInfo_HasTelephonyMbms");
static_assert(sizeof(AGDeviceInfo_HasTelephonyMbms) == 0x000001, "Wrong size on AGDeviceInfo_HasTelephonyMbms");
static_assert(offsetof(AGDeviceInfo_HasTelephonyMbms, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasTelephonyMbms::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasTouchScreen
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasTouchScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasTouchScreen) == 0x000001, "Wrong alignment on AGDeviceInfo_HasTouchScreen");
static_assert(sizeof(AGDeviceInfo_HasTouchScreen) == 0x000001, "Wrong size on AGDeviceInfo_HasTouchScreen");
static_assert(offsetof(AGDeviceInfo_HasTouchScreen, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasTouchScreen::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasVrHeadTracking
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasVrHeadTracking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasVrHeadTracking) == 0x000001, "Wrong alignment on AGDeviceInfo_HasVrHeadTracking");
static_assert(sizeof(AGDeviceInfo_HasVrHeadTracking) == 0x000001, "Wrong size on AGDeviceInfo_HasVrHeadTracking");
static_assert(offsetof(AGDeviceInfo_HasVrHeadTracking, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasVrHeadTracking::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasVrMode
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasVrMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasVrMode) == 0x000001, "Wrong alignment on AGDeviceInfo_HasVrMode");
static_assert(sizeof(AGDeviceInfo_HasVrMode) == 0x000001, "Wrong size on AGDeviceInfo_HasVrMode");
static_assert(offsetof(AGDeviceInfo_HasVrMode, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasVrMode::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.HasVrModeHighPerformance
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_HasVrModeHighPerformance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_HasVrModeHighPerformance) == 0x000001, "Wrong alignment on AGDeviceInfo_HasVrModeHighPerformance");
static_assert(sizeof(AGDeviceInfo_HasVrModeHighPerformance) == 0x000001, "Wrong size on AGDeviceInfo_HasVrModeHighPerformance");
static_assert(offsetof(AGDeviceInfo_HasVrModeHighPerformance, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_HasVrModeHighPerformance::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.IsEmbedded
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_IsEmbedded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_IsEmbedded) == 0x000001, "Wrong alignment on AGDeviceInfo_IsEmbedded");
static_assert(sizeof(AGDeviceInfo_IsEmbedded) == 0x000001, "Wrong size on AGDeviceInfo_IsEmbedded");
static_assert(offsetof(AGDeviceInfo_IsEmbedded, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_IsEmbedded::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.IsPackageInstalled
// 0x0018 (0x0018 - 0x0000)
struct AGDeviceInfo_IsPackageInstalled final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDeviceInfo_IsPackageInstalled) == 0x000008, "Wrong alignment on AGDeviceInfo_IsPackageInstalled");
static_assert(sizeof(AGDeviceInfo_IsPackageInstalled) == 0x000018, "Wrong size on AGDeviceInfo_IsPackageInstalled");
static_assert(offsetof(AGDeviceInfo_IsPackageInstalled, PackageName) == 0x000000, "Member 'AGDeviceInfo_IsPackageInstalled::PackageName' has a wrong offset!");
static_assert(offsetof(AGDeviceInfo_IsPackageInstalled, ReturnValue) == 0x000010, "Member 'AGDeviceInfo_IsPackageInstalled::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.IsPc
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_IsPc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_IsPc) == 0x000001, "Wrong alignment on AGDeviceInfo_IsPc");
static_assert(sizeof(AGDeviceInfo_IsPc) == 0x000001, "Wrong size on AGDeviceInfo_IsPc");
static_assert(offsetof(AGDeviceInfo_IsPc, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_IsPc::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.IsTelevision
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_IsTelevision final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_IsTelevision) == 0x000001, "Wrong alignment on AGDeviceInfo_IsTelevision");
static_assert(sizeof(AGDeviceInfo_IsTelevision) == 0x000001, "Wrong size on AGDeviceInfo_IsTelevision");
static_assert(offsetof(AGDeviceInfo_IsTelevision, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_IsTelevision::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.IsWatch
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_IsWatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_IsWatch) == 0x000001, "Wrong alignment on AGDeviceInfo_IsWatch");
static_assert(sizeof(AGDeviceInfo_IsWatch) == 0x000001, "Wrong size on AGDeviceInfo_IsWatch");
static_assert(offsetof(AGDeviceInfo_IsWatch, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_IsWatch::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsActivitiesOnSecondaryDisplays
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsActivitiesOnSecondaryDisplays final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsActivitiesOnSecondaryDisplays) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsActivitiesOnSecondaryDisplays");
static_assert(sizeof(AGDeviceInfo_SupportsActivitiesOnSecondaryDisplays) == 0x000001, "Wrong size on AGDeviceInfo_SupportsActivitiesOnSecondaryDisplays");
static_assert(offsetof(AGDeviceInfo_SupportsActivitiesOnSecondaryDisplays, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsActivitiesOnSecondaryDisplays::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsAppWidgets
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsAppWidgets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsAppWidgets) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsAppWidgets");
static_assert(sizeof(AGDeviceInfo_SupportsAppWidgets) == 0x000001, "Wrong size on AGDeviceInfo_SupportsAppWidgets");
static_assert(offsetof(AGDeviceInfo_SupportsAppWidgets, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsAppWidgets::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsAudioLowLatency
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsAudioLowLatency final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsAudioLowLatency) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsAudioLowLatency");
static_assert(sizeof(AGDeviceInfo_SupportsAudioLowLatency) == 0x000001, "Wrong size on AGDeviceInfo_SupportsAudioLowLatency");
static_assert(offsetof(AGDeviceInfo_SupportsAudioLowLatency, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsAudioLowLatency::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsAudioOutput
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsAudioOutput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsAudioOutput) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsAudioOutput");
static_assert(sizeof(AGDeviceInfo_SupportsAudioOutput) == 0x000001, "Wrong size on AGDeviceInfo_SupportsAudioOutput");
static_assert(offsetof(AGDeviceInfo_SupportsAudioOutput, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsAudioOutput::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsAudioPro
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsAudioPro final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsAudioPro) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsAudioPro");
static_assert(sizeof(AGDeviceInfo_SupportsAudioPro) == 0x000001, "Wrong size on AGDeviceInfo_SupportsAudioPro");
static_assert(offsetof(AGDeviceInfo_SupportsAudioPro, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsAudioPro::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsAutofill
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsAutofill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsAutofill) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsAutofill");
static_assert(sizeof(AGDeviceInfo_SupportsAutofill) == 0x000001, "Wrong size on AGDeviceInfo_SupportsAutofill");
static_assert(offsetof(AGDeviceInfo_SupportsAutofill, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsAutofill::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsAutomotive
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsAutomotive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsAutomotive) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsAutomotive");
static_assert(sizeof(AGDeviceInfo_SupportsAutomotive) == 0x000001, "Wrong size on AGDeviceInfo_SupportsAutomotive");
static_assert(offsetof(AGDeviceInfo_SupportsAutomotive, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsAutomotive::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsBackup
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsBackup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsBackup) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsBackup");
static_assert(sizeof(AGDeviceInfo_SupportsBackup) == 0x000001, "Wrong size on AGDeviceInfo_SupportsBackup");
static_assert(offsetof(AGDeviceInfo_SupportsBackup, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsBackup::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsBluetooth
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsBluetooth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsBluetooth) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsBluetooth");
static_assert(sizeof(AGDeviceInfo_SupportsBluetooth) == 0x000001, "Wrong size on AGDeviceInfo_SupportsBluetooth");
static_assert(offsetof(AGDeviceInfo_SupportsBluetooth, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsBluetooth::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsBluetoothLe
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsBluetoothLe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsBluetoothLe) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsBluetoothLe");
static_assert(sizeof(AGDeviceInfo_SupportsBluetoothLe) == 0x000001, "Wrong size on AGDeviceInfo_SupportsBluetoothLe");
static_assert(offsetof(AGDeviceInfo_SupportsBluetoothLe, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsBluetoothLe::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsCantSaveState
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsCantSaveState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsCantSaveState) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsCantSaveState");
static_assert(sizeof(AGDeviceInfo_SupportsCantSaveState) == 0x000001, "Wrong size on AGDeviceInfo_SupportsCantSaveState");
static_assert(offsetof(AGDeviceInfo_SupportsCantSaveState, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsCantSaveState::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsCompanionDeviceSetup
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsCompanionDeviceSetup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsCompanionDeviceSetup) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsCompanionDeviceSetup");
static_assert(sizeof(AGDeviceInfo_SupportsCompanionDeviceSetup) == 0x000001, "Wrong size on AGDeviceInfo_SupportsCompanionDeviceSetup");
static_assert(offsetof(AGDeviceInfo_SupportsCompanionDeviceSetup, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsCompanionDeviceSetup::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsConnectionService
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsConnectionService final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsConnectionService) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsConnectionService");
static_assert(sizeof(AGDeviceInfo_SupportsConnectionService) == 0x000001, "Wrong size on AGDeviceInfo_SupportsConnectionService");
static_assert(offsetof(AGDeviceInfo_SupportsConnectionService, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsConnectionService::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsConsumerIr
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsConsumerIr final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsConsumerIr) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsConsumerIr");
static_assert(sizeof(AGDeviceInfo_SupportsConsumerIr) == 0x000001, "Wrong size on AGDeviceInfo_SupportsConsumerIr");
static_assert(offsetof(AGDeviceInfo_SupportsConsumerIr, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsConsumerIr::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsDeviceAdmin
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsDeviceAdmin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsDeviceAdmin) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsDeviceAdmin");
static_assert(sizeof(AGDeviceInfo_SupportsDeviceAdmin) == 0x000001, "Wrong size on AGDeviceInfo_SupportsDeviceAdmin");
static_assert(offsetof(AGDeviceInfo_SupportsDeviceAdmin, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsDeviceAdmin::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsEthernet
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsEthernet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsEthernet) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsEthernet");
static_assert(sizeof(AGDeviceInfo_SupportsEthernet) == 0x000001, "Wrong size on AGDeviceInfo_SupportsEthernet");
static_assert(offsetof(AGDeviceInfo_SupportsEthernet, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsEthernet::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsFakeTouch
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsFakeTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsFakeTouch) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsFakeTouch");
static_assert(sizeof(AGDeviceInfo_SupportsFakeTouch) == 0x000001, "Wrong size on AGDeviceInfo_SupportsFakeTouch");
static_assert(offsetof(AGDeviceInfo_SupportsFakeTouch, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsFakeTouch::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsFakeTouchMultiTouchDistinct
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsFakeTouchMultiTouchDistinct final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsFakeTouchMultiTouchDistinct) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsFakeTouchMultiTouchDistinct");
static_assert(sizeof(AGDeviceInfo_SupportsFakeTouchMultiTouchDistinct) == 0x000001, "Wrong size on AGDeviceInfo_SupportsFakeTouchMultiTouchDistinct");
static_assert(offsetof(AGDeviceInfo_SupportsFakeTouchMultiTouchDistinct, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsFakeTouchMultiTouchDistinct::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsFakeTouchMultiTouchJazzHand
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsFakeTouchMultiTouchJazzHand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsFakeTouchMultiTouchJazzHand) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsFakeTouchMultiTouchJazzHand");
static_assert(sizeof(AGDeviceInfo_SupportsFakeTouchMultiTouchJazzHand) == 0x000001, "Wrong size on AGDeviceInfo_SupportsFakeTouchMultiTouchJazzHand");
static_assert(offsetof(AGDeviceInfo_SupportsFakeTouchMultiTouchJazzHand, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsFakeTouchMultiTouchJazzHand::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsFingerprint
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsFingerprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsFingerprint) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsFingerprint");
static_assert(sizeof(AGDeviceInfo_SupportsFingerprint) == 0x000001, "Wrong size on AGDeviceInfo_SupportsFingerprint");
static_assert(offsetof(AGDeviceInfo_SupportsFingerprint, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsFingerprint::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsFreeFormWindowManagement
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsFreeFormWindowManagement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsFreeFormWindowManagement) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsFreeFormWindowManagement");
static_assert(sizeof(AGDeviceInfo_SupportsFreeFormWindowManagement) == 0x000001, "Wrong size on AGDeviceInfo_SupportsFreeFormWindowManagement");
static_assert(offsetof(AGDeviceInfo_SupportsFreeFormWindowManagement, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsFreeFormWindowManagement::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsHifiSensors
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsHifiSensors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsHifiSensors) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsHifiSensors");
static_assert(sizeof(AGDeviceInfo_SupportsHifiSensors) == 0x000001, "Wrong size on AGDeviceInfo_SupportsHifiSensors");
static_assert(offsetof(AGDeviceInfo_SupportsHifiSensors, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsHifiSensors::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsHomeScreen
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsHomeScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsHomeScreen) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsHomeScreen");
static_assert(sizeof(AGDeviceInfo_SupportsHomeScreen) == 0x000001, "Wrong size on AGDeviceInfo_SupportsHomeScreen");
static_assert(offsetof(AGDeviceInfo_SupportsHomeScreen, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsHomeScreen::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsInputMethods
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsInputMethods final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsInputMethods) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsInputMethods");
static_assert(sizeof(AGDeviceInfo_SupportsInputMethods) == 0x000001, "Wrong size on AGDeviceInfo_SupportsInputMethods");
static_assert(offsetof(AGDeviceInfo_SupportsInputMethods, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsInputMethods::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsLeanback
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsLeanback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsLeanback) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsLeanback");
static_assert(sizeof(AGDeviceInfo_SupportsLeanback) == 0x000001, "Wrong size on AGDeviceInfo_SupportsLeanback");
static_assert(offsetof(AGDeviceInfo_SupportsLeanback, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsLeanback::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsLeanbackOnly
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsLeanbackOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsLeanbackOnly) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsLeanbackOnly");
static_assert(sizeof(AGDeviceInfo_SupportsLeanbackOnly) == 0x000001, "Wrong size on AGDeviceInfo_SupportsLeanbackOnly");
static_assert(offsetof(AGDeviceInfo_SupportsLeanbackOnly, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsLeanbackOnly::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsLiveTv
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsLiveTv final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsLiveTv) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsLiveTv");
static_assert(sizeof(AGDeviceInfo_SupportsLiveTv) == 0x000001, "Wrong size on AGDeviceInfo_SupportsLiveTv");
static_assert(offsetof(AGDeviceInfo_SupportsLiveTv, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsLiveTv::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsLiveWallpaper
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsLiveWallpaper final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsLiveWallpaper) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsLiveWallpaper");
static_assert(sizeof(AGDeviceInfo_SupportsLiveWallpaper) == 0x000001, "Wrong size on AGDeviceInfo_SupportsLiveWallpaper");
static_assert(offsetof(AGDeviceInfo_SupportsLiveWallpaper, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsLiveWallpaper::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsLocation
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsLocation) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsLocation");
static_assert(sizeof(AGDeviceInfo_SupportsLocation) == 0x000001, "Wrong size on AGDeviceInfo_SupportsLocation");
static_assert(offsetof(AGDeviceInfo_SupportsLocation, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsLocation::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsLocationGps
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsLocationGps final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsLocationGps) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsLocationGps");
static_assert(sizeof(AGDeviceInfo_SupportsLocationGps) == 0x000001, "Wrong size on AGDeviceInfo_SupportsLocationGps");
static_assert(offsetof(AGDeviceInfo_SupportsLocationGps, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsLocationGps::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsLocationNetwork
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsLocationNetwork final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsLocationNetwork) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsLocationNetwork");
static_assert(sizeof(AGDeviceInfo_SupportsLocationNetwork) == 0x000001, "Wrong size on AGDeviceInfo_SupportsLocationNetwork");
static_assert(offsetof(AGDeviceInfo_SupportsLocationNetwork, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsLocationNetwork::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsManagedUsers
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsManagedUsers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsManagedUsers) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsManagedUsers");
static_assert(sizeof(AGDeviceInfo_SupportsManagedUsers) == 0x000001, "Wrong size on AGDeviceInfo_SupportsManagedUsers");
static_assert(offsetof(AGDeviceInfo_SupportsManagedUsers, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsManagedUsers::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsMidi
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsMidi final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsMidi) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsMidi");
static_assert(sizeof(AGDeviceInfo_SupportsMidi) == 0x000001, "Wrong size on AGDeviceInfo_SupportsMidi");
static_assert(offsetof(AGDeviceInfo_SupportsMidi, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsMidi::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsNfc
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsNfc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsNfc) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsNfc");
static_assert(sizeof(AGDeviceInfo_SupportsNfc) == 0x000001, "Wrong size on AGDeviceInfo_SupportsNfc");
static_assert(offsetof(AGDeviceInfo_SupportsNfc, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsNfc::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsNfcHostCardEmulation
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsNfcHostCardEmulation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsNfcHostCardEmulation) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsNfcHostCardEmulation");
static_assert(sizeof(AGDeviceInfo_SupportsNfcHostCardEmulation) == 0x000001, "Wrong size on AGDeviceInfo_SupportsNfcHostCardEmulation");
static_assert(offsetof(AGDeviceInfo_SupportsNfcHostCardEmulation, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsNfcHostCardEmulation::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsNfcHostCardEmulationNfcf
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsNfcHostCardEmulationNfcf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsNfcHostCardEmulationNfcf) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsNfcHostCardEmulationNfcf");
static_assert(sizeof(AGDeviceInfo_SupportsNfcHostCardEmulationNfcf) == 0x000001, "Wrong size on AGDeviceInfo_SupportsNfcHostCardEmulationNfcf");
static_assert(offsetof(AGDeviceInfo_SupportsNfcHostCardEmulationNfcf, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsNfcHostCardEmulationNfcf::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsOpenGlEsExtensionPack
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsOpenGlEsExtensionPack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsOpenGlEsExtensionPack) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsOpenGlEsExtensionPack");
static_assert(sizeof(AGDeviceInfo_SupportsOpenGlEsExtensionPack) == 0x000001, "Wrong size on AGDeviceInfo_SupportsOpenGlEsExtensionPack");
static_assert(offsetof(AGDeviceInfo_SupportsOpenGlEsExtensionPack, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsOpenGlEsExtensionPack::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsPictureInPicture
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsPictureInPicture final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsPictureInPicture) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsPictureInPicture");
static_assert(sizeof(AGDeviceInfo_SupportsPictureInPicture) == 0x000001, "Wrong size on AGDeviceInfo_SupportsPictureInPicture");
static_assert(offsetof(AGDeviceInfo_SupportsPictureInPicture, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsPictureInPicture::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsPrinting
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsPrinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsPrinting) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsPrinting");
static_assert(sizeof(AGDeviceInfo_SupportsPrinting) == 0x000001, "Wrong size on AGDeviceInfo_SupportsPrinting");
static_assert(offsetof(AGDeviceInfo_SupportsPrinting, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsPrinting::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsScreenLandscape
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsScreenLandscape final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsScreenLandscape) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsScreenLandscape");
static_assert(sizeof(AGDeviceInfo_SupportsScreenLandscape) == 0x000001, "Wrong size on AGDeviceInfo_SupportsScreenLandscape");
static_assert(offsetof(AGDeviceInfo_SupportsScreenLandscape, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsScreenLandscape::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsScreenPortrtait
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsScreenPortrtait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsScreenPortrtait) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsScreenPortrtait");
static_assert(sizeof(AGDeviceInfo_SupportsScreenPortrtait) == 0x000001, "Wrong size on AGDeviceInfo_SupportsScreenPortrtait");
static_assert(offsetof(AGDeviceInfo_SupportsScreenPortrtait, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsScreenPortrtait::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsSecureUserRemoval
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsSecureUserRemoval final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsSecureUserRemoval) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsSecureUserRemoval");
static_assert(sizeof(AGDeviceInfo_SupportsSecureUserRemoval) == 0x000001, "Wrong size on AGDeviceInfo_SupportsSecureUserRemoval");
static_assert(offsetof(AGDeviceInfo_SupportsSecureUserRemoval, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsSecureUserRemoval::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsSipVoip
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsSipVoip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsSipVoip) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsSipVoip");
static_assert(sizeof(AGDeviceInfo_SupportsSipVoip) == 0x000001, "Wrong size on AGDeviceInfo_SupportsSipVoip");
static_assert(offsetof(AGDeviceInfo_SupportsSipVoip, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsSipVoip::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsTouchScreenMultiTouch
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsTouchScreenMultiTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsTouchScreenMultiTouch) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsTouchScreenMultiTouch");
static_assert(sizeof(AGDeviceInfo_SupportsTouchScreenMultiTouch) == 0x000001, "Wrong size on AGDeviceInfo_SupportsTouchScreenMultiTouch");
static_assert(offsetof(AGDeviceInfo_SupportsTouchScreenMultiTouch, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsTouchScreenMultiTouch::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsTouchScreenMultiTouchDistinct
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsTouchScreenMultiTouchDistinct final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsTouchScreenMultiTouchDistinct) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsTouchScreenMultiTouchDistinct");
static_assert(sizeof(AGDeviceInfo_SupportsTouchScreenMultiTouchDistinct) == 0x000001, "Wrong size on AGDeviceInfo_SupportsTouchScreenMultiTouchDistinct");
static_assert(offsetof(AGDeviceInfo_SupportsTouchScreenMultiTouchDistinct, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsTouchScreenMultiTouchDistinct::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsTouchScreenMultiTouchJazzHand
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsTouchScreenMultiTouchJazzHand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsTouchScreenMultiTouchJazzHand) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsTouchScreenMultiTouchJazzHand");
static_assert(sizeof(AGDeviceInfo_SupportsTouchScreenMultiTouchJazzHand) == 0x000001, "Wrong size on AGDeviceInfo_SupportsTouchScreenMultiTouchJazzHand");
static_assert(offsetof(AGDeviceInfo_SupportsTouchScreenMultiTouchJazzHand, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsTouchScreenMultiTouchJazzHand::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsUsbAccessory
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsUsbAccessory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsUsbAccessory) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsUsbAccessory");
static_assert(sizeof(AGDeviceInfo_SupportsUsbAccessory) == 0x000001, "Wrong size on AGDeviceInfo_SupportsUsbAccessory");
static_assert(offsetof(AGDeviceInfo_SupportsUsbAccessory, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsUsbAccessory::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsUsbHost
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsUsbHost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsUsbHost) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsUsbHost");
static_assert(sizeof(AGDeviceInfo_SupportsUsbHost) == 0x000001, "Wrong size on AGDeviceInfo_SupportsUsbHost");
static_assert(offsetof(AGDeviceInfo_SupportsUsbHost, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsUsbHost::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsVerifiedBoot
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsVerifiedBoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsVerifiedBoot) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsVerifiedBoot");
static_assert(sizeof(AGDeviceInfo_SupportsVerifiedBoot) == 0x000001, "Wrong size on AGDeviceInfo_SupportsVerifiedBoot");
static_assert(offsetof(AGDeviceInfo_SupportsVerifiedBoot, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsVerifiedBoot::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsVulkanHardwareCompute
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsVulkanHardwareCompute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsVulkanHardwareCompute) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsVulkanHardwareCompute");
static_assert(sizeof(AGDeviceInfo_SupportsVulkanHardwareCompute) == 0x000001, "Wrong size on AGDeviceInfo_SupportsVulkanHardwareCompute");
static_assert(offsetof(AGDeviceInfo_SupportsVulkanHardwareCompute, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsVulkanHardwareCompute::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsVulkanHardwareLevel
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsVulkanHardwareLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsVulkanHardwareLevel) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsVulkanHardwareLevel");
static_assert(sizeof(AGDeviceInfo_SupportsVulkanHardwareLevel) == 0x000001, "Wrong size on AGDeviceInfo_SupportsVulkanHardwareLevel");
static_assert(offsetof(AGDeviceInfo_SupportsVulkanHardwareLevel, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsVulkanHardwareLevel::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsVulkanHardwareVersion
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsVulkanHardwareVersion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsVulkanHardwareVersion) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsVulkanHardwareVersion");
static_assert(sizeof(AGDeviceInfo_SupportsVulkanHardwareVersion) == 0x000001, "Wrong size on AGDeviceInfo_SupportsVulkanHardwareVersion");
static_assert(offsetof(AGDeviceInfo_SupportsVulkanHardwareVersion, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsVulkanHardwareVersion::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsWebView
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsWebView final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsWebView) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsWebView");
static_assert(sizeof(AGDeviceInfo_SupportsWebView) == 0x000001, "Wrong size on AGDeviceInfo_SupportsWebView");
static_assert(offsetof(AGDeviceInfo_SupportsWebView, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsWebView::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsWifi
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsWifi final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsWifi) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsWifi");
static_assert(sizeof(AGDeviceInfo_SupportsWifi) == 0x000001, "Wrong size on AGDeviceInfo_SupportsWifi");
static_assert(offsetof(AGDeviceInfo_SupportsWifi, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsWifi::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsWifiAware
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsWifiAware final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsWifiAware) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsWifiAware");
static_assert(sizeof(AGDeviceInfo_SupportsWifiAware) == 0x000001, "Wrong size on AGDeviceInfo_SupportsWifiAware");
static_assert(offsetof(AGDeviceInfo_SupportsWifiAware, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsWifiAware::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsWifiDirect
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsWifiDirect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsWifiDirect) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsWifiDirect");
static_assert(sizeof(AGDeviceInfo_SupportsWifiDirect) == 0x000001, "Wrong size on AGDeviceInfo_SupportsWifiDirect");
static_assert(offsetof(AGDeviceInfo_SupportsWifiDirect, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsWifiDirect::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsWifiPassPoint
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsWifiPassPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsWifiPassPoint) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsWifiPassPoint");
static_assert(sizeof(AGDeviceInfo_SupportsWifiPassPoint) == 0x000001, "Wrong size on AGDeviceInfo_SupportsWifiPassPoint");
static_assert(offsetof(AGDeviceInfo_SupportsWifiPassPoint, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsWifiPassPoint::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDeviceInfo.SupportsWifiRtt
// 0x0001 (0x0001 - 0x0000)
struct AGDeviceInfo_SupportsWifiRtt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGDeviceInfo_SupportsWifiRtt) == 0x000001, "Wrong alignment on AGDeviceInfo_SupportsWifiRtt");
static_assert(sizeof(AGDeviceInfo_SupportsWifiRtt) == 0x000001, "Wrong size on AGDeviceInfo_SupportsWifiRtt");
static_assert(offsetof(AGDeviceInfo_SupportsWifiRtt, ReturnValue) == 0x000000, "Member 'AGDeviceInfo_SupportsWifiRtt::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGDialogBPL.ShowChooserDialog
// 0x0048 (0x0048 - 0x0000)
struct AGDialogBPL_ShowChooserDialog final
{
public:
	class FString                                 ListTitle;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ListItems;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Index)>                  OnItemChoosedCallback;                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnDialogCancelledCallback;                         // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDialogBPL_ShowChooserDialog) == 0x000008, "Wrong alignment on AGDialogBPL_ShowChooserDialog");
static_assert(sizeof(AGDialogBPL_ShowChooserDialog) == 0x000048, "Wrong size on AGDialogBPL_ShowChooserDialog");
static_assert(offsetof(AGDialogBPL_ShowChooserDialog, ListTitle) == 0x000000, "Member 'AGDialogBPL_ShowChooserDialog::ListTitle' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowChooserDialog, ListItems) == 0x000010, "Member 'AGDialogBPL_ShowChooserDialog::ListItems' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowChooserDialog, OnItemChoosedCallback) == 0x000020, "Member 'AGDialogBPL_ShowChooserDialog::OnItemChoosedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowChooserDialog, OnDialogCancelledCallback) == 0x000030, "Member 'AGDialogBPL_ShowChooserDialog::OnDialogCancelledCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowChooserDialog, Theme) == 0x000040, "Member 'AGDialogBPL_ShowChooserDialog::Theme' has a wrong offset!");

// Function AndroidGoodies.AGDialogBPL.ShowMultipleItemChoiceDialog
// 0x0078 (0x0078 - 0x0000)
struct AGDialogBPL_ShowMultipleItemChoiceDialog final
{
public:
	class FString                                 ListTitle;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ListItems;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PositiveButtonText;                                // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  CheckedListItems;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Index, bool IsChosen)>   OnMultipleChoiceItemClickedCallback;               // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnPositiveButtonClickedCallback;                   // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnDialogCancelledCallback;                         // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDialogBPL_ShowMultipleItemChoiceDialog) == 0x000008, "Wrong alignment on AGDialogBPL_ShowMultipleItemChoiceDialog");
static_assert(sizeof(AGDialogBPL_ShowMultipleItemChoiceDialog) == 0x000078, "Wrong size on AGDialogBPL_ShowMultipleItemChoiceDialog");
static_assert(offsetof(AGDialogBPL_ShowMultipleItemChoiceDialog, ListTitle) == 0x000000, "Member 'AGDialogBPL_ShowMultipleItemChoiceDialog::ListTitle' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowMultipleItemChoiceDialog, ListItems) == 0x000010, "Member 'AGDialogBPL_ShowMultipleItemChoiceDialog::ListItems' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowMultipleItemChoiceDialog, PositiveButtonText) == 0x000020, "Member 'AGDialogBPL_ShowMultipleItemChoiceDialog::PositiveButtonText' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowMultipleItemChoiceDialog, CheckedListItems) == 0x000030, "Member 'AGDialogBPL_ShowMultipleItemChoiceDialog::CheckedListItems' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowMultipleItemChoiceDialog, OnMultipleChoiceItemClickedCallback) == 0x000040, "Member 'AGDialogBPL_ShowMultipleItemChoiceDialog::OnMultipleChoiceItemClickedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowMultipleItemChoiceDialog, OnPositiveButtonClickedCallback) == 0x000050, "Member 'AGDialogBPL_ShowMultipleItemChoiceDialog::OnPositiveButtonClickedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowMultipleItemChoiceDialog, OnDialogCancelledCallback) == 0x000060, "Member 'AGDialogBPL_ShowMultipleItemChoiceDialog::OnDialogCancelledCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowMultipleItemChoiceDialog, Theme) == 0x000070, "Member 'AGDialogBPL_ShowMultipleItemChoiceDialog::Theme' has a wrong offset!");

// Function AndroidGoodies.AGDialogBPL.ShowSingleButtonDialog
// 0x0058 (0x0058 - 0x0000)
struct AGDialogBPL_ShowSingleButtonDialog final
{
public:
	class FString                                 MessageTitle;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PositiveButtonText;                                // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnPositiveButtonClickedCallback;                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnDialogCancelledCallback;                         // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDialogBPL_ShowSingleButtonDialog) == 0x000008, "Wrong alignment on AGDialogBPL_ShowSingleButtonDialog");
static_assert(sizeof(AGDialogBPL_ShowSingleButtonDialog) == 0x000058, "Wrong size on AGDialogBPL_ShowSingleButtonDialog");
static_assert(offsetof(AGDialogBPL_ShowSingleButtonDialog, MessageTitle) == 0x000000, "Member 'AGDialogBPL_ShowSingleButtonDialog::MessageTitle' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleButtonDialog, Message) == 0x000010, "Member 'AGDialogBPL_ShowSingleButtonDialog::Message' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleButtonDialog, PositiveButtonText) == 0x000020, "Member 'AGDialogBPL_ShowSingleButtonDialog::PositiveButtonText' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleButtonDialog, OnPositiveButtonClickedCallback) == 0x000030, "Member 'AGDialogBPL_ShowSingleButtonDialog::OnPositiveButtonClickedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleButtonDialog, OnDialogCancelledCallback) == 0x000040, "Member 'AGDialogBPL_ShowSingleButtonDialog::OnDialogCancelledCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleButtonDialog, Theme) == 0x000050, "Member 'AGDialogBPL_ShowSingleButtonDialog::Theme' has a wrong offset!");

// Function AndroidGoodies.AGDialogBPL.ShowSingleItemChoiceDialog
// 0x0068 (0x0068 - 0x0000)
struct AGDialogBPL_ShowSingleItemChoiceDialog final
{
public:
	class FString                                 ListTitle;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ListItems;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PositiveButtonText;                                // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedItemIndex;                                 // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Index)>                  OnSingleChoiceItemClickedCallback;                 // 0x0034(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnPositiveButtonClickedCallback;                   // 0x0044(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnDialogCancelledCallback;                         // 0x0054(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDialogBPL_ShowSingleItemChoiceDialog) == 0x000008, "Wrong alignment on AGDialogBPL_ShowSingleItemChoiceDialog");
static_assert(sizeof(AGDialogBPL_ShowSingleItemChoiceDialog) == 0x000068, "Wrong size on AGDialogBPL_ShowSingleItemChoiceDialog");
static_assert(offsetof(AGDialogBPL_ShowSingleItemChoiceDialog, ListTitle) == 0x000000, "Member 'AGDialogBPL_ShowSingleItemChoiceDialog::ListTitle' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleItemChoiceDialog, ListItems) == 0x000010, "Member 'AGDialogBPL_ShowSingleItemChoiceDialog::ListItems' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleItemChoiceDialog, PositiveButtonText) == 0x000020, "Member 'AGDialogBPL_ShowSingleItemChoiceDialog::PositiveButtonText' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleItemChoiceDialog, SelectedItemIndex) == 0x000030, "Member 'AGDialogBPL_ShowSingleItemChoiceDialog::SelectedItemIndex' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleItemChoiceDialog, OnSingleChoiceItemClickedCallback) == 0x000034, "Member 'AGDialogBPL_ShowSingleItemChoiceDialog::OnSingleChoiceItemClickedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleItemChoiceDialog, OnPositiveButtonClickedCallback) == 0x000044, "Member 'AGDialogBPL_ShowSingleItemChoiceDialog::OnPositiveButtonClickedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleItemChoiceDialog, OnDialogCancelledCallback) == 0x000054, "Member 'AGDialogBPL_ShowSingleItemChoiceDialog::OnDialogCancelledCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowSingleItemChoiceDialog, Theme) == 0x000064, "Member 'AGDialogBPL_ShowSingleItemChoiceDialog::Theme' has a wrong offset!");

// Function AndroidGoodies.AGDialogBPL.ShowThreeButtonsDialog
// 0x0098 (0x0098 - 0x0000)
struct AGDialogBPL_ShowThreeButtonsDialog final
{
public:
	class FString                                 MessageTitle;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PositiveButtonText;                                // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NegativeButtonText;                                // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeutralButtonText;                                 // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnPositiveButtonClickedCallback;                   // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnNegativeButtonClickedCallback;                   // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnNeutralButtonClickedCallback;                    // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnDialogCancelledCallback;                         // 0x0080(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDialogBPL_ShowThreeButtonsDialog) == 0x000008, "Wrong alignment on AGDialogBPL_ShowThreeButtonsDialog");
static_assert(sizeof(AGDialogBPL_ShowThreeButtonsDialog) == 0x000098, "Wrong size on AGDialogBPL_ShowThreeButtonsDialog");
static_assert(offsetof(AGDialogBPL_ShowThreeButtonsDialog, MessageTitle) == 0x000000, "Member 'AGDialogBPL_ShowThreeButtonsDialog::MessageTitle' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowThreeButtonsDialog, Message) == 0x000010, "Member 'AGDialogBPL_ShowThreeButtonsDialog::Message' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowThreeButtonsDialog, PositiveButtonText) == 0x000020, "Member 'AGDialogBPL_ShowThreeButtonsDialog::PositiveButtonText' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowThreeButtonsDialog, NegativeButtonText) == 0x000030, "Member 'AGDialogBPL_ShowThreeButtonsDialog::NegativeButtonText' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowThreeButtonsDialog, NeutralButtonText) == 0x000040, "Member 'AGDialogBPL_ShowThreeButtonsDialog::NeutralButtonText' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowThreeButtonsDialog, OnPositiveButtonClickedCallback) == 0x000050, "Member 'AGDialogBPL_ShowThreeButtonsDialog::OnPositiveButtonClickedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowThreeButtonsDialog, OnNegativeButtonClickedCallback) == 0x000060, "Member 'AGDialogBPL_ShowThreeButtonsDialog::OnNegativeButtonClickedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowThreeButtonsDialog, OnNeutralButtonClickedCallback) == 0x000070, "Member 'AGDialogBPL_ShowThreeButtonsDialog::OnNeutralButtonClickedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowThreeButtonsDialog, OnDialogCancelledCallback) == 0x000080, "Member 'AGDialogBPL_ShowThreeButtonsDialog::OnDialogCancelledCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowThreeButtonsDialog, Theme) == 0x000090, "Member 'AGDialogBPL_ShowThreeButtonsDialog::Theme' has a wrong offset!");

// Function AndroidGoodies.AGDialogBPL.ShowTwoButtonsDialog
// 0x0078 (0x0078 - 0x0000)
struct AGDialogBPL_ShowTwoButtonsDialog final
{
public:
	class FString                                 MessageTitle;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PositiveButtonText;                                // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NegativeButtonText;                                // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnPositiveButtonClickedCallback;                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnNegativeButtonClickedCallback;                   // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnDialogCancelledCallback;                         // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGDialogBPL_ShowTwoButtonsDialog) == 0x000008, "Wrong alignment on AGDialogBPL_ShowTwoButtonsDialog");
static_assert(sizeof(AGDialogBPL_ShowTwoButtonsDialog) == 0x000078, "Wrong size on AGDialogBPL_ShowTwoButtonsDialog");
static_assert(offsetof(AGDialogBPL_ShowTwoButtonsDialog, MessageTitle) == 0x000000, "Member 'AGDialogBPL_ShowTwoButtonsDialog::MessageTitle' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowTwoButtonsDialog, Message) == 0x000010, "Member 'AGDialogBPL_ShowTwoButtonsDialog::Message' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowTwoButtonsDialog, PositiveButtonText) == 0x000020, "Member 'AGDialogBPL_ShowTwoButtonsDialog::PositiveButtonText' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowTwoButtonsDialog, NegativeButtonText) == 0x000030, "Member 'AGDialogBPL_ShowTwoButtonsDialog::NegativeButtonText' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowTwoButtonsDialog, OnPositiveButtonClickedCallback) == 0x000040, "Member 'AGDialogBPL_ShowTwoButtonsDialog::OnPositiveButtonClickedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowTwoButtonsDialog, OnNegativeButtonClickedCallback) == 0x000050, "Member 'AGDialogBPL_ShowTwoButtonsDialog::OnNegativeButtonClickedCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowTwoButtonsDialog, OnDialogCancelledCallback) == 0x000060, "Member 'AGDialogBPL_ShowTwoButtonsDialog::OnDialogCancelledCallback' has a wrong offset!");
static_assert(offsetof(AGDialogBPL_ShowTwoButtonsDialog, Theme) == 0x000070, "Member 'AGDialogBPL_ShowTwoButtonsDialog::Theme' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.AreVibrationEffectsSupported
// 0x0001 (0x0001 - 0x0000)
struct AGHardwareBPL_AreVibrationEffectsSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_AreVibrationEffectsSupported) == 0x000001, "Wrong alignment on AGHardwareBPL_AreVibrationEffectsSupported");
static_assert(sizeof(AGHardwareBPL_AreVibrationEffectsSupported) == 0x000001, "Wrong size on AGHardwareBPL_AreVibrationEffectsSupported");
static_assert(offsetof(AGHardwareBPL_AreVibrationEffectsSupported, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_AreVibrationEffectsSupported::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.ComputeRemainingChargeTime
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_ComputeRemainingChargeTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_ComputeRemainingChargeTime) == 0x000004, "Wrong alignment on AGHardwareBPL_ComputeRemainingChargeTime");
static_assert(sizeof(AGHardwareBPL_ComputeRemainingChargeTime) == 0x000004, "Wrong size on AGHardwareBPL_ComputeRemainingChargeTime");
static_assert(offsetof(AGHardwareBPL_ComputeRemainingChargeTime, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_ComputeRemainingChargeTime::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.EnableFlashlight
// 0x0001 (0x0001 - 0x0000)
struct AGHardwareBPL_EnableFlashlight final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_EnableFlashlight) == 0x000001, "Wrong alignment on AGHardwareBPL_EnableFlashlight");
static_assert(sizeof(AGHardwareBPL_EnableFlashlight) == 0x000001, "Wrong size on AGHardwareBPL_EnableFlashlight");
static_assert(offsetof(AGHardwareBPL_EnableFlashlight, Enable) == 0x000000, "Member 'AGHardwareBPL_EnableFlashlight::Enable' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetAverageBatteryCurrent
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_GetAverageBatteryCurrent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetAverageBatteryCurrent) == 0x000004, "Wrong alignment on AGHardwareBPL_GetAverageBatteryCurrent");
static_assert(sizeof(AGHardwareBPL_GetAverageBatteryCurrent) == 0x000004, "Wrong size on AGHardwareBPL_GetAverageBatteryCurrent");
static_assert(offsetof(AGHardwareBPL_GetAverageBatteryCurrent, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetAverageBatteryCurrent::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryCapacity
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_GetBatteryCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryCapacity) == 0x000004, "Wrong alignment on AGHardwareBPL_GetBatteryCapacity");
static_assert(sizeof(AGHardwareBPL_GetBatteryCapacity) == 0x000004, "Wrong size on AGHardwareBPL_GetBatteryCapacity");
static_assert(offsetof(AGHardwareBPL_GetBatteryCapacity, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryCapacity::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryChargeCounter
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_GetBatteryChargeCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryChargeCounter) == 0x000004, "Wrong alignment on AGHardwareBPL_GetBatteryChargeCounter");
static_assert(sizeof(AGHardwareBPL_GetBatteryChargeCounter) == 0x000004, "Wrong size on AGHardwareBPL_GetBatteryChargeCounter");
static_assert(offsetof(AGHardwareBPL_GetBatteryChargeCounter, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryChargeCounter::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryEnergyCounter
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_GetBatteryEnergyCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryEnergyCounter) == 0x000004, "Wrong alignment on AGHardwareBPL_GetBatteryEnergyCounter");
static_assert(sizeof(AGHardwareBPL_GetBatteryEnergyCounter) == 0x000004, "Wrong size on AGHardwareBPL_GetBatteryEnergyCounter");
static_assert(offsetof(AGHardwareBPL_GetBatteryEnergyCounter, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryEnergyCounter::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryHealth
// 0x0001 (0x0001 - 0x0000)
struct AGHardwareBPL_GetBatteryHealth final
{
public:
	EBatteryHealth                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryHealth) == 0x000001, "Wrong alignment on AGHardwareBPL_GetBatteryHealth");
static_assert(sizeof(AGHardwareBPL_GetBatteryHealth) == 0x000001, "Wrong size on AGHardwareBPL_GetBatteryHealth");
static_assert(offsetof(AGHardwareBPL_GetBatteryHealth, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryHealth::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryLevel
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_GetBatteryLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryLevel) == 0x000004, "Wrong alignment on AGHardwareBPL_GetBatteryLevel");
static_assert(sizeof(AGHardwareBPL_GetBatteryLevel) == 0x000004, "Wrong size on AGHardwareBPL_GetBatteryLevel");
static_assert(offsetof(AGHardwareBPL_GetBatteryLevel, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryLevel::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryPluggedState
// 0x0001 (0x0001 - 0x0000)
struct AGHardwareBPL_GetBatteryPluggedState final
{
public:
	EBatteryPluggedState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryPluggedState) == 0x000001, "Wrong alignment on AGHardwareBPL_GetBatteryPluggedState");
static_assert(sizeof(AGHardwareBPL_GetBatteryPluggedState) == 0x000001, "Wrong size on AGHardwareBPL_GetBatteryPluggedState");
static_assert(offsetof(AGHardwareBPL_GetBatteryPluggedState, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryPluggedState::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryScale
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_GetBatteryScale final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryScale) == 0x000004, "Wrong alignment on AGHardwareBPL_GetBatteryScale");
static_assert(sizeof(AGHardwareBPL_GetBatteryScale) == 0x000004, "Wrong size on AGHardwareBPL_GetBatteryScale");
static_assert(offsetof(AGHardwareBPL_GetBatteryScale, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryScale::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryStatus
// 0x0001 (0x0001 - 0x0000)
struct AGHardwareBPL_GetBatteryStatus final
{
public:
	EBatteryStatus                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryStatus) == 0x000001, "Wrong alignment on AGHardwareBPL_GetBatteryStatus");
static_assert(sizeof(AGHardwareBPL_GetBatteryStatus) == 0x000001, "Wrong size on AGHardwareBPL_GetBatteryStatus");
static_assert(offsetof(AGHardwareBPL_GetBatteryStatus, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryStatus::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryTechnology
// 0x0010 (0x0010 - 0x0000)
struct AGHardwareBPL_GetBatteryTechnology final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryTechnology) == 0x000008, "Wrong alignment on AGHardwareBPL_GetBatteryTechnology");
static_assert(sizeof(AGHardwareBPL_GetBatteryTechnology) == 0x000010, "Wrong size on AGHardwareBPL_GetBatteryTechnology");
static_assert(offsetof(AGHardwareBPL_GetBatteryTechnology, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryTechnology::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryTemperature
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_GetBatteryTemperature final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryTemperature) == 0x000004, "Wrong alignment on AGHardwareBPL_GetBatteryTemperature");
static_assert(sizeof(AGHardwareBPL_GetBatteryTemperature) == 0x000004, "Wrong size on AGHardwareBPL_GetBatteryTemperature");
static_assert(offsetof(AGHardwareBPL_GetBatteryTemperature, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryTemperature::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetBatteryVoltage
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_GetBatteryVoltage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetBatteryVoltage) == 0x000004, "Wrong alignment on AGHardwareBPL_GetBatteryVoltage");
static_assert(sizeof(AGHardwareBPL_GetBatteryVoltage) == 0x000004, "Wrong size on AGHardwareBPL_GetBatteryVoltage");
static_assert(offsetof(AGHardwareBPL_GetBatteryVoltage, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetBatteryVoltage::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.GetImmediateBatteryCurrent
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_GetImmediateBatteryCurrent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_GetImmediateBatteryCurrent) == 0x000004, "Wrong alignment on AGHardwareBPL_GetImmediateBatteryCurrent");
static_assert(sizeof(AGHardwareBPL_GetImmediateBatteryCurrent) == 0x000004, "Wrong size on AGHardwareBPL_GetImmediateBatteryCurrent");
static_assert(offsetof(AGHardwareBPL_GetImmediateBatteryCurrent, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_GetImmediateBatteryCurrent::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.HasAmplitudeControl
// 0x0001 (0x0001 - 0x0000)
struct AGHardwareBPL_HasAmplitudeControl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_HasAmplitudeControl) == 0x000001, "Wrong alignment on AGHardwareBPL_HasAmplitudeControl");
static_assert(sizeof(AGHardwareBPL_HasAmplitudeControl) == 0x000001, "Wrong size on AGHardwareBPL_HasAmplitudeControl");
static_assert(offsetof(AGHardwareBPL_HasAmplitudeControl, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_HasAmplitudeControl::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.HasVibrator
// 0x0001 (0x0001 - 0x0000)
struct AGHardwareBPL_HasVibrator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_HasVibrator) == 0x000001, "Wrong alignment on AGHardwareBPL_HasVibrator");
static_assert(sizeof(AGHardwareBPL_HasVibrator) == 0x000001, "Wrong size on AGHardwareBPL_HasVibrator");
static_assert(offsetof(AGHardwareBPL_HasVibrator, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_HasVibrator::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.IsBatteryLow
// 0x0001 (0x0001 - 0x0000)
struct AGHardwareBPL_IsBatteryLow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_IsBatteryLow) == 0x000001, "Wrong alignment on AGHardwareBPL_IsBatteryLow");
static_assert(sizeof(AGHardwareBPL_IsBatteryLow) == 0x000001, "Wrong size on AGHardwareBPL_IsBatteryLow");
static_assert(offsetof(AGHardwareBPL_IsBatteryLow, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_IsBatteryLow::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.IsBatteryPresent
// 0x0001 (0x0001 - 0x0000)
struct AGHardwareBPL_IsBatteryPresent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_IsBatteryPresent) == 0x000001, "Wrong alignment on AGHardwareBPL_IsBatteryPresent");
static_assert(sizeof(AGHardwareBPL_IsBatteryPresent) == 0x000001, "Wrong size on AGHardwareBPL_IsBatteryPresent");
static_assert(offsetof(AGHardwareBPL_IsBatteryPresent, ReturnValue) == 0x000000, "Member 'AGHardwareBPL_IsBatteryPresent::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.Vibrate
// 0x0004 (0x0004 - 0x0000)
struct AGHardwareBPL_Vibrate final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_Vibrate) == 0x000004, "Wrong alignment on AGHardwareBPL_Vibrate");
static_assert(sizeof(AGHardwareBPL_Vibrate) == 0x000004, "Wrong size on AGHardwareBPL_Vibrate");
static_assert(offsetof(AGHardwareBPL_Vibrate, Duration) == 0x000000, "Member 'AGHardwareBPL_Vibrate::Duration' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.VibrateWithEffect
// 0x0008 (0x0008 - 0x0000)
struct AGHardwareBPL_VibrateWithEffect final
{
public:
	class UAGVibrationEffect*                     VibrationEffect;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGHardwareBPL_VibrateWithEffect) == 0x000008, "Wrong alignment on AGHardwareBPL_VibrateWithEffect");
static_assert(sizeof(AGHardwareBPL_VibrateWithEffect) == 0x000008, "Wrong size on AGHardwareBPL_VibrateWithEffect");
static_assert(offsetof(AGHardwareBPL_VibrateWithEffect, VibrationEffect) == 0x000000, "Member 'AGHardwareBPL_VibrateWithEffect::VibrationEffect' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.VibrateWithEffectAndAttributes
// 0x0010 (0x0010 - 0x0000)
struct AGHardwareBPL_VibrateWithEffectAndAttributes final
{
public:
	class UAGVibrationEffect*                     VibrationEffect;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAGAudioAttributes                     AudioAttributes;                                   // 0x0008(0x0005)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGHardwareBPL_VibrateWithEffectAndAttributes) == 0x000008, "Wrong alignment on AGHardwareBPL_VibrateWithEffectAndAttributes");
static_assert(sizeof(AGHardwareBPL_VibrateWithEffectAndAttributes) == 0x000010, "Wrong size on AGHardwareBPL_VibrateWithEffectAndAttributes");
static_assert(offsetof(AGHardwareBPL_VibrateWithEffectAndAttributes, VibrationEffect) == 0x000000, "Member 'AGHardwareBPL_VibrateWithEffectAndAttributes::VibrationEffect' has a wrong offset!");
static_assert(offsetof(AGHardwareBPL_VibrateWithEffectAndAttributes, AudioAttributes) == 0x000008, "Member 'AGHardwareBPL_VibrateWithEffectAndAttributes::AudioAttributes' has a wrong offset!");

// Function AndroidGoodies.AGHardwareBPL.VibrateWithPattern
// 0x0018 (0x0018 - 0x0000)
struct AGHardwareBPL_VibrateWithPattern final
{
public:
	TArray<float>                                 Pattern;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RepeatFrom;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGHardwareBPL_VibrateWithPattern) == 0x000008, "Wrong alignment on AGHardwareBPL_VibrateWithPattern");
static_assert(sizeof(AGHardwareBPL_VibrateWithPattern) == 0x000018, "Wrong size on AGHardwareBPL_VibrateWithPattern");
static_assert(offsetof(AGHardwareBPL_VibrateWithPattern, Pattern) == 0x000000, "Member 'AGHardwareBPL_VibrateWithPattern::Pattern' has a wrong offset!");
static_assert(offsetof(AGHardwareBPL_VibrateWithPattern, RepeatFrom) == 0x000010, "Member 'AGHardwareBPL_VibrateWithPattern::RepeatFrom' has a wrong offset!");

// Function AndroidGoodies.AGMaps.OpenMapLocation
// 0x000C (0x000C - 0x0000)
struct AGMaps_OpenMapLocation final
{
public:
	float                                         Latitude;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zoom;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGMaps_OpenMapLocation) == 0x000004, "Wrong alignment on AGMaps_OpenMapLocation");
static_assert(sizeof(AGMaps_OpenMapLocation) == 0x00000C, "Wrong size on AGMaps_OpenMapLocation");
static_assert(offsetof(AGMaps_OpenMapLocation, Latitude) == 0x000000, "Member 'AGMaps_OpenMapLocation::Latitude' has a wrong offset!");
static_assert(offsetof(AGMaps_OpenMapLocation, Longitude) == 0x000004, "Member 'AGMaps_OpenMapLocation::Longitude' has a wrong offset!");
static_assert(offsetof(AGMaps_OpenMapLocation, Zoom) == 0x000008, "Member 'AGMaps_OpenMapLocation::Zoom' has a wrong offset!");

// Function AndroidGoodies.AGMaps.OpenMapLocationWithAddress
// 0x0010 (0x0010 - 0x0000)
struct AGMaps_OpenMapLocationWithAddress final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGMaps_OpenMapLocationWithAddress) == 0x000008, "Wrong alignment on AGMaps_OpenMapLocationWithAddress");
static_assert(sizeof(AGMaps_OpenMapLocationWithAddress) == 0x000010, "Wrong size on AGMaps_OpenMapLocationWithAddress");
static_assert(offsetof(AGMaps_OpenMapLocationWithAddress, Address) == 0x000000, "Member 'AGMaps_OpenMapLocationWithAddress::Address' has a wrong offset!");

// Function AndroidGoodies.AGMaps.OpenMapLocationWithLabel
// 0x0018 (0x0018 - 0x0000)
struct AGMaps_OpenMapLocationWithLabel final
{
public:
	float                                         Latitude;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGMaps_OpenMapLocationWithLabel) == 0x000008, "Wrong alignment on AGMaps_OpenMapLocationWithLabel");
static_assert(sizeof(AGMaps_OpenMapLocationWithLabel) == 0x000018, "Wrong size on AGMaps_OpenMapLocationWithLabel");
static_assert(offsetof(AGMaps_OpenMapLocationWithLabel, Latitude) == 0x000000, "Member 'AGMaps_OpenMapLocationWithLabel::Latitude' has a wrong offset!");
static_assert(offsetof(AGMaps_OpenMapLocationWithLabel, Longitude) == 0x000004, "Member 'AGMaps_OpenMapLocationWithLabel::Longitude' has a wrong offset!");
static_assert(offsetof(AGMaps_OpenMapLocationWithLabel, Label) == 0x000008, "Member 'AGMaps_OpenMapLocationWithLabel::Label' has a wrong offset!");

// Function AndroidGoodies.AGMaps.UserHasMapsApp
// 0x0001 (0x0001 - 0x0000)
struct AGMaps_UserHasMapsApp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGMaps_UserHasMapsApp) == 0x000001, "Wrong alignment on AGMaps_UserHasMapsApp");
static_assert(sizeof(AGMaps_UserHasMapsApp) == 0x000001, "Wrong size on AGMaps_UserHasMapsApp");
static_assert(offsetof(AGMaps_UserHasMapsApp, ReturnValue) == 0x000000, "Member 'AGMaps_UserHasMapsApp::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBigPictureStyle.CreateBigPictureStyle
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBigPictureStyle_CreateBigPictureStyle final
{
public:
	class UTexture2D*                             bigPicture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBigPictureStyle*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBigPictureStyle_CreateBigPictureStyle) == 0x000008, "Wrong alignment on AGNotificationBigPictureStyle_CreateBigPictureStyle");
static_assert(sizeof(AGNotificationBigPictureStyle_CreateBigPictureStyle) == 0x000010, "Wrong size on AGNotificationBigPictureStyle_CreateBigPictureStyle");
static_assert(offsetof(AGNotificationBigPictureStyle_CreateBigPictureStyle, bigPicture) == 0x000000, "Member 'AGNotificationBigPictureStyle_CreateBigPictureStyle::bigPicture' has a wrong offset!");
static_assert(offsetof(AGNotificationBigPictureStyle_CreateBigPictureStyle, ReturnValue) == 0x000008, "Member 'AGNotificationBigPictureStyle_CreateBigPictureStyle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBigPictureStyle.SetBigContentTitle
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBigPictureStyle_SetBigContentTitle final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBigPictureStyle*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBigPictureStyle_SetBigContentTitle) == 0x000008, "Wrong alignment on AGNotificationBigPictureStyle_SetBigContentTitle");
static_assert(sizeof(AGNotificationBigPictureStyle_SetBigContentTitle) == 0x000018, "Wrong size on AGNotificationBigPictureStyle_SetBigContentTitle");
static_assert(offsetof(AGNotificationBigPictureStyle_SetBigContentTitle, Title) == 0x000000, "Member 'AGNotificationBigPictureStyle_SetBigContentTitle::Title' has a wrong offset!");
static_assert(offsetof(AGNotificationBigPictureStyle_SetBigContentTitle, ReturnValue) == 0x000010, "Member 'AGNotificationBigPictureStyle_SetBigContentTitle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBigPictureStyle.SetBigLargeIcon
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBigPictureStyle_SetBigLargeIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBigPictureStyle*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBigPictureStyle_SetBigLargeIcon) == 0x000008, "Wrong alignment on AGNotificationBigPictureStyle_SetBigLargeIcon");
static_assert(sizeof(AGNotificationBigPictureStyle_SetBigLargeIcon) == 0x000010, "Wrong size on AGNotificationBigPictureStyle_SetBigLargeIcon");
static_assert(offsetof(AGNotificationBigPictureStyle_SetBigLargeIcon, Icon) == 0x000000, "Member 'AGNotificationBigPictureStyle_SetBigLargeIcon::Icon' has a wrong offset!");
static_assert(offsetof(AGNotificationBigPictureStyle_SetBigLargeIcon, ReturnValue) == 0x000008, "Member 'AGNotificationBigPictureStyle_SetBigLargeIcon::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBigPictureStyle.SetSummaryText
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBigPictureStyle_SetSummaryText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBigPictureStyle*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBigPictureStyle_SetSummaryText) == 0x000008, "Wrong alignment on AGNotificationBigPictureStyle_SetSummaryText");
static_assert(sizeof(AGNotificationBigPictureStyle_SetSummaryText) == 0x000018, "Wrong size on AGNotificationBigPictureStyle_SetSummaryText");
static_assert(offsetof(AGNotificationBigPictureStyle_SetSummaryText, Text) == 0x000000, "Member 'AGNotificationBigPictureStyle_SetSummaryText::Text' has a wrong offset!");
static_assert(offsetof(AGNotificationBigPictureStyle_SetSummaryText, ReturnValue) == 0x000010, "Member 'AGNotificationBigPictureStyle_SetSummaryText::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBigTextStyle.CreateBigTextStyle
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBigTextStyle_CreateBigTextStyle final
{
public:
	class FString                                 bigText;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBigTextStyle*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBigTextStyle_CreateBigTextStyle) == 0x000008, "Wrong alignment on AGNotificationBigTextStyle_CreateBigTextStyle");
static_assert(sizeof(AGNotificationBigTextStyle_CreateBigTextStyle) == 0x000018, "Wrong size on AGNotificationBigTextStyle_CreateBigTextStyle");
static_assert(offsetof(AGNotificationBigTextStyle_CreateBigTextStyle, bigText) == 0x000000, "Member 'AGNotificationBigTextStyle_CreateBigTextStyle::bigText' has a wrong offset!");
static_assert(offsetof(AGNotificationBigTextStyle_CreateBigTextStyle, ReturnValue) == 0x000010, "Member 'AGNotificationBigTextStyle_CreateBigTextStyle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBigTextStyle.SetBigContentTitle
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBigTextStyle_SetBigContentTitle final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBigTextStyle*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBigTextStyle_SetBigContentTitle) == 0x000008, "Wrong alignment on AGNotificationBigTextStyle_SetBigContentTitle");
static_assert(sizeof(AGNotificationBigTextStyle_SetBigContentTitle) == 0x000018, "Wrong size on AGNotificationBigTextStyle_SetBigContentTitle");
static_assert(offsetof(AGNotificationBigTextStyle_SetBigContentTitle, Title) == 0x000000, "Member 'AGNotificationBigTextStyle_SetBigContentTitle::Title' has a wrong offset!");
static_assert(offsetof(AGNotificationBigTextStyle_SetBigContentTitle, ReturnValue) == 0x000010, "Member 'AGNotificationBigTextStyle_SetBigContentTitle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBigTextStyle.SetSummaryText
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBigTextStyle_SetSummaryText final
{
public:
	class FString                                 Summary;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBigTextStyle*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBigTextStyle_SetSummaryText) == 0x000008, "Wrong alignment on AGNotificationBigTextStyle_SetSummaryText");
static_assert(sizeof(AGNotificationBigTextStyle_SetSummaryText) == 0x000018, "Wrong size on AGNotificationBigTextStyle_SetSummaryText");
static_assert(offsetof(AGNotificationBigTextStyle_SetSummaryText, Summary) == 0x000000, "Member 'AGNotificationBigTextStyle_SetSummaryText::Summary' has a wrong offset!");
static_assert(offsetof(AGNotificationBigTextStyle_SetSummaryText, ReturnValue) == 0x000010, "Member 'AGNotificationBigTextStyle_SetSummaryText::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.NewNotificationBuilder
// 0x0068 (0x0068 - 0x0000)
struct AGNotificationBuilder_NewNotificationBuilder final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            AdditionalData;                                    // 0x0010(0x0050)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_NewNotificationBuilder) == 0x000008, "Wrong alignment on AGNotificationBuilder_NewNotificationBuilder");
static_assert(sizeof(AGNotificationBuilder_NewNotificationBuilder) == 0x000068, "Wrong size on AGNotificationBuilder_NewNotificationBuilder");
static_assert(offsetof(AGNotificationBuilder_NewNotificationBuilder, ChannelId) == 0x000000, "Member 'AGNotificationBuilder_NewNotificationBuilder::ChannelId' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_NewNotificationBuilder, AdditionalData) == 0x000010, "Member 'AGNotificationBuilder_NewNotificationBuilder::AdditionalData' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_NewNotificationBuilder, ReturnValue) == 0x000060, "Member 'AGNotificationBuilder_NewNotificationBuilder::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.AddOpenUrlAction
// 0x0038 (0x0038 - 0x0000)
struct AGNotificationBuilder_AddOpenUrlAction final
{
public:
	class FString                                 IconName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_AddOpenUrlAction) == 0x000008, "Wrong alignment on AGNotificationBuilder_AddOpenUrlAction");
static_assert(sizeof(AGNotificationBuilder_AddOpenUrlAction) == 0x000038, "Wrong size on AGNotificationBuilder_AddOpenUrlAction");
static_assert(offsetof(AGNotificationBuilder_AddOpenUrlAction, IconName) == 0x000000, "Member 'AGNotificationBuilder_AddOpenUrlAction::IconName' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_AddOpenUrlAction, Title) == 0x000010, "Member 'AGNotificationBuilder_AddOpenUrlAction::Title' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_AddOpenUrlAction, URL) == 0x000020, "Member 'AGNotificationBuilder_AddOpenUrlAction::URL' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_AddOpenUrlAction, ReturnValue) == 0x000030, "Member 'AGNotificationBuilder_AddOpenUrlAction::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.Build
// 0x0008 (0x0008 - 0x0000)
struct AGNotificationBuilder_Build final
{
public:
	class UAGNotification*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_Build) == 0x000008, "Wrong alignment on AGNotificationBuilder_Build");
static_assert(sizeof(AGNotificationBuilder_Build) == 0x000008, "Wrong size on AGNotificationBuilder_Build");
static_assert(offsetof(AGNotificationBuilder_Build, ReturnValue) == 0x000000, "Member 'AGNotificationBuilder_Build::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetAlertOnce
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetAlertOnce final
{
public:
	bool                                          AlertOnce;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetAlertOnce) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetAlertOnce");
static_assert(sizeof(AGNotificationBuilder_SetAlertOnce) == 0x000010, "Wrong size on AGNotificationBuilder_SetAlertOnce");
static_assert(offsetof(AGNotificationBuilder_SetAlertOnce, AlertOnce) == 0x000000, "Member 'AGNotificationBuilder_SetAlertOnce::AlertOnce' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetAlertOnce, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetAlertOnce::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetAutoCancel
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetAutoCancel final
{
public:
	bool                                          AutoCancel;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetAutoCancel) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetAutoCancel");
static_assert(sizeof(AGNotificationBuilder_SetAutoCancel) == 0x000010, "Wrong size on AGNotificationBuilder_SetAutoCancel");
static_assert(offsetof(AGNotificationBuilder_SetAutoCancel, AutoCancel) == 0x000000, "Member 'AGNotificationBuilder_SetAutoCancel::AutoCancel' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetAutoCancel, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetAutoCancel::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetBadgeIconType
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetBadgeIconType final
{
public:
	ENotificationBadgeIconType                    badgeIconType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetBadgeIconType) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetBadgeIconType");
static_assert(sizeof(AGNotificationBuilder_SetBadgeIconType) == 0x000010, "Wrong size on AGNotificationBuilder_SetBadgeIconType");
static_assert(offsetof(AGNotificationBuilder_SetBadgeIconType, badgeIconType) == 0x000000, "Member 'AGNotificationBuilder_SetBadgeIconType::badgeIconType' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetBadgeIconType, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetBadgeIconType::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetBigPictureStyle
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetBigPictureStyle final
{
public:
	class UAGNotificationBigPictureStyle*         Style;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetBigPictureStyle) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetBigPictureStyle");
static_assert(sizeof(AGNotificationBuilder_SetBigPictureStyle) == 0x000010, "Wrong size on AGNotificationBuilder_SetBigPictureStyle");
static_assert(offsetof(AGNotificationBuilder_SetBigPictureStyle, Style) == 0x000000, "Member 'AGNotificationBuilder_SetBigPictureStyle::Style' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetBigPictureStyle, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetBigPictureStyle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetBigTextStyle
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetBigTextStyle final
{
public:
	class UAGNotificationBigTextStyle*            Style;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetBigTextStyle) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetBigTextStyle");
static_assert(sizeof(AGNotificationBuilder_SetBigTextStyle) == 0x000010, "Wrong size on AGNotificationBuilder_SetBigTextStyle");
static_assert(offsetof(AGNotificationBuilder_SetBigTextStyle, Style) == 0x000000, "Member 'AGNotificationBuilder_SetBigTextStyle::Style' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetBigTextStyle, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetBigTextStyle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetCategory
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetCategory final
{
public:
	ENotificationCategory                         Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetCategory) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetCategory");
static_assert(sizeof(AGNotificationBuilder_SetCategory) == 0x000010, "Wrong size on AGNotificationBuilder_SetCategory");
static_assert(offsetof(AGNotificationBuilder_SetCategory, Category) == 0x000000, "Member 'AGNotificationBuilder_SetCategory::Category' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetCategory, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetCategory::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetColor
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetColor) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetColor");
static_assert(sizeof(AGNotificationBuilder_SetColor) == 0x000010, "Wrong size on AGNotificationBuilder_SetColor");
static_assert(offsetof(AGNotificationBuilder_SetColor, Color) == 0x000000, "Member 'AGNotificationBuilder_SetColor::Color' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetColor, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetColor::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetColorized
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetColorized final
{
public:
	bool                                          Colorized;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetColorized) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetColorized");
static_assert(sizeof(AGNotificationBuilder_SetColorized) == 0x000010, "Wrong size on AGNotificationBuilder_SetColorized");
static_assert(offsetof(AGNotificationBuilder_SetColorized, Colorized) == 0x000000, "Member 'AGNotificationBuilder_SetColorized::Colorized' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetColorized, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetColorized::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetContentInfo
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetContentInfo final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetContentInfo) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetContentInfo");
static_assert(sizeof(AGNotificationBuilder_SetContentInfo) == 0x000018, "Wrong size on AGNotificationBuilder_SetContentInfo");
static_assert(offsetof(AGNotificationBuilder_SetContentInfo, Text) == 0x000000, "Member 'AGNotificationBuilder_SetContentInfo::Text' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetContentInfo, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetContentInfo::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetDefaults
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetDefaults final
{
public:
	struct FAGNotificationDefaults                Defaults;                                          // 0x0000(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetDefaults) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetDefaults");
static_assert(sizeof(AGNotificationBuilder_SetDefaults) == 0x000010, "Wrong size on AGNotificationBuilder_SetDefaults");
static_assert(offsetof(AGNotificationBuilder_SetDefaults, Defaults) == 0x000000, "Member 'AGNotificationBuilder_SetDefaults::Defaults' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetDefaults, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetDefaults::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetGroup
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetGroup final
{
public:
	class FString                                 GroupKey;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetGroup) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetGroup");
static_assert(sizeof(AGNotificationBuilder_SetGroup) == 0x000018, "Wrong size on AGNotificationBuilder_SetGroup");
static_assert(offsetof(AGNotificationBuilder_SetGroup, GroupKey) == 0x000000, "Member 'AGNotificationBuilder_SetGroup::GroupKey' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetGroup, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetGroup::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetGroupAlertBehaviour
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetGroupAlertBehaviour final
{
public:
	ENotificationGroupAlert                       behaviour;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetGroupAlertBehaviour) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetGroupAlertBehaviour");
static_assert(sizeof(AGNotificationBuilder_SetGroupAlertBehaviour) == 0x000010, "Wrong size on AGNotificationBuilder_SetGroupAlertBehaviour");
static_assert(offsetof(AGNotificationBuilder_SetGroupAlertBehaviour, behaviour) == 0x000000, "Member 'AGNotificationBuilder_SetGroupAlertBehaviour::behaviour' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetGroupAlertBehaviour, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetGroupAlertBehaviour::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetGroupSummary
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetGroupSummary final
{
public:
	bool                                          Summary;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetGroupSummary) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetGroupSummary");
static_assert(sizeof(AGNotificationBuilder_SetGroupSummary) == 0x000010, "Wrong size on AGNotificationBuilder_SetGroupSummary");
static_assert(offsetof(AGNotificationBuilder_SetGroupSummary, Summary) == 0x000000, "Member 'AGNotificationBuilder_SetGroupSummary::Summary' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetGroupSummary, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetGroupSummary::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetInboxStyle
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetInboxStyle final
{
public:
	class UAGNotificationInboxStyle*              Style;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetInboxStyle) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetInboxStyle");
static_assert(sizeof(AGNotificationBuilder_SetInboxStyle) == 0x000010, "Wrong size on AGNotificationBuilder_SetInboxStyle");
static_assert(offsetof(AGNotificationBuilder_SetInboxStyle, Style) == 0x000000, "Member 'AGNotificationBuilder_SetInboxStyle::Style' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetInboxStyle, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetInboxStyle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetLargeIcon
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetLargeIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetLargeIcon) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetLargeIcon");
static_assert(sizeof(AGNotificationBuilder_SetLargeIcon) == 0x000010, "Wrong size on AGNotificationBuilder_SetLargeIcon");
static_assert(offsetof(AGNotificationBuilder_SetLargeIcon, Icon) == 0x000000, "Member 'AGNotificationBuilder_SetLargeIcon::Icon' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetLargeIcon, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetLargeIcon::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetLights
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetLights final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMilliSeconds;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMilliSeconds;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetLights) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetLights");
static_assert(sizeof(AGNotificationBuilder_SetLights) == 0x000018, "Wrong size on AGNotificationBuilder_SetLights");
static_assert(offsetof(AGNotificationBuilder_SetLights, Color) == 0x000000, "Member 'AGNotificationBuilder_SetLights::Color' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetLights, InMilliSeconds) == 0x000004, "Member 'AGNotificationBuilder_SetLights::InMilliSeconds' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetLights, OutMilliSeconds) == 0x000008, "Member 'AGNotificationBuilder_SetLights::OutMilliSeconds' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetLights, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetLights::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetLocalOnly
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetLocalOnly final
{
public:
	bool                                          LocalOnly;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetLocalOnly) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetLocalOnly");
static_assert(sizeof(AGNotificationBuilder_SetLocalOnly) == 0x000010, "Wrong size on AGNotificationBuilder_SetLocalOnly");
static_assert(offsetof(AGNotificationBuilder_SetLocalOnly, LocalOnly) == 0x000000, "Member 'AGNotificationBuilder_SetLocalOnly::LocalOnly' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetLocalOnly, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetLocalOnly::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetMessagingStyle
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetMessagingStyle final
{
public:
	class UAGNotificationMessageStyle*            Style;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetMessagingStyle) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetMessagingStyle");
static_assert(sizeof(AGNotificationBuilder_SetMessagingStyle) == 0x000010, "Wrong size on AGNotificationBuilder_SetMessagingStyle");
static_assert(offsetof(AGNotificationBuilder_SetMessagingStyle, Style) == 0x000000, "Member 'AGNotificationBuilder_SetMessagingStyle::Style' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetMessagingStyle, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetMessagingStyle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetNumber
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetNumber final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetNumber) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetNumber");
static_assert(sizeof(AGNotificationBuilder_SetNumber) == 0x000010, "Wrong size on AGNotificationBuilder_SetNumber");
static_assert(offsetof(AGNotificationBuilder_SetNumber, Number) == 0x000000, "Member 'AGNotificationBuilder_SetNumber::Number' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetNumber, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetNumber::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetOngoing
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetOngoing final
{
public:
	bool                                          Ongoing;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetOngoing) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetOngoing");
static_assert(sizeof(AGNotificationBuilder_SetOngoing) == 0x000010, "Wrong size on AGNotificationBuilder_SetOngoing");
static_assert(offsetof(AGNotificationBuilder_SetOngoing, Ongoing) == 0x000000, "Member 'AGNotificationBuilder_SetOngoing::Ongoing' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetOngoing, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetOngoing::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetPriority
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetPriority final
{
public:
	ENotificationPriority                         Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetPriority) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetPriority");
static_assert(sizeof(AGNotificationBuilder_SetPriority) == 0x000010, "Wrong size on AGNotificationBuilder_SetPriority");
static_assert(offsetof(AGNotificationBuilder_SetPriority, Priority) == 0x000000, "Member 'AGNotificationBuilder_SetPriority::Priority' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetPriority, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetPriority::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetProgress
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetProgress final
{
public:
	int32                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Indeterminate;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetProgress) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetProgress");
static_assert(sizeof(AGNotificationBuilder_SetProgress) == 0x000018, "Wrong size on AGNotificationBuilder_SetProgress");
static_assert(offsetof(AGNotificationBuilder_SetProgress, Current) == 0x000000, "Member 'AGNotificationBuilder_SetProgress::Current' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetProgress, Max) == 0x000004, "Member 'AGNotificationBuilder_SetProgress::Max' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetProgress, Indeterminate) == 0x000008, "Member 'AGNotificationBuilder_SetProgress::Indeterminate' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetProgress, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetProgress::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetPublicVersion
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetPublicVersion final
{
public:
	class UAGNotification*                        Notification;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetPublicVersion) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetPublicVersion");
static_assert(sizeof(AGNotificationBuilder_SetPublicVersion) == 0x000010, "Wrong size on AGNotificationBuilder_SetPublicVersion");
static_assert(offsetof(AGNotificationBuilder_SetPublicVersion, Notification) == 0x000000, "Member 'AGNotificationBuilder_SetPublicVersion::Notification' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetPublicVersion, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetPublicVersion::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetShortcutId
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetShortcutId final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetShortcutId) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetShortcutId");
static_assert(sizeof(AGNotificationBuilder_SetShortcutId) == 0x000018, "Wrong size on AGNotificationBuilder_SetShortcutId");
static_assert(offsetof(AGNotificationBuilder_SetShortcutId, ID) == 0x000000, "Member 'AGNotificationBuilder_SetShortcutId::ID' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetShortcutId, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetShortcutId::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetShowWhen
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetShowWhen final
{
public:
	bool                                          ShowWhen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetShowWhen) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetShowWhen");
static_assert(sizeof(AGNotificationBuilder_SetShowWhen) == 0x000010, "Wrong size on AGNotificationBuilder_SetShowWhen");
static_assert(offsetof(AGNotificationBuilder_SetShowWhen, ShowWhen) == 0x000000, "Member 'AGNotificationBuilder_SetShowWhen::ShowWhen' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetShowWhen, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetShowWhen::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetSmallIcon
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetSmallIcon final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetSmallIcon) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetSmallIcon");
static_assert(sizeof(AGNotificationBuilder_SetSmallIcon) == 0x000018, "Wrong size on AGNotificationBuilder_SetSmallIcon");
static_assert(offsetof(AGNotificationBuilder_SetSmallIcon, Filename) == 0x000000, "Member 'AGNotificationBuilder_SetSmallIcon::Filename' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetSmallIcon, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetSmallIcon::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetSortKey
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetSortKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetSortKey) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetSortKey");
static_assert(sizeof(AGNotificationBuilder_SetSortKey) == 0x000018, "Wrong size on AGNotificationBuilder_SetSortKey");
static_assert(offsetof(AGNotificationBuilder_SetSortKey, Key) == 0x000000, "Member 'AGNotificationBuilder_SetSortKey::Key' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetSortKey, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetSortKey::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetSound
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetSound final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetSound) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetSound");
static_assert(sizeof(AGNotificationBuilder_SetSound) == 0x000018, "Wrong size on AGNotificationBuilder_SetSound");
static_assert(offsetof(AGNotificationBuilder_SetSound, Path) == 0x000000, "Member 'AGNotificationBuilder_SetSound::Path' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetSound, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetSound::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetSubText
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetSubText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetSubText) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetSubText");
static_assert(sizeof(AGNotificationBuilder_SetSubText) == 0x000018, "Wrong size on AGNotificationBuilder_SetSubText");
static_assert(offsetof(AGNotificationBuilder_SetSubText, Text) == 0x000000, "Member 'AGNotificationBuilder_SetSubText::Text' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetSubText, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetSubText::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetText
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetText) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetText");
static_assert(sizeof(AGNotificationBuilder_SetText) == 0x000018, "Wrong size on AGNotificationBuilder_SetText");
static_assert(offsetof(AGNotificationBuilder_SetText, Text) == 0x000000, "Member 'AGNotificationBuilder_SetText::Text' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetText, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetText::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetTicker
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetTicker final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetTicker) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetTicker");
static_assert(sizeof(AGNotificationBuilder_SetTicker) == 0x000018, "Wrong size on AGNotificationBuilder_SetTicker");
static_assert(offsetof(AGNotificationBuilder_SetTicker, Text) == 0x000000, "Member 'AGNotificationBuilder_SetTicker::Text' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetTicker, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetTicker::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetTimeoutAfter
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetTimeoutAfter final
{
public:
	int32                                         MilliSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetTimeoutAfter) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetTimeoutAfter");
static_assert(sizeof(AGNotificationBuilder_SetTimeoutAfter) == 0x000010, "Wrong size on AGNotificationBuilder_SetTimeoutAfter");
static_assert(offsetof(AGNotificationBuilder_SetTimeoutAfter, MilliSeconds) == 0x000000, "Member 'AGNotificationBuilder_SetTimeoutAfter::MilliSeconds' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetTimeoutAfter, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetTimeoutAfter::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetTitle final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetTitle) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetTitle");
static_assert(sizeof(AGNotificationBuilder_SetTitle) == 0x000018, "Wrong size on AGNotificationBuilder_SetTitle");
static_assert(offsetof(AGNotificationBuilder_SetTitle, Title) == 0x000000, "Member 'AGNotificationBuilder_SetTitle::Title' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetTitle, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetTitle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetUsesChronometer
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetUsesChronometer final
{
public:
	bool                                          UsesChronometer;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetUsesChronometer) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetUsesChronometer");
static_assert(sizeof(AGNotificationBuilder_SetUsesChronometer) == 0x000010, "Wrong size on AGNotificationBuilder_SetUsesChronometer");
static_assert(offsetof(AGNotificationBuilder_SetUsesChronometer, UsesChronometer) == 0x000000, "Member 'AGNotificationBuilder_SetUsesChronometer::UsesChronometer' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetUsesChronometer, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetUsesChronometer::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetVibrate
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationBuilder_SetVibrate final
{
public:
	TArray<float>                                 Pattern;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetVibrate) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetVibrate");
static_assert(sizeof(AGNotificationBuilder_SetVibrate) == 0x000018, "Wrong size on AGNotificationBuilder_SetVibrate");
static_assert(offsetof(AGNotificationBuilder_SetVibrate, Pattern) == 0x000000, "Member 'AGNotificationBuilder_SetVibrate::Pattern' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetVibrate, ReturnValue) == 0x000010, "Member 'AGNotificationBuilder_SetVibrate::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetVisibility
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetVisibility final
{
public:
	ENotificationVisibility                       Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetVisibility) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetVisibility");
static_assert(sizeof(AGNotificationBuilder_SetVisibility) == 0x000010, "Wrong size on AGNotificationBuilder_SetVisibility");
static_assert(offsetof(AGNotificationBuilder_SetVisibility, Visibility) == 0x000000, "Member 'AGNotificationBuilder_SetVisibility::Visibility' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetVisibility, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetVisibility::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationBuilder.SetWhen
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationBuilder_SetWhen final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationBuilder*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationBuilder_SetWhen) == 0x000008, "Wrong alignment on AGNotificationBuilder_SetWhen");
static_assert(sizeof(AGNotificationBuilder_SetWhen) == 0x000010, "Wrong size on AGNotificationBuilder_SetWhen");
static_assert(offsetof(AGNotificationBuilder_SetWhen, DateTime) == 0x000000, "Member 'AGNotificationBuilder_SetWhen::DateTime' has a wrong offset!");
static_assert(offsetof(AGNotificationBuilder_SetWhen, ReturnValue) == 0x000008, "Member 'AGNotificationBuilder_SetWhen::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.NewNotificationChannel
// 0x0030 (0x0030 - 0x0000)
struct AGNotificationChannel_NewNotificationChannel final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChannelImportance                            Importance;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_NewNotificationChannel) == 0x000008, "Wrong alignment on AGNotificationChannel_NewNotificationChannel");
static_assert(sizeof(AGNotificationChannel_NewNotificationChannel) == 0x000030, "Wrong size on AGNotificationChannel_NewNotificationChannel");
static_assert(offsetof(AGNotificationChannel_NewNotificationChannel, ID) == 0x000000, "Member 'AGNotificationChannel_NewNotificationChannel::ID' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_NewNotificationChannel, Name_0) == 0x000010, "Member 'AGNotificationChannel_NewNotificationChannel::Name_0' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_NewNotificationChannel, Importance) == 0x000020, "Member 'AGNotificationChannel_NewNotificationChannel::Importance' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_NewNotificationChannel, ReturnValue) == 0x000028, "Member 'AGNotificationChannel_NewNotificationChannel::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.CanBypassDnd
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationChannel_CanBypassDnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_CanBypassDnd) == 0x000001, "Wrong alignment on AGNotificationChannel_CanBypassDnd");
static_assert(sizeof(AGNotificationChannel_CanBypassDnd) == 0x000001, "Wrong size on AGNotificationChannel_CanBypassDnd");
static_assert(offsetof(AGNotificationChannel_CanBypassDnd, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_CanBypassDnd::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.CanShowBadge
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationChannel_CanShowBadge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_CanShowBadge) == 0x000001, "Wrong alignment on AGNotificationChannel_CanShowBadge");
static_assert(sizeof(AGNotificationChannel_CanShowBadge) == 0x000001, "Wrong size on AGNotificationChannel_CanShowBadge");
static_assert(offsetof(AGNotificationChannel_CanShowBadge, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_CanShowBadge::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.GetAudioAttributes
// 0x0005 (0x0005 - 0x0000)
struct AGNotificationChannel_GetAudioAttributes final
{
public:
	struct FAGAudioAttributes                     ReturnValue;                                       // 0x0000(0x0005)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_GetAudioAttributes) == 0x000001, "Wrong alignment on AGNotificationChannel_GetAudioAttributes");
static_assert(sizeof(AGNotificationChannel_GetAudioAttributes) == 0x000005, "Wrong size on AGNotificationChannel_GetAudioAttributes");
static_assert(offsetof(AGNotificationChannel_GetAudioAttributes, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_GetAudioAttributes::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_GetDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_GetDescription) == 0x000008, "Wrong alignment on AGNotificationChannel_GetDescription");
static_assert(sizeof(AGNotificationChannel_GetDescription) == 0x000010, "Wrong size on AGNotificationChannel_GetDescription");
static_assert(offsetof(AGNotificationChannel_GetDescription, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_GetDescription::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.GetGroupId
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_GetGroupId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_GetGroupId) == 0x000008, "Wrong alignment on AGNotificationChannel_GetGroupId");
static_assert(sizeof(AGNotificationChannel_GetGroupId) == 0x000010, "Wrong size on AGNotificationChannel_GetGroupId");
static_assert(offsetof(AGNotificationChannel_GetGroupId, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_GetGroupId::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.GetId
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_GetId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_GetId) == 0x000008, "Wrong alignment on AGNotificationChannel_GetId");
static_assert(sizeof(AGNotificationChannel_GetId) == 0x000010, "Wrong size on AGNotificationChannel_GetId");
static_assert(offsetof(AGNotificationChannel_GetId, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_GetId::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.GetImportance
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationChannel_GetImportance final
{
public:
	EChannelImportance                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_GetImportance) == 0x000001, "Wrong alignment on AGNotificationChannel_GetImportance");
static_assert(sizeof(AGNotificationChannel_GetImportance) == 0x000001, "Wrong size on AGNotificationChannel_GetImportance");
static_assert(offsetof(AGNotificationChannel_GetImportance, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_GetImportance::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.GetLightColor
// 0x0004 (0x0004 - 0x0000)
struct AGNotificationChannel_GetLightColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_GetLightColor) == 0x000004, "Wrong alignment on AGNotificationChannel_GetLightColor");
static_assert(sizeof(AGNotificationChannel_GetLightColor) == 0x000004, "Wrong size on AGNotificationChannel_GetLightColor");
static_assert(offsetof(AGNotificationChannel_GetLightColor, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_GetLightColor::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.GetLockScreenVisibility
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationChannel_GetLockScreenVisibility final
{
public:
	ENotificationVisibility                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_GetLockScreenVisibility) == 0x000001, "Wrong alignment on AGNotificationChannel_GetLockScreenVisibility");
static_assert(sizeof(AGNotificationChannel_GetLockScreenVisibility) == 0x000001, "Wrong size on AGNotificationChannel_GetLockScreenVisibility");
static_assert(offsetof(AGNotificationChannel_GetLockScreenVisibility, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_GetLockScreenVisibility::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.GetName
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_GetName) == 0x000008, "Wrong alignment on AGNotificationChannel_GetName");
static_assert(sizeof(AGNotificationChannel_GetName) == 0x000010, "Wrong size on AGNotificationChannel_GetName");
static_assert(offsetof(AGNotificationChannel_GetName, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_GetName::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.GetSoundPath
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_GetSoundPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_GetSoundPath) == 0x000008, "Wrong alignment on AGNotificationChannel_GetSoundPath");
static_assert(sizeof(AGNotificationChannel_GetSoundPath) == 0x000010, "Wrong size on AGNotificationChannel_GetSoundPath");
static_assert(offsetof(AGNotificationChannel_GetSoundPath, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_GetSoundPath::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.GetVibrationPattern
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_GetVibrationPattern final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_GetVibrationPattern) == 0x000008, "Wrong alignment on AGNotificationChannel_GetVibrationPattern");
static_assert(sizeof(AGNotificationChannel_GetVibrationPattern) == 0x000010, "Wrong size on AGNotificationChannel_GetVibrationPattern");
static_assert(offsetof(AGNotificationChannel_GetVibrationPattern, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_GetVibrationPattern::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetBypassDnd
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_SetBypassDnd final
{
public:
	bool                                          bypass;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetBypassDnd) == 0x000008, "Wrong alignment on AGNotificationChannel_SetBypassDnd");
static_assert(sizeof(AGNotificationChannel_SetBypassDnd) == 0x000010, "Wrong size on AGNotificationChannel_SetBypassDnd");
static_assert(offsetof(AGNotificationChannel_SetBypassDnd, bypass) == 0x000000, "Member 'AGNotificationChannel_SetBypassDnd::bypass' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetBypassDnd, ReturnValue) == 0x000008, "Member 'AGNotificationChannel_SetBypassDnd::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetDescription
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationChannel_SetDescription final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetDescription) == 0x000008, "Wrong alignment on AGNotificationChannel_SetDescription");
static_assert(sizeof(AGNotificationChannel_SetDescription) == 0x000018, "Wrong size on AGNotificationChannel_SetDescription");
static_assert(offsetof(AGNotificationChannel_SetDescription, Description) == 0x000000, "Member 'AGNotificationChannel_SetDescription::Description' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetDescription, ReturnValue) == 0x000010, "Member 'AGNotificationChannel_SetDescription::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetEnableLights
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_SetEnableLights final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetEnableLights) == 0x000008, "Wrong alignment on AGNotificationChannel_SetEnableLights");
static_assert(sizeof(AGNotificationChannel_SetEnableLights) == 0x000010, "Wrong size on AGNotificationChannel_SetEnableLights");
static_assert(offsetof(AGNotificationChannel_SetEnableLights, Enable) == 0x000000, "Member 'AGNotificationChannel_SetEnableLights::Enable' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetEnableLights, ReturnValue) == 0x000008, "Member 'AGNotificationChannel_SetEnableLights::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetEnableVibration
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_SetEnableVibration final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetEnableVibration) == 0x000008, "Wrong alignment on AGNotificationChannel_SetEnableVibration");
static_assert(sizeof(AGNotificationChannel_SetEnableVibration) == 0x000010, "Wrong size on AGNotificationChannel_SetEnableVibration");
static_assert(offsetof(AGNotificationChannel_SetEnableVibration, Enable) == 0x000000, "Member 'AGNotificationChannel_SetEnableVibration::Enable' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetEnableVibration, ReturnValue) == 0x000008, "Member 'AGNotificationChannel_SetEnableVibration::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetGroup
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationChannel_SetGroup final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetGroup) == 0x000008, "Wrong alignment on AGNotificationChannel_SetGroup");
static_assert(sizeof(AGNotificationChannel_SetGroup) == 0x000018, "Wrong size on AGNotificationChannel_SetGroup");
static_assert(offsetof(AGNotificationChannel_SetGroup, GroupId) == 0x000000, "Member 'AGNotificationChannel_SetGroup::GroupId' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetGroup, ReturnValue) == 0x000010, "Member 'AGNotificationChannel_SetGroup::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetImportance
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_SetImportance final
{
public:
	EChannelImportance                            Importance;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetImportance) == 0x000008, "Wrong alignment on AGNotificationChannel_SetImportance");
static_assert(sizeof(AGNotificationChannel_SetImportance) == 0x000010, "Wrong size on AGNotificationChannel_SetImportance");
static_assert(offsetof(AGNotificationChannel_SetImportance, Importance) == 0x000000, "Member 'AGNotificationChannel_SetImportance::Importance' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetImportance, ReturnValue) == 0x000008, "Member 'AGNotificationChannel_SetImportance::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetLightColor
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_SetLightColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetLightColor) == 0x000008, "Wrong alignment on AGNotificationChannel_SetLightColor");
static_assert(sizeof(AGNotificationChannel_SetLightColor) == 0x000010, "Wrong size on AGNotificationChannel_SetLightColor");
static_assert(offsetof(AGNotificationChannel_SetLightColor, Color) == 0x000000, "Member 'AGNotificationChannel_SetLightColor::Color' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetLightColor, ReturnValue) == 0x000008, "Member 'AGNotificationChannel_SetLightColor::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetLockScreenVisibility
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_SetLockScreenVisibility final
{
public:
	ENotificationVisibility                       Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetLockScreenVisibility) == 0x000008, "Wrong alignment on AGNotificationChannel_SetLockScreenVisibility");
static_assert(sizeof(AGNotificationChannel_SetLockScreenVisibility) == 0x000010, "Wrong size on AGNotificationChannel_SetLockScreenVisibility");
static_assert(offsetof(AGNotificationChannel_SetLockScreenVisibility, Visibility) == 0x000000, "Member 'AGNotificationChannel_SetLockScreenVisibility::Visibility' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetLockScreenVisibility, ReturnValue) == 0x000008, "Member 'AGNotificationChannel_SetLockScreenVisibility::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetShowBadge
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannel_SetShowBadge final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetShowBadge) == 0x000008, "Wrong alignment on AGNotificationChannel_SetShowBadge");
static_assert(sizeof(AGNotificationChannel_SetShowBadge) == 0x000010, "Wrong size on AGNotificationChannel_SetShowBadge");
static_assert(offsetof(AGNotificationChannel_SetShowBadge, Show) == 0x000000, "Member 'AGNotificationChannel_SetShowBadge::Show' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetShowBadge, ReturnValue) == 0x000008, "Member 'AGNotificationChannel_SetShowBadge::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetSound
// 0x0020 (0x0020 - 0x0000)
struct AGNotificationChannel_SetSound final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAGAudioAttributes                     Attributes;                                        // 0x0010(0x0005)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetSound) == 0x000008, "Wrong alignment on AGNotificationChannel_SetSound");
static_assert(sizeof(AGNotificationChannel_SetSound) == 0x000020, "Wrong size on AGNotificationChannel_SetSound");
static_assert(offsetof(AGNotificationChannel_SetSound, FilePath) == 0x000000, "Member 'AGNotificationChannel_SetSound::FilePath' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetSound, Attributes) == 0x000010, "Member 'AGNotificationChannel_SetSound::Attributes' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetSound, ReturnValue) == 0x000018, "Member 'AGNotificationChannel_SetSound::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.SetVibrationPattern
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationChannel_SetVibrationPattern final
{
public:
	TArray<float>                                 Pattern;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_SetVibrationPattern) == 0x000008, "Wrong alignment on AGNotificationChannel_SetVibrationPattern");
static_assert(sizeof(AGNotificationChannel_SetVibrationPattern) == 0x000018, "Wrong size on AGNotificationChannel_SetVibrationPattern");
static_assert(offsetof(AGNotificationChannel_SetVibrationPattern, Pattern) == 0x000000, "Member 'AGNotificationChannel_SetVibrationPattern::Pattern' has a wrong offset!");
static_assert(offsetof(AGNotificationChannel_SetVibrationPattern, ReturnValue) == 0x000010, "Member 'AGNotificationChannel_SetVibrationPattern::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.ShouldShowLights
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationChannel_ShouldShowLights final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_ShouldShowLights) == 0x000001, "Wrong alignment on AGNotificationChannel_ShouldShowLights");
static_assert(sizeof(AGNotificationChannel_ShouldShowLights) == 0x000001, "Wrong size on AGNotificationChannel_ShouldShowLights");
static_assert(offsetof(AGNotificationChannel_ShouldShowLights, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_ShouldShowLights::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannel.ShouldVibrate
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationChannel_ShouldVibrate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannel_ShouldVibrate) == 0x000001, "Wrong alignment on AGNotificationChannel_ShouldVibrate");
static_assert(sizeof(AGNotificationChannel_ShouldVibrate) == 0x000001, "Wrong size on AGNotificationChannel_ShouldVibrate");
static_assert(offsetof(AGNotificationChannel_ShouldVibrate, ReturnValue) == 0x000000, "Member 'AGNotificationChannel_ShouldVibrate::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannelGroup.NewNotificationChannelGroup
// 0x0028 (0x0028 - 0x0000)
struct AGNotificationChannelGroup_NewNotificationChannelGroup final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationChannelGroup*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannelGroup_NewNotificationChannelGroup) == 0x000008, "Wrong alignment on AGNotificationChannelGroup_NewNotificationChannelGroup");
static_assert(sizeof(AGNotificationChannelGroup_NewNotificationChannelGroup) == 0x000028, "Wrong size on AGNotificationChannelGroup_NewNotificationChannelGroup");
static_assert(offsetof(AGNotificationChannelGroup_NewNotificationChannelGroup, ID) == 0x000000, "Member 'AGNotificationChannelGroup_NewNotificationChannelGroup::ID' has a wrong offset!");
static_assert(offsetof(AGNotificationChannelGroup_NewNotificationChannelGroup, Name_0) == 0x000010, "Member 'AGNotificationChannelGroup_NewNotificationChannelGroup::Name_0' has a wrong offset!");
static_assert(offsetof(AGNotificationChannelGroup_NewNotificationChannelGroup, ReturnValue) == 0x000020, "Member 'AGNotificationChannelGroup_NewNotificationChannelGroup::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannelGroup.GetChannels
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannelGroup_GetChannels final
{
public:
	TArray<class UAGNotificationChannel*>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannelGroup_GetChannels) == 0x000008, "Wrong alignment on AGNotificationChannelGroup_GetChannels");
static_assert(sizeof(AGNotificationChannelGroup_GetChannels) == 0x000010, "Wrong size on AGNotificationChannelGroup_GetChannels");
static_assert(offsetof(AGNotificationChannelGroup_GetChannels, ReturnValue) == 0x000000, "Member 'AGNotificationChannelGroup_GetChannels::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannelGroup.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannelGroup_GetDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannelGroup_GetDescription) == 0x000008, "Wrong alignment on AGNotificationChannelGroup_GetDescription");
static_assert(sizeof(AGNotificationChannelGroup_GetDescription) == 0x000010, "Wrong size on AGNotificationChannelGroup_GetDescription");
static_assert(offsetof(AGNotificationChannelGroup_GetDescription, ReturnValue) == 0x000000, "Member 'AGNotificationChannelGroup_GetDescription::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannelGroup.GetId
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannelGroup_GetId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannelGroup_GetId) == 0x000008, "Wrong alignment on AGNotificationChannelGroup_GetId");
static_assert(sizeof(AGNotificationChannelGroup_GetId) == 0x000010, "Wrong size on AGNotificationChannelGroup_GetId");
static_assert(offsetof(AGNotificationChannelGroup_GetId, ReturnValue) == 0x000000, "Member 'AGNotificationChannelGroup_GetId::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannelGroup.GetName
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationChannelGroup_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannelGroup_GetName) == 0x000008, "Wrong alignment on AGNotificationChannelGroup_GetName");
static_assert(sizeof(AGNotificationChannelGroup_GetName) == 0x000010, "Wrong size on AGNotificationChannelGroup_GetName");
static_assert(offsetof(AGNotificationChannelGroup_GetName, ReturnValue) == 0x000000, "Member 'AGNotificationChannelGroup_GetName::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannelGroup.IsBlocked
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationChannelGroup_IsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannelGroup_IsBlocked) == 0x000001, "Wrong alignment on AGNotificationChannelGroup_IsBlocked");
static_assert(sizeof(AGNotificationChannelGroup_IsBlocked) == 0x000001, "Wrong size on AGNotificationChannelGroup_IsBlocked");
static_assert(offsetof(AGNotificationChannelGroup_IsBlocked, ReturnValue) == 0x000000, "Member 'AGNotificationChannelGroup_IsBlocked::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationChannelGroup.SetDescription
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationChannelGroup_SetDescription final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationChannelGroup*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationChannelGroup_SetDescription) == 0x000008, "Wrong alignment on AGNotificationChannelGroup_SetDescription");
static_assert(sizeof(AGNotificationChannelGroup_SetDescription) == 0x000018, "Wrong size on AGNotificationChannelGroup_SetDescription");
static_assert(offsetof(AGNotificationChannelGroup_SetDescription, Description) == 0x000000, "Member 'AGNotificationChannelGroup_SetDescription::Description' has a wrong offset!");
static_assert(offsetof(AGNotificationChannelGroup_SetDescription, ReturnValue) == 0x000010, "Member 'AGNotificationChannelGroup_SetDescription::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationInboxStyle.CreateInboxStyle
// 0x0008 (0x0008 - 0x0000)
struct AGNotificationInboxStyle_CreateInboxStyle final
{
public:
	class UAGNotificationInboxStyle*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationInboxStyle_CreateInboxStyle) == 0x000008, "Wrong alignment on AGNotificationInboxStyle_CreateInboxStyle");
static_assert(sizeof(AGNotificationInboxStyle_CreateInboxStyle) == 0x000008, "Wrong size on AGNotificationInboxStyle_CreateInboxStyle");
static_assert(offsetof(AGNotificationInboxStyle_CreateInboxStyle, ReturnValue) == 0x000000, "Member 'AGNotificationInboxStyle_CreateInboxStyle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationInboxStyle.AddLine
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationInboxStyle_AddLine final
{
public:
	class FString                                 Line;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationInboxStyle*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationInboxStyle_AddLine) == 0x000008, "Wrong alignment on AGNotificationInboxStyle_AddLine");
static_assert(sizeof(AGNotificationInboxStyle_AddLine) == 0x000018, "Wrong size on AGNotificationInboxStyle_AddLine");
static_assert(offsetof(AGNotificationInboxStyle_AddLine, Line) == 0x000000, "Member 'AGNotificationInboxStyle_AddLine::Line' has a wrong offset!");
static_assert(offsetof(AGNotificationInboxStyle_AddLine, ReturnValue) == 0x000010, "Member 'AGNotificationInboxStyle_AddLine::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationInboxStyle.SetBigContentTitle
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationInboxStyle_SetBigContentTitle final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationInboxStyle*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationInboxStyle_SetBigContentTitle) == 0x000008, "Wrong alignment on AGNotificationInboxStyle_SetBigContentTitle");
static_assert(sizeof(AGNotificationInboxStyle_SetBigContentTitle) == 0x000018, "Wrong size on AGNotificationInboxStyle_SetBigContentTitle");
static_assert(offsetof(AGNotificationInboxStyle_SetBigContentTitle, Title) == 0x000000, "Member 'AGNotificationInboxStyle_SetBigContentTitle::Title' has a wrong offset!");
static_assert(offsetof(AGNotificationInboxStyle_SetBigContentTitle, ReturnValue) == 0x000010, "Member 'AGNotificationInboxStyle_SetBigContentTitle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationInboxStyle.SetSummaryText
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationInboxStyle_SetSummaryText final
{
public:
	class FString                                 Summary;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationInboxStyle*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationInboxStyle_SetSummaryText) == 0x000008, "Wrong alignment on AGNotificationInboxStyle_SetSummaryText");
static_assert(sizeof(AGNotificationInboxStyle_SetSummaryText) == 0x000018, "Wrong size on AGNotificationInboxStyle_SetSummaryText");
static_assert(offsetof(AGNotificationInboxStyle_SetSummaryText, Summary) == 0x000000, "Member 'AGNotificationInboxStyle_SetSummaryText::Summary' has a wrong offset!");
static_assert(offsetof(AGNotificationInboxStyle_SetSummaryText, ReturnValue) == 0x000010, "Member 'AGNotificationInboxStyle_SetSummaryText::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.AreNotificationChannelsSupported
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationManager_AreNotificationChannelsSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_AreNotificationChannelsSupported) == 0x000001, "Wrong alignment on AGNotificationManager_AreNotificationChannelsSupported");
static_assert(sizeof(AGNotificationManager_AreNotificationChannelsSupported) == 0x000001, "Wrong size on AGNotificationManager_AreNotificationChannelsSupported");
static_assert(offsetof(AGNotificationManager_AreNotificationChannelsSupported, ReturnValue) == 0x000000, "Member 'AGNotificationManager_AreNotificationChannelsSupported::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.CancelNotification
// 0x0004 (0x0004 - 0x0000)
struct AGNotificationManager_CancelNotification final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_CancelNotification) == 0x000004, "Wrong alignment on AGNotificationManager_CancelNotification");
static_assert(sizeof(AGNotificationManager_CancelNotification) == 0x000004, "Wrong size on AGNotificationManager_CancelNotification");
static_assert(offsetof(AGNotificationManager_CancelNotification, ID) == 0x000000, "Member 'AGNotificationManager_CancelNotification::ID' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.CancelScheduledNotification
// 0x0004 (0x0004 - 0x0000)
struct AGNotificationManager_CancelScheduledNotification final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_CancelScheduledNotification) == 0x000004, "Wrong alignment on AGNotificationManager_CancelScheduledNotification");
static_assert(sizeof(AGNotificationManager_CancelScheduledNotification) == 0x000004, "Wrong size on AGNotificationManager_CancelScheduledNotification");
static_assert(offsetof(AGNotificationManager_CancelScheduledNotification, ID) == 0x000000, "Member 'AGNotificationManager_CancelScheduledNotification::ID' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.CreateNotificationChannel
// 0x0008 (0x0008 - 0x0000)
struct AGNotificationManager_CreateNotificationChannel final
{
public:
	class UAGNotificationChannel*                 Channel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_CreateNotificationChannel) == 0x000008, "Wrong alignment on AGNotificationManager_CreateNotificationChannel");
static_assert(sizeof(AGNotificationManager_CreateNotificationChannel) == 0x000008, "Wrong size on AGNotificationManager_CreateNotificationChannel");
static_assert(offsetof(AGNotificationManager_CreateNotificationChannel, Channel) == 0x000000, "Member 'AGNotificationManager_CreateNotificationChannel::Channel' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.CreateNotificationChannelGroup
// 0x0008 (0x0008 - 0x0000)
struct AGNotificationManager_CreateNotificationChannelGroup final
{
public:
	class UAGNotificationChannelGroup*            Group;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_CreateNotificationChannelGroup) == 0x000008, "Wrong alignment on AGNotificationManager_CreateNotificationChannelGroup");
static_assert(sizeof(AGNotificationManager_CreateNotificationChannelGroup) == 0x000008, "Wrong size on AGNotificationManager_CreateNotificationChannelGroup");
static_assert(offsetof(AGNotificationManager_CreateNotificationChannelGroup, Group) == 0x000000, "Member 'AGNotificationManager_CreateNotificationChannelGroup::Group' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.DeleteNotificationChannel
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationManager_DeleteNotificationChannel final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_DeleteNotificationChannel) == 0x000008, "Wrong alignment on AGNotificationManager_DeleteNotificationChannel");
static_assert(sizeof(AGNotificationManager_DeleteNotificationChannel) == 0x000010, "Wrong size on AGNotificationManager_DeleteNotificationChannel");
static_assert(offsetof(AGNotificationManager_DeleteNotificationChannel, ChannelId) == 0x000000, "Member 'AGNotificationManager_DeleteNotificationChannel::ChannelId' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.DeleteNotificationChannelGroup
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationManager_DeleteNotificationChannelGroup final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_DeleteNotificationChannelGroup) == 0x000008, "Wrong alignment on AGNotificationManager_DeleteNotificationChannelGroup");
static_assert(sizeof(AGNotificationManager_DeleteNotificationChannelGroup) == 0x000010, "Wrong size on AGNotificationManager_DeleteNotificationChannelGroup");
static_assert(offsetof(AGNotificationManager_DeleteNotificationChannelGroup, GroupId) == 0x000000, "Member 'AGNotificationManager_DeleteNotificationChannelGroup::GroupId' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.GetCurrentImportance
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationManager_GetCurrentImportance final
{
public:
	EChannelImportance                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_GetCurrentImportance) == 0x000001, "Wrong alignment on AGNotificationManager_GetCurrentImportance");
static_assert(sizeof(AGNotificationManager_GetCurrentImportance) == 0x000001, "Wrong size on AGNotificationManager_GetCurrentImportance");
static_assert(offsetof(AGNotificationManager_GetCurrentImportance, ReturnValue) == 0x000000, "Member 'AGNotificationManager_GetCurrentImportance::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.GetCurrentInterruptionFilter
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationManager_GetCurrentInterruptionFilter final
{
public:
	EInterruptionFilter                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_GetCurrentInterruptionFilter) == 0x000001, "Wrong alignment on AGNotificationManager_GetCurrentInterruptionFilter");
static_assert(sizeof(AGNotificationManager_GetCurrentInterruptionFilter) == 0x000001, "Wrong size on AGNotificationManager_GetCurrentInterruptionFilter");
static_assert(offsetof(AGNotificationManager_GetCurrentInterruptionFilter, ReturnValue) == 0x000000, "Member 'AGNotificationManager_GetCurrentInterruptionFilter::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.GetNotificationChannel
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationManager_GetNotificationChannel final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationChannel*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_GetNotificationChannel) == 0x000008, "Wrong alignment on AGNotificationManager_GetNotificationChannel");
static_assert(sizeof(AGNotificationManager_GetNotificationChannel) == 0x000018, "Wrong size on AGNotificationManager_GetNotificationChannel");
static_assert(offsetof(AGNotificationManager_GetNotificationChannel, ChannelId) == 0x000000, "Member 'AGNotificationManager_GetNotificationChannel::ChannelId' has a wrong offset!");
static_assert(offsetof(AGNotificationManager_GetNotificationChannel, ReturnValue) == 0x000010, "Member 'AGNotificationManager_GetNotificationChannel::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.GetNotificationChannelGroup
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationManager_GetNotificationChannelGroup final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationChannelGroup*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_GetNotificationChannelGroup) == 0x000008, "Wrong alignment on AGNotificationManager_GetNotificationChannelGroup");
static_assert(sizeof(AGNotificationManager_GetNotificationChannelGroup) == 0x000018, "Wrong size on AGNotificationManager_GetNotificationChannelGroup");
static_assert(offsetof(AGNotificationManager_GetNotificationChannelGroup, GroupId) == 0x000000, "Member 'AGNotificationManager_GetNotificationChannelGroup::GroupId' has a wrong offset!");
static_assert(offsetof(AGNotificationManager_GetNotificationChannelGroup, ReturnValue) == 0x000010, "Member 'AGNotificationManager_GetNotificationChannelGroup::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.GetNotificationChannelGroups
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationManager_GetNotificationChannelGroups final
{
public:
	TArray<class UAGNotificationChannelGroup*>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_GetNotificationChannelGroups) == 0x000008, "Wrong alignment on AGNotificationManager_GetNotificationChannelGroups");
static_assert(sizeof(AGNotificationManager_GetNotificationChannelGroups) == 0x000010, "Wrong size on AGNotificationManager_GetNotificationChannelGroups");
static_assert(offsetof(AGNotificationManager_GetNotificationChannelGroups, ReturnValue) == 0x000000, "Member 'AGNotificationManager_GetNotificationChannelGroups::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.GetNotificationChannels
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationManager_GetNotificationChannels final
{
public:
	TArray<class UAGNotificationChannel*>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_GetNotificationChannels) == 0x000008, "Wrong alignment on AGNotificationManager_GetNotificationChannels");
static_assert(sizeof(AGNotificationManager_GetNotificationChannels) == 0x000010, "Wrong size on AGNotificationManager_GetNotificationChannels");
static_assert(offsetof(AGNotificationManager_GetNotificationChannels, ReturnValue) == 0x000000, "Member 'AGNotificationManager_GetNotificationChannels::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.GetNotificationDataForKey
// 0x0020 (0x0020 - 0x0000)
struct AGNotificationManager_GetNotificationDataForKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_GetNotificationDataForKey) == 0x000008, "Wrong alignment on AGNotificationManager_GetNotificationDataForKey");
static_assert(sizeof(AGNotificationManager_GetNotificationDataForKey) == 0x000020, "Wrong size on AGNotificationManager_GetNotificationDataForKey");
static_assert(offsetof(AGNotificationManager_GetNotificationDataForKey, Key) == 0x000000, "Member 'AGNotificationManager_GetNotificationDataForKey::Key' has a wrong offset!");
static_assert(offsetof(AGNotificationManager_GetNotificationDataForKey, ReturnValue) == 0x000010, "Member 'AGNotificationManager_GetNotificationDataForKey::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.Notify
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationManager_Notify final
{
public:
	class UAGNotification*                        Notification;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGNotificationManager_Notify) == 0x000008, "Wrong alignment on AGNotificationManager_Notify");
static_assert(sizeof(AGNotificationManager_Notify) == 0x000010, "Wrong size on AGNotificationManager_Notify");
static_assert(offsetof(AGNotificationManager_Notify, Notification) == 0x000000, "Member 'AGNotificationManager_Notify::Notification' has a wrong offset!");
static_assert(offsetof(AGNotificationManager_Notify, ID) == 0x000008, "Member 'AGNotificationManager_Notify::ID' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.OpenNotificationChannelSettings
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationManager_OpenNotificationChannelSettings final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_OpenNotificationChannelSettings) == 0x000008, "Wrong alignment on AGNotificationManager_OpenNotificationChannelSettings");
static_assert(sizeof(AGNotificationManager_OpenNotificationChannelSettings) == 0x000010, "Wrong size on AGNotificationManager_OpenNotificationChannelSettings");
static_assert(offsetof(AGNotificationManager_OpenNotificationChannelSettings, ChannelId) == 0x000000, "Member 'AGNotificationManager_OpenNotificationChannelSettings::ChannelId' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.ScheduleNotification
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationManager_ScheduleNotification final
{
public:
	class UAGNotification*                        Notification;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              NotifyAfter;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_ScheduleNotification) == 0x000008, "Wrong alignment on AGNotificationManager_ScheduleNotification");
static_assert(sizeof(AGNotificationManager_ScheduleNotification) == 0x000018, "Wrong size on AGNotificationManager_ScheduleNotification");
static_assert(offsetof(AGNotificationManager_ScheduleNotification, Notification) == 0x000000, "Member 'AGNotificationManager_ScheduleNotification::Notification' has a wrong offset!");
static_assert(offsetof(AGNotificationManager_ScheduleNotification, ID) == 0x000008, "Member 'AGNotificationManager_ScheduleNotification::ID' has a wrong offset!");
static_assert(offsetof(AGNotificationManager_ScheduleNotification, NotifyAfter) == 0x000010, "Member 'AGNotificationManager_ScheduleNotification::NotifyAfter' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.ScheduleRepeatingNotification
// 0x0020 (0x0020 - 0x0000)
struct AGNotificationManager_ScheduleRepeatingNotification final
{
public:
	class UAGNotification*                        Notification;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              NotifyAfter;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              RepeatAfter;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_ScheduleRepeatingNotification) == 0x000008, "Wrong alignment on AGNotificationManager_ScheduleRepeatingNotification");
static_assert(sizeof(AGNotificationManager_ScheduleRepeatingNotification) == 0x000020, "Wrong size on AGNotificationManager_ScheduleRepeatingNotification");
static_assert(offsetof(AGNotificationManager_ScheduleRepeatingNotification, Notification) == 0x000000, "Member 'AGNotificationManager_ScheduleRepeatingNotification::Notification' has a wrong offset!");
static_assert(offsetof(AGNotificationManager_ScheduleRepeatingNotification, ID) == 0x000008, "Member 'AGNotificationManager_ScheduleRepeatingNotification::ID' has a wrong offset!");
static_assert(offsetof(AGNotificationManager_ScheduleRepeatingNotification, NotifyAfter) == 0x000010, "Member 'AGNotificationManager_ScheduleRepeatingNotification::NotifyAfter' has a wrong offset!");
static_assert(offsetof(AGNotificationManager_ScheduleRepeatingNotification, RepeatAfter) == 0x000018, "Member 'AGNotificationManager_ScheduleRepeatingNotification::RepeatAfter' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.SetCurrentInterruptionFilter
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationManager_SetCurrentInterruptionFilter final
{
public:
	EInterruptionFilter                           Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_SetCurrentInterruptionFilter) == 0x000001, "Wrong alignment on AGNotificationManager_SetCurrentInterruptionFilter");
static_assert(sizeof(AGNotificationManager_SetCurrentInterruptionFilter) == 0x000001, "Wrong size on AGNotificationManager_SetCurrentInterruptionFilter");
static_assert(offsetof(AGNotificationManager_SetCurrentInterruptionFilter, Filter) == 0x000000, "Member 'AGNotificationManager_SetCurrentInterruptionFilter::Filter' has a wrong offset!");

// Function AndroidGoodies.AGNotificationManager.WasApplicationOpenViaNotification
// 0x0001 (0x0001 - 0x0000)
struct AGNotificationManager_WasApplicationOpenViaNotification final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationManager_WasApplicationOpenViaNotification) == 0x000001, "Wrong alignment on AGNotificationManager_WasApplicationOpenViaNotification");
static_assert(sizeof(AGNotificationManager_WasApplicationOpenViaNotification) == 0x000001, "Wrong size on AGNotificationManager_WasApplicationOpenViaNotification");
static_assert(offsetof(AGNotificationManager_WasApplicationOpenViaNotification, ReturnValue) == 0x000000, "Member 'AGNotificationManager_WasApplicationOpenViaNotification::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationMessageStyle.CreateMessageStyle
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationMessageStyle_CreateMessageStyle final
{
public:
	class FString                                 UserDisplayName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationMessageStyle*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationMessageStyle_CreateMessageStyle) == 0x000008, "Wrong alignment on AGNotificationMessageStyle_CreateMessageStyle");
static_assert(sizeof(AGNotificationMessageStyle_CreateMessageStyle) == 0x000018, "Wrong size on AGNotificationMessageStyle_CreateMessageStyle");
static_assert(offsetof(AGNotificationMessageStyle_CreateMessageStyle, UserDisplayName) == 0x000000, "Member 'AGNotificationMessageStyle_CreateMessageStyle::UserDisplayName' has a wrong offset!");
static_assert(offsetof(AGNotificationMessageStyle_CreateMessageStyle, ReturnValue) == 0x000010, "Member 'AGNotificationMessageStyle_CreateMessageStyle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationMessageStyle.AddMessage
// 0x0030 (0x0030 - 0x0000)
struct AGNotificationMessageStyle_AddMessage final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sender;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationMessageStyle*            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationMessageStyle_AddMessage) == 0x000008, "Wrong alignment on AGNotificationMessageStyle_AddMessage");
static_assert(sizeof(AGNotificationMessageStyle_AddMessage) == 0x000030, "Wrong size on AGNotificationMessageStyle_AddMessage");
static_assert(offsetof(AGNotificationMessageStyle_AddMessage, Text) == 0x000000, "Member 'AGNotificationMessageStyle_AddMessage::Text' has a wrong offset!");
static_assert(offsetof(AGNotificationMessageStyle_AddMessage, Timestamp) == 0x000010, "Member 'AGNotificationMessageStyle_AddMessage::Timestamp' has a wrong offset!");
static_assert(offsetof(AGNotificationMessageStyle_AddMessage, Sender) == 0x000018, "Member 'AGNotificationMessageStyle_AddMessage::Sender' has a wrong offset!");
static_assert(offsetof(AGNotificationMessageStyle_AddMessage, ReturnValue) == 0x000028, "Member 'AGNotificationMessageStyle_AddMessage::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationMessageStyle.SetConversationTitle
// 0x0018 (0x0018 - 0x0000)
struct AGNotificationMessageStyle_SetConversationTitle final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGNotificationMessageStyle*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationMessageStyle_SetConversationTitle) == 0x000008, "Wrong alignment on AGNotificationMessageStyle_SetConversationTitle");
static_assert(sizeof(AGNotificationMessageStyle_SetConversationTitle) == 0x000018, "Wrong size on AGNotificationMessageStyle_SetConversationTitle");
static_assert(offsetof(AGNotificationMessageStyle_SetConversationTitle, Title) == 0x000000, "Member 'AGNotificationMessageStyle_SetConversationTitle::Title' has a wrong offset!");
static_assert(offsetof(AGNotificationMessageStyle_SetConversationTitle, ReturnValue) == 0x000010, "Member 'AGNotificationMessageStyle_SetConversationTitle::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGNotificationMessageStyle.SetGroupConversation
// 0x0010 (0x0010 - 0x0000)
struct AGNotificationMessageStyle_SetGroupConversation final
{
public:
	bool                                          IsGroupConversation;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGNotificationMessageStyle*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGNotificationMessageStyle_SetGroupConversation) == 0x000008, "Wrong alignment on AGNotificationMessageStyle_SetGroupConversation");
static_assert(sizeof(AGNotificationMessageStyle_SetGroupConversation) == 0x000010, "Wrong size on AGNotificationMessageStyle_SetGroupConversation");
static_assert(offsetof(AGNotificationMessageStyle_SetGroupConversation, IsGroupConversation) == 0x000000, "Member 'AGNotificationMessageStyle_SetGroupConversation::IsGroupConversation' has a wrong offset!");
static_assert(offsetof(AGNotificationMessageStyle_SetGroupConversation, ReturnValue) == 0x000008, "Member 'AGNotificationMessageStyle_SetGroupConversation::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGPickersBPL.ClearTexture
// 0x0008 (0x0008 - 0x0000)
struct AGPickersBPL_ClearTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGPickersBPL_ClearTexture) == 0x000008, "Wrong alignment on AGPickersBPL_ClearTexture");
static_assert(sizeof(AGPickersBPL_ClearTexture) == 0x000008, "Wrong size on AGPickersBPL_ClearTexture");
static_assert(offsetof(AGPickersBPL_ClearTexture, Texture) == 0x000000, "Member 'AGPickersBPL_ClearTexture::Texture' has a wrong offset!");

// Function AndroidGoodies.AGPickersBPL.GetChosenImagesData
// 0x0028 (0x0028 - 0x0000)
struct AGPickersBPL_GetChosenImagesData final
{
public:
	int32                                         Quality;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImageSize                                    MaxSize;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldGenerateThumbnails;                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowMultiple;                                     // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<class UAGChosenImage*>& Images)> OnImagesPickedCallback;                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Error)>   OnImagesPickErrorCallback;                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGPickersBPL_GetChosenImagesData) == 0x000004, "Wrong alignment on AGPickersBPL_GetChosenImagesData");
static_assert(sizeof(AGPickersBPL_GetChosenImagesData) == 0x000028, "Wrong size on AGPickersBPL_GetChosenImagesData");
static_assert(offsetof(AGPickersBPL_GetChosenImagesData, Quality) == 0x000000, "Member 'AGPickersBPL_GetChosenImagesData::Quality' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_GetChosenImagesData, MaxSize) == 0x000004, "Member 'AGPickersBPL_GetChosenImagesData::MaxSize' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_GetChosenImagesData, ShouldGenerateThumbnails) == 0x000005, "Member 'AGPickersBPL_GetChosenImagesData::ShouldGenerateThumbnails' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_GetChosenImagesData, AllowMultiple) == 0x000006, "Member 'AGPickersBPL_GetChosenImagesData::AllowMultiple' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_GetChosenImagesData, OnImagesPickedCallback) == 0x000008, "Member 'AGPickersBPL_GetChosenImagesData::OnImagesPickedCallback' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_GetChosenImagesData, OnImagesPickErrorCallback) == 0x000018, "Member 'AGPickersBPL_GetChosenImagesData::OnImagesPickErrorCallback' has a wrong offset!");

// Function AndroidGoodies.AGPickersBPL.GetPhotoDataFromCamera
// 0x0024 (0x0024 - 0x0000)
struct AGPickersBPL_GetPhotoDataFromCamera final
{
public:
	bool                                          ShouldGenerateThumbnails;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<class UAGChosenImage*>& Images)> OnPhotoTakenCallback;                              // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Error)>   OnPhotoTakeErrorCallback;                          // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGPickersBPL_GetPhotoDataFromCamera) == 0x000004, "Wrong alignment on AGPickersBPL_GetPhotoDataFromCamera");
static_assert(sizeof(AGPickersBPL_GetPhotoDataFromCamera) == 0x000024, "Wrong size on AGPickersBPL_GetPhotoDataFromCamera");
static_assert(offsetof(AGPickersBPL_GetPhotoDataFromCamera, ShouldGenerateThumbnails) == 0x000000, "Member 'AGPickersBPL_GetPhotoDataFromCamera::ShouldGenerateThumbnails' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_GetPhotoDataFromCamera, OnPhotoTakenCallback) == 0x000004, "Member 'AGPickersBPL_GetPhotoDataFromCamera::OnPhotoTakenCallback' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_GetPhotoDataFromCamera, OnPhotoTakeErrorCallback) == 0x000014, "Member 'AGPickersBPL_GetPhotoDataFromCamera::OnPhotoTakeErrorCallback' has a wrong offset!");

// Function AndroidGoodies.AGPickersBPL.GetTextureFromPath
// 0x0030 (0x0030 - 0x0000)
struct AGPickersBPL_GetTextureFromPath final
{
public:
	class FString                                 ImagePath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UTexture2D* Texture)>    OnTextureReadyCallback;                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Error)>   OnTextureErrorCallback;                            // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGPickersBPL_GetTextureFromPath) == 0x000008, "Wrong alignment on AGPickersBPL_GetTextureFromPath");
static_assert(sizeof(AGPickersBPL_GetTextureFromPath) == 0x000030, "Wrong size on AGPickersBPL_GetTextureFromPath");
static_assert(offsetof(AGPickersBPL_GetTextureFromPath, ImagePath) == 0x000000, "Member 'AGPickersBPL_GetTextureFromPath::ImagePath' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_GetTextureFromPath, OnTextureReadyCallback) == 0x000010, "Member 'AGPickersBPL_GetTextureFromPath::OnTextureReadyCallback' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_GetTextureFromPath, OnTextureErrorCallback) == 0x000020, "Member 'AGPickersBPL_GetTextureFromPath::OnTextureErrorCallback' has a wrong offset!");

// Function AndroidGoodies.AGPickersBPL.PickFilesFromLocalStorage
// 0x0024 (0x0024 - 0x0000)
struct AGPickersBPL_PickFilesFromLocalStorage final
{
public:
	bool                                          AllowMultiple;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<class UAGChosenFile*>& Files)> OnFilesPickedCallback;                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Error)>   OnFilesPickErrorCallback;                          // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGPickersBPL_PickFilesFromLocalStorage) == 0x000004, "Wrong alignment on AGPickersBPL_PickFilesFromLocalStorage");
static_assert(sizeof(AGPickersBPL_PickFilesFromLocalStorage) == 0x000024, "Wrong size on AGPickersBPL_PickFilesFromLocalStorage");
static_assert(offsetof(AGPickersBPL_PickFilesFromLocalStorage, AllowMultiple) == 0x000000, "Member 'AGPickersBPL_PickFilesFromLocalStorage::AllowMultiple' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_PickFilesFromLocalStorage, OnFilesPickedCallback) == 0x000004, "Member 'AGPickersBPL_PickFilesFromLocalStorage::OnFilesPickedCallback' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_PickFilesFromLocalStorage, OnFilesPickErrorCallback) == 0x000014, "Member 'AGPickersBPL_PickFilesFromLocalStorage::OnFilesPickErrorCallback' has a wrong offset!");

// Function AndroidGoodies.AGPickersBPL.PickImageFromGallery
// 0x0028 (0x0028 - 0x0000)
struct AGPickersBPL_PickImageFromGallery final
{
public:
	int32                                         Quality;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImageSize                                    MaxSize;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldGenerateThumbnails;                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UTexture2D* Texture)>    OnImagePickedCallback;                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Error)>   OnImagePickErrorCallback;                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGPickersBPL_PickImageFromGallery) == 0x000004, "Wrong alignment on AGPickersBPL_PickImageFromGallery");
static_assert(sizeof(AGPickersBPL_PickImageFromGallery) == 0x000028, "Wrong size on AGPickersBPL_PickImageFromGallery");
static_assert(offsetof(AGPickersBPL_PickImageFromGallery, Quality) == 0x000000, "Member 'AGPickersBPL_PickImageFromGallery::Quality' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_PickImageFromGallery, MaxSize) == 0x000004, "Member 'AGPickersBPL_PickImageFromGallery::MaxSize' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_PickImageFromGallery, ShouldGenerateThumbnails) == 0x000005, "Member 'AGPickersBPL_PickImageFromGallery::ShouldGenerateThumbnails' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_PickImageFromGallery, OnImagePickedCallback) == 0x000008, "Member 'AGPickersBPL_PickImageFromGallery::OnImagePickedCallback' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_PickImageFromGallery, OnImagePickErrorCallback) == 0x000018, "Member 'AGPickersBPL_PickImageFromGallery::OnImagePickErrorCallback' has a wrong offset!");

// Function AndroidGoodies.AGPickersBPL.PickPhotoFromCamera
// 0x0024 (0x0024 - 0x0000)
struct AGPickersBPL_PickPhotoFromCamera final
{
public:
	bool                                          ShouldGenerateThumbnails;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UTexture2D* Texture)>    OnPhotoPickedCallback;                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Error)>   OnPhotoPickErrorCallback;                          // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGPickersBPL_PickPhotoFromCamera) == 0x000004, "Wrong alignment on AGPickersBPL_PickPhotoFromCamera");
static_assert(sizeof(AGPickersBPL_PickPhotoFromCamera) == 0x000024, "Wrong size on AGPickersBPL_PickPhotoFromCamera");
static_assert(offsetof(AGPickersBPL_PickPhotoFromCamera, ShouldGenerateThumbnails) == 0x000000, "Member 'AGPickersBPL_PickPhotoFromCamera::ShouldGenerateThumbnails' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_PickPhotoFromCamera, OnPhotoPickedCallback) == 0x000004, "Member 'AGPickersBPL_PickPhotoFromCamera::OnPhotoPickedCallback' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_PickPhotoFromCamera, OnPhotoPickErrorCallback) == 0x000014, "Member 'AGPickersBPL_PickPhotoFromCamera::OnPhotoPickErrorCallback' has a wrong offset!");

// Function AndroidGoodies.AGPickersBPL.SaveImageToGallery
// 0x0018 (0x0018 - 0x0000)
struct AGPickersBPL_SaveImageToGallery final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGPickersBPL_SaveImageToGallery) == 0x000008, "Wrong alignment on AGPickersBPL_SaveImageToGallery");
static_assert(sizeof(AGPickersBPL_SaveImageToGallery) == 0x000018, "Wrong size on AGPickersBPL_SaveImageToGallery");
static_assert(offsetof(AGPickersBPL_SaveImageToGallery, Image) == 0x000000, "Member 'AGPickersBPL_SaveImageToGallery::Image' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_SaveImageToGallery, Filename) == 0x000008, "Member 'AGPickersBPL_SaveImageToGallery::Filename' has a wrong offset!");

// Function AndroidGoodies.AGPickersBPL.TakeScreenShot
// 0x0024 (0x0024 - 0x0000)
struct AGPickersBPL_TakeScreenShot final
{
public:
	TDelegate<void(class UTexture2D* Texture)>    OnScreenShotTakenCallback;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Error)>   OnErrorCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ShowUI;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGPickersBPL_TakeScreenShot) == 0x000004, "Wrong alignment on AGPickersBPL_TakeScreenShot");
static_assert(sizeof(AGPickersBPL_TakeScreenShot) == 0x000024, "Wrong size on AGPickersBPL_TakeScreenShot");
static_assert(offsetof(AGPickersBPL_TakeScreenShot, OnScreenShotTakenCallback) == 0x000000, "Member 'AGPickersBPL_TakeScreenShot::OnScreenShotTakenCallback' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_TakeScreenShot, OnErrorCallback) == 0x000010, "Member 'AGPickersBPL_TakeScreenShot::OnErrorCallback' has a wrong offset!");
static_assert(offsetof(AGPickersBPL_TakeScreenShot, ShowUI) == 0x000020, "Member 'AGPickersBPL_TakeScreenShot::ShowUI' has a wrong offset!");

// Function AndroidGoodies.AGProgressDialogBPL.CreateProgressDialog
// 0x0010 (0x0010 - 0x0000)
struct AGProgressDialogBPL_CreateProgressDialog final
{
public:
	TScriptInterface<class IAGProgressDialogInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGProgressDialogBPL_CreateProgressDialog) == 0x000008, "Wrong alignment on AGProgressDialogBPL_CreateProgressDialog");
static_assert(sizeof(AGProgressDialogBPL_CreateProgressDialog) == 0x000010, "Wrong size on AGProgressDialogBPL_CreateProgressDialog");
static_assert(offsetof(AGProgressDialogBPL_CreateProgressDialog, ReturnValue) == 0x000000, "Member 'AGProgressDialogBPL_CreateProgressDialog::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGProgressDialogInterface.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct AGProgressDialogInterface_SetProgress final
{
public:
	int32                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGProgressDialogInterface_SetProgress) == 0x000004, "Wrong alignment on AGProgressDialogInterface_SetProgress");
static_assert(sizeof(AGProgressDialogInterface_SetProgress) == 0x000004, "Wrong size on AGProgressDialogInterface_SetProgress");
static_assert(offsetof(AGProgressDialogInterface_SetProgress, Progress) == 0x000000, "Member 'AGProgressDialogInterface_SetProgress::Progress' has a wrong offset!");

// Function AndroidGoodies.AGProgressDialogInterface.Show
// 0x0030 (0x0030 - 0x0000)
struct AGProgressDialogInterface_Show final
{
public:
	struct FAGProgressDialogData                  ProgressDialogData;                                // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGProgressDialogInterface_Show) == 0x000008, "Wrong alignment on AGProgressDialogInterface_Show");
static_assert(sizeof(AGProgressDialogInterface_Show) == 0x000030, "Wrong size on AGProgressDialogInterface_Show");
static_assert(offsetof(AGProgressDialogInterface_Show, ProgressDialogData) == 0x000000, "Member 'AGProgressDialogInterface_Show::ProgressDialogData' has a wrong offset!");

// Function AndroidGoodies.ScreenShotHelper.ProcessScreenShot
// 0x0018 (0x0018 - 0x0000)
struct ScreenShotHelper_ProcessScreenShot final
{
public:
	int32                                         InSizeX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSizeY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         InImageData;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenShotHelper_ProcessScreenShot) == 0x000008, "Wrong alignment on ScreenShotHelper_ProcessScreenShot");
static_assert(sizeof(ScreenShotHelper_ProcessScreenShot) == 0x000018, "Wrong size on ScreenShotHelper_ProcessScreenShot");
static_assert(offsetof(ScreenShotHelper_ProcessScreenShot, InSizeX) == 0x000000, "Member 'ScreenShotHelper_ProcessScreenShot::InSizeX' has a wrong offset!");
static_assert(offsetof(ScreenShotHelper_ProcessScreenShot, InSizeY) == 0x000004, "Member 'ScreenShotHelper_ProcessScreenShot::InSizeY' has a wrong offset!");
static_assert(offsetof(ScreenShotHelper_ProcessScreenShot, InImageData) == 0x000008, "Member 'ScreenShotHelper_ProcessScreenShot::InImageData' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendEMail
// 0x0070 (0x0070 - 0x0000)
struct AGShareBPL_SendEMail final
{
public:
	struct FAGShareEmailData                      EmailData;                                         // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	bool                                          ShowChooser;                                       // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChooserTitle;                                      // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendEMail) == 0x000008, "Wrong alignment on AGShareBPL_SendEMail");
static_assert(sizeof(AGShareBPL_SendEMail) == 0x000070, "Wrong size on AGShareBPL_SendEMail");
static_assert(offsetof(AGShareBPL_SendEMail, EmailData) == 0x000000, "Member 'AGShareBPL_SendEMail::EmailData' has a wrong offset!");
static_assert(offsetof(AGShareBPL_SendEMail, ShowChooser) == 0x000058, "Member 'AGShareBPL_SendEMail::ShowChooser' has a wrong offset!");
static_assert(offsetof(AGShareBPL_SendEMail, ChooserTitle) == 0x000060, "Member 'AGShareBPL_SendEMail::ChooserTitle' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendFacebookImage
// 0x0008 (0x0008 - 0x0000)
struct AGShareBPL_SendFacebookImage final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendFacebookImage) == 0x000008, "Wrong alignment on AGShareBPL_SendFacebookImage");
static_assert(sizeof(AGShareBPL_SendFacebookImage) == 0x000008, "Wrong size on AGShareBPL_SendFacebookImage");
static_assert(offsetof(AGShareBPL_SendFacebookImage, Image) == 0x000000, "Member 'AGShareBPL_SendFacebookImage::Image' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendFacebookText
// 0x0010 (0x0010 - 0x0000)
struct AGShareBPL_SendFacebookText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendFacebookText) == 0x000008, "Wrong alignment on AGShareBPL_SendFacebookText");
static_assert(sizeof(AGShareBPL_SendFacebookText) == 0x000010, "Wrong size on AGShareBPL_SendFacebookText");
static_assert(offsetof(AGShareBPL_SendFacebookText, Text) == 0x000000, "Member 'AGShareBPL_SendFacebookText::Text' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendMultipleImagesEMail
// 0x0080 (0x0080 - 0x0000)
struct AGShareBPL_SendMultipleImagesEMail final
{
public:
	struct FAGShareEmailData                      EmailData;                                         // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     ExtraImages;                                       // 0x0058(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ShowChooser;                                       // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChooserTitle;                                      // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendMultipleImagesEMail) == 0x000008, "Wrong alignment on AGShareBPL_SendMultipleImagesEMail");
static_assert(sizeof(AGShareBPL_SendMultipleImagesEMail) == 0x000080, "Wrong size on AGShareBPL_SendMultipleImagesEMail");
static_assert(offsetof(AGShareBPL_SendMultipleImagesEMail, EmailData) == 0x000000, "Member 'AGShareBPL_SendMultipleImagesEMail::EmailData' has a wrong offset!");
static_assert(offsetof(AGShareBPL_SendMultipleImagesEMail, ExtraImages) == 0x000058, "Member 'AGShareBPL_SendMultipleImagesEMail::ExtraImages' has a wrong offset!");
static_assert(offsetof(AGShareBPL_SendMultipleImagesEMail, ShowChooser) == 0x000068, "Member 'AGShareBPL_SendMultipleImagesEMail::ShowChooser' has a wrong offset!");
static_assert(offsetof(AGShareBPL_SendMultipleImagesEMail, ChooserTitle) == 0x000070, "Member 'AGShareBPL_SendMultipleImagesEMail::ChooserTitle' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendSmsSilently
// 0x0020 (0x0020 - 0x0000)
struct AGShareBPL_SendSmsSilently final
{
public:
	class FString                                 PhoneNumber;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendSmsSilently) == 0x000008, "Wrong alignment on AGShareBPL_SendSmsSilently");
static_assert(sizeof(AGShareBPL_SendSmsSilently) == 0x000020, "Wrong size on AGShareBPL_SendSmsSilently");
static_assert(offsetof(AGShareBPL_SendSmsSilently, PhoneNumber) == 0x000000, "Member 'AGShareBPL_SendSmsSilently::PhoneNumber' has a wrong offset!");
static_assert(offsetof(AGShareBPL_SendSmsSilently, Message) == 0x000010, "Member 'AGShareBPL_SendSmsSilently::Message' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendSmsWithDefaultApp
// 0x0038 (0x0038 - 0x0000)
struct AGShareBPL_SendSmsWithDefaultApp final
{
public:
	class FString                                 PhoneNumber;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowChooser;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChooserTitle;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendSmsWithDefaultApp) == 0x000008, "Wrong alignment on AGShareBPL_SendSmsWithDefaultApp");
static_assert(sizeof(AGShareBPL_SendSmsWithDefaultApp) == 0x000038, "Wrong size on AGShareBPL_SendSmsWithDefaultApp");
static_assert(offsetof(AGShareBPL_SendSmsWithDefaultApp, PhoneNumber) == 0x000000, "Member 'AGShareBPL_SendSmsWithDefaultApp::PhoneNumber' has a wrong offset!");
static_assert(offsetof(AGShareBPL_SendSmsWithDefaultApp, Message) == 0x000010, "Member 'AGShareBPL_SendSmsWithDefaultApp::Message' has a wrong offset!");
static_assert(offsetof(AGShareBPL_SendSmsWithDefaultApp, ShowChooser) == 0x000020, "Member 'AGShareBPL_SendSmsWithDefaultApp::ShowChooser' has a wrong offset!");
static_assert(offsetof(AGShareBPL_SendSmsWithDefaultApp, ChooserTitle) == 0x000028, "Member 'AGShareBPL_SendSmsWithDefaultApp::ChooserTitle' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendTelegramImage
// 0x0008 (0x0008 - 0x0000)
struct AGShareBPL_SendTelegramImage final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendTelegramImage) == 0x000008, "Wrong alignment on AGShareBPL_SendTelegramImage");
static_assert(sizeof(AGShareBPL_SendTelegramImage) == 0x000008, "Wrong size on AGShareBPL_SendTelegramImage");
static_assert(offsetof(AGShareBPL_SendTelegramImage, Image) == 0x000000, "Member 'AGShareBPL_SendTelegramImage::Image' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendTelegramText
// 0x0010 (0x0010 - 0x0000)
struct AGShareBPL_SendTelegramText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendTelegramText) == 0x000008, "Wrong alignment on AGShareBPL_SendTelegramText");
static_assert(sizeof(AGShareBPL_SendTelegramText) == 0x000010, "Wrong size on AGShareBPL_SendTelegramText");
static_assert(offsetof(AGShareBPL_SendTelegramText, Text) == 0x000000, "Member 'AGShareBPL_SendTelegramText::Text' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendViberImage
// 0x0008 (0x0008 - 0x0000)
struct AGShareBPL_SendViberImage final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendViberImage) == 0x000008, "Wrong alignment on AGShareBPL_SendViberImage");
static_assert(sizeof(AGShareBPL_SendViberImage) == 0x000008, "Wrong size on AGShareBPL_SendViberImage");
static_assert(offsetof(AGShareBPL_SendViberImage, Image) == 0x000000, "Member 'AGShareBPL_SendViberImage::Image' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendViberText
// 0x0010 (0x0010 - 0x0000)
struct AGShareBPL_SendViberText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendViberText) == 0x000008, "Wrong alignment on AGShareBPL_SendViberText");
static_assert(sizeof(AGShareBPL_SendViberText) == 0x000010, "Wrong size on AGShareBPL_SendViberText");
static_assert(offsetof(AGShareBPL_SendViberText, Text) == 0x000000, "Member 'AGShareBPL_SendViberText::Text' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendWhatsAppImage
// 0x0008 (0x0008 - 0x0000)
struct AGShareBPL_SendWhatsAppImage final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendWhatsAppImage) == 0x000008, "Wrong alignment on AGShareBPL_SendWhatsAppImage");
static_assert(sizeof(AGShareBPL_SendWhatsAppImage) == 0x000008, "Wrong size on AGShareBPL_SendWhatsAppImage");
static_assert(offsetof(AGShareBPL_SendWhatsAppImage, Image) == 0x000000, "Member 'AGShareBPL_SendWhatsAppImage::Image' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.SendWhatsAppText
// 0x0010 (0x0010 - 0x0000)
struct AGShareBPL_SendWhatsAppText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_SendWhatsAppText) == 0x000008, "Wrong alignment on AGShareBPL_SendWhatsAppText");
static_assert(sizeof(AGShareBPL_SendWhatsAppText) == 0x000010, "Wrong size on AGShareBPL_SendWhatsAppText");
static_assert(offsetof(AGShareBPL_SendWhatsAppText, Text) == 0x000000, "Member 'AGShareBPL_SendWhatsAppText::Text' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.ShareImage
// 0x0020 (0x0020 - 0x0000)
struct AGShareBPL_ShareImage final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowChooser;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChooserTitle;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_ShareImage) == 0x000008, "Wrong alignment on AGShareBPL_ShareImage");
static_assert(sizeof(AGShareBPL_ShareImage) == 0x000020, "Wrong size on AGShareBPL_ShareImage");
static_assert(offsetof(AGShareBPL_ShareImage, Image) == 0x000000, "Member 'AGShareBPL_ShareImage::Image' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareImage, ShowChooser) == 0x000008, "Member 'AGShareBPL_ShareImage::ShowChooser' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareImage, ChooserTitle) == 0x000010, "Member 'AGShareBPL_ShareImage::ChooserTitle' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.ShareInstagram
// 0x0008 (0x0008 - 0x0000)
struct AGShareBPL_ShareInstagram final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_ShareInstagram) == 0x000008, "Wrong alignment on AGShareBPL_ShareInstagram");
static_assert(sizeof(AGShareBPL_ShareInstagram) == 0x000008, "Wrong size on AGShareBPL_ShareInstagram");
static_assert(offsetof(AGShareBPL_ShareInstagram, Image) == 0x000000, "Member 'AGShareBPL_ShareInstagram::Image' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.ShareText
// 0x0038 (0x0038 - 0x0000)
struct AGShareBPL_ShareText final
{
public:
	class FString                                 Subject;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowChooser;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChooserTitle;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_ShareText) == 0x000008, "Wrong alignment on AGShareBPL_ShareText");
static_assert(sizeof(AGShareBPL_ShareText) == 0x000038, "Wrong size on AGShareBPL_ShareText");
static_assert(offsetof(AGShareBPL_ShareText, Subject) == 0x000000, "Member 'AGShareBPL_ShareText::Subject' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareText, Text) == 0x000010, "Member 'AGShareBPL_ShareText::Text' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareText, ShowChooser) == 0x000020, "Member 'AGShareBPL_ShareText::ShowChooser' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareText, ChooserTitle) == 0x000028, "Member 'AGShareBPL_ShareText::ChooserTitle' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.ShareTextWithImage
// 0x0040 (0x0040 - 0x0000)
struct AGShareBPL_ShareTextWithImage final
{
public:
	class FString                                 Subject;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Image;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowChooser;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChooserTitle;                                      // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_ShareTextWithImage) == 0x000008, "Wrong alignment on AGShareBPL_ShareTextWithImage");
static_assert(sizeof(AGShareBPL_ShareTextWithImage) == 0x000040, "Wrong size on AGShareBPL_ShareTextWithImage");
static_assert(offsetof(AGShareBPL_ShareTextWithImage, Subject) == 0x000000, "Member 'AGShareBPL_ShareTextWithImage::Subject' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareTextWithImage, Text) == 0x000010, "Member 'AGShareBPL_ShareTextWithImage::Text' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareTextWithImage, Image) == 0x000020, "Member 'AGShareBPL_ShareTextWithImage::Image' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareTextWithImage, ShowChooser) == 0x000028, "Member 'AGShareBPL_ShareTextWithImage::ShowChooser' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareTextWithImage, ChooserTitle) == 0x000030, "Member 'AGShareBPL_ShareTextWithImage::ChooserTitle' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.ShareVideo
// 0x0028 (0x0028 - 0x0000)
struct AGShareBPL_ShareVideo final
{
public:
	class FString                                 VideoPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowChooser;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChooserTitle;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_ShareVideo) == 0x000008, "Wrong alignment on AGShareBPL_ShareVideo");
static_assert(sizeof(AGShareBPL_ShareVideo) == 0x000028, "Wrong size on AGShareBPL_ShareVideo");
static_assert(offsetof(AGShareBPL_ShareVideo, VideoPath) == 0x000000, "Member 'AGShareBPL_ShareVideo::VideoPath' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareVideo, ShowChooser) == 0x000010, "Member 'AGShareBPL_ShareVideo::ShowChooser' has a wrong offset!");
static_assert(offsetof(AGShareBPL_ShareVideo, ChooserTitle) == 0x000018, "Member 'AGShareBPL_ShareVideo::ChooserTitle' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.TweetText
// 0x0010 (0x0010 - 0x0000)
struct AGShareBPL_TweetText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_TweetText) == 0x000008, "Wrong alignment on AGShareBPL_TweetText");
static_assert(sizeof(AGShareBPL_TweetText) == 0x000010, "Wrong size on AGShareBPL_TweetText");
static_assert(offsetof(AGShareBPL_TweetText, Text) == 0x000000, "Member 'AGShareBPL_TweetText::Text' has a wrong offset!");

// Function AndroidGoodies.AGShareBPL.TweetTextWithImage
// 0x0018 (0x0018 - 0x0000)
struct AGShareBPL_TweetTextWithImage final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Image;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGShareBPL_TweetTextWithImage) == 0x000008, "Wrong alignment on AGShareBPL_TweetTextWithImage");
static_assert(sizeof(AGShareBPL_TweetTextWithImage) == 0x000018, "Wrong size on AGShareBPL_TweetTextWithImage");
static_assert(offsetof(AGShareBPL_TweetTextWithImage, Text) == 0x000000, "Member 'AGShareBPL_TweetTextWithImage::Text' has a wrong offset!");
static_assert(offsetof(AGShareBPL_TweetTextWithImage, Image) == 0x000010, "Member 'AGShareBPL_TweetTextWithImage::Image' has a wrong offset!");

// Function AndroidGoodies.AGToastBPL.ShowToast
// 0x0018 (0x0018 - 0x0000)
struct AGToastBPL_ShowToast final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EToastLength                                  Length;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AGToastBPL_ShowToast) == 0x000008, "Wrong alignment on AGToastBPL_ShowToast");
static_assert(sizeof(AGToastBPL_ShowToast) == 0x000018, "Wrong size on AGToastBPL_ShowToast");
static_assert(offsetof(AGToastBPL_ShowToast, Message) == 0x000000, "Member 'AGToastBPL_ShowToast::Message' has a wrong offset!");
static_assert(offsetof(AGToastBPL_ShowToast, Length) == 0x000010, "Member 'AGToastBPL_ShowToast::Length' has a wrong offset!");

// Function AndroidGoodies.AGVibrationEffect.VibrationEffectOneShot
// 0x0010 (0x0010 - 0x0000)
struct AGVibrationEffect_VibrationEffectOneShot final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amplitude;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAGVibrationEffect*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGVibrationEffect_VibrationEffectOneShot) == 0x000008, "Wrong alignment on AGVibrationEffect_VibrationEffectOneShot");
static_assert(sizeof(AGVibrationEffect_VibrationEffectOneShot) == 0x000010, "Wrong size on AGVibrationEffect_VibrationEffectOneShot");
static_assert(offsetof(AGVibrationEffect_VibrationEffectOneShot, Seconds) == 0x000000, "Member 'AGVibrationEffect_VibrationEffectOneShot::Seconds' has a wrong offset!");
static_assert(offsetof(AGVibrationEffect_VibrationEffectOneShot, Amplitude) == 0x000004, "Member 'AGVibrationEffect_VibrationEffectOneShot::Amplitude' has a wrong offset!");
static_assert(offsetof(AGVibrationEffect_VibrationEffectOneShot, ReturnValue) == 0x000008, "Member 'AGVibrationEffect_VibrationEffectOneShot::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGVibrationEffect.VibrationEffectWaveForm
// 0x0020 (0x0020 - 0x0000)
struct AGVibrationEffect_VibrationEffectWaveForm final
{
public:
	TArray<float>                                 Timings;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Repeat;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGVibrationEffect*                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGVibrationEffect_VibrationEffectWaveForm) == 0x000008, "Wrong alignment on AGVibrationEffect_VibrationEffectWaveForm");
static_assert(sizeof(AGVibrationEffect_VibrationEffectWaveForm) == 0x000020, "Wrong size on AGVibrationEffect_VibrationEffectWaveForm");
static_assert(offsetof(AGVibrationEffect_VibrationEffectWaveForm, Timings) == 0x000000, "Member 'AGVibrationEffect_VibrationEffectWaveForm::Timings' has a wrong offset!");
static_assert(offsetof(AGVibrationEffect_VibrationEffectWaveForm, Repeat) == 0x000010, "Member 'AGVibrationEffect_VibrationEffectWaveForm::Repeat' has a wrong offset!");
static_assert(offsetof(AGVibrationEffect_VibrationEffectWaveForm, ReturnValue) == 0x000018, "Member 'AGVibrationEffect_VibrationEffectWaveForm::ReturnValue' has a wrong offset!");

// Function AndroidGoodies.AGVibrationEffect.VibrationEffectWaveFormWithAmplitudes
// 0x0030 (0x0030 - 0x0000)
struct AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes final
{
public:
	TArray<float>                                 Timings;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Amplitudes;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Repeat;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAGVibrationEffect*                     ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes) == 0x000008, "Wrong alignment on AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes");
static_assert(sizeof(AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes) == 0x000030, "Wrong size on AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes");
static_assert(offsetof(AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes, Timings) == 0x000000, "Member 'AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes::Timings' has a wrong offset!");
static_assert(offsetof(AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes, Amplitudes) == 0x000010, "Member 'AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes::Amplitudes' has a wrong offset!");
static_assert(offsetof(AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes, Repeat) == 0x000020, "Member 'AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes::Repeat' has a wrong offset!");
static_assert(offsetof(AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes, ReturnValue) == 0x000028, "Member 'AGVibrationEffect_VibrationEffectWaveFormWithAmplitudes::ReturnValue' has a wrong offset!");

}

