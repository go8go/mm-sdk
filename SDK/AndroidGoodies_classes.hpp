#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AndroidGoodies

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "AndroidGoodies_structs.hpp"


namespace SDK
{

// Class AndroidGoodies.AGAlarmClock
// 0x0000 (0x0028 - 0x0028)
class UAGAlarmClock final : public UBlueprintFunctionLibrary
{
public:
	static bool CanSetAlarm();
	static bool CanSetTimer();
	static void SetAlarm(int32 Hour, int32 Minute, const class FString& Message, const struct FAGAlarmDaysData& Days, bool Vibrate, bool SkipUi);
	static void SetTimer(int32 LengthSeconds, const class FString& Message, bool SkipUi);
	static void ShowAllAlarms();
	static void ShowAllTimers();
	static void SnoozeAlarm(int32 SnoozeDurationMinutes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGAlarmClock">();
	}
	static class UAGAlarmClock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGAlarmClock>();
	}
};
static_assert(alignof(UAGAlarmClock) == 0x000008, "Wrong alignment on UAGAlarmClock");
static_assert(sizeof(UAGAlarmClock) == 0x000028, "Wrong size on UAGAlarmClock");

// Class AndroidGoodies.AGApps
// 0x0000 (0x0028 - 0x0028)
class UAGApps final : public UBlueprintFunctionLibrary
{
public:
	static void CallPhoneNumber(const class FString& Number);
	static void DialPhoneNumber(const class FString& Number);
	static void DownloadAndInstallApk(const class FString& DownloadUrl, const class FString& DownloadTitle, const class FString& DownloadDescription, const TDelegate<void(const class FString& Error)>& OnError);
	static bool HasPhoneApp();
	static void InstallApkFromFile(const class FString& FilePath, const TDelegate<void(const class FString& Error)>& OnError);
	static void OpenAnotherApplication(const class FString& PackageName);
	static void OpenFacebookProfile(const class FString& ProfileId);
	static void OpenInstagramProfile(const class FString& ProfileId);
	static void OpenTwitterProfile(const class FString& ProfileId);
	static void OpenYoutubeVideo(const class FString& VideoId);
	static void UninstallPackage(const class FString& PackageName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGApps">();
	}
	static class UAGApps* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGApps>();
	}
};
static_assert(alignof(UAGApps) == 0x000008, "Wrong alignment on UAGApps");
static_assert(sizeof(UAGApps) == 0x000028, "Wrong size on UAGApps");

// Class AndroidGoodies.AGChosenFile
// 0x0000 (0x0028 - 0x0028)
class UAGChosenFile : public UObject
{
public:
	struct FDateTime GetCreatedAt();
	class FString GetDisplayName();
	class FString GetFileExtensionFromMimeType();
	class FString GetFileExtensionFromMimeTypeWithoutDot();
	class FString GetHumanReadableSize(bool bytesRounded);
	class FString GetMimeType();
	class FString GetOriginalPath();
	int64 GetSize();
	bool IsSuccess();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGChosenFile">();
	}
	static class UAGChosenFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGChosenFile>();
	}
};
static_assert(alignof(UAGChosenFile) == 0x000008, "Wrong alignment on UAGChosenFile");
static_assert(sizeof(UAGChosenFile) == 0x000028, "Wrong size on UAGChosenFile");

// Class AndroidGoodies.AGChosenImage
// 0x0000 (0x0028 - 0x0028)
class UAGChosenImage final : public UAGChosenFile
{
public:
	int32 GetHeight();
	int32 GetOrientation();
	class FString GetOrientationName();
	class FString GetThumbnailPath();
	class FString GetThumbnailSmallPath();
	int32 GetWidth();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGChosenImage">();
	}
	static class UAGChosenImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGChosenImage>();
	}
};
static_assert(alignof(UAGChosenImage) == 0x000008, "Wrong alignment on UAGChosenImage");
static_assert(sizeof(UAGChosenImage) == 0x000028, "Wrong size on UAGChosenImage");

// Class AndroidGoodies.AGContactsBPL
// 0x0000 (0x0028 - 0x0028)
class UAGContactsBPL final : public UBlueprintFunctionLibrary
{
public:
	static bool AddContact(const struct FAGContact& Contact);
	static TArray<struct FAGContact> GetAllContacts();
	static TArray<struct FAGContact> GetContactsWithName(const class FString& Name_0);
	static TArray<struct FAGContact> GetContactsWithNumber(const class FString& Number);
	static class FString GetUserPhoneNumber();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGContactsBPL">();
	}
	static class UAGContactsBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGContactsBPL>();
	}
};
static_assert(alignof(UAGContactsBPL) == 0x000008, "Wrong alignment on UAGContactsBPL");
static_assert(sizeof(UAGContactsBPL) == 0x000028, "Wrong size on UAGContactsBPL");

// Class AndroidGoodies.AGDateTimePickerBPL
// 0x0000 (0x0028 - 0x0028)
class UAGDateTimePickerBPL final : public UBlueprintFunctionLibrary
{
public:
	static void ShowDatePicker(const struct FDateTime& InitialDate, const TDelegate<void(int32 Year, int32 Month, int32 Day)>& OnDateSetCallback, const TDelegate<void()>& OnCancelCallback, EDialogTheme Theme);
	static void ShowDatePickerWithLimits(const struct FDateTime& InitialDate, const TDelegate<void(int32 Year, int32 Month, int32 Day)>& OnDateSetCallback, const TDelegate<void()>& OnCancelCallback, const struct FDateTime& FromDate, const struct FDateTime& ToDate, EDialogTheme Theme);
	static void ShowTimePicker(int32 Hour, int32 Minute, const TDelegate<void(int32 Hour, int32 Minute)>& OnTimeSetCallback, const TDelegate<void()>& OnCancelCallback, EDialogTheme Theme, bool Is24HourView);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGDateTimePickerBPL">();
	}
	static class UAGDateTimePickerBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGDateTimePickerBPL>();
	}
};
static_assert(alignof(UAGDateTimePickerBPL) == 0x000008, "Wrong alignment on UAGDateTimePickerBPL");
static_assert(sizeof(UAGDateTimePickerBPL) == 0x000028, "Wrong size on UAGDateTimePickerBPL");

// Class AndroidGoodies.AGDeviceInfo
// 0x0000 (0x0028 - 0x0028)
class UAGDeviceInfo final : public UBlueprintFunctionLibrary
{
public:
	static class FString GetAndroidId();
	static class FString GetApplicationPackageName();
	static class FString GetBaseOs();
	static class FString GetBoard();
	static class FString GetBootloader();
	static class FString GetBrand();
	static class FString GetCodeName();
	static class FString GetDevice();
	static class FString GetDisplay();
	static class FString GetHardware();
	static class FString GetManufacturer();
	static class FString GetModel();
	static class FString GetProduct();
	static class FString GetRadio();
	static class FString GetRelease();
	static int32 GetSdkInt();
	static class FString GetSerial();
	static class FString GetTags();
	static class FString GetType();
	static bool HasCamera();
	static bool HasCameraAny();
	static bool HasCameraAr();
	static bool HasCameraAutofocus();
	static bool HasCameraCapabilityManualPostprocessing();
	static bool HasCameraCapabilityManualSensor();
	static bool HasCameraCapabilityRaw();
	static bool HasCameraExternal();
	static bool HasCameraFlash();
	static bool HasCameraFront();
	static bool HasCameraLevelFull();
	static bool HasGamepad();
	static bool HasMicrophone();
	static bool HasRamLow();
	static bool HasRamNormal();
	static bool HasSensorAccelerometer();
	static bool HasSensorAmbientTemperature();
	static bool HasSensorBarometer();
	static bool HasSensorCompass();
	static bool HasSensorGyroscope();
	static bool HasSensorHeartRate();
	static bool HasSensorHeartRateEcg();
	static bool HasSensorLight();
	static bool HasSensorProximity();
	static bool HasSensorRelativeHumidity();
	static bool HasSensorStepCounter();
	static bool HasSensorStepDetector();
	static bool HasSip();
	static bool HasStrongBoxKeyStore();
	static bool HasSystemFeature(const class FString& FeatureName);
	static bool HasTelephony();
	static bool HasTelephonyCdma();
	static bool HasTelephonyEuicc();
	static bool HasTelephonyGsm();
	static bool HasTelephonyMbms();
	static bool HasTouchScreen();
	static bool HasVrHeadTracking();
	static bool HasVrMode();
	static bool HasVrModeHighPerformance();
	static bool IsEmbedded();
	static bool IsPackageInstalled(const class FString& PackageName);
	static bool IsPc();
	static bool IsTelevision();
	static bool IsWatch();
	static bool SupportsActivitiesOnSecondaryDisplays();
	static bool SupportsAppWidgets();
	static bool SupportsAudioLowLatency();
	static bool SupportsAudioOutput();
	static bool SupportsAudioPro();
	static bool SupportsAutofill();
	static bool SupportsAutomotive();
	static bool SupportsBackup();
	static bool SupportsBluetooth();
	static bool SupportsBluetoothLe();
	static bool SupportsCantSaveState();
	static bool SupportsCompanionDeviceSetup();
	static bool SupportsConnectionService();
	static bool SupportsConsumerIr();
	static bool SupportsDeviceAdmin();
	static bool SupportsEthernet();
	static bool SupportsFakeTouch();
	static bool SupportsFakeTouchMultiTouchDistinct();
	static bool SupportsFakeTouchMultiTouchJazzHand();
	static bool SupportsFingerprint();
	static bool SupportsFreeFormWindowManagement();
	static bool SupportsHifiSensors();
	static bool SupportsHomeScreen();
	static bool SupportsInputMethods();
	static bool SupportsLeanback();
	static bool SupportsLeanbackOnly();
	static bool SupportsLiveTv();
	static bool SupportsLiveWallpaper();
	static bool SupportsLocation();
	static bool SupportsLocationGps();
	static bool SupportsLocationNetwork();
	static bool SupportsManagedUsers();
	static bool SupportsMidi();
	static bool SupportsNfc();
	static bool SupportsNfcHostCardEmulation();
	static bool SupportsNfcHostCardEmulationNfcf();
	static bool SupportsOpenGlEsExtensionPack();
	static bool SupportsPictureInPicture();
	static bool SupportsPrinting();
	static bool SupportsScreenLandscape();
	static bool SupportsScreenPortrtait();
	static bool SupportsSecureUserRemoval();
	static bool SupportsSipVoip();
	static bool SupportsTouchScreenMultiTouch();
	static bool SupportsTouchScreenMultiTouchDistinct();
	static bool SupportsTouchScreenMultiTouchJazzHand();
	static bool SupportsUsbAccessory();
	static bool SupportsUsbHost();
	static bool SupportsVerifiedBoot();
	static bool SupportsVulkanHardwareCompute();
	static bool SupportsVulkanHardwareLevel();
	static bool SupportsVulkanHardwareVersion();
	static bool SupportsWebView();
	static bool SupportsWifi();
	static bool SupportsWifiAware();
	static bool SupportsWifiDirect();
	static bool SupportsWifiPassPoint();
	static bool SupportsWifiRtt();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGDeviceInfo">();
	}
	static class UAGDeviceInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGDeviceInfo>();
	}
};
static_assert(alignof(UAGDeviceInfo) == 0x000008, "Wrong alignment on UAGDeviceInfo");
static_assert(sizeof(UAGDeviceInfo) == 0x000028, "Wrong size on UAGDeviceInfo");

// Class AndroidGoodies.AGDialogBPL
// 0x0000 (0x0028 - 0x0028)
class UAGDialogBPL final : public UBlueprintFunctionLibrary
{
public:
	static void ShowChooserDialog(const class FString& ListTitle, const TArray<class FString>& ListItems, const TDelegate<void(int32 Index)>& OnItemChoosedCallback, const TDelegate<void()>& OnDialogCancelledCallback, EDialogTheme Theme);
	static void ShowMultipleItemChoiceDialog(const class FString& ListTitle, const TArray<class FString>& ListItems, const class FString& PositiveButtonText, const TArray<bool>& CheckedListItems, const TDelegate<void(int32 Index, bool IsChosen)>& OnMultipleChoiceItemClickedCallback, const TDelegate<void()>& OnPositiveButtonClickedCallback, const TDelegate<void()>& OnDialogCancelledCallback, EDialogTheme Theme);
	static void ShowSingleButtonDialog(const class FString& MessageTitle, const class FString& Message, const class FString& PositiveButtonText, const TDelegate<void()>& OnPositiveButtonClickedCallback, const TDelegate<void()>& OnDialogCancelledCallback, EDialogTheme Theme);
	static void ShowSingleItemChoiceDialog(const class FString& ListTitle, const TArray<class FString>& ListItems, const class FString& PositiveButtonText, int32 SelectedItemIndex, const TDelegate<void(int32 Index)>& OnSingleChoiceItemClickedCallback, const TDelegate<void()>& OnPositiveButtonClickedCallback, const TDelegate<void()>& OnDialogCancelledCallback, EDialogTheme Theme);
	static void ShowThreeButtonsDialog(const class FString& MessageTitle, const class FString& Message, const class FString& PositiveButtonText, const class FString& NegativeButtonText, const class FString& NeutralButtonText, const TDelegate<void()>& OnPositiveButtonClickedCallback, const TDelegate<void()>& OnNegativeButtonClickedCallback, const TDelegate<void()>& OnNeutralButtonClickedCallback, const TDelegate<void()>& OnDialogCancelledCallback, EDialogTheme Theme);
	static void ShowTwoButtonsDialog(const class FString& MessageTitle, const class FString& Message, const class FString& PositiveButtonText, const class FString& NegativeButtonText, const TDelegate<void()>& OnPositiveButtonClickedCallback, const TDelegate<void()>& OnNegativeButtonClickedCallback, const TDelegate<void()>& OnDialogCancelledCallback, EDialogTheme Theme);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGDialogBPL">();
	}
	static class UAGDialogBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGDialogBPL>();
	}
};
static_assert(alignof(UAGDialogBPL) == 0x000008, "Wrong alignment on UAGDialogBPL");
static_assert(sizeof(UAGDialogBPL) == 0x000028, "Wrong size on UAGDialogBPL");

// Class AndroidGoodies.AGHardwareBPL
// 0x0000 (0x0028 - 0x0028)
class UAGHardwareBPL final : public UBlueprintFunctionLibrary
{
public:
	static bool AreVibrationEffectsSupported();
	static int32 ComputeRemainingChargeTime();
	static void EnableFlashlight(bool Enable);
	static int32 GetAverageBatteryCurrent();
	static int32 GetBatteryCapacity();
	static int32 GetBatteryChargeCounter();
	static int32 GetBatteryEnergyCounter();
	static EBatteryHealth GetBatteryHealth();
	static int32 GetBatteryLevel();
	static EBatteryPluggedState GetBatteryPluggedState();
	static int32 GetBatteryScale();
	static EBatteryStatus GetBatteryStatus();
	static class FString GetBatteryTechnology();
	static int32 GetBatteryTemperature();
	static int32 GetBatteryVoltage();
	static int32 GetImmediateBatteryCurrent();
	static bool HasAmplitudeControl();
	static bool HasVibrator();
	static bool IsBatteryLow();
	static bool IsBatteryPresent();
	static void StopVibration();
	static void Vibrate(float Duration);
	static void VibrateWithEffect(class UAGVibrationEffect* VibrationEffect);
	static void VibrateWithEffectAndAttributes(class UAGVibrationEffect* VibrationEffect, const struct FAGAudioAttributes& AudioAttributes);
	static void VibrateWithPattern(const TArray<float>& Pattern, int32 RepeatFrom);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGHardwareBPL">();
	}
	static class UAGHardwareBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGHardwareBPL>();
	}
};
static_assert(alignof(UAGHardwareBPL) == 0x000008, "Wrong alignment on UAGHardwareBPL");
static_assert(sizeof(UAGHardwareBPL) == 0x000028, "Wrong size on UAGHardwareBPL");

// Class AndroidGoodies.AGMaps
// 0x0000 (0x0028 - 0x0028)
class UAGMaps final : public UBlueprintFunctionLibrary
{
public:
	static void OpenMapLocation(float Latitude, float Longitude, int32 Zoom);
	static void OpenMapLocationWithAddress(const class FString& Address);
	static void OpenMapLocationWithLabel(float Latitude, float Longitude, const class FString& Label);
	static bool UserHasMapsApp();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGMaps">();
	}
	static class UAGMaps* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGMaps>();
	}
};
static_assert(alignof(UAGMaps) == 0x000008, "Wrong alignment on UAGMaps");
static_assert(sizeof(UAGMaps) == 0x000028, "Wrong size on UAGMaps");

// Class AndroidGoodies.AGNotification
// 0x0000 (0x0028 - 0x0028)
class UAGNotification final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGNotification">();
	}
	static class UAGNotification* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGNotification>();
	}
};
static_assert(alignof(UAGNotification) == 0x000008, "Wrong alignment on UAGNotification");
static_assert(sizeof(UAGNotification) == 0x000028, "Wrong size on UAGNotification");

// Class AndroidGoodies.AGNotificationBigPictureStyle
// 0x0000 (0x0028 - 0x0028)
class UAGNotificationBigPictureStyle final : public UObject
{
public:
	static class UAGNotificationBigPictureStyle* CreateBigPictureStyle(class UTexture2D* bigPicture);

	class UAGNotificationBigPictureStyle* SetBigContentTitle(const class FString& Title);
	class UAGNotificationBigPictureStyle* SetBigLargeIcon(class UTexture2D* Icon);
	class UAGNotificationBigPictureStyle* SetSummaryText(const class FString& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGNotificationBigPictureStyle">();
	}
	static class UAGNotificationBigPictureStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGNotificationBigPictureStyle>();
	}
};
static_assert(alignof(UAGNotificationBigPictureStyle) == 0x000008, "Wrong alignment on UAGNotificationBigPictureStyle");
static_assert(sizeof(UAGNotificationBigPictureStyle) == 0x000028, "Wrong size on UAGNotificationBigPictureStyle");

// Class AndroidGoodies.AGNotificationBigTextStyle
// 0x0000 (0x0028 - 0x0028)
class UAGNotificationBigTextStyle final : public UObject
{
public:
	static class UAGNotificationBigTextStyle* CreateBigTextStyle(const class FString& bigText);

	class UAGNotificationBigTextStyle* SetBigContentTitle(const class FString& Title);
	class UAGNotificationBigTextStyle* SetSummaryText(const class FString& Summary);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGNotificationBigTextStyle">();
	}
	static class UAGNotificationBigTextStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGNotificationBigTextStyle>();
	}
};
static_assert(alignof(UAGNotificationBigTextStyle) == 0x000008, "Wrong alignment on UAGNotificationBigTextStyle");
static_assert(sizeof(UAGNotificationBigTextStyle) == 0x000028, "Wrong size on UAGNotificationBigTextStyle");

// Class AndroidGoodies.AGNotificationBuilder
// 0x0000 (0x0028 - 0x0028)
class UAGNotificationBuilder final : public UObject
{
public:
	static class UAGNotificationBuilder* NewNotificationBuilder(const class FString& ChannelId, const TMap<class FString, class FString>& AdditionalData);

	class UAGNotificationBuilder* AddOpenUrlAction(const class FString& IconName, const class FString& Title, const class FString& URL);
	class UAGNotification* Build();
	class UAGNotificationBuilder* SetAlertOnce(bool AlertOnce);
	class UAGNotificationBuilder* SetAutoCancel(bool AutoCancel);
	class UAGNotificationBuilder* SetBadgeIconType(ENotificationBadgeIconType badgeIconType);
	class UAGNotificationBuilder* SetBigPictureStyle(class UAGNotificationBigPictureStyle* Style);
	class UAGNotificationBuilder* SetBigTextStyle(class UAGNotificationBigTextStyle* Style);
	class UAGNotificationBuilder* SetCategory(ENotificationCategory Category);
	class UAGNotificationBuilder* SetColor(const struct FColor& Color);
	class UAGNotificationBuilder* SetColorized(bool Colorized);
	class UAGNotificationBuilder* SetContentInfo(const class FString& Text);
	class UAGNotificationBuilder* SetDefaults(const struct FAGNotificationDefaults& Defaults);
	class UAGNotificationBuilder* SetGroup(const class FString& GroupKey);
	class UAGNotificationBuilder* SetGroupAlertBehaviour(ENotificationGroupAlert behaviour);
	class UAGNotificationBuilder* SetGroupSummary(bool Summary);
	class UAGNotificationBuilder* SetInboxStyle(class UAGNotificationInboxStyle* Style);
	class UAGNotificationBuilder* SetLargeIcon(class UTexture2D* Icon);
	class UAGNotificationBuilder* SetLights(const struct FColor& Color, int32 InMilliSeconds, int32 OutMilliSeconds);
	class UAGNotificationBuilder* SetLocalOnly(bool LocalOnly);
	class UAGNotificationBuilder* SetMessagingStyle(class UAGNotificationMessageStyle* Style);
	class UAGNotificationBuilder* SetNumber(int32 Number);
	class UAGNotificationBuilder* SetOngoing(bool Ongoing);
	class UAGNotificationBuilder* SetPriority(ENotificationPriority Priority);
	class UAGNotificationBuilder* SetProgress(int32 Current, int32 Max, bool Indeterminate);
	class UAGNotificationBuilder* SetPublicVersion(class UAGNotification* Notification);
	class UAGNotificationBuilder* SetShortcutId(const class FString& ID);
	class UAGNotificationBuilder* SetShowWhen(bool ShowWhen);
	class UAGNotificationBuilder* SetSmallIcon(const class FString& Filename);
	class UAGNotificationBuilder* SetSortKey(const class FString& Key);
	class UAGNotificationBuilder* SetSound(const class FString& Path);
	class UAGNotificationBuilder* SetSubText(const class FString& Text);
	class UAGNotificationBuilder* SetText(const class FString& Text);
	class UAGNotificationBuilder* SetTicker(const class FString& Text);
	class UAGNotificationBuilder* SetTimeoutAfter(int32 MilliSeconds);
	class UAGNotificationBuilder* SetTitle(const class FString& Title);
	class UAGNotificationBuilder* SetUsesChronometer(bool UsesChronometer);
	class UAGNotificationBuilder* SetVibrate(const TArray<float>& Pattern);
	class UAGNotificationBuilder* SetVisibility(ENotificationVisibility Visibility);
	class UAGNotificationBuilder* SetWhen(const struct FDateTime& DateTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGNotificationBuilder">();
	}
	static class UAGNotificationBuilder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGNotificationBuilder>();
	}
};
static_assert(alignof(UAGNotificationBuilder) == 0x000008, "Wrong alignment on UAGNotificationBuilder");
static_assert(sizeof(UAGNotificationBuilder) == 0x000028, "Wrong size on UAGNotificationBuilder");

// Class AndroidGoodies.AGNotificationChannel
// 0x0000 (0x0028 - 0x0028)
class UAGNotificationChannel final : public UObject
{
public:
	static class UAGNotificationChannel* NewNotificationChannel(const class FString& ID, const class FString& Name_0, EChannelImportance Importance);

	bool CanBypassDnd();
	bool CanShowBadge();
	struct FAGAudioAttributes GetAudioAttributes();
	class FString GetDescription();
	class FString GetGroupId();
	class FString GetId();
	EChannelImportance GetImportance();
	struct FColor GetLightColor();
	ENotificationVisibility GetLockScreenVisibility();
	class FString GetName();
	class FString GetSoundPath();
	TArray<float> GetVibrationPattern();
	class UAGNotificationChannel* SetBypassDnd(bool bypass);
	class UAGNotificationChannel* SetDescription(const class FString& Description);
	class UAGNotificationChannel* SetEnableLights(bool Enable);
	class UAGNotificationChannel* SetEnableVibration(bool Enable);
	class UAGNotificationChannel* SetGroup(const class FString& GroupId);
	class UAGNotificationChannel* SetImportance(EChannelImportance Importance);
	class UAGNotificationChannel* SetLightColor(const struct FColor& Color);
	class UAGNotificationChannel* SetLockScreenVisibility(ENotificationVisibility Visibility);
	class UAGNotificationChannel* SetShowBadge(bool Show);
	class UAGNotificationChannel* SetSound(const class FString& FilePath, const struct FAGAudioAttributes& Attributes);
	class UAGNotificationChannel* SetVibrationPattern(const TArray<float>& Pattern);
	bool ShouldShowLights();
	bool ShouldVibrate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGNotificationChannel">();
	}
	static class UAGNotificationChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGNotificationChannel>();
	}
};
static_assert(alignof(UAGNotificationChannel) == 0x000008, "Wrong alignment on UAGNotificationChannel");
static_assert(sizeof(UAGNotificationChannel) == 0x000028, "Wrong size on UAGNotificationChannel");

// Class AndroidGoodies.AGNotificationChannelGroup
// 0x0000 (0x0028 - 0x0028)
class UAGNotificationChannelGroup final : public UObject
{
public:
	static class UAGNotificationChannelGroup* NewNotificationChannelGroup(const class FString& ID, const class FString& Name_0);

	TArray<class UAGNotificationChannel*> GetChannels();
	class FString GetDescription();
	class FString GetId();
	class FString GetName();
	bool IsBlocked();
	class UAGNotificationChannelGroup* SetDescription(const class FString& Description);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGNotificationChannelGroup">();
	}
	static class UAGNotificationChannelGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGNotificationChannelGroup>();
	}
};
static_assert(alignof(UAGNotificationChannelGroup) == 0x000008, "Wrong alignment on UAGNotificationChannelGroup");
static_assert(sizeof(UAGNotificationChannelGroup) == 0x000028, "Wrong size on UAGNotificationChannelGroup");

// Class AndroidGoodies.AGNotificationInboxStyle
// 0x0000 (0x0028 - 0x0028)
class UAGNotificationInboxStyle final : public UObject
{
public:
	static class UAGNotificationInboxStyle* CreateInboxStyle();

	class UAGNotificationInboxStyle* AddLine(const class FString& Line);
	class UAGNotificationInboxStyle* SetBigContentTitle(const class FString& Title);
	class UAGNotificationInboxStyle* SetSummaryText(const class FString& Summary);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGNotificationInboxStyle">();
	}
	static class UAGNotificationInboxStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGNotificationInboxStyle>();
	}
};
static_assert(alignof(UAGNotificationInboxStyle) == 0x000008, "Wrong alignment on UAGNotificationInboxStyle");
static_assert(sizeof(UAGNotificationInboxStyle) == 0x000028, "Wrong size on UAGNotificationInboxStyle");

// Class AndroidGoodies.AGNotificationManager
// 0x0000 (0x0028 - 0x0028)
class UAGNotificationManager final : public UBlueprintFunctionLibrary
{
public:
	static bool AreNotificationChannelsSupported();
	static void CancelAllNotifications();
	static void CancelNotification(int32 ID);
	static void CancelScheduledNotification(int32 ID);
	static void CreateNotificationChannel(class UAGNotificationChannel* Channel);
	static void CreateNotificationChannelGroup(class UAGNotificationChannelGroup* Group);
	static void DeleteNotificationChannel(const class FString& ChannelId);
	static void DeleteNotificationChannelGroup(const class FString& GroupId);
	static EChannelImportance GetCurrentImportance();
	static EInterruptionFilter GetCurrentInterruptionFilter();
	static class UAGNotificationChannel* GetNotificationChannel(const class FString& ChannelId);
	static class UAGNotificationChannelGroup* GetNotificationChannelGroup(const class FString& GroupId);
	static TArray<class UAGNotificationChannelGroup*> GetNotificationChannelGroups();
	static TArray<class UAGNotificationChannel*> GetNotificationChannels();
	static class FString GetNotificationDataForKey(const class FString& Key);
	static void Notify(class UAGNotification* Notification, int32 ID);
	static void OpenNotificationChannelSettings(const class FString& ChannelId);
	static void ScheduleNotification(class UAGNotification* Notification, int32 ID, const struct FTimespan& NotifyAfter);
	static void ScheduleRepeatingNotification(class UAGNotification* Notification, int32 ID, const struct FTimespan& NotifyAfter, const struct FTimespan& RepeatAfter);
	static void SetCurrentInterruptionFilter(EInterruptionFilter Filter);
	static bool WasApplicationOpenViaNotification();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGNotificationManager">();
	}
	static class UAGNotificationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGNotificationManager>();
	}
};
static_assert(alignof(UAGNotificationManager) == 0x000008, "Wrong alignment on UAGNotificationManager");
static_assert(sizeof(UAGNotificationManager) == 0x000028, "Wrong size on UAGNotificationManager");

// Class AndroidGoodies.AGNotificationMessageStyle
// 0x0000 (0x0028 - 0x0028)
class UAGNotificationMessageStyle final : public UObject
{
public:
	static class UAGNotificationMessageStyle* CreateMessageStyle(const class FString& UserDisplayName);

	class UAGNotificationMessageStyle* AddMessage(const class FString& Text, const struct FDateTime& Timestamp, const class FString& Sender);
	class UAGNotificationMessageStyle* SetConversationTitle(const class FString& Title);
	class UAGNotificationMessageStyle* SetGroupConversation(bool IsGroupConversation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGNotificationMessageStyle">();
	}
	static class UAGNotificationMessageStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGNotificationMessageStyle>();
	}
};
static_assert(alignof(UAGNotificationMessageStyle) == 0x000008, "Wrong alignment on UAGNotificationMessageStyle");
static_assert(sizeof(UAGNotificationMessageStyle) == 0x000028, "Wrong size on UAGNotificationMessageStyle");

// Class AndroidGoodies.AGPickersBPL
// 0x0000 (0x0028 - 0x0028)
class UAGPickersBPL final : public UBlueprintFunctionLibrary
{
public:
	static void ClearTexture(class UTexture2D* Texture);
	static void GetChosenImagesData(int32 Quality, EImageSize MaxSize, bool ShouldGenerateThumbnails, bool AllowMultiple, const TDelegate<void(TArray<class UAGChosenImage*>& Images)>& OnImagesPickedCallback, const TDelegate<void(const class FString& Error)>& OnImagesPickErrorCallback);
	static void GetPhotoDataFromCamera(bool ShouldGenerateThumbnails, const TDelegate<void(TArray<class UAGChosenImage*>& Images)>& OnPhotoTakenCallback, const TDelegate<void(const class FString& Error)>& OnPhotoTakeErrorCallback);
	static void GetTextureFromPath(const class FString& ImagePath, const TDelegate<void(class UTexture2D* Texture)>& OnTextureReadyCallback, const TDelegate<void(const class FString& Error)>& OnTextureErrorCallback);
	static void PickFilesFromLocalStorage(bool AllowMultiple, const TDelegate<void(TArray<class UAGChosenFile*>& Files)>& OnFilesPickedCallback, const TDelegate<void(const class FString& Error)>& OnFilesPickErrorCallback);
	static void PickImageFromGallery(int32 Quality, EImageSize MaxSize, bool ShouldGenerateThumbnails, const TDelegate<void(class UTexture2D* Texture)>& OnImagePickedCallback, const TDelegate<void(const class FString& Error)>& OnImagePickErrorCallback);
	static void PickPhotoFromCamera(bool ShouldGenerateThumbnails, const TDelegate<void(class UTexture2D* Texture)>& OnPhotoPickedCallback, const TDelegate<void(const class FString& Error)>& OnPhotoPickErrorCallback);
	static void SaveImageToGallery(class UTexture2D* Image, const class FString& Filename);
	static void TakeScreenShot(const TDelegate<void(class UTexture2D* Texture)>& OnScreenShotTakenCallback, const TDelegate<void(const class FString& Error)>& OnErrorCallback, bool ShowUI);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGPickersBPL">();
	}
	static class UAGPickersBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGPickersBPL>();
	}
};
static_assert(alignof(UAGPickersBPL) == 0x000008, "Wrong alignment on UAGPickersBPL");
static_assert(sizeof(UAGPickersBPL) == 0x000028, "Wrong size on UAGPickersBPL");

// Class AndroidGoodies.AGProgressDialogBPL
// 0x0000 (0x0028 - 0x0028)
class UAGProgressDialogBPL final : public UBlueprintFunctionLibrary
{
public:
	static TScriptInterface<class IAGProgressDialogInterface> CreateProgressDialog();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGProgressDialogBPL">();
	}
	static class UAGProgressDialogBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGProgressDialogBPL>();
	}
};
static_assert(alignof(UAGProgressDialogBPL) == 0x000008, "Wrong alignment on UAGProgressDialogBPL");
static_assert(sizeof(UAGProgressDialogBPL) == 0x000028, "Wrong size on UAGProgressDialogBPL");

// Class AndroidGoodies.AGProgressDialogInterface
// 0x0000 (0x0028 - 0x0028)
class IAGProgressDialogInterface final : public IInterface
{
public:
	void Dismiss();
	void SetProgress(int32 Progress);
	void Show(const struct FAGProgressDialogData& ProgressDialogData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGProgressDialogInterface">();
	}
	static class IAGProgressDialogInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAGProgressDialogInterface>();
	}
};
static_assert(alignof(IAGProgressDialogInterface) == 0x000008, "Wrong alignment on IAGProgressDialogInterface");
static_assert(sizeof(IAGProgressDialogInterface) == 0x000028, "Wrong size on IAGProgressDialogInterface");

// Class AndroidGoodies.ScreenShotHelper
// 0x0000 (0x0028 - 0x0028)
class UScreenShotHelper final : public UObject
{
public:
	void ProcessScreenShot(int32 InSizeX, int32 InSizeY, const TArray<struct FColor>& InImageData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScreenShotHelper">();
	}
	static class UScreenShotHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScreenShotHelper>();
	}
};
static_assert(alignof(UScreenShotHelper) == 0x000008, "Wrong alignment on UScreenShotHelper");
static_assert(sizeof(UScreenShotHelper) == 0x000028, "Wrong size on UScreenShotHelper");

// Class AndroidGoodies.AGShareBPL
// 0x0000 (0x0028 - 0x0028)
class UAGShareBPL final : public UBlueprintFunctionLibrary
{
public:
	static void SendEMail(const struct FAGShareEmailData& EmailData, bool ShowChooser, const class FString& ChooserTitle);
	static void SendFacebookImage(class UTexture2D* Image);
	static void SendFacebookText(const class FString& Text);
	static void SendMultipleImagesEMail(const struct FAGShareEmailData& EmailData, const TArray<class UTexture2D*>& ExtraImages, bool ShowChooser, const class FString& ChooserTitle);
	static void SendSmsSilently(const class FString& PhoneNumber, const class FString& Message);
	static void SendSmsWithDefaultApp(const class FString& PhoneNumber, const class FString& Message, bool ShowChooser, const class FString& ChooserTitle);
	static void SendTelegramImage(class UTexture2D* Image);
	static void SendTelegramText(const class FString& Text);
	static void SendViberImage(class UTexture2D* Image);
	static void SendViberText(const class FString& Text);
	static void SendWhatsAppImage(class UTexture2D* Image);
	static void SendWhatsAppText(const class FString& Text);
	static void ShareImage(class UTexture2D* Image, bool ShowChooser, const class FString& ChooserTitle);
	static void ShareInstagram(class UTexture2D* Image);
	static void ShareText(const class FString& Subject, const class FString& Text, bool ShowChooser, const class FString& ChooserTitle);
	static void ShareTextWithImage(const class FString& Subject, const class FString& Text, class UTexture2D* Image, bool ShowChooser, const class FString& ChooserTitle);
	static void ShareVideo(const class FString& VideoPath, bool ShowChooser, const class FString& ChooserTitle);
	static void TweetText(const class FString& Text);
	static void TweetTextWithImage(const class FString& Text, class UTexture2D* Image);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGShareBPL">();
	}
	static class UAGShareBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGShareBPL>();
	}
};
static_assert(alignof(UAGShareBPL) == 0x000008, "Wrong alignment on UAGShareBPL");
static_assert(sizeof(UAGShareBPL) == 0x000028, "Wrong size on UAGShareBPL");

// Class AndroidGoodies.AGToastBPL
// 0x0000 (0x0028 - 0x0028)
class UAGToastBPL final : public UBlueprintFunctionLibrary
{
public:
	static void ShowToast(const class FString& Message, EToastLength Length);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGToastBPL">();
	}
	static class UAGToastBPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGToastBPL>();
	}
};
static_assert(alignof(UAGToastBPL) == 0x000008, "Wrong alignment on UAGToastBPL");
static_assert(sizeof(UAGToastBPL) == 0x000028, "Wrong size on UAGToastBPL");

// Class AndroidGoodies.AGVibrationEffect
// 0x0000 (0x0028 - 0x0028)
class UAGVibrationEffect final : public UObject
{
public:
	static class UAGVibrationEffect* VibrationEffectOneShot(float Seconds, int32 Amplitude);
	static class UAGVibrationEffect* VibrationEffectWaveForm(const TArray<float>& Timings, int32 Repeat);
	static class UAGVibrationEffect* VibrationEffectWaveFormWithAmplitudes(const TArray<float>& Timings, const TArray<int32>& Amplitudes, int32 Repeat);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AGVibrationEffect">();
	}
	static class UAGVibrationEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAGVibrationEffect>();
	}
};
static_assert(alignof(UAGVibrationEffect) == 0x000008, "Wrong alignment on UAGVibrationEffect");
static_assert(sizeof(UAGVibrationEffect) == 0x000028, "Wrong size on UAGVibrationEffect");

// Class AndroidGoodies.AndroidGoodiesSettings
// 0x0030 (0x0058 - 0x0028)
class UAndroidGoodiesSettings final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         AndroidDrawablesFolder;                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	bool                                          SendSmsPermission;                                 // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetAlarmPermission;                                // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CameraPermission;                                  // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlashlightPermission;                              // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VibratePermission;                                 // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallPhonePermission;                               // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReadPhoneStatePermission;                          // 0x004E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReadContactsPermission;                            // 0x004F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WriteContactsPermission;                           // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstallPackagesPermission;                         // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AndroidGoodiesSettings">();
	}
	static class UAndroidGoodiesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAndroidGoodiesSettings>();
	}
};
static_assert(alignof(UAndroidGoodiesSettings) == 0x000008, "Wrong alignment on UAndroidGoodiesSettings");
static_assert(sizeof(UAndroidGoodiesSettings) == 0x000058, "Wrong size on UAndroidGoodiesSettings");
static_assert(offsetof(UAndroidGoodiesSettings, AndroidDrawablesFolder) == 0x000038, "Member 'UAndroidGoodiesSettings::AndroidDrawablesFolder' has a wrong offset!");
static_assert(offsetof(UAndroidGoodiesSettings, SendSmsPermission) == 0x000048, "Member 'UAndroidGoodiesSettings::SendSmsPermission' has a wrong offset!");
static_assert(offsetof(UAndroidGoodiesSettings, SetAlarmPermission) == 0x000049, "Member 'UAndroidGoodiesSettings::SetAlarmPermission' has a wrong offset!");
static_assert(offsetof(UAndroidGoodiesSettings, CameraPermission) == 0x00004A, "Member 'UAndroidGoodiesSettings::CameraPermission' has a wrong offset!");
static_assert(offsetof(UAndroidGoodiesSettings, FlashlightPermission) == 0x00004B, "Member 'UAndroidGoodiesSettings::FlashlightPermission' has a wrong offset!");
static_assert(offsetof(UAndroidGoodiesSettings, VibratePermission) == 0x00004C, "Member 'UAndroidGoodiesSettings::VibratePermission' has a wrong offset!");
static_assert(offsetof(UAndroidGoodiesSettings, CallPhonePermission) == 0x00004D, "Member 'UAndroidGoodiesSettings::CallPhonePermission' has a wrong offset!");
static_assert(offsetof(UAndroidGoodiesSettings, ReadPhoneStatePermission) == 0x00004E, "Member 'UAndroidGoodiesSettings::ReadPhoneStatePermission' has a wrong offset!");
static_assert(offsetof(UAndroidGoodiesSettings, ReadContactsPermission) == 0x00004F, "Member 'UAndroidGoodiesSettings::ReadContactsPermission' has a wrong offset!");
static_assert(offsetof(UAndroidGoodiesSettings, WriteContactsPermission) == 0x000050, "Member 'UAndroidGoodiesSettings::WriteContactsPermission' has a wrong offset!");
static_assert(offsetof(UAndroidGoodiesSettings, InstallPackagesPermission) == 0x000051, "Member 'UAndroidGoodiesSettings::InstallPackagesPermission' has a wrong offset!");

}

