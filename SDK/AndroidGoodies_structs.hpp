#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AndroidGoodies

#include "Basic.hpp"


namespace SDK
{

// Enum AndroidGoodies.AudioAttributesContentType
// NumValues: 0x0006
enum class EAudioAttributesContentType : uint8
{
	Unknown                                  = 0,
	Speech                                   = 1,
	Music                                    = 2,
	Movie                                    = 3,
	Sonification                             = 4,
	AudioAttributesContentType_MAX           = 5,
};

// Enum AndroidGoodies.AudioAttributesUsage
// NumValues: 0x0011
enum class EAudioAttributesUsage : uint8
{
	NotSpecified                             = 0,
	Media                                    = 1,
	VoiceCommunication                       = 2,
	VoiceCommunicationSignalling             = 3,
	Alarm                                    = 4,
	Notification                             = 5,
	NotificationRingtone                     = 6,
	NotificationCommunicationRequest         = 7,
	NotificationCommunicationInstant         = 8,
	NotificationCommunicationDelayed         = 9,
	NotificationEvent                        = 10,
	AssistanceAccessibility                  = 11,
	AssistanceNavigationGuidance             = 12,
	AssistanceSonification                   = 13,
	Game                                     = 14,
	Assistant                                = 16,
	AudioAttributesUsage_MAX                 = 17,
};

// Enum AndroidGoodies.BatteryHealth
// NumValues: 0x0008
enum class EBatteryHealth : uint8
{
	UnknownHealth                            = 0,
	Good                                     = 1,
	Overheat                                 = 2,
	Dead                                     = 3,
	OverVoltage                              = 4,
	UnspecifiedFailure                       = 5,
	Cold                                     = 6,
	BatteryHealth_MAX                        = 7,
};

// Enum AndroidGoodies.BatteryPluggedState
// NumValues: 0x0005
enum class EBatteryPluggedState : uint8
{
	OnBattery                                = 0,
	Ac                                       = 1,
	Usb                                      = 2,
	Wireless                                 = 4,
	BatteryPluggedState_MAX                  = 5,
};

// Enum AndroidGoodies.BatteryStatus
// NumValues: 0x0006
enum class EBatteryStatus : uint8
{
	UnknownStatus                            = 0,
	Charging                                 = 1,
	Discharging                              = 2,
	NotCharging                              = 3,
	Full                                     = 4,
	BatteryStatus_MAX                        = 5,
};

// Enum AndroidGoodies.ChannelImportance
// NumValues: 0x0008
enum class EChannelImportance : uint8
{
	ImportanceNone                           = 0,
	ImportanceMin                            = 1,
	ImportanceLow                            = 2,
	ImportanceDefault                        = 3,
	ImportanceHigh                           = 4,
	ImportanceMax                            = 5,
	ImportanceUnspecified                    = 18446744073709550616,
	ChannelImportance_MAX                    = 6,
};

// Enum AndroidGoodies.DialogTheme
// NumValues: 0x0004
enum class EDialogTheme : uint8
{
	LightTheme                               = 0,
	DarkTheme                                = 1,
	DefaultTheme                             = 2,
	DialogTheme_MAX                          = 3,
};

// Enum AndroidGoodies.ImageSize
// NumValues: 0x0006
enum class EImageSize : uint8
{
	Original                                 = 0,
	Max256                                   = 256,
	Max512                                   = 512,
	Max1024                                  = 1024,
	Max2048                                  = 2048,
	ImageSize_MAX                            = 2049,
};

// Enum AndroidGoodies.InterruptionFilter
// NumValues: 0x0006
enum class EInterruptionFilter : uint8
{
	FilterUnknown                            = 0,
	FIlterAll                                = 1,
	FilterPriority                           = 2,
	FilterNone                               = 3,
	FilterAlarms                             = 4,
	InterruptionFilter_MAX                   = 5,
};

// Enum AndroidGoodies.NotificationBadgeIconType
// NumValues: 0x0004
enum class ENotificationBadgeIconType : uint8
{
	NoBadge                                  = 0,
	SmallBadge                               = 1,
	LargeBadge                               = 2,
	NotificationBadgeIconType_MAX            = 3,
};

// Enum AndroidGoodies.NotificationCategory
// NumValues: 0x0011
enum class ENotificationCategory : uint8
{
	CategoryAlarm                            = 0,
	CategoryCall                             = 1,
	CategoryEmail                            = 2,
	CategoryError                            = 3,
	CategoryEvent                            = 4,
	CategoryMessage                          = 5,
	CategoryNavigation                       = 6,
	CategoryProgress                         = 7,
	CategoryPromo                            = 8,
	CategoryRecommendation                   = 9,
	CategoryReminder                         = 10,
	CategoryService                          = 11,
	CategorySocial                           = 12,
	CategoryStatus                           = 13,
	CategorySystem                           = 14,
	CategoryTransport                        = 15,
	NotificationCategory_MAX                 = 16,
};

// Enum AndroidGoodies.NotificationGroupAlert
// NumValues: 0x0004
enum class ENotificationGroupAlert : uint8
{
	GroupAlertAll                            = 0,
	GroupAlertSummary                        = 1,
	GroupAlertChildren                       = 2,
	NotificationGroupAlert_MAX               = 3,
};

// Enum AndroidGoodies.NotificationPriority
// NumValues: 0x0006
enum class ENotificationPriority : uint8
{
	PriorityMinimum                          = 18446744073709551614,
	PriorityLow                              = 18446744073709551615,
	PriorityDefault                          = 0,
	PriorityHigh                             = 1,
	PriorityMaximum                          = 2,
	NotificationPriority_MAX                 = 3,
};

// Enum AndroidGoodies.NotificationVisibility
// NumValues: 0x0004
enum class ENotificationVisibility : uint8
{
	VisibilitySecret                         = 18446744073709551615,
	VisibilityPrivate                        = 0,
	VisibilityPublic                         = 1,
	NotificationVisibility_MAX               = 2,
};

// Enum AndroidGoodies.ProgressDialogStyle
// NumValues: 0x0003
enum class EProgressDialogStyle : uint8
{
	Spinner                                  = 0,
	ProgressBar                              = 1,
	ProgressDialogStyle_MAX                  = 2,
};

// Enum AndroidGoodies.ToastLength
// NumValues: 0x0003
enum class EToastLength : uint8
{
	Short                                    = 0,
	Long                                     = 1,
	ToastLength_MAX                          = 2,
};

// ScriptStruct AndroidGoodies.AGContact
// 0x0020 (0x0020 - 0x0000)
struct FAGContact final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Numbers;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGContact) == 0x000008, "Wrong alignment on FAGContact");
static_assert(sizeof(FAGContact) == 0x000020, "Wrong size on FAGContact");
static_assert(offsetof(FAGContact, DisplayName) == 0x000000, "Member 'FAGContact::DisplayName' has a wrong offset!");
static_assert(offsetof(FAGContact, Numbers) == 0x000010, "Member 'FAGContact::Numbers' has a wrong offset!");

// ScriptStruct AndroidGoodies.AGAudioAttributesFlags
// 0x0003 (0x0003 - 0x0000)
struct FAGAudioAttributesFlags final
{
public:
	bool                                          AudibilityEnforced;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HwAvSync;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LowLatency;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGAudioAttributesFlags) == 0x000001, "Wrong alignment on FAGAudioAttributesFlags");
static_assert(sizeof(FAGAudioAttributesFlags) == 0x000003, "Wrong size on FAGAudioAttributesFlags");
static_assert(offsetof(FAGAudioAttributesFlags, AudibilityEnforced) == 0x000000, "Member 'FAGAudioAttributesFlags::AudibilityEnforced' has a wrong offset!");
static_assert(offsetof(FAGAudioAttributesFlags, HwAvSync) == 0x000001, "Member 'FAGAudioAttributesFlags::HwAvSync' has a wrong offset!");
static_assert(offsetof(FAGAudioAttributesFlags, LowLatency) == 0x000002, "Member 'FAGAudioAttributesFlags::LowLatency' has a wrong offset!");

// ScriptStruct AndroidGoodies.AGAudioAttributes
// 0x0005 (0x0005 - 0x0000)
struct FAGAudioAttributes final
{
public:
	struct FAGAudioAttributesFlags                Flags;                                             // 0x0000(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EAudioAttributesUsage                         Usage;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioAttributesContentType                   ContentType;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGAudioAttributes) == 0x000001, "Wrong alignment on FAGAudioAttributes");
static_assert(sizeof(FAGAudioAttributes) == 0x000005, "Wrong size on FAGAudioAttributes");
static_assert(offsetof(FAGAudioAttributes, Flags) == 0x000000, "Member 'FAGAudioAttributes::Flags' has a wrong offset!");
static_assert(offsetof(FAGAudioAttributes, Usage) == 0x000003, "Member 'FAGAudioAttributes::Usage' has a wrong offset!");
static_assert(offsetof(FAGAudioAttributes, ContentType) == 0x000004, "Member 'FAGAudioAttributes::ContentType' has a wrong offset!");

// ScriptStruct AndroidGoodies.AGAlarmDaysData
// 0x0007 (0x0007 - 0x0000)
struct FAGAlarmDaysData final
{
public:
	bool                                          Sunday;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Monday;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tuesday;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Wednesday;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Thursday;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Friday;                                            // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Saturday;                                          // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGAlarmDaysData) == 0x000001, "Wrong alignment on FAGAlarmDaysData");
static_assert(sizeof(FAGAlarmDaysData) == 0x000007, "Wrong size on FAGAlarmDaysData");
static_assert(offsetof(FAGAlarmDaysData, Sunday) == 0x000000, "Member 'FAGAlarmDaysData::Sunday' has a wrong offset!");
static_assert(offsetof(FAGAlarmDaysData, Monday) == 0x000001, "Member 'FAGAlarmDaysData::Monday' has a wrong offset!");
static_assert(offsetof(FAGAlarmDaysData, Tuesday) == 0x000002, "Member 'FAGAlarmDaysData::Tuesday' has a wrong offset!");
static_assert(offsetof(FAGAlarmDaysData, Wednesday) == 0x000003, "Member 'FAGAlarmDaysData::Wednesday' has a wrong offset!");
static_assert(offsetof(FAGAlarmDaysData, Thursday) == 0x000004, "Member 'FAGAlarmDaysData::Thursday' has a wrong offset!");
static_assert(offsetof(FAGAlarmDaysData, Friday) == 0x000005, "Member 'FAGAlarmDaysData::Friday' has a wrong offset!");
static_assert(offsetof(FAGAlarmDaysData, Saturday) == 0x000006, "Member 'FAGAlarmDaysData::Saturday' has a wrong offset!");

// ScriptStruct AndroidGoodies.AGDialogData
// 0x00A0 (0x00A0 - 0x0000)
struct FAGDialogData final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PositiveButtonText;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NegativeButtonText;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeutralButtonText;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Items;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         SingleChoiceItems;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SingleChoiceCheckedItem;                           // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MultiChoiceItems;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  MultiChoiceCheckedItems;                           // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGDialogData) == 0x000008, "Wrong alignment on FAGDialogData");
static_assert(sizeof(FAGDialogData) == 0x0000A0, "Wrong size on FAGDialogData");
static_assert(offsetof(FAGDialogData, Title) == 0x000000, "Member 'FAGDialogData::Title' has a wrong offset!");
static_assert(offsetof(FAGDialogData, Message) == 0x000010, "Member 'FAGDialogData::Message' has a wrong offset!");
static_assert(offsetof(FAGDialogData, Theme) == 0x000020, "Member 'FAGDialogData::Theme' has a wrong offset!");
static_assert(offsetof(FAGDialogData, PositiveButtonText) == 0x000028, "Member 'FAGDialogData::PositiveButtonText' has a wrong offset!");
static_assert(offsetof(FAGDialogData, NegativeButtonText) == 0x000038, "Member 'FAGDialogData::NegativeButtonText' has a wrong offset!");
static_assert(offsetof(FAGDialogData, NeutralButtonText) == 0x000048, "Member 'FAGDialogData::NeutralButtonText' has a wrong offset!");
static_assert(offsetof(FAGDialogData, Items) == 0x000058, "Member 'FAGDialogData::Items' has a wrong offset!");
static_assert(offsetof(FAGDialogData, SingleChoiceItems) == 0x000068, "Member 'FAGDialogData::SingleChoiceItems' has a wrong offset!");
static_assert(offsetof(FAGDialogData, SingleChoiceCheckedItem) == 0x000078, "Member 'FAGDialogData::SingleChoiceCheckedItem' has a wrong offset!");
static_assert(offsetof(FAGDialogData, MultiChoiceItems) == 0x000080, "Member 'FAGDialogData::MultiChoiceItems' has a wrong offset!");
static_assert(offsetof(FAGDialogData, MultiChoiceCheckedItems) == 0x000090, "Member 'FAGDialogData::MultiChoiceCheckedItems' has a wrong offset!");

// ScriptStruct AndroidGoodies.AGNotificationDefaults
// 0x0003 (0x0003 - 0x0000)
struct FAGNotificationDefaults final
{
public:
	bool                                          Lights;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sound;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Vibrate;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGNotificationDefaults) == 0x000001, "Wrong alignment on FAGNotificationDefaults");
static_assert(sizeof(FAGNotificationDefaults) == 0x000003, "Wrong size on FAGNotificationDefaults");
static_assert(offsetof(FAGNotificationDefaults, Lights) == 0x000000, "Member 'FAGNotificationDefaults::Lights' has a wrong offset!");
static_assert(offsetof(FAGNotificationDefaults, Sound) == 0x000001, "Member 'FAGNotificationDefaults::Sound' has a wrong offset!");
static_assert(offsetof(FAGNotificationDefaults, Vibrate) == 0x000002, "Member 'FAGNotificationDefaults::Vibrate' has a wrong offset!");

// ScriptStruct AndroidGoodies.AGProgressDialogData
// 0x0030 (0x0030 - 0x0000)
struct FAGProgressDialogData final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialogTheme                                  Theme;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxValue;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsIndeterminate;                                   // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCancellable;                                     // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProgressDialogStyle                          Style;                                             // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAGProgressDialogData) == 0x000008, "Wrong alignment on FAGProgressDialogData");
static_assert(sizeof(FAGProgressDialogData) == 0x000030, "Wrong size on FAGProgressDialogData");
static_assert(offsetof(FAGProgressDialogData, Title) == 0x000000, "Member 'FAGProgressDialogData::Title' has a wrong offset!");
static_assert(offsetof(FAGProgressDialogData, Message) == 0x000010, "Member 'FAGProgressDialogData::Message' has a wrong offset!");
static_assert(offsetof(FAGProgressDialogData, Theme) == 0x000020, "Member 'FAGProgressDialogData::Theme' has a wrong offset!");
static_assert(offsetof(FAGProgressDialogData, MaxValue) == 0x000024, "Member 'FAGProgressDialogData::MaxValue' has a wrong offset!");
static_assert(offsetof(FAGProgressDialogData, Progress) == 0x000028, "Member 'FAGProgressDialogData::Progress' has a wrong offset!");
static_assert(offsetof(FAGProgressDialogData, IsIndeterminate) == 0x00002C, "Member 'FAGProgressDialogData::IsIndeterminate' has a wrong offset!");
static_assert(offsetof(FAGProgressDialogData, IsCancellable) == 0x00002D, "Member 'FAGProgressDialogData::IsCancellable' has a wrong offset!");
static_assert(offsetof(FAGProgressDialogData, Style) == 0x00002E, "Member 'FAGProgressDialogData::Style' has a wrong offset!");

// ScriptStruct AndroidGoodies.AGShareEmailData
// 0x0058 (0x0058 - 0x0000)
struct FAGShareEmailData final
{
public:
	class FString                                 Subject;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextBody;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Image;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Recipients;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         CCRecepients;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BCCRecepients;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGShareEmailData) == 0x000008, "Wrong alignment on FAGShareEmailData");
static_assert(sizeof(FAGShareEmailData) == 0x000058, "Wrong size on FAGShareEmailData");
static_assert(offsetof(FAGShareEmailData, Subject) == 0x000000, "Member 'FAGShareEmailData::Subject' has a wrong offset!");
static_assert(offsetof(FAGShareEmailData, TextBody) == 0x000010, "Member 'FAGShareEmailData::TextBody' has a wrong offset!");
static_assert(offsetof(FAGShareEmailData, Image) == 0x000020, "Member 'FAGShareEmailData::Image' has a wrong offset!");
static_assert(offsetof(FAGShareEmailData, Recipients) == 0x000028, "Member 'FAGShareEmailData::Recipients' has a wrong offset!");
static_assert(offsetof(FAGShareEmailData, CCRecepients) == 0x000038, "Member 'FAGShareEmailData::CCRecepients' has a wrong offset!");
static_assert(offsetof(FAGShareEmailData, BCCRecepients) == 0x000048, "Member 'FAGShareEmailData::BCCRecepients' has a wrong offset!");

}

