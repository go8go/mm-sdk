#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaStore

#include "Basic.hpp"

#include "XsollaStore_classes.hpp"
#include "XsollaStore_parameters.hpp"


namespace SDK
{

// Function XsollaStore.XsollaStoreSubsystem.AddToCart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::AddToCart(const class FString& AuthToken, const class FString& CartId, const class FString& ItemSKU, int32 Quantity, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "AddToCart");

	Params::XsollaStoreSubsystem_AddToCart Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.Quantity = Quantity;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.BuyItemWithVirtualCurrency
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurrencySKU                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 OrderId)>          SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::BuyItemWithVirtualCurrency(const class FString& AuthToken, const class FString& ItemSKU, const class FString& CurrencySKU, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "BuyItemWithVirtualCurrency");

	Params::XsollaStoreSubsystem_BuyItemWithVirtualCurrency Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.CurrencySKU = std::move(CurrencySKU);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.CheckOrder
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OrderId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 OrderId, EXsollaOrderStatus OrderStatus)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::CheckOrder(const class FString& AuthToken, int32 OrderId, const TDelegate<void(int32 OrderId, EXsollaOrderStatus OrderStatus)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "CheckOrder");

	Params::XsollaStoreSubsystem_CheckOrder Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.OrderId = OrderId;
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.ClearCart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::ClearCart(const class FString& AuthToken, const class FString& CartId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "ClearCart");

	Params::XsollaStoreSubsystem_ClearCart Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.ConsumeInventoryItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InstanceId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::ConsumeInventoryItem(const class FString& AuthToken, const class FString& ItemSKU, int32 Quantity, const class FString& InstanceId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "ConsumeInventoryItem");

	Params::XsollaStoreSubsystem_ConsumeInventoryItem Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.Quantity = Quantity;
	Parms.InstanceId = std::move(InstanceId);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.FetchCartPaymentToken
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& AccessToken, int32 OrderId)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::FetchCartPaymentToken(const class FString& AuthToken, const class FString& CartId, const class FString& Currency, const class FString& Country, const class FString& Locale, const TDelegate<void(const class FString& AccessToken, int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "FetchCartPaymentToken");

	Params::XsollaStoreSubsystem_FetchCartPaymentToken Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.Currency = std::move(Currency);
	Parms.Country = std::move(Country);
	Parms.Locale = std::move(Locale);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.FetchPaymentToken
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Country                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& AccessToken, int32 OrderId)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::FetchPaymentToken(const class FString& AuthToken, const class FString& ItemSKU, const class FString& Currency, const class FString& Country, const class FString& Locale, const TDelegate<void(const class FString& AccessToken, int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "FetchPaymentToken");

	Params::XsollaStoreSubsystem_FetchPaymentToken Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.Currency = std::move(Currency);
	Parms.Country = std::move(Country);
	Parms.Locale = std::move(Locale);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrency
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           CurrencySKU                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FVirtualCurrency& Currency)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetVirtualCurrency(const class FString& CurrencySKU, const TDelegate<void(struct FVirtualCurrency& Currency)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualCurrency");

	Params::XsollaStoreSubsystem_GetVirtualCurrency Parms{};

	Parms.CurrencySKU = std::move(CurrencySKU);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyPackage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PackageSKU                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FVirtualCurrencyPackage& CurrencyPackage)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::GetVirtualCurrencyPackage(const class FString& PackageSKU, const TDelegate<void(struct FVirtualCurrencyPackage& CurrencyPackage)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualCurrencyPackage");

	Params::XsollaStoreSubsystem_GetVirtualCurrencyPackage Parms{};

	Parms.PackageSKU = std::move(PackageSKU);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InProjectId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::Initialize(const class FString& InProjectId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "Initialize");

	Params::XsollaStoreSubsystem_Initialize Parms{};

	Parms.InProjectId = std::move(InProjectId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.LaunchPaymentConsole
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      BrowserWidget                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::LaunchPaymentConsole(const class FString& AccessToken, class UUserWidget** BrowserWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "LaunchPaymentConsole");

	Params::XsollaStoreSubsystem_LaunchPaymentConsole Parms{};

	Parms.AccessToken = std::move(AccessToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BrowserWidget != nullptr)
		*BrowserWidget = Parms.BrowserWidget;
}


// Function XsollaStore.XsollaStoreSubsystem.LoadImageFromWeb
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FSlateBrush& ImageBrush)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void()>                       ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::LoadImageFromWeb(const class FString& URL, const TDelegate<void(const struct FSlateBrush& ImageBrush)>& SuccessCallback, const TDelegate<void()>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "LoadImageFromWeb");

	Params::XsollaStoreSubsystem_LoadImageFromWeb Parms{};

	Parms.URL = std::move(URL);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.RemoveFromCart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ItemSKU                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::RemoveFromCart(const class FString& AuthToken, const class FString& CartId, const class FString& ItemSKU, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "RemoveFromCart");

	Params::XsollaStoreSubsystem_RemoveFromCart Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.ItemSKU = std::move(ItemSKU);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.UpdateCart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CartId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::UpdateCart(const class FString& AuthToken, const class FString& CartId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "UpdateCart");

	Params::XsollaStoreSubsystem_UpdateCart Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.CartId = std::move(CartId);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.UpdateInventory
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::UpdateInventory(const class FString& AuthToken, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "UpdateInventory");

	Params::XsollaStoreSubsystem_UpdateInventory Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.UpdateItemGroups
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Locale                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::UpdateItemGroups(const class FString& Locale, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "UpdateItemGroups");

	Params::XsollaStoreSubsystem_UpdateItemGroups Parms{};

	Parms.Locale = std::move(Locale);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.UpdateVirtualCurrencies
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::UpdateVirtualCurrencies(const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "UpdateVirtualCurrencies");

	Params::XsollaStoreSubsystem_UpdateVirtualCurrencies Parms{};

	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.UpdateVirtualCurrencyBalance
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AuthToken                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::UpdateVirtualCurrencyBalance(const class FString& AuthToken, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "UpdateVirtualCurrencyBalance");

	Params::XsollaStoreSubsystem_UpdateVirtualCurrencyBalance Parms{};

	Parms.AuthToken = std::move(AuthToken);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.UpdateVirtualCurrencyPackages
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::UpdateVirtualCurrencyPackages(const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "UpdateVirtualCurrencyPackages");

	Params::XsollaStoreSubsystem_UpdateVirtualCurrencyPackages Parms{};

	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.UpdateVirtualItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreSubsystem::UpdateVirtualItems(const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "UpdateVirtualItems");

	Params::XsollaStoreSubsystem_UpdateVirtualItems Parms{};

	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreSubsystem.FormatPrice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UXsollaStoreSubsystem::FormatPrice(float Amount, const class FString& Currency) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "FormatPrice");

	Params::XsollaStoreSubsystem_FormatPrice Parms{};

	Parms.Amount = Amount;
	Parms.Currency = std::move(Currency);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetCart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStoreCart                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStoreCart UXsollaStoreSubsystem::GetCart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetCart");

	Params::XsollaStoreSubsystem_GetCart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetCurrencyLibrary
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UXsollaStoreSubsystem::GetCurrencyLibrary() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetCurrencyLibrary");

	Params::XsollaStoreSubsystem_GetCurrencyLibrary Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStoreInventory                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStoreInventory UXsollaStoreSubsystem::GetInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetInventory");

	Params::XsollaStoreSubsystem_GetInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetItemsData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStoreItemsData                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStoreItemsData UXsollaStoreSubsystem::GetItemsData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetItemsData");

	Params::XsollaStoreSubsystem_GetItemsData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetPendingPaystationUrl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UXsollaStoreSubsystem::GetPendingPaystationUrl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetPendingPaystationUrl");

	Params::XsollaStoreSubsystem_GetPendingPaystationUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyBalance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVirtualCurrencyBalance>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVirtualCurrencyBalance> UXsollaStoreSubsystem::GetVirtualCurrencyBalance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualCurrencyBalance");

	Params::XsollaStoreSubsystem_GetVirtualCurrencyBalance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVirtualCurrency>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVirtualCurrency> UXsollaStoreSubsystem::GetVirtualCurrencyData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualCurrencyData");

	Params::XsollaStoreSubsystem_GetVirtualCurrencyData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualCurrencyPackages
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVirtualCurrencyPackage>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVirtualCurrencyPackage> UXsollaStoreSubsystem::GetVirtualCurrencyPackages() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualCurrencyPackages");

	Params::XsollaStoreSubsystem_GetVirtualCurrencyPackages Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           GroupFilter                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FStoreItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FStoreItem> UXsollaStoreSubsystem::GetVirtualItems(const class FString& GroupFilter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualItems");

	Params::XsollaStoreSubsystem_GetVirtualItems Parms{};

	Parms.GroupFilter = std::move(GroupFilter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreSubsystem.GetVirtualItemsWithoutGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FStoreItem>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FStoreItem> UXsollaStoreSubsystem::GetVirtualItemsWithoutGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreSubsystem", "GetVirtualItemsWithoutGroup");

	Params::XsollaStoreSubsystem_GetVirtualItemsWithoutGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreImageLoader.LoadImage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FSlateBrush& ImageBrush)>SuccessCallback                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void()>                       ErrorCallback                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UXsollaStoreImageLoader::LoadImage(const class FString& URL, const TDelegate<void(const struct FSlateBrush& ImageBrush)>& SuccessCallback, const TDelegate<void()>& ErrorCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XsollaStoreImageLoader", "LoadImage");

	Params::XsollaStoreImageLoader_LoadImage Parms{};

	Parms.URL = std::move(URL);
	Parms.SuccessCallback = SuccessCallback;
	Parms.ErrorCallback = ErrorCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function XsollaStore.XsollaStoreLibrary.Equal_StoreCartStoreCart
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FStoreCart                       A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FStoreCart                       B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UXsollaStoreLibrary::Equal_StoreCartStoreCart(const struct FStoreCart& A, const struct FStoreCart& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("XsollaStoreLibrary", "Equal_StoreCartStoreCart");

	Params::XsollaStoreLibrary_Equal_StoreCartStoreCart Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XsollaStore.XsollaStoreLibrary.GetStoreSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UXsollaStoreSettings*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UXsollaStoreSettings* UXsollaStoreLibrary::GetStoreSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("XsollaStoreLibrary", "GetStoreSettings");

	Params::XsollaStoreLibrary_GetStoreSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

