#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XsollaStore

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "XsollaStore_structs.hpp"


namespace SDK
{

// Class XsollaStore.XsollaStoreSubsystem
// 0x0178 (0x01A8 - 0x0030)
class UXsollaStoreSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnCartUpdate;                                      // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x140];                                     // 0x0050(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CurrencyLibrary;                                   // 0x0190(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UXsollaStoreImageLoader*                ImageLoader;                                       // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UUserWidget>                DefaultBrowserWidgetClass;                         // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AddToCart(const class FString& AuthToken, const class FString& CartId, const class FString& ItemSKU, int32 Quantity, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void BuyItemWithVirtualCurrency(const class FString& AuthToken, const class FString& ItemSKU, const class FString& CurrencySKU, const TDelegate<void(int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void CheckOrder(const class FString& AuthToken, int32 OrderId, const TDelegate<void(int32 OrderId, EXsollaOrderStatus OrderStatus)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void ClearCart(const class FString& AuthToken, const class FString& CartId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void ConsumeInventoryItem(const class FString& AuthToken, const class FString& ItemSKU, int32 Quantity, const class FString& InstanceId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void FetchCartPaymentToken(const class FString& AuthToken, const class FString& CartId, const class FString& Currency, const class FString& Country, const class FString& Locale, const TDelegate<void(const class FString& AccessToken, int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void FetchPaymentToken(const class FString& AuthToken, const class FString& ItemSKU, const class FString& Currency, const class FString& Country, const class FString& Locale, const TDelegate<void(const class FString& AccessToken, int32 OrderId)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetVirtualCurrency(const class FString& CurrencySKU, const TDelegate<void(struct FVirtualCurrency& Currency)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void GetVirtualCurrencyPackage(const class FString& PackageSKU, const TDelegate<void(struct FVirtualCurrencyPackage& CurrencyPackage)>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void Initialize(const class FString& InProjectId);
	void LaunchPaymentConsole(const class FString& AccessToken, class UUserWidget** BrowserWidget);
	void LoadImageFromWeb(const class FString& URL, const TDelegate<void(const struct FSlateBrush& ImageBrush)>& SuccessCallback, const TDelegate<void()>& ErrorCallback);
	void RemoveFromCart(const class FString& AuthToken, const class FString& CartId, const class FString& ItemSKU, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void UpdateCart(const class FString& AuthToken, const class FString& CartId, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void UpdateInventory(const class FString& AuthToken, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void UpdateItemGroups(const class FString& Locale, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void UpdateVirtualCurrencies(const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void UpdateVirtualCurrencyBalance(const class FString& AuthToken, const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void UpdateVirtualCurrencyPackages(const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);
	void UpdateVirtualItems(const TDelegate<void()>& SuccessCallback, const TDelegate<void(int32 StatusCode, int32 ErrorCode, const class FString& ErrorMessage)>& ErrorCallback);

	class FString FormatPrice(float Amount, const class FString& Currency) const;
	struct FStoreCart GetCart() const;
	class UDataTable* GetCurrencyLibrary() const;
	struct FStoreInventory GetInventory() const;
	struct FStoreItemsData GetItemsData() const;
	class FString GetPendingPaystationUrl() const;
	TArray<struct FVirtualCurrencyBalance> GetVirtualCurrencyBalance() const;
	TArray<struct FVirtualCurrency> GetVirtualCurrencyData() const;
	TArray<struct FVirtualCurrencyPackage> GetVirtualCurrencyPackages() const;
	TArray<struct FStoreItem> GetVirtualItems(const class FString& GroupFilter) const;
	TArray<struct FStoreItem> GetVirtualItemsWithoutGroup() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XsollaStoreSubsystem">();
	}
	static class UXsollaStoreSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXsollaStoreSubsystem>();
	}
};
static_assert(alignof(UXsollaStoreSubsystem) == 0x000008, "Wrong alignment on UXsollaStoreSubsystem");
static_assert(sizeof(UXsollaStoreSubsystem) == 0x0001A8, "Wrong size on UXsollaStoreSubsystem");
static_assert(offsetof(UXsollaStoreSubsystem, OnCartUpdate) == 0x000040, "Member 'UXsollaStoreSubsystem::OnCartUpdate' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, CurrencyLibrary) == 0x000190, "Member 'UXsollaStoreSubsystem::CurrencyLibrary' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, ImageLoader) == 0x000198, "Member 'UXsollaStoreSubsystem::ImageLoader' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSubsystem, DefaultBrowserWidgetClass) == 0x0001A0, "Member 'UXsollaStoreSubsystem::DefaultBrowserWidgetClass' has a wrong offset!");

// Class XsollaStore.XsollaStoreImageLoader
// 0x00A0 (0x00C8 - 0x0028)
class UXsollaStoreImageLoader final : public UObject
{
public:
	uint8                                         Pad_28[0xA0];                                      // 0x0028(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadImage(const class FString& URL, const TDelegate<void(const struct FSlateBrush& ImageBrush)>& SuccessCallback, const TDelegate<void()>& ErrorCallback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XsollaStoreImageLoader">();
	}
	static class UXsollaStoreImageLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXsollaStoreImageLoader>();
	}
};
static_assert(alignof(UXsollaStoreImageLoader) == 0x000008, "Wrong alignment on UXsollaStoreImageLoader");
static_assert(sizeof(UXsollaStoreImageLoader) == 0x0000C8, "Wrong size on UXsollaStoreImageLoader");

// Class XsollaStore.XsollaStoreLibrary
// 0x0000 (0x0028 - 0x0028)
class UXsollaStoreLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool Equal_StoreCartStoreCart(const struct FStoreCart& A, const struct FStoreCart& B);
	static class UXsollaStoreSettings* GetStoreSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XsollaStoreLibrary">();
	}
	static class UXsollaStoreLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXsollaStoreLibrary>();
	}
};
static_assert(alignof(UXsollaStoreLibrary) == 0x000008, "Wrong alignment on UXsollaStoreLibrary");
static_assert(sizeof(UXsollaStoreLibrary) == 0x000028, "Wrong size on UXsollaStoreLibrary");

// Class XsollaStore.XsollaStoreSave
// 0x0020 (0x0048 - 0x0028)
class UXsollaStoreSave final : public USaveGame
{
public:
	struct FXsollaStoreSaveData                   CartData;                                          // 0x0028(0x0020)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XsollaStoreSave">();
	}
	static class UXsollaStoreSave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXsollaStoreSave>();
	}
};
static_assert(alignof(UXsollaStoreSave) == 0x000008, "Wrong alignment on UXsollaStoreSave");
static_assert(sizeof(UXsollaStoreSave) == 0x000048, "Wrong size on UXsollaStoreSave");
static_assert(offsetof(UXsollaStoreSave, CartData) == 0x000028, "Member 'UXsollaStoreSave::CartData' has a wrong offset!");

// Class XsollaStore.XsollaStoreSettings
// 0x0038 (0x0060 - 0x0028)
class UXsollaStoreSettings final : public UObject
{
public:
	class FString                                 ProjectID;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSandbox;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSandboxInShipping;                          // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                OverrideBrowserWidgetClass;                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlatformBrowser;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildForSteam;                                    // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXsollaPaymentUiTheme                         PaymentInterfaceTheme;                             // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXsollaPublishingPlatform                     PublishingPlatform;                                // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DemoProjectId;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XsollaStoreSettings">();
	}
	static class UXsollaStoreSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXsollaStoreSettings>();
	}
};
static_assert(alignof(UXsollaStoreSettings) == 0x000008, "Wrong alignment on UXsollaStoreSettings");
static_assert(sizeof(UXsollaStoreSettings) == 0x000060, "Wrong size on UXsollaStoreSettings");
static_assert(offsetof(UXsollaStoreSettings, ProjectID) == 0x000028, "Member 'UXsollaStoreSettings::ProjectID' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSettings, bSandbox) == 0x000038, "Member 'UXsollaStoreSettings::bSandbox' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSettings, bEnableSandboxInShipping) == 0x000039, "Member 'UXsollaStoreSettings::bEnableSandboxInShipping' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSettings, OverrideBrowserWidgetClass) == 0x000040, "Member 'UXsollaStoreSettings::OverrideBrowserWidgetClass' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSettings, bUsePlatformBrowser) == 0x000048, "Member 'UXsollaStoreSettings::bUsePlatformBrowser' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSettings, bBuildForSteam) == 0x000049, "Member 'UXsollaStoreSettings::bBuildForSteam' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSettings, PaymentInterfaceTheme) == 0x00004A, "Member 'UXsollaStoreSettings::PaymentInterfaceTheme' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSettings, PublishingPlatform) == 0x00004B, "Member 'UXsollaStoreSettings::PublishingPlatform' has a wrong offset!");
static_assert(offsetof(UXsollaStoreSettings, DemoProjectId) == 0x000050, "Member 'UXsollaStoreSettings::DemoProjectId' has a wrong offset!");

}

