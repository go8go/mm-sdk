#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIParticle

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "UIParticle_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class UIParticle.UIParticle
// 0x0030 (0x0138 - 0x0108)
class UUIParticle final : public UWidget
{
public:
	class UUIParticleAsset*                       Asset;                                             // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             EventOnEnd;                                        // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bPlayParticle : 1;                                 // 0x0120(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          IsPlaying;                                         // 0x0121(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x16];                                     // 0x0122(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Play();
	void SetPlayParticle(bool InPlayParticle);
	void Stop();
	void StopEmit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticle">();
	}
	static class UUIParticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticle>();
	}
};
static_assert(alignof(UUIParticle) == 0x000008, "Wrong alignment on UUIParticle");
static_assert(sizeof(UUIParticle) == 0x000138, "Wrong size on UUIParticle");
static_assert(offsetof(UUIParticle, Asset) == 0x000108, "Member 'UUIParticle::Asset' has a wrong offset!");
static_assert(offsetof(UUIParticle, EventOnEnd) == 0x000110, "Member 'UUIParticle::EventOnEnd' has a wrong offset!");
static_assert(offsetof(UUIParticle, IsPlaying) == 0x000121, "Member 'UUIParticle::IsPlaying' has a wrong offset!");

// Class UIParticle.UIParticleAsset
// 0x0010 (0x0038 - 0x0028)
class UUIParticleAsset final : public UObject
{
public:
	TArray<struct FUIParticleEmitterInfo>         Emitters;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleAsset">();
	}
	static class UUIParticleAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleAsset>();
	}
};
static_assert(alignof(UUIParticleAsset) == 0x000008, "Wrong alignment on UUIParticleAsset");
static_assert(sizeof(UUIParticleAsset) == 0x000038, "Wrong size on UUIParticleAsset");
static_assert(offsetof(UUIParticleAsset, Emitters) == 0x000028, "Member 'UUIParticleAsset::Emitters' has a wrong offset!");

// Class UIParticle.UIParticleEmitter
// 0x0030 (0x0138 - 0x0108)
class UUIParticleEmitter final : public UWidget
{
public:
	class UUIParticleEmitterAsset*                Asset;                                             // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             EventOnEnd;                                        // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bPlayParticle : 1;                                 // 0x0120(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          IsPlaying;                                         // 0x0121(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x16];                                     // 0x0122(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Play();
	void SetPlayParticle(bool InPlayParticle);
	void Stop();
	void StopEmit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleEmitter">();
	}
	static class UUIParticleEmitter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleEmitter>();
	}
};
static_assert(alignof(UUIParticleEmitter) == 0x000008, "Wrong alignment on UUIParticleEmitter");
static_assert(sizeof(UUIParticleEmitter) == 0x000138, "Wrong size on UUIParticleEmitter");
static_assert(offsetof(UUIParticleEmitter, Asset) == 0x000108, "Member 'UUIParticleEmitter::Asset' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitter, EventOnEnd) == 0x000110, "Member 'UUIParticleEmitter::EventOnEnd' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitter, IsPlaying) == 0x000121, "Member 'UUIParticleEmitter::IsPlaying' has a wrong offset!");

// Class UIParticle.UIParticleEmitterAsset
// 0xD5F8 (0xD620 - 0x0028)
class UUIParticleEmitterAsset final : public UObject
{
public:
	EEmitterType                                  EmitterType;                                       // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmitSeconds;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    MaxParticleCount;                                  // 0x0030(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SpawnParticlePerSecond;                            // 0x0818(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    ParticleEmitAngle;                                 // 0x1000(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FRange_Vector2D                        EmitPosRange;                                      // 0x17E8(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FC[0x4];                                     // 0x17FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPosotion_Vector2DCurve                EmitPosition;                                      // 0x1800(0x0FD0)(Edit, NativeAccessSpecifierPublic)
	bool                                          AutoEmitPosRange;                                  // 0x27D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoScale;                                         // 0x27D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScaleByX;                                          // 0x27D2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27D3[0x1];                                     // 0x27D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DesignSize;                                        // 0x27D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPositionType                                 PositionType;                                      // 0x27DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27DD[0x3];                                     // 0x27DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    LifeSpan;                                          // 0x27E0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Size;                                              // 0x2FC8(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Pivot;                                             // 0x37B0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    RotationStart;                                     // 0x3F98(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    RotationSpeed;                                     // 0x4780(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Color;                                             // 0x4F68(0x07E8)(Edit, NativeAccessSpecifierPublic)
	class UObject*                                ResourceObject;                                    // 0x5750(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotationFollowSpeed;                               // 0x5758(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSeparateSize;                                   // 0x5759(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_575A[0x6];                                     // 0x575A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    Gravity;                                           // 0x5760(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    StartSpeed;                                        // 0x5F48(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    AirResistance;                                     // 0x6730(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    RadialAcceleration;                                // 0x6F18(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    TangentialAcceleration;                            // 0x7700(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    Radius;                                            // 0x7EE8(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    DegreePerSecond;                                   // 0x86D0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    PositionX;                                         // 0x8EB8(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    PositionY;                                         // 0x96A0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FChildEmitter>                  ChildrenEmitters;                                  // 0x9E88(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FScalarParamCurve>              ScalarParams;                                      // 0x9E98(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FScalarParamCurve>              ScalarParamsWhenStart;                             // 0x9EA8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EParticleDrawEffect                           DrawEffect;                                        // 0x9EB8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScaleFollowSpeedDirection;                      // 0x9EB9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9EBA[0x6];                                     // 0x9EBA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    ScaleFollowSpeedDirection;                         // 0x9EC0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	bool                                          UseScaleFollowSpeedVertical;                       // 0xA6A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6A9[0x7];                                     // 0xA6A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIParticleProperty                    ScaleFollowSpeedVertical;                          // 0xA6B0(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    DirectionScale;                                    // 0xAE98(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    VerticalDirectionScale;                            // 0xB680(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SineDirectionStart;                                // 0xBE68(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SineDirectionSpeed;                                // 0xC650(0x07E8)(Edit, NativeAccessSpecifierPublic)
	struct FUIParticleProperty                    SineDirectionRange;                                // 0xCE38(0x07E8)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIParticleEmitterAsset">();
	}
	static class UUIParticleEmitterAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIParticleEmitterAsset>();
	}
};
static_assert(alignof(UUIParticleEmitterAsset) == 0x000008, "Wrong alignment on UUIParticleEmitterAsset");
static_assert(sizeof(UUIParticleEmitterAsset) == 0x00D620, "Wrong size on UUIParticleEmitterAsset");
static_assert(offsetof(UUIParticleEmitterAsset, EmitterType) == 0x000028, "Member 'UUIParticleEmitterAsset::EmitterType' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, EmitSeconds) == 0x00002C, "Member 'UUIParticleEmitterAsset::EmitSeconds' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, MaxParticleCount) == 0x000030, "Member 'UUIParticleEmitterAsset::MaxParticleCount' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, SpawnParticlePerSecond) == 0x000818, "Member 'UUIParticleEmitterAsset::SpawnParticlePerSecond' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ParticleEmitAngle) == 0x001000, "Member 'UUIParticleEmitterAsset::ParticleEmitAngle' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, EmitPosRange) == 0x0017E8, "Member 'UUIParticleEmitterAsset::EmitPosRange' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, EmitPosition) == 0x001800, "Member 'UUIParticleEmitterAsset::EmitPosition' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, AutoEmitPosRange) == 0x0027D0, "Member 'UUIParticleEmitterAsset::AutoEmitPosRange' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, AutoScale) == 0x0027D1, "Member 'UUIParticleEmitterAsset::AutoScale' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ScaleByX) == 0x0027D2, "Member 'UUIParticleEmitterAsset::ScaleByX' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, DesignSize) == 0x0027D4, "Member 'UUIParticleEmitterAsset::DesignSize' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, PositionType) == 0x0027DC, "Member 'UUIParticleEmitterAsset::PositionType' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, LifeSpan) == 0x0027E0, "Member 'UUIParticleEmitterAsset::LifeSpan' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, Size) == 0x002FC8, "Member 'UUIParticleEmitterAsset::Size' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, Pivot) == 0x0037B0, "Member 'UUIParticleEmitterAsset::Pivot' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, RotationStart) == 0x003F98, "Member 'UUIParticleEmitterAsset::RotationStart' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, RotationSpeed) == 0x004780, "Member 'UUIParticleEmitterAsset::RotationSpeed' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, Color) == 0x004F68, "Member 'UUIParticleEmitterAsset::Color' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ResourceObject) == 0x005750, "Member 'UUIParticleEmitterAsset::ResourceObject' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, RotationFollowSpeed) == 0x005758, "Member 'UUIParticleEmitterAsset::RotationFollowSpeed' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, UseSeparateSize) == 0x005759, "Member 'UUIParticleEmitterAsset::UseSeparateSize' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, Gravity) == 0x005760, "Member 'UUIParticleEmitterAsset::Gravity' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, StartSpeed) == 0x005F48, "Member 'UUIParticleEmitterAsset::StartSpeed' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, AirResistance) == 0x006730, "Member 'UUIParticleEmitterAsset::AirResistance' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, RadialAcceleration) == 0x006F18, "Member 'UUIParticleEmitterAsset::RadialAcceleration' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, TangentialAcceleration) == 0x007700, "Member 'UUIParticleEmitterAsset::TangentialAcceleration' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, Radius) == 0x007EE8, "Member 'UUIParticleEmitterAsset::Radius' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, DegreePerSecond) == 0x0086D0, "Member 'UUIParticleEmitterAsset::DegreePerSecond' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, PositionX) == 0x008EB8, "Member 'UUIParticleEmitterAsset::PositionX' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, PositionY) == 0x0096A0, "Member 'UUIParticleEmitterAsset::PositionY' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ChildrenEmitters) == 0x009E88, "Member 'UUIParticleEmitterAsset::ChildrenEmitters' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ScalarParams) == 0x009E98, "Member 'UUIParticleEmitterAsset::ScalarParams' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ScalarParamsWhenStart) == 0x009EA8, "Member 'UUIParticleEmitterAsset::ScalarParamsWhenStart' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, DrawEffect) == 0x009EB8, "Member 'UUIParticleEmitterAsset::DrawEffect' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, UseScaleFollowSpeedDirection) == 0x009EB9, "Member 'UUIParticleEmitterAsset::UseScaleFollowSpeedDirection' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ScaleFollowSpeedDirection) == 0x009EC0, "Member 'UUIParticleEmitterAsset::ScaleFollowSpeedDirection' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, UseScaleFollowSpeedVertical) == 0x00A6A8, "Member 'UUIParticleEmitterAsset::UseScaleFollowSpeedVertical' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, ScaleFollowSpeedVertical) == 0x00A6B0, "Member 'UUIParticleEmitterAsset::ScaleFollowSpeedVertical' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, DirectionScale) == 0x00AE98, "Member 'UUIParticleEmitterAsset::DirectionScale' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, VerticalDirectionScale) == 0x00B680, "Member 'UUIParticleEmitterAsset::VerticalDirectionScale' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, SineDirectionStart) == 0x00BE68, "Member 'UUIParticleEmitterAsset::SineDirectionStart' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, SineDirectionSpeed) == 0x00C650, "Member 'UUIParticleEmitterAsset::SineDirectionSpeed' has a wrong offset!");
static_assert(offsetof(UUIParticleEmitterAsset, SineDirectionRange) == 0x00CE38, "Member 'UUIParticleEmitterAsset::SineDirectionRange' has a wrong offset!");

}

