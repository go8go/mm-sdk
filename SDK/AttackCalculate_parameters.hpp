#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AttackCalculate

#include "Basic.hpp"

#include "MirMobile_structs.hpp"


namespace SDK::Params
{

// Function AttackCalculate.AttackCalculate_C.õ©pøÀÄ°
// 0x0030 (0x0030 - 0x0000)
struct AttackCalculate_C___p____ final
{
public:
	struct FATTACK_DATA                           Data;                                              // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcSTD_NewParam4;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackCalculate_C___p____) == 0x000008, "Wrong alignment on AttackCalculate_C___p____");
static_assert(sizeof(AttackCalculate_C___p____) == 0x000030, "Wrong size on AttackCalculate_C___p____");
static_assert(offsetof(AttackCalculate_C___p____, Data) == 0x000000, "Member 'AttackCalculate_C___p____::Data' has a wrong offset!");
static_assert(offsetof(AttackCalculate_C___p____, __WorldContext) == 0x000020, "Member 'AttackCalculate_C___p____::__WorldContext' has a wrong offset!");
static_assert(offsetof(AttackCalculate_C___p____, Damage) == 0x000028, "Member 'AttackCalculate_C___p____::Damage' has a wrong offset!");
static_assert(offsetof(AttackCalculate_C___p____, CallFunc_CalcSTD_NewParam4) == 0x00002C, "Member 'AttackCalculate_C___p____::CallFunc_CalcSTD_NewParam4' has a wrong offset!");

// Function AttackCalculate.AttackCalculate_C.CalcSTD
// 0x0020 (0x0020 - 0x0000)
struct AttackCalculate_C_CalcSTD final
{
public:
	int32                                         STDlevel;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ability;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Min;                                               // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewParam4;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AttackCalculate_C_CalcSTD) == 0x000008, "Wrong alignment on AttackCalculate_C_CalcSTD");
static_assert(sizeof(AttackCalculate_C_CalcSTD) == 0x000020, "Wrong size on AttackCalculate_C_CalcSTD");
static_assert(offsetof(AttackCalculate_C_CalcSTD, STDlevel) == 0x000000, "Member 'AttackCalculate_C_CalcSTD::STDlevel' has a wrong offset!");
static_assert(offsetof(AttackCalculate_C_CalcSTD, Ability) == 0x000004, "Member 'AttackCalculate_C_CalcSTD::Ability' has a wrong offset!");
static_assert(offsetof(AttackCalculate_C_CalcSTD, Max) == 0x000008, "Member 'AttackCalculate_C_CalcSTD::Max' has a wrong offset!");
static_assert(offsetof(AttackCalculate_C_CalcSTD, Min) == 0x00000C, "Member 'AttackCalculate_C_CalcSTD::Min' has a wrong offset!");
static_assert(offsetof(AttackCalculate_C_CalcSTD, __WorldContext) == 0x000010, "Member 'AttackCalculate_C_CalcSTD::__WorldContext' has a wrong offset!");
static_assert(offsetof(AttackCalculate_C_CalcSTD, NewParam4) == 0x000018, "Member 'AttackCalculate_C_CalcSTD::NewParam4' has a wrong offset!");
static_assert(offsetof(AttackCalculate_C_CalcSTD, K2Node_MathExpression_ReturnValue) == 0x00001C, "Member 'AttackCalculate_C_CalcSTD::K2Node_MathExpression_ReturnValue' has a wrong offset!");

}

